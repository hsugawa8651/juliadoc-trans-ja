<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE tmx SYSTEM "tmx11.dtd">
<tmx version="1.1">
  <header creationtool="OmegaT" o-tmf="OmegaT TMX" adminlang="EN-US" datatype="plaintext" creationtoolversion="3.6.0_10_r10436" segtype="sentence" srclang="EN-US"/>
  <body>
<!-- Default translations -->
    <tu>
      <tuv lang="EN-US">
        <seg>!&lt;x1/&gt; indicates that it will mutate or destroy the
value of one or more of its arguments (compare, for example, &lt;x2/&gt;`sort`&lt;x3/&gt; and &lt;x4/&gt;`sort!`&lt;x5/&gt;).</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154213Z" creationid="hsugawa8651" creationdate="20181109T154213Z">
        <seg>&lt;x1/&gt;は、それが突然変異または破壊されることを示しています。 一つ以上の引数の値(例えば、&lt;x2/&gt;`sort'&lt;x3/&gt;、&lt;x4/&gt;`sort!"&lt;x5/&gt;)。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>", ["First", "Second", "Third"])
3-element Array{String,1}:
 "1.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T160149Z" creationid="hsugawa8651" creationdate="20181109T160147Z">
        <seg>1", ["First", "Second", "Third"])
3-element Array{String,1}:
 "1.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>(@id man-array-indexing)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T155105Z" creationid="hsugawa8651" creationdate="20181109T155105Z">
        <seg>(@id man-array-indexing)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>(For comparison
operations like &lt;x5/&gt;&lt;&lt;x6/&gt;, &lt;x7/&gt;only&lt;x8/&gt; the elementwise &lt;x9/&gt;.&lt;&lt;x10/&gt; version is applicable to arrays.)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T160021Z" creationid="hsugawa8651" creationdate="20181109T160021Z">
        <seg>(比較のために &lt;x5/&gt;&lt;x6/&gt;のような操作、&lt;x7/&gt;&lt;x6/&gt;&lt;x8/&gt;&lt;x10/&gt;&lt;x8/&gt;&lt;x10/&gt;は、配列に適用されます。)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;x1/&gt;`CartesianIndex` and arrays of `CartesianIndex` are not compatible with the&lt;x2/&gt;&lt;x3/&gt;`end` keyword to represent the last index of a dimension.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T155752Z" creationid="hsugawa8651" creationdate="20181109T155752Z">
        <seg>&lt;x1/&gt;`CartesianIndex'と「CartesianIndex」の配列は、次元の最後のインデックスを表すために、&lt;x2/&gt;&lt;x3/&gt;'end"キーワードと互換性がない。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A logical index
must be a vector of the same length as the dimension it indexes into, or it
must be the only index provided and match the size and dimensionality of the
array it indexes into.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T155807Z" creationid="hsugawa8651" creationdate="20181109T155807Z">
        <seg>論理インデックス は、インデックスを作成する寸法と同じ長さのベクトルである必要があります。また 指定された唯一のインデックスであり にインデックスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A&lt;x1/&gt; is overwritten with the value &lt;x2/&gt;X[i_1, i_2, ..., i_n]&lt;x3/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T155417Z" creationid="hsugawa8651" creationdate="20181109T155417Z">
        <seg>&lt;x1/&gt;は、&lt;x2/&gt;X[i_1,i_2,…,i_n]&lt;x3/&gt;の値で上書きされる。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Adding parentheses lets
us add a third argument to &lt;x3/&gt;`map`&lt;x4/&gt;:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154956Z" creationid="hsugawa8651" creationdate="20181109T154956Z">
        <seg>括弧を追加すると &lt;x3/&gt;'map`&lt;x4/&gt;:に3番目の引数を追加します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Additionally, &lt;x1/&gt;`broadcast`&lt;x2/&gt; is not limited to arrays (see the function documentation),
it also handles tuples and treats any argument that is not an array, tuple or &lt;x3/&gt;`Ref`&lt;x4/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T160134Z" creationid="hsugawa8651" creationdate="20181109T160134Z">
        <seg>さらに、&lt;x1/&gt;`broadcast'&lt;x2/&gt;は配列に限定されるものではありません(関数の文書を参照してください)。 また、タプルや、配列ではない引数、タプル、&lt;x3/&gt;`Ref"&lt;x4/&gt;を処理することもできません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>All comma-separated expressions after &lt;x1/&gt;for&lt;x2/&gt; are interpreted as ranges.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154952Z" creationid="hsugawa8651" creationdate="20181109T154948Z">
        <seg>&lt;x2/&gt;のために&lt;x1/&gt;の後にコンマで区切られたすべての式は、範囲として解釈されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Also notice the difference between &lt;x1/&gt;max.(a,b)&lt;x2/&gt;, which &lt;x3/&gt;`broadcast`&lt;x4/&gt;s &lt;x5/&gt;`max`&lt;x6/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T160027Z" creationid="hsugawa8651" creationdate="20181109T160027Z">
        <seg>また、&lt;x1/&gt;の最大値(a,b)&lt;x2/&gt;は、&lt;x3/&gt;"ブロードキャスト"&lt;x4/&gt;"max"&lt;x6/&gt;"max'&lt;x6/&gt;の差があることに注意してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Also, &lt;x1/&gt;every&lt;x2/&gt; binary operator supports a &lt;x3/&gt;&lt;x4/&gt;&lt;x5/&gt;(@ref man-dot-operators)
that can be applied to arrays (and combinations of arrays and scalars) in such
&lt;x6/&gt;&lt;x7/&gt;&lt;x8/&gt;(@ref man-vectorized), e.g. &lt;x9/&gt;z .== sin.(x .* y)&lt;x10/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T160010Z" creationid="hsugawa8651" creationdate="20181109T160010Z">
        <seg>また、&lt;x2/&gt;バイナリ演算子の&lt;x1/&gt;は、&lt;x3/&gt;&lt;x4/&gt;&lt;x5/&gt;(@ref man dot演算子)をサポートします。 は、配列(および配列とスカラーの組み合わせ)に適用することができます。 &lt;x6/&gt;&lt;x7/&gt;&lt;x8/&gt;(@ref manベクトル化)、例えば&lt;x9/&gt;z.=sin.(x .* y)&lt;x10/&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An array is a collection of objects stored in a multi-dimensional grid.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154138Z" creationid="hsugawa8651" creationdate="20181109T154138Z">
        <seg>配列は、多次元グリッドに格納されたオブジェクトの集合です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An array of scalar indices.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T155517Z" creationid="hsugawa8651" creationdate="20181109T155517Z">
        <seg>スカラー・インデックスの配列です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An array with a specific element type can be constructed using the syntax &lt;x1/&gt;T[A, B, C, ...]&lt;x2/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154659Z" creationid="hsugawa8651" creationdate="20181109T154659Z">
        <seg>特定の要素タイプを持つ配列は、構文&lt;x1/&gt;T[A,B,C,…]&lt;x2/&gt;を使用して構築することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An inefficient way to do this would
be to replicate the vector to the size of the matrix:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T160043Z" creationid="hsugawa8651" creationdate="20181109T160043Z">
        <seg>非効率的な方法は ベクトルをマトリックスのサイズに複製することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An object that represents an array of scalar indices and can be converted to such by &lt;x1/&gt;`to_indices`&lt;x2/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T155534Z" creationid="hsugawa8651" creationdate="20181109T155534Z">
        <seg>スカラーインデックスの配列を表すオブジェクトであって、&lt;x1/&gt;"to_indices"&lt;x2/&gt;によって変換されることが可能である。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Any custom array of scalar indices that is a subtype of &lt;x1/&gt;AbstractArray&lt;x2/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T155529Z" creationid="hsugawa8651" creationdate="20181109T155529Z">
        <seg>&lt;x1/&gt;AbstractArray&lt;x2/&gt;のサブタイプであるスカラーインデックスの任意のカスタム配列</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Arguments to &lt;x3/&gt;`@cfunction`&lt;x4/&gt; are as follows:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T153935Z" creationid="hsugawa8651" creationdate="20181109T153935Z">
        <seg>&lt;x3/&gt;`@cfunction`&lt;x4/&gt;への引数は次のとおりです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Arrays can be constructed and also concatenated using the following functions:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154543Z" creationid="hsugawa8651" creationdate="20181109T154543Z">
        <seg>配列は、次の関数を使用して構成したり、連結することもできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Arrays of &lt;x1/&gt;CartesianIndex{N}&lt;x2/&gt; (see below for more details)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T155531Z" creationid="hsugawa8651" creationdate="20181109T155531Z">
        <seg>&lt;x1/&gt;CartesianIndex{N}&lt;x2/&gt;(詳細については以下を参照)のアレイ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Arrays of booleans, which select elements at their &lt;x1/&gt;true&lt;x2/&gt; indices (see below for more details)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T155544Z" creationid="hsugawa8651" creationdate="20181109T155544Z">
        <seg>ブール値の配列で、&lt;x1/&gt;真の&lt;x2/&gt;インデックスで要素を選択します(詳細については、以下を参照)。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As a special part of this syntax, the &lt;x1/&gt;end&lt;x2/&gt; keyword may be used to represent the last index of
each dimension within the indexing brackets, as determined by the size of the innermost array
being indexed.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T155252Z" creationid="hsugawa8651" creationdate="20181109T155252Z">
        <seg>この構文の特殊な部分として、&lt;x1/&gt;end&lt;x2/&gt;キーワードを使用して、最後のインデックスを表すことができます。 最も内側の配列のサイズによって決定される、索引付けブラケット内の各寸法 インデックス化されています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As such, it's also possible to define custom array types by inheriting
from &lt;x1/&gt;`AbstractArray`&lt;x2/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154132Z" creationid="hsugawa8651" creationdate="20181109T154132Z">
        <seg>このように、カスタム配列タイプを継承することによって、カスタム配列タイプを定義することも可能です。 &lt;x1/&gt;'AbstractArray'&lt;x2/&gt;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Base.IndexStyle(::Type{&lt;:MyArray}) = IndexLinear()</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T155911Z" creationid="hsugawa8651" creationdate="20181109T155911Z">
        <seg>Base.IndexStyle(::Type{&lt;:MyArray}) = IndexLinear()</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>By default this includes:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T155509Z" creationid="hsugawa8651" creationdate="20181109T155509Z">
        <seg>デフォルトでは、次の内容が含まれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Callees must make explicit copies to ensure that they don't modify inputs that
they don't intend to change.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154219Z" creationid="hsugawa8651" creationdate="20181109T154219Z">
        <seg>呼び出し側は、入力を変更しないことを確実にするために、明示的なコピーを作成する必要があります。 変化するつもりはありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Comprehension syntax is
similar to set construction notation in mathematics:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154804Z" creationid="hsugawa8651" creationdate="20181109T154804Z">
        <seg>理解の構文は次のとおりです。 数学で設定された建設表記法に似ています</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Comprehensions can also be written without the enclosing square brackets, producing an object
known as a generator.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154923Z" creationid="hsugawa8651" creationdate="20181109T154923Z">
        <seg>包含は、囲まれた角括弧なしで書くこともでき、オブジェクトを生成することができます。 ジェネレータと呼ばれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Concatenation syntax can similarly be prefixed with a type to specify the element type of the
result.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154707Z" creationid="hsugawa8651" creationdate="20181109T154707Z">
        <seg>連結構文には、同じように 結果。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Consider these examples of this syntax:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154648Z" creationid="hsugawa8651" creationdate="20181109T154648Z">
        <seg>この構文の例を次に示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Considered alone, this may seem relatively trivial; &lt;x1/&gt;CartesianIndex&lt;x2/&gt; simply
gathers multiple integers together into one object that represents a single
multidimensional index.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T155644Z" creationid="hsugawa8651" creationdate="20181109T155644Z">
        <seg>単独で考慮すると、これは比較的簡単であるように思えるかもしれません。&lt;x1/&gt;CartesianIndex&lt;x2/&gt;は単純です。 複数の整数を1つのオブジェクトに集約して1つのオブジェクトを作成します。 多次元インデックス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Currently, only the platform-default C calling convention is supported.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T153954Z" creationid="hsugawa8651" creationdate="20181109T153954Z">
        <seg>現在、プラットフォームのデフォルトのC呼び出し規約のみがサポートされています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Do not use `end`&lt;x4/&gt;&lt;x5/&gt;in indexing expressions that may contain either `CartesianIndex` or arrays thereof.&lt;x6/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T155720Z" creationid="hsugawa8651" creationdate="20181109T155720Z">
        <seg>「CartesianIndex」またはその配列が含まれる可能性のある表現のインデックス作成には「end」&lt;x4/&gt;&lt;x5/&gt;を使用しないでください。&lt;x6/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Empty arrays like &lt;x1/&gt;[]&lt;x2/&gt;, which select no elements</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T155524Z" creationid="hsugawa8651" creationdate="20181109T155524Z">
        <seg>&lt;x1/&gt;[]&lt;x2/&gt;のような空の配列で、要素は選択されません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Empty ranges of the form &lt;x1/&gt;n:n-1&lt;x2/&gt; are sometimes used to indicate the inter-index location between
&lt;x3/&gt;n-1&lt;x4/&gt; and &lt;x5/&gt;n&lt;x6/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T155316Z" creationid="hsugawa8651" creationdate="20181109T155316Z">
        <seg>&lt;x1/&gt;n:n-1&lt;x2/&gt;という形式の空の範囲は、場合によっては、インデックス間の位置を示すために使用される。 &lt;x3/&gt;n-1&lt;x4/&gt;および&lt;x5/&gt;n&lt;x6/&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Float32[ 0.25*x[i-1] + 0.5*x[i] + 0.25*x[i+1] for i=2:length(x)-1 ]</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154902Z" creationid="hsugawa8651" creationdate="20181109T154902Z">
        <seg>Float32[ 0.25*x[i-1] + 0.5*x[i] + 0.25*x[i+1] for i=2:length(x)-1 ]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example,</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154603Z" creationid="hsugawa8651" creationdate="20181109T154603Z">
        <seg>たとえば</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, &lt;x11/&gt;Any[x, y, z]&lt;x12/&gt; constructs a heterogeneous array that can contain any values.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154704Z" creationid="hsugawa8651" creationdate="20181109T154704Z">
        <seg>たとえば、&lt;x11/&gt;任意の[x,y,z]&lt;x12/&gt;は、任意の値を含むことができる異機種間配列を構成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, elements might be computed on request
rather than stored.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T160316Z" creationid="hsugawa8651" creationdate="20181109T160316Z">
        <seg>たとえば、要求に基づいて要素を計算することができます。 保存するのではなく。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, it enables
accessing the diagonal elements from the first "page" of &lt;x5/&gt;A&lt;x6/&gt; from above:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T155653Z" creationid="hsugawa8651" creationdate="20181109T155653Z">
        <seg>たとえば 上からの&lt;x5/&gt;A&lt;x6/&gt;の最初の「ページ」からの対角線要素へのアクセス</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, the &lt;x7/&gt;`searchsorted`&lt;x8/&gt; function uses this convention to indicate
the insertion point of a value not found in a sorted array:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T155312Z" creationid="hsugawa8651" creationdate="20181109T155312Z">
        <seg>たとえば、&lt;x7/&gt;'のセアルチゾルタド&lt;x8/&gt;関数は、この規則を使用して ソートされた配列に存在しない値の挿入点です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, the following expression
sums a series without allocating memory:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154929Z" creationid="hsugawa8651" creationdate="20181109T154929Z">
        <seg>たとえば、次の式を指定します。 は、メモリを割り当てずに連続した値を加算します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, to match C prototypes of the form:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T153924Z" creationid="hsugawa8651" creationdate="20181109T153924Z">
        <seg>たとえば、フォームのCプロトタイプに一致させるには、次のようにします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, we could have requested
the result in single precision by writing:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154859Z" creationid="hsugawa8651" creationdate="20181109T154859Z">
        <seg>例えば 以下のように記述することによって、単精度での結果が得られます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For most computational purposes, arrays should contain
objects of a more specific type, such as &lt;x3/&gt;`Float64`&lt;x4/&gt; or &lt;x5/&gt;`Int32`&lt;x6/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154148Z" creationid="hsugawa8651" creationdate="20181109T154148Z">
        <seg>For most computational purposes, arrays should contain
objects of a more specific type, such as &lt;x3/&gt;`Float64`&lt;x4/&gt; or &lt;x5/&gt;`Int32`&lt;x6/&gt;.For most computational purposes, arrays should contain
objects of a more specific type, such as &lt;x3/&gt;`Float64`&lt;x4/&gt; or &lt;x5/&gt;`Int32`&lt;x6/&gt;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Generated values can be filtered using the &lt;x1/&gt;if&lt;x2/&gt; keyword:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T155050Z" creationid="hsugawa8651" creationdate="20181109T155050Z">
        <seg>生成された値は、&lt;x2/&gt;キーワードの場合は&lt;x1/&gt;を使用してフィルタできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Here, &lt;x1/&gt;(2, 3)&lt;x2/&gt; is a &lt;x3/&gt;`Tuple`&lt;x4/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154539Z" creationid="hsugawa8651" creationdate="20181109T154539Z">
        <seg>ここで、&lt;x1/&gt;(2, 3)&lt;x2/&gt;は、&lt;x3/&gt;「タプル」&lt;x4/&gt;である。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>However, any concrete &lt;x3/&gt;AbstractArray{T,N}&lt;x4/&gt; type should generally implement
at least &lt;x5/&gt;`size(A)`&lt;x6/&gt; (returning an &lt;x7/&gt;Int&lt;x8/&gt; tuple), &lt;x9/&gt;`getindex(A,i)`&lt;x10/&gt; and &lt;x11/&gt;&lt;x12/&gt;&lt;x13/&gt;(@ref getindex);
mutable arrays should also implement &lt;x14/&gt;`setindex!`&lt;x15/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T160320Z" creationid="hsugawa8651" creationdate="20181109T160320Z">
        <seg>しかし、具体的な&lt;x3/&gt;AbstractArray{T,N}&lt;x4/&gt;型は、一般的には実装されるべきである。 &lt;x5/&gt;'size(A)'&lt;x6/&gt;(return an&lt;x7/&gt;Int&lt;x8/&gt;タプルを返す)&lt;x9/&gt;`getindex(A,i)`&lt;x10/&gt;&lt;x13/&gt;&lt;x13/&gt;&lt;x13/&gt;&lt;x13/&gt;(@ref getindex); mutable配列は、&lt;x14/&gt;`setindex!`&lt;x15/&gt;を実装する必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If &lt;x1/&gt;X&lt;x2/&gt; is an array, it must have the same number of elements as the product of the lengths of
the indices: &lt;x3/&gt;prod(length(I_1), length(I_2), ..., length(I_n))&lt;x4/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T155408Z" creationid="hsugawa8651" creationdate="20181109T155408Z">
        <seg>&lt;x1/&gt;X&lt;x2/&gt;が配列である場合、それは長さの積と同じ数の要素を持つ必要があります。 インデックス:&lt;x3/&gt;prod(長さ(I_1),長さ(I_2),…,長さ(I_n))&lt;x4/&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If &lt;x4/&gt;X&lt;x5/&gt; is not an array, its value
is written to all referenced locations of &lt;x6/&gt;A&lt;x7/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T155420Z" creationid="hsugawa8651" creationdate="20181109T155420Z">
        <seg>&lt;x4/&gt;X&lt;x5/&gt;が配列でない場合は、その値は は、&lt;x6/&gt;A&lt;x7/&gt;の参照されたすべての場所に書き込まれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If all
arguments have a common &lt;x3/&gt;&lt;x4/&gt;&lt;x5/&gt;(@ref conversion-and-promotion) then they get
converted to that type using &lt;x6/&gt;`convert`&lt;x7/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154521Z" creationid="hsugawa8651" creationdate="20181109T154521Z">
        <seg>すべて 引数には共通の&lt;x3/&gt;&lt;x4/&gt;&lt;x5/&gt;(@ref変換とプロモーション)があります。 &lt;x6/&gt;'convert`&lt;x7/&gt;を使用して、そのタイプに変換されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If all indices are vectors, for example, then the shape of &lt;x1/&gt;X&lt;x2/&gt; would be &lt;x3/&gt;(length(I_1), length(I_2), ..., length(I_n))&lt;x4/&gt;,
with location &lt;x5/&gt;(i_1, i_2, ..., i_n)&lt;x6/&gt; of &lt;x7/&gt;X&lt;x8/&gt; containing the value &lt;x9/&gt;A[I_1[i_1], I_2[i_2], ..., I_n[i_n]]&lt;x10/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T155134Z" creationid="hsugawa8651" creationdate="20181109T155134Z">
        <seg>例えば、すべてのインデックスがベクトルである場合、&lt;x1/&gt;X&lt;x2/&gt;の形状は&lt;x3/&gt;(長さI_1)、長さ(I_2)、…、長さ(I_n)&lt;x4/&gt;である。 位置&lt;x5/&gt;(i_1,i_2,.…i_n)&lt;x7/&gt;X&lt;x8/&gt;の値&lt;x9/&gt;A[I_1[i_1],I_2[i_2],.…,I_n[i_n]]&lt;x10/&gt;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If all the indices are scalars, then the result &lt;x1/&gt;X&lt;x2/&gt; is a single element from the array &lt;x3/&gt;A&lt;x4/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T155128Z" creationid="hsugawa8651" creationdate="20181109T155128Z">
        <seg>すべての指標がスカラーである場合、結果&lt;x1/&gt;X&lt;x2/&gt;は、配列&lt;x3/&gt;A&lt;x4/&gt;からの単一要素である。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the type &lt;x5/&gt;T&lt;x6/&gt; is
omitted it will default to &lt;x7/&gt;`Float64`&lt;x8/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154346Z" creationid="hsugawa8651" creationdate="20181109T154346Z">
        <seg>&lt;x5/&gt;T&lt;x6/&gt;の場合 省略すると、デフォルトでは&lt;x7/&gt;"Float64&lt;x8/&gt;になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you don't
specify this trait, the default value &lt;x5/&gt;IndexCartesian()&lt;x6/&gt; is used.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T155920Z" creationid="hsugawa8651" creationdate="20181109T155920Z">
        <seg>もしあなたが この特性を指定します。デフォルト値&lt;x5/&gt;IndexCartesian()&lt;x6/&gt;は使用されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you write a custom &lt;x1/&gt;`AbstractArray`&lt;x2/&gt; type, you can specify that it has fast linear indexing using</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T155906Z" creationid="hsugawa8651" creationdate="20181109T155906Z">
        <seg>カスタム&lt;x1/&gt;`AbstractArray'&lt;x2/&gt;タイプを書く場合は、次のようにして、高速な線形インデックスを作成することを指定できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In Julia, all arguments to functions are &lt;x1/&gt;passed by
sharing&lt;x2/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154159Z" creationid="hsugawa8651" creationdate="20181109T154159Z">
        <seg>Juliaでは、関数に対するすべての引数は、&lt;x1/&gt;に渡されます。 共有&lt;x2/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In contrast with &lt;x1/&gt;for i = 1:length(A)&lt;x2/&gt;, iterating with &lt;x3/&gt;`eachindex`&lt;x4/&gt; provides an efficient way to
iterate over any array type.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T155900Z" creationid="hsugawa8651" creationdate="20181109T155900Z">
        <seg>i=1:長さ(A)&lt;x2/&gt;の&lt;x1/&gt;とは対照的に、&lt;x3/&gt;'の反復は、効率的な方法である。&lt;x3/&gt;"エアチンデス"&lt;x4/&gt;である 任意の配列タイプに対して繰り返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In general, unlike many other technical computing languages, Julia does not expect programs to
be written in a vectorized style for performance.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154152Z" creationid="hsugawa8651" creationdate="20181109T154152Z">
        <seg>一般的に、多くの他の技術計算言語とは異なり、Juliaはプログラムを期待していない。 パフォーマンスを向上させるためにベクトル化されたスタイルで記述する必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In order to control the
type explicitly, a type can be prepended to the comprehension.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154854Z" creationid="hsugawa8651" creationdate="20181109T154854Z">
        <seg>制御を行うには 明示的にタイプを認識することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In such cases, the result is always 1-d.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T155056Z" creationid="hsugawa8651" creationdate="20181109T155056Z">
        <seg>この場合、結果は常に1-dになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the expression &lt;x1/&gt;A[I_1, I_2, ..., I_n]&lt;x2/&gt;, each &lt;x3/&gt;I_k&lt;x4/&gt; may be a scalar index, an
array of scalar indices, or an object that represents an array of scalar
indices and can be converted to such by &lt;x5/&gt;`to_indices`&lt;x6/&gt;:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T155503Z" creationid="hsugawa8651" creationdate="20181109T155503Z">
        <seg>式&lt;x1/&gt;A[I_1,I_2,…I_n]&lt;x2/&gt;では、各&lt;x3/&gt;I_k&lt;x4/&gt;はスカラーインデックスであってもよいし スカラの配列、またはスカラーの配列を表すオブジェクト インデックスは、&lt;x5/&gt;から&lt;x6/&gt;までに変換することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the following list of
such functions, calls with a &lt;x1/&gt;dims...&lt;x2/&gt; argument can either take a single tuple of dimension sizes
or a series of dimension sizes passed as a variable number of arguments.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154340Z" creationid="hsugawa8651" creationdate="20181109T154340Z">
        <seg>以下の一覧 そのような関数は、&lt;x1/&gt;ディムスを持つ関数です。&lt;x2/&gt;引数を指定すると、1組の寸法サイズをとることができます。 または、変数の数として渡される一連の次元サイズを指定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the most general case,
an array may contain objects of type &lt;x1/&gt;`Any`&lt;x2/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154143Z" creationid="hsugawa8651" creationdate="20181109T154143Z">
        <seg>最も一般的なケースでは 配列は、&lt;x1/&gt;'のタイプのオブジェクトを含むことができます。&lt;x/&gt;&lt;x2/&gt;&lt;x/&gt;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the second
construct, &lt;x1/&gt;i&lt;x2/&gt; will be an &lt;x3/&gt;Int&lt;x4/&gt; if &lt;x5/&gt;A&lt;x6/&gt; is an array type with fast linear indexing; otherwise,
it will be a &lt;x7/&gt;CartesianIndex&lt;x8/&gt;:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T155838Z" creationid="hsugawa8651" creationdate="20181109T155838Z">
        <seg>2番目の 構成,&lt;x1/&gt;i&lt;x2/&gt;は&lt;x5/&gt;Int&lt;x6/&gt;であり,&lt;x5/&gt;A&lt;x6/&gt;が高速線形インデックスを用いたアレイ型である場合は,それ以外の値である。 &lt;x7/&gt;CartesianIndex&lt;x8/&gt;になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Indexed assignment
syntax without the &lt;x6/&gt;end&lt;x7/&gt; keyword is equivalent to a call to
&lt;x8/&gt;`setindex!`&lt;x9/&gt;:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T155447Z" creationid="hsugawa8651" creationdate="20181109T155447Z">
        <seg>インデックス付きの割り当て &lt;x6/&gt;end&lt;x7/&gt;キーワードがない構文は、次のような呼び出しに相当します。 &lt;x8/&gt;`setindex!`&lt;x9/&gt;:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Indexing by a boolean vector &lt;x3/&gt;B&lt;x4/&gt; is effectively the same as indexing by the
vector of integers that is returned by &lt;x5/&gt;`findall(B)`&lt;x6/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T155758Z" creationid="hsugawa8651" creationdate="20181109T155758Z">
        <seg>ブール型ベクトル&lt;x3/&gt;B&lt;x4/&gt;によるインデックス作成は、実効的には、以下のようにして行われる。 &lt;x5/&gt;`findall(B)`&lt;x6/&gt;によって返される整数のベクトル。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Indexing syntax without the &lt;x3/&gt;end&lt;x4/&gt; keyword is equivalent to a call to &lt;x5/&gt;`getindex`&lt;x6/&gt;:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T155245Z" creationid="hsugawa8651" creationdate="20181109T155245Z">
        <seg>&lt;x3/&gt;end&lt;x4/&gt;キーワードなしのインデックス構文は、&lt;x5/&gt;`getindex'&lt;x6/&gt;への呼び出しと同じです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It can even be combined with a &lt;x8/&gt;:&lt;x9/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T155706Z" creationid="hsugawa8651" creationdate="20181109T155706Z">
        <seg>また、&lt;x8/&gt;:&lt;x9/&gt;と組み合わせることもできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It is generally more efficient to use boolean arrays as
indices directly instead of first calling &lt;x13/&gt;`findall`&lt;x14/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T155813Z" creationid="hsugawa8651" creationdate="20181109T155813Z">
        <seg>一般的に、boolean配列を使用する方が効率的です。 は、最初の呼び出し&lt;x13/&gt;'findall&lt;x14/&gt;を呼び出すのではなく、直接インデックスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It is parameterized by
the number of dimensions &lt;x3/&gt;N&lt;x4/&gt; and the element type &lt;x5/&gt;T&lt;x6/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T160240Z" creationid="hsugawa8651" creationdate="20181109T160240Z">
        <seg>パラメータは、パラメータによってパラメータ化されます。 次元の数&lt;x3/&gt;N&lt;x4/&gt;と、エレメント・タイプ&lt;x5/&gt;T&lt;x6/&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It is possible to pass Julia functions to native C functions that accept function pointer arguments.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T153908Z" creationid="hsugawa8651" creationdate="20181109T153908Z">
        <seg>関数ポインタ引数を受け入れるネイティブC関数にJulia関数を渡すことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It is recommended that these operations
have nearly constant time complexity, or technically Õ(1) complexity, as otherwise some array
functions may be unexpectedly slow.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T160322Z" creationid="hsugawa8651" creationdate="20181109T160322Z">
        <seg>これらの操作は、次のように操作することをお勧めします。 ほとんど一定の時間的複雑さ(技術的には1)、あるいは技術的には複雑さがある 機能が予期せぬほど遅くなります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It is sometimes useful to perform element-by-element binary operations on arrays of different
sizes, such as adding a vector to each column of a matrix.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T160040Z" creationid="hsugawa8651" creationdate="20181109T160040Z">
        <seg>異なる要素のバイナリ・バイナリ・バイナリ・オペレーションを実行する場合には、次のようにします。 行列の各列にベクトルを追加するなどのサイズです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Julia does not treat arrays in any special way.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154124Z" creationid="hsugawa8651" creationdate="20181109T154124Z">
        <seg>Juliaは、特別な方法でアレイを処理しません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Julia's compiler uses type inference and generates
optimized code for scalar array indexing, allowing programs to be written in a style that is convenient
and readable, without sacrificing performance, and using less memory at times.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154155Z" creationid="hsugawa8651" creationdate="20181109T154155Z">
        <seg>Juliaのコンパイラーは型推論を使用し スカラー配列インデックスの最適化されたコードで、プログラムをスタイルに便利なスタイルで記述できるようにします。 パフォーマンスを犠牲にすることなく読み取り可能で、時にはメモリを減らすことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Julia, like most technical computing languages, provides a first-class array implementation.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154040Z" creationid="hsugawa8651" creationdate="20181109T154040Z">
        <seg>Juliaは、ほとんどの技術的なコンピューティング言語と同様、一流のアレイ実装を提供しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Just as in &lt;x1/&gt;&lt;x2/&gt;&lt;x3/&gt;(@ref man-array-indexing), the &lt;x4/&gt;end&lt;x5/&gt; keyword may be used
to represent the last index of each dimension within the indexing brackets, as
determined by the size of the array being assigned into.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T155438Z" creationid="hsugawa8651" creationdate="20181109T155438Z">
        <seg>&lt;x1/&gt;&lt;x2/&gt;&lt;x3/&gt;(@ref man array indexing)の場合と同様に、&lt;x4/&gt;end&lt;x5/&gt;キーワードを使用することもできます。 インデックス・ブラケット内の各次元の最後のインデックスを表示するには、次のように指定します。 割り当てられているアレイのサイズによって決定されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Just like
inner functions used elsewhere in the language, variables from the enclosing scope can be
"captured" in the inner function.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T155005Z" creationid="hsugawa8651" creationdate="20181109T155005Z">
        <seg>ちょうど 言語で他の場所で使用される内部関数、囲みスコープからの変数は、次のようになります。 「取り込み」は内部機能である。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Like ccall, all of these arguments will be evaluated at compile-time, when the containing method is defined.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T153944Z" creationid="hsugawa8651" creationdate="20181109T153944Z">
        <seg>ccallと同様に、これらの引数はすべてコンパイル時に評価され、containingメソッドが定義されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Many functions for constructing and initializing arrays are provided.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154333Z" creationid="hsugawa8651" creationdate="20181109T154333Z">
        <seg>配列を作成して初期化するための多くの関数が用意されています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Many non- mutating functions are implemented by
calling a function of the same name with an added &lt;x6/&gt;!&lt;x7/&gt; at the end on an explicit
copy of the input, and returning that copy.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154222Z" creationid="hsugawa8651" creationdate="20181109T154222Z">
        <seg>多くの非重複関数は、次のように実装されています。 明示的に最後に&lt;x6/&gt;!&lt;x7/&gt;を追加して、同じ名前の関数を呼び出します。 入力のコピーを返し、そのコピーを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Most
technical computing languages pay a lot of attention to their array implementation at the expense
of other containers.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154112Z" creationid="hsugawa8651" creationdate="20181109T154112Z">
        <seg>ほとんど テクニカル・コンピューティング言語は、アレイ実装に多大な関心を払っています。 その他の容器。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Most of these functions
also accept a first input &lt;x3/&gt;T&lt;x4/&gt;, which is the element type of the array.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154343Z" creationid="hsugawa8651" creationdate="20181109T154343Z">
        <seg>これらの関数の大部分 また、配列の要素タイプである最初の入力&lt;x3/&gt;T&lt;x4/&gt;を受け入れます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Nested "dot calls" &lt;x5/&gt;f.(...)&lt;x6/&gt; (including calls to &lt;x7/&gt;.+&lt;x8/&gt; etcetera)
&lt;x9/&gt;&lt;x10/&gt;&lt;x11/&gt;(@ref man-dot-operators) into a single &lt;x12/&gt;broadcast&lt;x13/&gt; call.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T160131Z" creationid="hsugawa8651" creationdate="20181109T160131Z">
        <seg>ネストされた「ドットコール」&lt;x5/&gt;f.(...)&lt;x6/&gt;(&lt;x7/&gt;.+&lt;x8/&gt;eteteraへの呼び出しを含む) &lt;x9/&gt;&lt;x10/&gt;&lt;x11/&gt;(@ref man dot演算子)は、単一の&lt;x12/&gt;ブロードキャスト・&lt;x13/&gt;コールに対して使用されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note that comparisons such as &lt;x1/&gt;==&lt;x2/&gt; operate on whole arrays, giving a single boolean
answer.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T160005Z" creationid="hsugawa8651" creationdate="20181109T160005Z">
        <seg>&lt;x1/&gt;==&lt;x2/&gt;のような比較は、すべての配列に対して動作し、単一のブール値を与えることに注意してください。 答えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Often referred to as logical indexing or indexing with a logical mask, indexing
by a boolean array selects elements at the indices where its values are &lt;x1/&gt;true&lt;x2/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T155734Z" creationid="hsugawa8651" creationdate="20181109T155734Z">
        <seg>論理的なインデックス作成と呼ばれる論理的インデックス作成またはインデックス作成と呼ばれることが多いインデックス作成 ブール型配列では、値が&lt;x1/&gt;真&lt;x2/&gt;であるインデックスで要素を選択します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Operations on &lt;x11/&gt;AbstractArray&lt;x12/&gt; objects are defined using higher
level operators and functions, in a way that is independent of the underlying storage.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T160305Z" creationid="hsugawa8651" creationdate="20181109T160305Z">
        <seg>&lt;x11/&gt;AbstractArray&lt;x12/&gt;オブジェクトに対する操作は、より高い値を使用して定義されます。 レベル演算子と関数は、基礎となる記憶域とは独立して存在します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Otherwise,
&lt;x5/&gt;X&lt;x6/&gt; is an array with the same number of dimensions as the sum of the dimensionalities of all the
indices.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T155131Z" creationid="hsugawa8651" creationdate="20181109T155131Z">
        <seg>そうでない場合は &lt;x5/&gt;x&lt;x6/&gt;は、すべての次元の次元性の合計と同じ数の次元を持つ配列です。 索引。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Ranges in generators and comprehensions can depend on previous ranges by writing multiple &lt;x1/&gt;for&lt;x2/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T155036Z" creationid="hsugawa8651" creationdate="20181109T155036Z">
        <seg>生成の範囲は、&lt;x2/&gt;を&lt;x2/&gt;に書くことによって、以前の範囲に依存することができる。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Ranges like &lt;x1/&gt;a:c&lt;x2/&gt; or &lt;x3/&gt;a:b:c&lt;x4/&gt;, which select contiguous or strided subsections from &lt;x5/&gt;a&lt;x6/&gt; to &lt;x7/&gt;c&lt;x8/&gt; (inclusive)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T155527Z" creationid="hsugawa8651" creationdate="20181109T155527Z">
        <seg>&lt;x1/&gt;a:c&lt;x2/&gt;または&lt;x3/&gt;a:b&lt;x4/&gt;のような範囲。&lt;x5/&gt;から&lt;x6/&gt;&lt;x8/&gt;&lt;x8/&gt;(含む)まで連続するサブセクションまたはストライドされたサブセクションを選択する。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Scalar values passed to these functions are treated as 1-element arrays.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154559Z" creationid="hsugawa8651" creationdate="20181109T154559Z">
        <seg>これらの関数に渡されるスカラー値は、1要素配列として扱われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>See &lt;x5/&gt;Iteration&lt;x6/&gt; below, and for some more advanced
examples, see &lt;x7/&gt;this blog post on multidimensional algorithms and
iteration&lt;x8/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T155626Z" creationid="hsugawa8651" creationdate="20181109T155626Z">
        <seg>以下の「&lt;x5/&gt;イテレーション&lt;x6/&gt;」を参照してください。また、詳細については、以下を参照してください。 例を参照してください。このブログ記事は、多次元アルゴリズムに関するこのブログ記事を参照してください。 繰り返し&lt;x8/&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>See the &lt;x3/&gt;&lt;x4/&gt;&lt;x5/&gt;(@ref man-interface-array) for more details
on implementing a custom array type.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154135Z" creationid="hsugawa8651" creationdate="20181109T154135Z">
        <seg>詳細については、&lt;x3/&gt;&lt;x4/&gt;&lt;x5/&gt;(@ref man interface array)を参照してください。 カスタム・アレイ・タイプの実装です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Similarly, indexing
by a &lt;x7/&gt;N&lt;x8/&gt;-dimensional boolean array is effectively the same as indexing by the
vector of &lt;x9/&gt;CartesianIndex{N}&lt;x10/&gt;s where its values are &lt;x11/&gt;true&lt;x12/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T155802Z" creationid="hsugawa8651" creationdate="20181109T155802Z">
        <seg>同様にインデックス化 &lt;x7/&gt;N&lt;x8/&gt;-次元ブール配列は、実効的には、以下のように、インデックス化と同じである。 &lt;x9/&gt;CartesianIndex{N}&lt;x10/&gt;sのベクトルであり、その値は&lt;x11/&gt;真&lt;x12/&gt;である。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;x1/&gt;AbstractArray&lt;x2/&gt; type includes anything vaguely array-like, and implementations of it might
be quite different from conventional arrays.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T160313Z" creationid="hsugawa8651" creationdate="20181109T160313Z">
        <seg>&lt;x1/&gt;AbstractArray&lt;x2/&gt;タイプは、曖昧な配列を含んでおり、実装は実装されています。 従来のアレイとは大きく異なります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The array library is implemented
almost completely in Julia itself, and derives its performance from the compiler, just like any
other code written in Julia.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154129Z" creationid="hsugawa8651" creationdate="20181109T154129Z">
        <seg>アレイ・ライブラリーは実装されています。 ほとんどの場合、ジュリア自身は、コンパイラーからのパフォーマンスを導き出し その他のコードはジュリアに書かれています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The concatenation functions are used so often that they have special syntax:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154623Z" creationid="hsugawa8651" creationdate="20181109T154623Z">
        <seg>連結関数は、頻繁に使用されるため、特別な構文が使用されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The first construct is used when you need the value, but not index, of each element.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T155843Z" creationid="hsugawa8651" creationdate="20181109T155843Z">
        <seg>最初の構成は、各要素の値が必要な場合に使用されますが、インデックスでは使用されません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The following example computes a weighted average of the current element and its left and right
neighbor along a 1-d grid.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154818Z" creationid="hsugawa8651" creationdate="20181109T154818Z">
        <seg>次の例では、現在の要素とその左側と右側の加重平均を計算しています。 1Dグリッドに沿った隣接。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The general syntax for assigning values in an n-dimensional array A is:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T155333Z" creationid="hsugawa8651" creationdate="20181109T155333Z">
        <seg>n次元配列Aの値を代入する一般的な構文は次のとおりです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The general syntax for indexing into an n-dimensional array A is:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T155109Z" creationid="hsugawa8651" creationdate="20181109T155109Z">
        <seg>n次元配列Aへの索引付けの一般的な構文は次のとおりです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The macro &lt;x1/&gt;`@cfunction`&lt;x2/&gt; generates the C-compatible function pointer for a call to a
Julia function.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T153931Z" creationid="hsugawa8651" creationdate="20181109T153931Z">
        <seg>マクロ&lt;x1/&gt;`@cfunction`&lt;x2/&gt;は、コールのC互換関数ポインタを生成します。 Julia関数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The meaning of this form is that &lt;x1/&gt;F(x,y,...)&lt;x2/&gt; is evaluated with the variables &lt;x3/&gt;x&lt;x4/&gt;, &lt;x5/&gt;y&lt;x6/&gt;, etc. taking
on each value in their given list of values.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154807Z" creationid="hsugawa8651" creationdate="20181109T154807Z">
        <seg>この形式の意味は、&lt;x1/&gt;F(x,y,...)&lt;x2/&gt;は、変数&lt;x3/&gt;x4&lt;x4/&gt;、&lt;x5/&gt;y&lt;x6/&gt;の変数を用いて評価されることである。 指定された値リストの各値です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The result is an N-d dense array with dimensions that are the concatenation of the dimensions
of the variable ranges &lt;x13/&gt;rx&lt;x14/&gt;, &lt;x15/&gt;ry&lt;x16/&gt;, etc. and each &lt;x17/&gt;F(x,y,...)&lt;x18/&gt; evaluation returns a scalar.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154815Z" creationid="hsugawa8651" creationdate="20181109T154815Z">
        <seg>結果は、次元の連結である次元を持つN次元の密配列です。 変数範囲&lt;x13/&gt;rx&lt;x14/&gt;、&lt;x15/&gt;ry&lt;x16/&gt;など、各&lt;x17/&gt;F(x,y,...)&lt;x18/&gt;評価はスカラーを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The same relationship holds for &lt;x8/&gt;min.(a,b)&lt;x9/&gt; and &lt;x10/&gt;minimum(a)&lt;x11/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T160036Z" creationid="hsugawa8651" creationdate="20181109T160036Z">
        <seg>&lt;x8/&gt;min(a,b)&lt;x9/&gt;と&lt;x10/&gt;最小(a)&lt;x11/&gt;と同じ関係が成り立つ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The second and third arguments are both optional, defaulting to the element type and dimensions of &lt;x3/&gt;A&lt;x4/&gt; if omitted.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154442Z" creationid="hsugawa8651" creationdate="20181109T154442Z">
        <seg>2番目と3番目の引数は両方とも省略可能です。デフォルトでは、&lt;x3/&gt;A&lt;x4/&gt;&lt;x/&gt;の要素タイプと次元は省略されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The syntax &lt;x1/&gt;[A, B, C, ...]&lt;x2/&gt; constructs a 1-d array (i.e., a vector) of its arguments.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154518Z" creationid="hsugawa8651" creationdate="20181109T154518Z">
        <seg>構文&lt;x1/&gt;[A,B,C,…]&lt;x2/&gt;は、その引数の1次元配列(すなわち、ベクトル)を構成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The value in location &lt;x5/&gt;I_1[i_1], I_2[i_2], ..., I_n[i_n]&lt;x6/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T155412Z" creationid="hsugawa8651" creationdate="20181109T155412Z">
        <seg>location&lt;x5/&gt;I_1[i_1]の値、I_2[i_2]、.…、I_n[i_n]&lt;x6/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>These operations
generally work correctly as a fallback for any specific array implementation.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T160310Z" creationid="hsugawa8651" creationdate="20181109T160310Z">
        <seg>これらの操作 一般的には、特定のアレイ実装のフォールバックとして正しく動作します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>They represent a collection
of scalar indices that each span &lt;x3/&gt;N&lt;x4/&gt; dimensions, enabling a form of indexing
that is sometimes referred to as pointwise indexing.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T155651Z" creationid="hsugawa8651" creationdate="20181109T155651Z">
        <seg>コレクションを表します。 各スパン&lt;x3/&gt;N&lt;x4/&gt;の各次元を使用可能にするスカラー指数のことで、索引の形式が可能になります。 ポイントワイズインデックスと呼ばれることもあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This
will construct a 1-d array with element type &lt;x3/&gt;T&lt;x4/&gt;, initialized to contain elements &lt;x5/&gt;A&lt;x6/&gt;, &lt;x7/&gt;B&lt;x8/&gt;, &lt;x9/&gt;C&lt;x10/&gt;,
etc.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154702Z" creationid="hsugawa8651" creationdate="20181109T154702Z">
        <seg>これ 要素タイプ&lt;x3/&gt;T&lt;x4/&gt;を持つ1dアレイを構築し、要素&lt;x5/&gt;A&lt;x6/&gt;、&lt;x7/&gt;B&lt;x8/&gt;、&lt;x9/&gt;C&lt;x10/&gt;を含むように初期化します。 その他。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This includes
&lt;x6/&gt;`Colon`&lt;x7/&gt; (&lt;x8/&gt;:&lt;x9/&gt;) to select all indices within the entire dimension,
ranges of the form &lt;x10/&gt;a:c&lt;x11/&gt; or &lt;x12/&gt;a:b:c&lt;x13/&gt; to select contiguous or strided
subsections, and arrays of booleans to select elements at their &lt;x14/&gt;true&lt;x15/&gt; indices.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T155120Z" creationid="hsugawa8651" creationdate="20181109T155120Z">
        <seg>これには &lt;x6/&gt;「コロン」&lt;x7/&gt;(&lt;x8/&gt;:&lt;x9/&gt;)は、次元全体のすべてのインデックスを選択するために使用されます。 &lt;x10/&gt;a:c&lt;x11/&gt;または&lt;x12/&gt;a:b:c&lt;x13/&gt;to select連続またはストライドされたものを選択するための範囲 サブセクションは、&lt;x14/&gt;真の&lt;x15/&gt;インデックスで選択要素を選択するためのブール演算の配列です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This includes:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T155518Z" creationid="hsugawa8651" creationdate="20181109T155518Z">
        <seg>これには次のものが含まれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This means that
&lt;x1/&gt;@cfunction&lt;x2/&gt;-generated pointers cannot be used in calls where WINAPI expects &lt;x3/&gt;stdcall&lt;x4/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T153957Z" creationid="hsugawa8651" creationdate="20181109T153957Z">
        <seg>つまり &lt;x1/&gt;@cfunction&lt;x2/&gt;-生成されたポインタは、WINAPIが&lt;x3/&gt;stdcall&lt;x4/&gt;を想定している呼び出しでは使用できません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This object can be iterated to produce values on demand, instead of allocating
an array and storing them in advance (see &lt;x1/&gt;Iteration&lt;x2/&gt;).</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154927Z" creationid="hsugawa8651" creationdate="20181109T154927Z">
        <seg>このオブジェクトを反復して、必要に応じて必要に応じて値を生成することができます。 配列とそれを事前に格納する(&lt;x1/&gt;Iteration&lt;x2/&gt;を参照)。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To enable convenient vectorization of mathematical and other operations,
Julia &lt;x1/&gt;&lt;x2/&gt;&lt;x3/&gt;(@ref man-vectorized) &lt;x4/&gt;f.(args...)&lt;x5/&gt;, e.g. &lt;x6/&gt;sin.(x)&lt;x7/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T155933Z" creationid="hsugawa8651" creationdate="20181109T155933Z">
        <seg>数学的およびその他の操作を便利にベクトル化することを可能にするために Julia&lt;x1/&gt;&lt;x2/&gt;&lt;x3/&gt;(@ref man vectorized)&lt;x4/&gt;f.(args.…)&lt;x6/&gt;sin.(x)&lt;x7/&gt;sin.(x)&lt;x7/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To see the various ways we can pass dimensions to these constructors, consider the following examples:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154524Z" creationid="hsugawa8651" creationdate="20181109T154524Z">
        <seg>これらのコンストラクタに次元を渡すことができるさまざまな方法を確認するには、次の例を考慮してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use dot operators like &lt;x3/&gt;.==&lt;x4/&gt; for elementwise comparisons.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T160015Z" creationid="hsugawa8651" creationdate="20181109T160015Z">
        <seg>&lt;x3/&gt;.==&lt;x4/&gt;のようなドット演算子を、要素的比較のために使用します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Values can be specified as any iterable object, but
will commonly be ranges like &lt;x7/&gt;1:n&lt;x8/&gt; or &lt;x9/&gt;2:(n-1)&lt;x10/&gt;, or explicit arrays of values like &lt;x11/&gt;[1.2, 3.4, 5.7]&lt;x12/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154811Z" creationid="hsugawa8651" creationdate="20181109T154811Z">
        <seg>値は、任意のオブジェクトとして指定することができますが は一般的に&lt;x7/&gt;1:n&lt;x8/&gt;または&lt;x9/&gt;2:(n-1)&lt;x10/&gt;、または&lt;x11/&gt;[1.2、3.4、5.7]&lt;x12/&gt;のような明示的な値の配列である。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Vectors and multidimensional arrays of integers</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T155522Z" creationid="hsugawa8651" creationdate="20181109T155522Z">
        <seg>整数のベクトルおよび多次元配列</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When combined with other indexing forms and iterators
that yield &lt;x3/&gt;CartesianIndex&lt;x4/&gt;es, however, this can produce very elegant
and efficient code.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T155632Z" creationid="hsugawa8651" creationdate="20181109T155632Z">
        <seg>他のインデックス作成フォームおよびイテレータと組み合わされた場合 しかし、それは&lt;x3/&gt;CartesianIndex&lt;x4/&gt;の収量をもたらすが、これは非常にエレガントなものである。 効率的なコードです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When writing a generator expression with multiple dimensions inside an argument list, parentheses
are needed to separate the generator from subsequent arguments:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154940Z" creationid="hsugawa8651" creationdate="20181109T154940Z">
        <seg>引数リスト内に複数の次元を持つジェネレータ式を記述する場合は、括弧を使用します。 ジェネレータを次の引数から分離する必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>X = getindex(A, I_1, I_2, ..., I_n)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T155300Z" creationid="hsugawa8651" creationdate="20181109T155300Z">
        <seg>X = getindex(A, I_1, I_2, ..., I_n)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`CartesianIndex{N}`&lt;x1/&gt;s, which behave like an &lt;x2/&gt;N&lt;x3/&gt;-tuple of integers spanning multiple dimensions (see below for more details)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T155514Z" creationid="hsugawa8651" creationdate="20181109T155514Z">
        <seg>「CartesianIndex{N}」&lt;x1/&gt;は、複数の次元を超える整数の&lt;x2/&gt;N&lt;x3/&gt;のように動作します(詳細については以下を参照)。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`Colon()`&lt;x1/&gt; (&lt;x2/&gt;:&lt;x3/&gt;), which represents all indices within an entire dimension or across the entire array</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T155540Z" creationid="hsugawa8651" creationdate="20181109T155540Z">
        <seg>「コロン()」&lt;x1/&gt;(&lt;x2/&gt;:&lt;x3/&gt;)は、全次元または配列全体にわたってすべてのインデックスを表します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`axes(A)`&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T153250Z" creationid="hsugawa8651" creationdate="20181109T153250Z">
        <seg>`axes(A)`&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`axes(A,n)`&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T153255Z" creationid="hsugawa8651" creationdate="20181109T153255Z">
        <seg>`axes(A,n)`&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`eachindex(A)`&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T153302Z" creationid="hsugawa8651" creationdate="20181109T153302Z">
        <seg>`eachindex(A)`&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`hvcat`&lt;x1/&gt; concatenates in both dimension 1 (with semicolons) and dimension 2 (with spaces).</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154644Z" creationid="hsugawa8651" creationdate="20181109T154644Z">
        <seg>「ホフカト」&lt;x1/&gt;は、次元1(セミコロン)と次元2(スペースを含む)の両方で連結されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`length(A)`&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T153218Z" creationid="hsugawa8651" creationdate="20181109T153218Z">
        <seg>`length(A)`&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`ndims(A)`&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T153230Z" creationid="hsugawa8651" creationdate="20181109T153230Z">
        <seg>`ndims(A)`&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`size(A)`&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T153236Z" creationid="hsugawa8651" creationdate="20181109T153236Z">
        <seg>`size(A)`&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`size(A,n)`&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T153242Z" creationid="hsugawa8651" creationdate="20181109T153242Z">
        <seg>`size(A,n)`&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>a &lt;x1/&gt;BitArray&lt;x2/&gt; with all values &lt;x3/&gt;false&lt;x4/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154417Z" creationid="hsugawa8651" creationdate="20181109T154417Z">
        <seg>&lt;x1/&gt;BitArray&lt;x2/&gt;であり、すべての値は&lt;x3/&gt;false&lt;x4/&gt;である。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>a &lt;x1/&gt;`BitArray`&lt;x2/&gt; with all values &lt;x3/&gt;true&lt;x4/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154402Z" creationid="hsugawa8651" creationdate="20181109T154402Z">
        <seg>&lt;x1/&gt;'BitArray'&lt;x2/&gt;はすべての値が&lt;x3/&gt;真&lt;x4/&gt;である</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>a range expressing the valid indices along dimension &lt;x1/&gt;n&lt;x2/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154257Z" creationid="hsugawa8651" creationdate="20181109T154257Z">
        <seg>寸法&lt;x1/&gt;n&lt;x2/&gt;に沿って有効なインデックスを表現する範囲</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>a tuple containing the dimensions of &lt;x1/&gt;A&lt;x2/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154246Z" creationid="hsugawa8651" creationdate="20181109T154246Z">
        <seg>&lt;x1/&gt;A&lt;x2/&gt;の次元を含むタプル</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>a tuple containing the valid indices of &lt;x1/&gt;A&lt;x2/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154254Z" creationid="hsugawa8651" creationdate="20181109T154254Z">
        <seg>&lt;x1/&gt;A&lt;x2/&gt;の有効なインデックスを含むタプル</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>a tuple of the strides in each dimension</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154309Z" creationid="hsugawa8651" creationdate="20181109T154309Z">
        <seg>各次元の上昇点の集合</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>a&lt;x1/&gt; and &lt;x2/&gt;b&lt;x3/&gt;, and &lt;x4/&gt;`maximum(a)`&lt;x5/&gt;, which finds the largest value within
&lt;x6/&gt;a&lt;x7/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T160031Z" creationid="hsugawa8651" creationdate="20181109T160031Z">
        <seg>&lt;x1/&gt;および&lt;x2/&gt;b&lt;x3/&gt;、&lt;x4/&gt;の最大値(a)&lt;x5/&gt;は、最も大きい値を示します。 &lt;x6/&gt;a&lt;x7/&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>an &lt;x1/&gt;Array&lt;x2/&gt; of all ones</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154358Z" creationid="hsugawa8651" creationdate="20181109T154358Z">
        <seg>全ての&lt;x1/&gt;アレイ&lt;x2/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>an &lt;x1/&gt;Array&lt;x2/&gt; of all zeros</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154354Z" creationid="hsugawa8651" creationdate="20181109T154354Z">
        <seg>すべてのゼロの&lt;x1/&gt;配列&lt;x2/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>an &lt;x1/&gt;Array&lt;x2/&gt; with random, iid &lt;x3/&gt;&lt;x4/&gt;&lt;x5/&gt; and uniformly distributed values in the half-open interval &lt;x6/&gt;[0, 1)&lt;x7/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154449Z" creationid="hsugawa8651" creationdate="20181109T154449Z">
        <seg>&lt;x1/&gt;配列&lt;x2/&gt;で、ランダムなiid&lt;x3/&gt;&lt;x4/&gt;&lt;x5/&gt;で、半オープン間隔&lt;x6/&gt;[0 1]&lt;x7/&gt;で均一に分布した値を示す。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>an &lt;x1/&gt;Array&lt;x2/&gt; with random, iid and standard normally distributed values</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154452Z" creationid="hsugawa8651" creationdate="20181109T154452Z">
        <seg>ランダムなiidと標準的な正規分布の値を持つ&lt;x1/&gt;配列&lt;x2/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>an array containing the same data as &lt;x1/&gt;A&lt;x2/&gt;, but with different dimensions</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154421Z" creationid="hsugawa8651" creationdate="20181109T154421Z">
        <seg>&lt;x1/&gt;A&lt;x2/&gt;と同じデータを含む配列であるが、異なる次元を含む配列</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>an array with the same binary data as &lt;x1/&gt;A&lt;x2/&gt;, but with element type &lt;x3/&gt;T&lt;x4/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154445Z" creationid="hsugawa8651" creationdate="20181109T154445Z">
        <seg>&lt;x1/&gt;A&lt;x2/&gt;と同じバイナリデータを持つ配列であるが、要素タイプ&lt;x3/&gt;T&lt;x4/&gt;である。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>an efficient iterator for visiting each position in &lt;x1/&gt;A&lt;x2/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154302Z" creationid="hsugawa8651" creationdate="20181109T154302Z">
        <seg>&lt;x1/&gt;A&lt;x2/&gt;の各位置を訪問するための効率的なイテレータ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>an uninitialized array of the same type as &lt;x1/&gt;A&lt;x2/&gt; (dense, sparse, etc.), but with the specified element type and dimensions.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154439Z" creationid="hsugawa8651" creationdate="20181109T154439Z">
        <seg>&lt;x1/&gt;A&lt;x2/&gt;(密、疎等)と同じタイプの初期化されていない配列ですが、指定されたエレメントタイプとディメンションがあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>an uninitialized dense &lt;x1/&gt;`Array`&lt;x2/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154351Z" creationid="hsugawa8651" creationdate="20181109T154351Z">
        <seg>初期化されていない密な&lt;x1/&gt;`配列"&lt;x2/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>concatenate input arrays along dimension(s) &lt;x1/&gt;k&lt;x2/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154549Z" creationid="hsugawa8651" creationdate="20181109T154549Z">
        <seg>次元に沿って入力配列を連結する&lt;x1/&gt;k&lt;x2/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>copy &lt;x1/&gt;A&lt;x2/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154430Z" creationid="hsugawa8651" creationdate="20181109T154430Z">
        <seg>コピー&lt;x1/&gt;A&lt;x2/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>copy &lt;x1/&gt;A&lt;x2/&gt;, recursively copying its elements</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154435Z" creationid="hsugawa8651" creationdate="20181109T154435Z">
        <seg>&lt;x1/&gt;A&lt;x2/&gt;をコピーして、その要素を再帰的にコピーする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>fill the array &lt;x1/&gt;A&lt;x2/&gt; with the value &lt;x3/&gt;x&lt;x4/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154507Z" creationid="hsugawa8651" creationdate="20181109T154507Z">
        <seg>&lt;x3/&gt;x&lt;x4/&gt;の値を持つ配列&lt;x1/&gt;A&lt;x2/&gt;を配列に埋め込みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>for a in A
    &lt;x1/&gt; Do something with the element a
end

for i in eachindex(A)
    &lt;x2/&gt; Do something with i and/or A[i]
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T155827Z" creationid="hsugawa8651" creationdate="20181109T155827Z">
        <seg>for a in A
    &lt;x1/&gt; Do something with the element a
end

for i in eachindex(A)
    &lt;x2/&gt; Do something with i and/or A[i]
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; A = rand(4,3);

julia&gt; B = view(A, 1:3, 2:3);

julia&gt; for i in eachindex(B)
           @show i
       end
i = CartesianIndex(1, 1)
i = CartesianIndex(2, 1)
i = CartesianIndex(3, 1)
i = CartesianIndex(1, 2)
i = CartesianIndex(2, 2)
i = CartesianIndex(3, 2)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T155847Z" creationid="hsugawa8651" creationdate="20181109T155847Z">
        <seg>julia&gt; A = rand(4,3);

julia&gt; B = view(A, 1:3, 2:3);

julia&gt; for i in eachindex(B)
           @show i
       end
i = CartesianIndex(1, 1)
i = CartesianIndex(2, 1)
i = CartesianIndex(3, 1)
i = CartesianIndex(1, 2)
i = CartesianIndex(2, 2)
i = CartesianIndex(3, 2)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; A = reshape(1:32, 4, 4, 2);

julia&gt; A[3, 2, 1]
7

julia&gt; A[CartesianIndex(3, 2, 1)] == A[3, 2, 1] == 7
true</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T155608Z" creationid="hsugawa8651" creationdate="20181109T155608Z">
        <seg>julia&gt; A = reshape(1:32, 4, 4, 2);

julia&gt; A[3, 2, 1]
7

julia&gt; A[CartesianIndex(3, 2, 1)] == A[3, 2, 1] == 7
true</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; A = reshape(collect(1:16), (2, 2, 2, 2))
2×2×2×2 Array{Int64,4}:
[:, :, 1, 1] =
 1  3
 2  4

[:, :, 2, 1] =
 5  7
 6  8

[:, :, 1, 2] =
  9  11
 10  12

[:, :, 2, 2] =
 13  15
 14  16

julia&gt; A[1, 2, 1, 1] &lt;x1/&gt; all scalar indices
3

julia&gt; A[[1, 2], [1], [1, 2], [1]] &lt;x2/&gt; all vector indices
2×1×2×1 Array{Int64,4}:
[:, :, 1, 1] =
 1
 2

[:, :, 2, 1] =
 5
 6

julia&gt; A[[1, 2], [1], [1, 2], 1] &lt;x3/&gt; a mix of index types
2×1×2 Array{Int64,3}:
[:, :, 1] =
 1
 2

[:, :, 2] =
 5
 6</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T155139Z" creationid="hsugawa8651" creationdate="20181109T155139Z">
        <seg>julia&gt; A = reshape(collect(1:16), (2, 2, 2, 2))
2×2×2×2 Array{Int64,4}:
[:, :, 1, 1] =
 1  3
 2  4

[:, :, 2, 1] =
 5  7
 6  8

[:, :, 1, 2] =
  9  11
 10  12

[:, :, 2, 2] =
 13  15
 14  16

julia&gt; A[1, 2, 1, 1] &lt;x1/&gt; all scalar indices
3

julia&gt; A[[1, 2], [1], [1, 2], [1]] &lt;x2/&gt; all vector indices
2×1×2×1 Array{Int64,4}:
[:, :, 1, 1] =
 1
 2

[:, :, 2, 1] =
 5
 6

julia&gt; A[[1, 2], [1], [1, 2], 1] &lt;x3/&gt; a mix of index types
2×1×2 Array{Int64,3}:
[:, :, 1] =
 1
 2

[:, :, 2] =
 5
 6</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; A = reshape(collect(1:16), (2, 2, 2, 2));

julia&gt; A[[1 2; 1 2]]
2×2 Array{Int64,2}:
 1  2
 1  2

julia&gt; A[[1 2; 1 2], 1, 2, 1]
2×2 Array{Int64,2}:
 5  6
 5  6</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T155157Z" creationid="hsugawa8651" creationdate="20181109T155157Z">
        <seg>julia&gt; A = reshape(collect(1:16), (2, 2, 2, 2));

julia&gt; A[[1 2; 1 2]]
2×2 Array{Int64,2}:
 1  2
 1  2

julia&gt; A[[1 2; 1 2], 1, 2, 1]
2×2 Array{Int64,2}:
 5  6
 5  6</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; A = reshape(collect(1:2:18), (3, 3))
3×3 Array{Int64,2}:
 1   7  13
 3   9  15
 5  11  17

julia&gt; A[4]
7

julia&gt; A[[2, 5, 8]]
3-element Array{Int64,1}:
  3
  9
 15

julia&gt; A[[1 4; 3 8]]
2×2 Array{Int64,2}:
 1   7
 5  15

julia&gt; A[[]]
0-element Array{Int64,1}

julia&gt; A[1:2:5]
3-element Array{Int64,1}:
 1
 5
 9

julia&gt; A[2, :]
3-element Array{Int64,1}:
  3
  9
 15

julia&gt; A[:, 3]
3-element Array{Int64,1}:
 13
 15
 17</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T155550Z" creationid="hsugawa8651" creationdate="20181109T155550Z">
        <seg>julia&gt; A = reshape(collect(1:2:18), (3, 3))
3×3 Array{Int64,2}:
 1   7  13
 3   9  15
 5  11  17

julia&gt; A[4]
7

julia&gt; A[[2, 5, 8]]
3-element Array{Int64,1}:
  3
  9
 15

julia&gt; A[[1 4; 3 8]]
2×2 Array{Int64,2}:
 1   7
 5  15

julia&gt; A[[]]
0-element Array{Int64,1}

julia&gt; A[1:2:5]
3-element Array{Int64,1}:
 1
 5
 9

julia&gt; A[2, :]
3-element Array{Int64,1}:
  3
  9
 15

julia&gt; A[:, 3]
3-element Array{Int64,1}:
 13
 15
 17</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; [(i,j) for i=1:3 for j=1:i if i+j == 4]
2-element Array{Tuple{Int64,Int64},1}:
 (2, 2)
 (3, 1)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T155100Z" creationid="hsugawa8651" creationdate="20181109T155100Z">
        <seg>julia&gt; [(i,j) for i=1:3 for j=1:i if i+j == 4]
2-element Array{Tuple{Int64,Int64},1}:
 (2, 2)
 (3, 1)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; [(i,j) for i=1:3 for j=1:i]
6-element Array{Tuple{Int64,Int64},1}:
 (1, 1)
 (2, 1)
 (2, 2)
 (3, 1)
 (3, 2)
 (3, 3)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T155040Z" creationid="hsugawa8651" creationdate="20181109T155040Z">
        <seg>julia&gt; [(i,j) for i=1:3 for j=1:i]
6-element Array{Tuple{Int64,Int64},1}:
 (1, 1)
 (2, 1)
 (2, 2)
 (3, 1)
 (3, 2)
 (3, 3)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; [[1 2] [3 4]]
1×4 Array{Int64,2}:
 1  2  3  4

julia&gt; Int8[[1 2] [3 4]]
1×4 Array{Int8,2}:
 1  2  3  4</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154710Z" creationid="hsugawa8651" creationdate="20181109T154710Z">
        <seg>julia&gt; [[1 2] [3 4]]
1×4 Array{Int64,2}:
 1  2  3  4

julia&gt; Int8[[1 2] [3 4]]
1×4 Array{Int8,2}:
 1  2  3  4</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; [[1; 2]; [3, 4]]
4-element Array{Int64,1}:
 1
 2
 3
 4

julia&gt; [[1 2] [3 4]]
1×4 Array{Int64,2}:
 1  2  3  4

julia&gt; [[1 2]; [3 4]]
2×2 Array{Int64,2}:
 1  2
 3  4</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154652Z" creationid="hsugawa8651" creationdate="20181109T154652Z">
        <seg>julia&gt; [[1; 2]; [3, 4]]
4-element Array{Int64,1}:
 1
 2
 3
 4

julia&gt; [[1 2] [3 4]]
1×4 Array{Int64,2}:
 1  2  3  4

julia&gt; [[1 2]; [3 4]]
2×2 Array{Int64,2}:
 1  2
 3  4</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; a = [1,2,5,6,7];

julia&gt; searchsorted(a, 4)
3:2</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T155322Z" creationid="hsugawa8651" creationdate="20181109T155322Z">
        <seg>julia&gt; a = [1,2,5,6,7];

julia&gt; searchsorted(a, 4)
3:2</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; a = rand(2,1); A = rand(2,3);

julia&gt; repeat(a,1,3)+A
2×3 Array{Float64,2}:
 1.20813  1.82068  1.25387
 1.56851  1.86401  1.67846</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T160046Z" creationid="hsugawa8651" creationdate="20181109T160046Z">
        <seg>julia&gt; a = rand(2,1); A = rand(2,3);

julia&gt; repeat(a,1,3)+A
2×3 Array{Float64,2}:
 1.20813  1.82068  1.25387
 1.56851  1.86401  1.67846</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; broadcast(+, a, A)
2×3 Array{Float64,2}:
 1.20813  1.82068  1.25387
 1.56851  1.86401  1.67846

julia&gt; b = rand(1,2)
1×2 Array{Float64,2}:
 0.867535  0.00457906

julia&gt; broadcast(+, a, b)
2×2 Array{Float64,2}:
 1.71056  0.847604
 1.73659  0.873631</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T160057Z" creationid="hsugawa8651" creationdate="20181109T160057Z">
        <seg>julia&gt; broadcast(+, a, A)
2×3 Array{Float64,2}:
 1.20813  1.82068  1.25387
 1.56851  1.86401  1.67846

julia&gt; b = rand(1,2)
1×2 Array{Float64,2}:
 0.867535  0.00457906

julia&gt; broadcast(+, a, b)
2×2 Array{Float64,2}:
 1.71056  0.847604
 1.73659  0.873631</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; convert.(Float32, [1, 2])
2-element Array{Float32,1}:
 1.0
 2.0

julia&gt; ceil.((UInt8,), [1.2 3.4; 5.6 6.7])
2×2 Array{UInt8,2}:
 0x02  0x04
 0x06  0x07

julia&gt; string.(1:3, ".</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T160140Z" creationid="hsugawa8651" creationdate="20181109T160140Z">
        <seg>julia&gt; convert.(Float32, [1, 2])
2-element Array{Float32,1}:
 1.0
 2.0

julia&gt; ceil.((UInt8,), [1.2 3.4; 5.6 6.7])
2×2 Array{UInt8,2}:
 0x02  0x04
 0x06  0x07

julia&gt; string.(1:3, ".</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; map(tuple, (1/(i+j) for i=1:2, j=1:2), [1 3; 2 4])
2×2 Array{Tuple{Float64,Int64},2}:
 (0.5, 1)       (0.333333, 3)
 (0.333333, 2)  (0.25, 4)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T155000Z" creationid="hsugawa8651" creationdate="20181109T155000Z">
        <seg>julia&gt; map(tuple, (1/(i+j) for i=1:2, j=1:2), [1 3; 2 4])
2×2 Array{Tuple{Float64,Int64},2}:
 (0.5, 1)       (0.333333, 3)
 (0.333333, 2)  (0.25, 4)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; map(tuple, 1/(i+j) for i=1:2, j=1:2, [1:4;])
ERROR: syntax: invalid iteration specification</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154944Z" creationid="hsugawa8651" creationdate="20181109T154944Z">
        <seg>julia&gt; map(tuple, 1/(i+j) for i=1:2, j=1:2, [1:4;])
ERROR: syntax: invalid iteration specification</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; page = A[:,:,1]
4×4 Array{Int64,2}:
 1  5   9  13
 2  6  10  14
 3  7  11  15
 4  8  12  16

julia&gt; page[[CartesianIndex(1,1),
             CartesianIndex(2,2),
             CartesianIndex(3,3),
             CartesianIndex(4,4)]]
4-element Array{Int64,1}:
  1
  6
 11
 16</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T155657Z" creationid="hsugawa8651" creationdate="20181109T155657Z">
        <seg>julia&gt; page = A[:,:,1]
4×4 Array{Int64,2}:
 1  5   9  13
 2  6  10  14
 3  7  11  15
 4  8  12  16

julia&gt; page[[CartesianIndex(1,1),
             CartesianIndex(2,2),
             CartesianIndex(3,3),
             CartesianIndex(4,4)]]
4-element Array{Int64,1}:
  1
  6
 11
 16</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; sum(1/n^2 for n=1:1000)
1.6439345666815615</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154933Z" creationid="hsugawa8651" creationdate="20181109T154933Z">
        <seg>julia&gt; sum(1/n^2 for n=1:1000)
1.6439345666815615</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; vcat([1, 2], 3)
3-element Array{Int64,1}:
 1
 2
 3

julia&gt; hcat([1 2], 3)
1×3 Array{Int64,2}:
 1  2  3</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154606Z" creationid="hsugawa8651" creationdate="20181109T154606Z">
        <seg>julia&gt; vcat([1, 2], 3)
3-element Array{Int64,1}:
 1
 2
 3

julia&gt; hcat([1 2], 3)
1×3 Array{Int64,2}:
 1  2  3</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; x = collect(reshape(1:9, 3, 3))
3×3 Array{Int64,2}:
 1  4  7
 2  5  8
 3  6  9

julia&gt; x[3, 3] = -9;

julia&gt; x[1:2, 1:2] = [-1 -4; -2 -5];

julia&gt; x
3×3 Array{Int64,2}:
 -1  -4   7
 -2  -5   8
  3   6  -9</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T155453Z" creationid="hsugawa8651" creationdate="20181109T155453Z">
        <seg>julia&gt; x = collect(reshape(1:9, 3, 3))
3×3 Array{Int64,2}:
 1  4  7
 2  5  8
 3  6  9

julia&gt; x[3, 3] = -9;

julia&gt; x[1:2, 1:2] = [-1 -4; -2 -5];

julia&gt; x
3×3 Array{Int64,2}:
 -1  -4   7
 -2  -5   8
  3   6  -9</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; x = rand(8)
8-element Array{Float64,1}:
 0.843025
 0.869052
 0.365105
 0.699456
 0.977653
 0.994953
 0.41084
 0.809411

julia&gt; [ 0.25*x[i-1] + 0.5*x[i] + 0.25*x[i+1] for i=2:length(x)-1 ]
6-element Array{Float64,1}:
 0.736559
 0.57468
 0.685417
 0.912429
 0.8446
 0.656511</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154823Z" creationid="hsugawa8651" creationdate="20181109T154823Z">
        <seg>julia&gt; x = rand(8)
8-element Array{Float64,1}:
 0.843025
 0.869052
 0.365105
 0.699456
 0.977653
 0.994953
 0.41084
 0.809411

julia&gt; [ 0.25*x[i-1] + 0.5*x[i] + 0.25*x[i+1] for i=2:length(x)-1 ]
6-element Array{Float64,1}:
 0.736559
 0.57468
 0.685417
 0.912429
 0.8446
 0.656511</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; x = reshape(1:16, 4, 4)
4×4 reshape(::UnitRange{Int64}, 4, 4) with eltype Int64:
 1  5   9  13
 2  6  10  14
 3  7  11  15
 4  8  12  16

julia&gt; x[2:3, 2:end-1]
2×2 Array{Int64,2}:
 6  10
 7  11

julia&gt; x[1, [2 3; 4 1]]
2×2 Array{Int64,2}:
  5  9
 13  1</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T155304Z" creationid="hsugawa8651" creationdate="20181109T155304Z">
        <seg>julia&gt; x = reshape(1:16, 4, 4)
4×4 reshape(::UnitRange{Int64}, 4, 4) with eltype Int64:
 1  5   9  13
 2  6  10  14
 3  7  11  15
 4  8  12  16

julia&gt; x[2:3, 2:end-1]
2×2 Array{Int64,2}:
 6  10
 7  11

julia&gt; x[1, [2 3; 4 1]]
2×2 Array{Int64,2}:
  5  9
 13  1</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; x = reshape(1:16, 4, 4)
4×4 reshape(::UnitRange{Int64}, 4, 4) with eltype Int64:
 1  5   9  13
 2  6  10  14
 3  7  11  15
 4  8  12  16

julia&gt; x[[false, true, true, false], :]
2×4 Array{Int64,2}:
 2  6  10  14
 3  7  11  15

julia&gt; mask = map(ispow2, x)
4×4 Array{Bool,2}:
  true  false  false  false
  true  false  false  false
 false  false  false  false
  true   true  false   true

julia&gt; x[mask]
5-element Array{Int64,1}:
  1
  2
  4
  8
 16</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T155818Z" creationid="hsugawa8651" creationdate="20181109T155818Z">
        <seg>julia&gt; x = reshape(1:16, 4, 4)
4×4 reshape(::UnitRange{Int64}, 4, 4) with eltype Int64:
 1  5   9  13
 2  6  10  14
 3  7  11  15
 4  8  12  16

julia&gt; x[[false, true, true, false], :]
2×4 Array{Int64,2}:
 2  6  10  14
 3  7  11  15

julia&gt; mask = map(ispow2, x)
4×4 Array{Bool,2}:
  true  false  false  false
  true  false  false  false
 false  false  false  false
  true   true  false   true

julia&gt; x[mask]
5-element Array{Int64,1}:
  1
  2
  4
  8
 16</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; zeros(Int8, 2, 3)
2×3 Array{Int8,2}:
 0  0  0
 0  0  0

julia&gt; zeros(Int8, (2, 3))
2×3 Array{Int8,2}:
 0  0  0
 0  0  0

julia&gt; zeros((2, 3))
2×3 Array{Float64,2}:
 0.0  0.0  0.0
 0.0  0.0  0.0</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154527Z" creationid="hsugawa8651" creationdate="20181109T154527Z">
        <seg>julia&gt; zeros(Int8, 2, 3)
2×3 Array{Int8,2}:
 0  0  0
 0  0  0

julia&gt; zeros(Int8, (2, 3))
2×3 Array{Int8,2}:
 0  0  0
 0  0  0

julia&gt; zeros((2, 3))
2×3 Array{Float64,2}:
 0.0  0.0  0.0
 0.0  0.0  0.0</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>m&lt;x1/&gt;-by-&lt;x2/&gt;n&lt;x3/&gt; identity matrix</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154456Z" creationid="hsugawa8651" creationdate="20181109T154456Z">
        <seg>m&lt;x1/&gt;-by-&lt;x2/&gt;n&lt;x3/&gt;識別マトリクス</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>range of &lt;x1/&gt;n&lt;x2/&gt; linearly spaced elements from &lt;x3/&gt;start&lt;x4/&gt; to &lt;x5/&gt;stop&lt;x6/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154500Z" creationid="hsugawa8651" creationdate="20181109T154500Z">
        <seg>&lt;x1/&gt;n&lt;x2/&gt;の範囲で、&lt;x3/&gt;開始&lt;x4/&gt;から&lt;x5/&gt;&lt;x6/&gt;までの直線的に間隔をあけた要素の範囲</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>shorthand for &lt;x1/&gt;cat(A...; dims=1)&lt;x2/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154553Z" creationid="hsugawa8651" creationdate="20181109T154553Z">
        <seg>&lt;x1/&gt;cat(A.…;dims=1)&lt;x2/&gt;の短縮形</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>shorthand for &lt;x1/&gt;cat(A...; dims=2)&lt;x2/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154557Z" creationid="hsugawa8651" creationdate="20181109T154557Z">
        <seg>&lt;x1/&gt;cat(A.…;dims=2)&lt;x2/&gt;の短縮形</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>the number of dimensions of &lt;x1/&gt;A&lt;x2/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154242Z" creationid="hsugawa8651" creationdate="20181109T154242Z">
        <seg>&lt;x1/&gt;A&lt;x2/&gt;の次元数</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>the number of elements in &lt;x1/&gt;A&lt;x2/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154235Z" creationid="hsugawa8651" creationdate="20181109T154235Z">
        <seg>&lt;x1/&gt;A&lt;x2/&gt;のエレメント数</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>the size of &lt;x1/&gt;A&lt;x2/&gt; along dimension &lt;x3/&gt;n&lt;x4/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154250Z" creationid="hsugawa8651" creationdate="20181109T154250Z">
        <seg>&lt;x3/&gt;n&lt;x4/&gt;の寸法に沿って&lt;x1/&gt;A&lt;x2/&gt;の大きさ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>the stride (linear index distance between adjacent elements) along dimension &lt;x1/&gt;k&lt;x2/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154305Z" creationid="hsugawa8651" creationdate="20181109T154305Z">
        <seg>寸法&lt;x1/&gt;k&lt;x2/&gt;に沿っての歩幅(隣接する要素間の線形指数の距離)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>the type of the elements contained in &lt;x1/&gt;A&lt;x2/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154231Z" creationid="hsugawa8651" creationdate="20181109T154231Z">
        <seg>&lt;x1/&gt;A&lt;x2/&gt;に含まれるエレメントのタイプ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>warning</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T155745Z" creationid="hsugawa8651" creationdate="20181109T155745Z">
        <seg>warning</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>where each &lt;x1/&gt;I_k&lt;x2/&gt; may be a scalar integer, an array of integers, or any other
&lt;x3/&gt;&lt;x4/&gt;&lt;x5/&gt;(@ref man-supported-index-types).</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T155358Z" creationid="hsugawa8651" creationdate="20181109T155116Z">
        <seg>where each &lt;x1/&gt;I_k&lt;x2/&gt; may be a scalar integer, an array of integers, or any other
&lt;x3/&gt;&lt;x4/&gt;&lt;x5/&gt;(@ref man-supported-index-types).</seg>
      </tuv>
    </tu>
<!-- Alternative translations -->
  </body>
</tmx>
