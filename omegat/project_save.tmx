<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE tmx SYSTEM "tmx11.dtd">
<tmx version="1.1">
  <header creationtool="OmegaT" o-tmf="OmegaT TMX" adminlang="EN-US" datatype="plaintext" creationtoolversion="3.6.0_10_r10436" segtype="sentence" srclang="EN-US"/>
  <body>
<!-- Default translations -->
    <tu>
      <tuv lang="EN-US">
        <seg>!!!</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T093933Z" creationid="hsugawa8651" creationdate="20181112T111813Z">
        <seg>!!! note</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>!&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T032237Z" creationid="hsugawa8651" creationdate="20181114T032237Z">
        <seg>!&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>!&lt;x1/&gt; indicates that it will mutate or destroy the
value of one or more of its arguments (compare, for example, &lt;x2/&gt;`sort`&lt;x3/&gt; and &lt;x4/&gt;`sort!`&lt;x5/&gt;).</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154213Z" creationid="hsugawa8651" creationdate="20181109T154213Z">
        <seg>&lt;x1/&gt;は、それが突然変異または破壊されることを示しています。 一つ以上の引数の値(例えば、&lt;x2/&gt;`sort'&lt;x3/&gt;、&lt;x4/&gt;`sort!"&lt;x5/&gt;)。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>!x&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T132152Z" creationid="hsugawa8651" creationdate="20181113T132152Z">
        <seg>!x&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>"""

hello"""</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T020854Z" creationid="hsugawa8651" creationdate="20181116T020854Z">
        <seg>"""

hello"""</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>"""
    *(x, y, z...)

Multiplication operator.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T020106Z" creationid="hsugawa8651" creationdate="20181116T020106Z">
        <seg>"""
    *(x, y, z...)

Multiplication operator.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>"""
"  Hello,\n  world.\n"</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T094339Z" creationid="hsugawa8651" creationdate="20181120T094339Z">
        <seg>"""
"  Hello,\n  world.\n"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>"""
...

...
"""
f(x, y) = ...</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T020045Z" creationid="hsugawa8651" creationdate="20181116T020045Z">
        <seg>"""
...

...
"""
f(x, y) = ...</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>"""
Some nice documentation here.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T020027Z" creationid="hsugawa8651" creationdate="20181116T020027Z">
        <seg>"""
Some nice documentation here.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>"""
function *(x, y, z...)
    &lt;x1/&gt; ... [implementation sold separately] ...
end

"""
    *(x::AbstractString, y::AbstractString, z::AbstractString...)

When applied to strings, concatenates them.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T020110Z" creationid="hsugawa8651" creationdate="20181116T020110Z">
        <seg>"""
function *(x, y, z...)
    &lt;x1/&gt; ... [implementation sold separately] ...
end

"""
    *(x::AbstractString, y::AbstractString, z::AbstractString...)

When applied to strings, concatenates them.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>"""
hello"""</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T020850Z" creationid="hsugawa8651" creationdate="20181116T020850Z">
        <seg>"""
hello"""</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>"""...

..."""
f(x, y) = ...</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T020053Z" creationid="hsugawa8651" creationdate="20181116T020053Z">
        <seg>"""...

..."""
f(x, y) = ...</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>"""hello"""</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T020845Z" creationid="hsugawa8651" creationdate="20181116T020845Z">
        <seg>"""hello"""</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>""&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T063211Z" creationid="hsugawa8651" creationdate="20181114T063211Z">
        <seg>""&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>"$NBSP$char$NBSP" : "$char"
end


function table_entries(completions, unicode_dict)
    entries = [[
        "Code point(s)", "Character(s)",
        "Tab completion sequence(s)", "Unicode name(s)"
    ]]
    for (chars, inputs) in sort!(collect(completions), by = first)
        code_points, unicode_names, characters = String[], String[], String[]
        for char in chars
            push!(code_points, "U+$(uppercase(string(UInt32(char), base = 16, pad = 5)))")
            push!(unicode_names, get(unicode_dict, UInt32(char), "(No Unicode name)"))
            push!(characters, isempty(characters) ?</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T022230Z" creationid="hsugawa8651" creationdate="20181116T022230Z">
        <seg>"$NBSP$char$NBSP" : "$char"
end


function table_entries(completions, unicode_dict)
    entries = [[
        "Code point(s)", "Character(s)",
        "Tab completion sequence(s)", "Unicode name(s)"
    ]]
    for (chars, inputs) in sort!(collect(completions), by = first)
        code_points, unicode_names, characters = String[], String[], String[]
        for char in chars
            push!(code_points, "U+$(uppercase(string(UInt32(char), base = 16, pad = 5)))")
            push!(unicode_names, get(unicode_dict, UInt32(char), "(No Unicode name)"))
            push!(characters, isempty(characters) ?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>", ["First", "Second", "Third"])
3-element Array{String,1}:
 "1.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T160149Z" creationid="hsugawa8651" creationdate="20181109T160147Z">
        <seg>1", ["First", "Second", "Third"])
3-element Array{String,1}:
 "1.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>"..."
f(x) = x

"..."
function f(x)
    x
end

"..."
f(x)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T020159Z" creationid="hsugawa8651" creationdate="20181116T020159Z">
        <seg>"..."
f(x) = x

"..."
function f(x)
    x
end

"..."
f(x)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>"..."
function f end

"..."
f</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T020156Z" creationid="hsugawa8651" creationdate="20181116T020156Z">
        <seg>"..."
function f end

"..."
f</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>"Is-Bits"   :: A &lt;x1/&gt;primitive type&lt;x2/&gt;, or a &lt;x3/&gt;struct&lt;x4/&gt; type where all fields are other &lt;x5/&gt;isbits&lt;x6/&gt; types.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T150729Z" creationid="hsugawa8651" creationdate="20181117T150729Z">
        <seg>「ビット」::&lt;x1/&gt;プリミティブ型&lt;x2/&gt;、または&lt;x3/&gt;構造体&lt;x4/&gt;型であり、すべてのフィールドはその他の&lt;x5/&gt;イスビトス&lt;x6/&gt;タイプである。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>"Leaf Type" :: A group of related data that includes a type-tag, is managed by the Julia GC, and is defined by object-identity.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T150619Z" creationid="hsugawa8651" creationdate="20181117T150619Z">
        <seg>「リーフタイプ」::タイプタグを含む関連データのグループは、Julia GCによって管理され、オブジェクト識別によって定義されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>"Leaf Type" :: A group of related data that includes a type-tag, is managed by the Julia GC, and is defined by object-identity. The type parameters of a leaf type must be fully defined (no &lt;x1/&gt;TypeVars&lt;x2/&gt; are allowed) in order for the instance to be constructed.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T134329Z" creationid="hsugawa8651" creationdate="20181117T134329Z">
        <seg>「リーフタイプ」::タイプタグを含む関連データのグループは、ジュリアGCによって管理され、オブジェクト識別子によって定義されます。リーフタイプのタイプパラメータは、インスタンスが構築されるには完全に定義(&lt;x1/&gt;TypeVars&lt;x2/&gt;は許可されません)されている必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>"Primitive Type" :: A type with no fields, but a size.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T150703Z" creationid="hsugawa8651" creationdate="20181117T150703Z">
        <seg>「プリミティブ型」::フィールドがなくても、サイズがあるタイプです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>"Singleton" :: a Leaf Type or Struct with no fields.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T150740Z" creationid="hsugawa8651" creationdate="20181117T150740Z">
        <seg>"Singleton"::a Leaf Type or Struct with no fields.(Singleton::a Leaf TypeまたはStruct with no fields.)。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>"Struct" :: A type with all fields defined to be constant.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T150713Z" creationid="hsugawa8651" creationdate="20181117T150713Z">
        <seg>"Struct"::A type with all fieldsが定義されています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>"Super Type" :: A super-type (not a leaf-type) that cannot be instantiated, but can be used to describe a group of types.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T150637Z" creationid="hsugawa8651" creationdate="20181117T150637Z">
        <seg>「スーパータイプ」:インスタンス化できないスーパータイプ(リーフタイプではない)ですが、タイプのグループを記述するために使用することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>"Tuple" :: an immutable data-structure similar to an anonymous struct type, or a constant array.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T150800Z" creationid="hsugawa8651" creationdate="20181117T150800Z">
        <seg>「タプル」:匿名構造型と似た不変のデータ構造、あるいは定数配列です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>"Tuple" :: an immutable data-structure similar to an anonymous struct type, or a constant array. Represented as either an array or a struct.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T134345Z" creationid="hsugawa8651" creationdate="20181117T134345Z">
        <seg>「タプル」:匿名構造体タイプと同様の不変データ構造、あるいは定数配列です。配列または構造体のいずれかとして表されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>"Type Parameter" :: A specialization of a type (typically used for dispatch or storage optimization).</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T150647Z" creationid="hsugawa8651" creationdate="20181117T150647Z">
        <seg>「Type Parameter」:タイプの特殊化(通常はディスパッチまたはストレージの最適化に使用されます)。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>"TypeVar" :: The &lt;x1/&gt;T&lt;x2/&gt; in the type parameter declaration is referred to as a TypeVar (short for type variable).</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T150650Z" creationid="hsugawa8651" creationdate="20181117T150650Z">
        <seg>「TypeVar」:&lt;x1/&gt;T&lt;x2/&gt;型パラメータ宣言の&lt;x1/&gt;は、TypeVar(型変数の短縮形)と呼ばれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>"less than" : "not less than")
less than

julia&gt; x = 1; y = 0;

julia&gt; println(x &lt; y ?</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T230126Z" creationid="hsugawa8651" creationdate="20181109T230126Z">
        <seg>"less than" : "not less than")
less than

julia&gt; x = 1; y = 0;

julia&gt; println(x &lt; y ?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>"less than" : "not less than")
not less than</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T230129Z" creationid="hsugawa8651" creationdate="20181109T230129Z">
        <seg>"less than" : "not less than")
not less than</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>"x is greater than y" : "x is equal to y")
test (generic function with 1 method)

julia&gt; test(1, 2)
x is less than y

julia&gt; test(2, 1)
x is greater than y

julia&gt; test(1, 1)
x is equal to y</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T230146Z" creationid="hsugawa8651" creationdate="20181109T230146Z">
        <seg>"x is greater than y" : "x is equal to y")
test (generic function with 1 method)

julia&gt; test(1, 2)
x is less than y

julia&gt; test(2, 1)
x is greater than y

julia&gt; test(1, 1)
x is equal to y</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>"x is less than y"    :
                            x &gt; y ?</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T230144Z" creationid="hsugawa8651" creationdate="20181109T230144Z">
        <seg>"x is less than y"    :
                            x &gt; y ?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>#</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T192137Z" creationid="hsugawa8651" creationdate="20181118T192137Z">
        <seg>#</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>#Allowed-Variable-Names-1</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T033428Z" creationid="hsugawa8651" creationdate="20181119T033428Z">
        <seg>#Allowed-Variable-Names-1</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>#Array-functions-1</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T125830Z" creationid="hsugawa8651" creationdate="20181119T125830Z">
        <seg>#Array-functions-1</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>#Base.AbstractMatrix</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T130958Z" creationid="hsugawa8651" creationdate="20181119T130958Z">
        <seg>#Base.AbstractMatrix</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>#Base.AbstractVecOrMat</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131007Z" creationid="hsugawa8651" creationdate="20181119T131007Z">
        <seg>#Base.AbstractVecOrMat</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>#Base.AbstractVector</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T130936Z" creationid="hsugawa8651" creationdate="20181119T130936Z">
        <seg>#Base.AbstractVector</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>#Base.BitArray</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131445Z" creationid="hsugawa8651" creationdate="20181119T131445Z">
        <seg>#Base.BitArray</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>#Base.BitArray-Tuple{Any}</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131509Z" creationid="hsugawa8651" creationdate="20181119T131509Z">
        <seg>#Base.BitArray-Tuple{Any}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>#Base.BitArray-Tuple{UndefInitializer,Vararg{Integer,N} where N}</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131451Z" creationid="hsugawa8651" creationdate="20181119T131451Z">
        <seg>#Base.BitArray-Tuple{UndefInitializer,Vararg{Integer,N} where N}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>#Base.Broadcast.broadcast</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131935Z" creationid="hsugawa8651" creationdate="20181119T131935Z">
        <seg>#Base.Broadcast.broadcast</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>#Base.DenseMatrix</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131336Z" creationid="hsugawa8651" creationdate="20181119T131336Z">
        <seg>#Base.DenseMatrix</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>#Base.DenseVecOrMat</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131344Z" creationid="hsugawa8651" creationdate="20181119T131344Z">
        <seg>#Base.DenseVecOrMat</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>#Base.DenseVector</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131328Z" creationid="hsugawa8651" creationdate="20181119T131328Z">
        <seg>#Base.DenseVector</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>#Base.IndexCartesian</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131828Z" creationid="hsugawa8651" creationdate="20181119T131828Z">
        <seg>#Base.IndexCartesian</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>#Base.IndexLinear</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131824Z" creationid="hsugawa8651" creationdate="20181119T131824Z">
        <seg>#Base.IndexLinear</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>#Base.IndexStyle</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131820Z" creationid="hsugawa8651" creationdate="20181119T131820Z">
        <seg>#Base.IndexStyle</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>#Base.Iterators.Stateful</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T192142Z" creationid="hsugawa8651" creationdate="20181118T192142Z">
        <seg>#Base.Iterators.Stateful</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>#Base.Iterators.countfrom</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T192244Z" creationid="hsugawa8651" creationdate="20181118T192244Z">
        <seg>#Base.Iterators.countfrom</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>#Base.Iterators.drop</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T192307Z" creationid="hsugawa8651" creationdate="20181118T192307Z">
        <seg>#Base.Iterators.drop</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>#Base.Iterators.enumerate</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T192217Z" creationid="hsugawa8651" creationdate="20181118T192217Z">
        <seg>#Base.Iterators.enumerate</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>#Base.Iterators.flatten</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T192350Z" creationid="hsugawa8651" creationdate="20181118T192350Z">
        <seg>#Base.Iterators.flatten</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>#Base.Iterators.product</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T192339Z" creationid="hsugawa8651" creationdate="20181118T192339Z">
        <seg>#Base.Iterators.product</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>#Base.Iterators.repeated</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T192327Z" creationid="hsugawa8651" creationdate="20181118T192327Z">
        <seg>#Base.Iterators.repeated</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>#Base.Iterators.rest</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T192232Z" creationid="hsugawa8651" creationdate="20181118T192232Z">
        <seg>#Base.Iterators.rest</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>#Base.Iterators.take</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T192256Z" creationid="hsugawa8651" creationdate="20181118T192256Z">
        <seg>#Base.Iterators.take</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>#Base.Iterators.zip</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T192206Z" creationid="hsugawa8651" creationdate="20181118T192206Z">
        <seg>#Base.Iterators.zip</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>#Base.IteratorsMD.CartesianIndices</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131814Z" creationid="hsugawa8651" creationdate="20181119T131814Z">
        <seg>#Base.IteratorsMD.CartesianIndices</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>#Base.Matrix</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131203Z" creationid="hsugawa8651" creationdate="20181119T131203Z">
        <seg>#Base.Matrix</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>#Base.Matrix-Tuple{Missing,Any,Any}</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131304Z" creationid="hsugawa8651" creationdate="20181119T131304Z">
        <seg>#Base.Matrix-Tuple{Missing,Any,Any}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>#Base.Matrix-Tuple{Nothing,Any,Any}</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131222Z" creationid="hsugawa8651" creationdate="20181119T131222Z">
        <seg>#Base.Matrix-Tuple{Nothing,Any,Any}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>#Base.Matrix-Tuple{UndefInitializer,Any,Any}</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131213Z" creationid="hsugawa8651" creationdate="20181119T131213Z">
        <seg>#Base.Matrix-Tuple{UndefInitializer,Any,Any}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>#Base.StridedArray</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131351Z" creationid="hsugawa8651" creationdate="20181119T131351Z">
        <seg>#Base.StridedArray</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>#Base.StridedMatrix</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131407Z" creationid="hsugawa8651" creationdate="20181119T131407Z">
        <seg>#Base.StridedMatrix</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>#Base.StridedVecOrMat</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131413Z" creationid="hsugawa8651" creationdate="20181119T131413Z">
        <seg>#Base.StridedVecOrMat</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>#Base.StridedVector</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131401Z" creationid="hsugawa8651" creationdate="20181119T131401Z">
        <seg>#Base.StridedVector</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>#Base.VecOrMat</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131313Z" creationid="hsugawa8651" creationdate="20181119T131313Z">
        <seg>#Base.VecOrMat</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>#Base.Vector</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131121Z" creationid="hsugawa8651" creationdate="20181119T131121Z">
        <seg>#Base.Vector</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>#Base.Vector-Tuple{Missing,Any}</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131153Z" creationid="hsugawa8651" creationdate="20181119T131153Z">
        <seg>#Base.Vector-Tuple{Missing,Any}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>#Base.Vector-Tuple{Nothing,Any}</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131144Z" creationid="hsugawa8651" creationdate="20181119T131144Z">
        <seg>#Base.Vector-Tuple{Nothing,Any}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>#Base.Vector-Tuple{UndefInitializer,Any}</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131132Z" creationid="hsugawa8651" creationdate="20181119T131132Z">
        <seg>#Base.Vector-Tuple{UndefInitializer,Any}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>#Base.axes-Tuple{AbstractArray,Any}</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131737Z" creationid="hsugawa8651" creationdate="20181119T131737Z">
        <seg>#Base.axes-Tuple{AbstractArray,Any}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>#Base.axes-Tuple{Any}</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131722Z" creationid="hsugawa8651" creationdate="20181119T131722Z">
        <seg>#Base.axes-Tuple{Any}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>#Base.conj!</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131907Z" creationid="hsugawa8651" creationdate="20181119T131907Z">
        <seg>#Base.conj!</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>#Base.eachindex</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131808Z" creationid="hsugawa8651" creationdate="20181119T131808Z">
        <seg>#Base.eachindex</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>#Base.falses</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131523Z" creationid="hsugawa8651" creationdate="20181119T131523Z">
        <seg>#Base.falses</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>#Base.fill</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131431Z" creationid="hsugawa8651" creationdate="20181119T131431Z">
        <seg>#Base.fill</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>#Base.fill!</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131540Z" creationid="hsugawa8651" creationdate="20181119T131540Z">
        <seg>#Base.fill!</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>#Base.getindex-Tuple{Type,Vararg{Any,N} where N}</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131419Z" creationid="hsugawa8651" creationdate="20181119T131419Z">
        <seg>#Base.getindex-Tuple{Type,Vararg{Any,N} where N}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>#Base.length-Tuple{AbstractArray}</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131745Z" creationid="hsugawa8651" creationdate="20181119T131745Z">
        <seg>#Base.length-Tuple{AbstractArray}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>#Base.ones</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131432Z" creationid="hsugawa8651" creationdate="20181119T131432Z">
        <seg>#Base.ones</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>#Base.similar</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131549Z" creationid="hsugawa8651" creationdate="20181119T131549Z">
        <seg>#Base.similar</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>#Base.size</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131717Z" creationid="hsugawa8651" creationdate="20181119T131717Z">
        <seg>#Base.size</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>#Base.stride</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131917Z" creationid="hsugawa8651" creationdate="20181119T131917Z">
        <seg>#Base.stride</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>#Base.strides</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131924Z" creationid="hsugawa8651" creationdate="20181119T131924Z">
        <seg>#Base.strides</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>#Base.trues</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131516Z" creationid="hsugawa8651" creationdate="20181119T131516Z">
        <seg>#Base.trues</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>#Base.zeros</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131428Z" creationid="hsugawa8651" creationdate="20181119T131428Z">
        <seg>#Base.zeros</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>#Basic-functions-1</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T125612Z" creationid="hsugawa8651" creationdate="20181119T125612Z">
        <seg>#Basic-functions-1</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>#Broadcast-and-vectorization-1</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T125618Z" creationid="hsugawa8651" creationdate="20181119T125618Z">
        <seg>#Broadcast-and-vectorization-1</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>#Combinatorics-1</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T125842Z" creationid="hsugawa8651" creationdate="20181119T125842Z">
        <seg>#Combinatorics-1</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>#Concatenation-and-permutation-1</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T125657Z" creationid="hsugawa8651" creationdate="20181119T125657Z">
        <seg>#Concatenation-and-permutation-1</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>#Constructors-and-Types-1</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T125600Z" creationid="hsugawa8651" creationdate="20181119T125600Z">
        <seg>#Constructors-and-Types-1</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>#Core.AbstractArray</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T130916Z" creationid="hsugawa8651" creationdate="20181119T130916Z">
        <seg>#Core.AbstractArray</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>#Core.Array</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T130923Z" creationid="hsugawa8651" creationdate="20181119T130923Z">
        <seg>#Core.Array</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>#Core.Array-Tuple{Missing,Any}</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131052Z" creationid="hsugawa8651" creationdate="20181119T131052Z">
        <seg>#Core.Array-Tuple{Missing,Any}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>#Core.Array-Tuple{Nothing,Any}</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131042Z" creationid="hsugawa8651" creationdate="20181119T131042Z">
        <seg>#Core.Array-Tuple{Nothing,Any}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>#Core.Array-Tuple{UndefInitializer,Any}</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131021Z" creationid="hsugawa8651" creationdate="20181119T131021Z">
        <seg>#Core.Array-Tuple{UndefInitializer,Any}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>#Core.DenseArray</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131320Z" creationid="hsugawa8651" creationdate="20181119T131320Z">
        <seg>#Core.DenseArray</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>#Core.UndefInitializer</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131101Z" creationid="hsugawa8651" creationdate="20181119T131101Z">
        <seg>#Core.UndefInitializer</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>#Core.undef</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131026Z" creationid="hsugawa8651" creationdate="20181119T131026Z">
        <seg>#Core.undef</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>#Iteration-utilities-1</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T192139Z" creationid="hsugawa8651" creationdate="20181118T192139Z">
        <seg>#Iteration-utilities-1</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>#LLVM-Interface-1</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T003207Z" creationid="hsugawa8651" creationdate="20181119T003207Z">
        <seg>#LLVM-Interface-1</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>#Resources-1</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T031834Z" creationid="hsugawa8651" creationdate="20181119T031834Z">
        <seg>#Resources-1</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>#Views-(SubArrays-and-other-view-types)-1</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T125646Z" creationid="hsugawa8651" creationdate="20181119T125646Z">
        <seg>#Views-(SubArrays-and-other-view-types)-1</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>#lib-arrays-1</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T130912Z" creationid="hsugawa8651" creationdate="20181119T130912Z">
        <seg>#lib-arrays-1</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>$ cat -n Tmp/test/runtests.jl
 1	using Tmp
 2	Tmp.greet()</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T022539Z" creationid="hsugawa8651" creationdate="20181116T022539Z">
        <seg>$ cat -n Tmp/test/runtests.jl
 1	using Tmp
 2	Tmp.greet()</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>$ echo 'println("Greetings!</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T224456Z" creationid="hsugawa8651" creationdate="20181109T224456Z">
        <seg>$ echo 'println("Greetings!</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>$ echo 'println(PROGRAM_FILE); for x in ARGS; println(x); end' &gt; script.jl
$ julia script.jl foo bar
script.jl
foo
bar</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T224352Z" creationid="hsugawa8651" creationdate="20181109T224352Z">
        <seg>$ echo 'println(PROGRAM_FILE); for x in ARGS; println(x); end' &gt; script.jl
$ julia script.jl foo bar
script.jl
foo
bar</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>$ julia
               _
   _       _ _(_)_     |  A fresh approach to technical computing
  (_)     | (_) (_)    |  Documentation: https://docs.julialang.org
   _ _   _| |_  __ _   |  Type "?help" for help.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T000519Z" creationid="hsugawa8651" creationdate="20181120T000519Z">
        <seg>$ julia
               _
   _       _ _(_)_     |  A fresh approach to technical computing
  (_)     | (_) (_)    |  Documentation: https://docs.julialang.org
   _ _   _| |_  __ _   |  Type "?help" for help.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>$ julia  -e 'using Pkg;Pkg.activate("Tmp");Pkg.test()'
Updating registry at `&lt;x1/&gt;/.julia/registries/General`
Updating git-repo `https://github.com/JuliaRegistries/General.git`
Resolving package versions...</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T022542Z" creationid="hsugawa8651" creationdate="20181116T022542Z">
        <seg>$ julia  -e 'using Pkg;Pkg.activate("Tmp");Pkg.test()'
Updating registry at `&lt;x1/&gt;/.julia/registries/General`
Updating git-repo `https://github.com/JuliaRegistries/General.git`
Resolving package versions...</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>$ julia --color=yes -O -- foo.jl arg1 arg2..</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T224359Z" creationid="hsugawa8651" creationdate="20181109T224359Z">
        <seg>$ julia --color=yes -O -- foo.jl arg1 arg2..</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>$ julia -e 'println(PROGRAM_FILE); for x in ARGS; println(x); end' foo bar

foo
bar</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T224343Z" creationid="hsugawa8651" creationdate="20181109T224343Z">
        <seg>$ julia -e 'println(PROGRAM_FILE); for x in ARGS; println(x); end' foo bar

foo
bar</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>$ julia -e 'using Pkg;Pkg.generate("Tmp")'
Generating project Tmp:
  Tmp/Project.toml
  Tmp/src/Tmp.jl
$ ls -R Tmp
Tmp:
Project.toml  src

Tmp/src:
Tmp.jl
$ cat -n Tmp/src/Tmp.jl
   1	module Tmp
   2
   3	greet() = print("Hello World!")
   4
   5	end &lt;x1/&gt; module</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T022534Z" creationid="hsugawa8651" creationdate="20181116T022534Z">
        <seg>$ julia -e 'using Pkg;Pkg.generate("Tmp")'
Generating project Tmp:
  Tmp/Project.toml
  Tmp/src/Tmp.jl
$ ls -R Tmp
Tmp:
Project.toml  src

Tmp/src:
Tmp.jl
$ cat -n Tmp/src/Tmp.jl
   1	module Tmp
   2
   3	greet() = print("Hello World!")
   4
   5	end &lt;x1/&gt; module</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>$ julia script.jl arg1 arg2...</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T224325Z" creationid="hsugawa8651" creationdate="20181109T224325Z">
        <seg>$ julia script.jl arg1 arg2...</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>$ mkdir Tmp/test</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T022537Z" creationid="hsugawa8651" creationdate="20181116T022537Z">
        <seg>$ mkdir Tmp/test</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>$&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T032304Z" creationid="hsugawa8651" creationdate="20181114T032304Z">
        <seg>$&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>$&lt;x1/&gt;s:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T015209Z" creationid="hsugawa8651" creationdate="20181116T015209Z">
        <seg>$&lt;x1/&gt;s:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>$JULIA_BINDIR/$DATAROOTDIR/julia/base</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T054804Z" creationid="hsugawa8651" creationdate="20181116T054804Z">
        <seg>$JULIA_BINDIR/$DATAROOTDIR/julia/base</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>$JULIA_BINDIR/$SYSCONFDIR/julia/startup.jl
$JULIA_BINDIR/../etc/julia/startup.jl</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T054817Z" creationid="hsugawa8651" creationdate="20181116T054817Z">
        <seg>$JULIA_BINDIR/$SYSCONFDIR/julia/startup.jl
$JULIA_BINDIR/../etc/julia/startup.jl</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>$JULIA_BINDIR/julia
$JULIA_BINDIR/julia-debug</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T054746Z" creationid="hsugawa8651" creationdate="20181116T054746Z">
        <seg>$JULIA_BINDIR/julia
$JULIA_BINDIR/julia-debug</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>%&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T032308Z" creationid="hsugawa8651" creationdate="20181114T032308Z">
        <seg>%&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&amp;&amp;&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T032324Z" creationid="hsugawa8651" creationdate="20181114T032324Z">
        <seg>&amp;&amp;&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&amp;&amp;&lt;x1/&gt; followed by &lt;x2/&gt;\|\|&lt;x3/&gt; followed by &lt;x4/&gt;?&lt;x5/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T065912Z" creationid="hsugawa8651" creationdate="20181114T030904Z">
        <seg>&amp;&amp;&lt;x1/&gt;のあとに、&lt;x2/&gt;\|\|&lt;x3/&gt;が続き、更に、&lt;x4/&gt;?&lt;x5/&gt;が続く</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&amp;&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T032315Z" creationid="hsugawa8651" creationdate="20181114T032315Z">
        <seg>&amp;&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>''&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T063508Z" creationid="hsugawa8651" creationdate="20181114T063508Z">
        <seg>''&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>'&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T063017Z" creationid="hsugawa8651" creationdate="20181114T063017Z">
        <seg>'&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>("function", "library")&lt;x1/&gt; where &lt;x2/&gt;function&lt;x3/&gt; is the C-exported function name.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T161428Z" creationid="hsugawa8651" creationdate="20181114T161428Z">
        <seg>(「関数」、「ライブラリ」)&lt;x1/&gt;&lt;x2/&gt;&lt;x2/&gt;関数&lt;x3/&gt;は、Cエクスポートされた関数名です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>("function", "library")&lt;x1/&gt; where &lt;x2/&gt;function&lt;x3/&gt; is the C-exported function name. &lt;x4/&gt;library&lt;x5/&gt; refers
to the shared library name: shared libraries available in the (platform-specific) load path will
be resolved by name, and if necessary a direct path may be specified.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T133743Z" creationid="hsugawa8651" creationdate="20181117T133743Z">
        <seg>(「関数」、「ライブラリ」)&lt;x1/&gt;&lt;x2/&gt;関数&lt;x3/&gt;は、Cエクスポートされた関数名です。&lt;x4/&gt;ライブラリ&lt;x5/&gt;は 共有ライブラリの名前:(プラットフォーム固有の)ロードパスで使用可能な共有ライブラリ 名前で解決する必要があり、必要に応じて直接パスを指定することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>()&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T032338Z" creationid="hsugawa8651" creationdate="20181114T032338Z">
        <seg>()&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>(...)&lt;x1/&gt; or &lt;x2/&gt;tuple(...)&lt;x3/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T150743Z" creationid="hsugawa8651" creationdate="20181117T150743Z">
        <seg>(...)&lt;x1/&gt; or &lt;x2/&gt;tuple(...)&lt;x3/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>(1, 2, 3)&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T150754Z" creationid="hsugawa8651" creationdate="20181117T150754Z">
        <seg>(1, 2, 3)&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>(&lt;x1/&gt;none&lt;x2/&gt;)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T112324Z" creationid="hsugawa8651" creationdate="20181112T112324Z">
        <seg>(&lt;x1/&gt;none&lt;x2/&gt;)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>(&lt;x1/&gt;undefined&lt;x2/&gt;)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T112222Z" creationid="hsugawa8651" creationdate="20181112T112222Z">
        <seg>(&lt;x1/&gt;undefined&lt;x2/&gt;)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>(@id extending-in-place-broadcast)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T131444Z" creationid="hsugawa8651" creationdate="20181113T131444Z">
        <seg>(@id extending-in-place-broadcast)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>(@id lib-arrays)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T020215Z" creationid="hsugawa8651" creationdate="20181116T020215Z">
        <seg>(@id lib-arrays)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>(@id lib-collections-iteration)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T032020Z" creationid="hsugawa8651" creationdate="20181114T032020Z">
        <seg>(@id lib-collections-iteration)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>(@id lib-constants)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T043136Z" creationid="hsugawa8651" creationdate="20181112T043136Z">
        <seg>(@id lib-constants)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>(@id lib-numbers)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T044706Z" creationid="hsugawa8651" creationdate="20181112T044706Z">
        <seg>(@id lib-numbers)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>(@id lib-strings)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T150336Z" creationid="hsugawa8651" creationdate="20181117T150336Z">
        <seg>(@id lib-strings)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>(@id man-ambiguities)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T014304Z" creationid="hsugawa8651" creationdate="20181120T014304Z">
        <seg>メソッドの曖昧さ (@id man-ambiguities)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>(@id man-anonymous-functions)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T130344Z" creationid="hsugawa8651" creationdate="20181110T025951Z">
        <seg>無名関数 (@id man-anonymous-functions)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>(@id man-array-indexing)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T155105Z" creationid="hsugawa8651" creationdate="20181109T155105Z">
        <seg>(@id man-array-indexing)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>(@id man-bits-types)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T150804Z" creationid="hsugawa8651" creationdate="20181117T150804Z">
        <seg>(@id man-bits-types)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>(@id man-byte-array-literals)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T021041Z" creationid="hsugawa8651" creationdate="20181116T021041Z">
        <seg>(@id man-byte-array-literals)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>(@id man-characters)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T020513Z" creationid="hsugawa8651" creationdate="20181116T020513Z">
        <seg>(@id man-characters)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>(@id man-compound-expressions)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T124332Z" creationid="hsugawa8651" creationdate="20181118T124332Z">
        <seg>(@id man-compound-expressions)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>(@id man-concatenation)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T020740Z" creationid="hsugawa8651" creationdate="20181116T020740Z">
        <seg>(@id man-concatenation)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>(@id man-conditional-evaluation)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T225826Z" creationid="hsugawa8651" creationdate="20181109T225826Z">
        <seg>(@id man-conditional-evaluation)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>(@id man-constructors)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T123702Z" creationid="hsugawa8651" creationdate="20181118T123702Z">
        <seg>(@id man-constructors)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>(@id man-dot-operators)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T132431Z" creationid="hsugawa8651" creationdate="20181113T132431Z">
        <seg>(@id man-dot-operators)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>(@id man-getting-started)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T164517Z" creationid="hsugawa8651" creationdate="20181118T120215Z">
        <seg>(@id man-getting-started)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>(@id man-interface-array)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T113200Z" creationid="hsugawa8651" creationdate="20181112T113200Z">
        <seg>(@id man-interface-array)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>(@id man-interface-iteration)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T164643Z" creationid="hsugawa8651" creationdate="20181118T164643Z">
        <seg>(@id man-interface-iteration)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>(@id man-interface-strided-arrays)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T164754Z" creationid="hsugawa8651" creationdate="20181118T164754Z">
        <seg>(@id man-interface-strided-arrays)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>(@id man-interfaces-broadcasting)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T164815Z" creationid="hsugawa8651" creationdate="20181118T164815Z">
        <seg>(@id man-interfaces-broadcasting)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>(@id man-loops)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T230921Z" creationid="hsugawa8651" creationdate="20181109T230921Z">
        <seg>(@id man-loops)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>(@id man-macros)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T015249Z" creationid="hsugawa8651" creationdate="20181116T015249Z">
        <seg>(@id man-macros)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>(@id man-method-design-ambiguities)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T054400Z" creationid="hsugawa8651" creationdate="20181116T054400Z">
        <seg>(@id man-method-design-ambiguities)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>(@id man-multi-dim-arrays)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T064312Z" creationid="hsugawa8651" creationdate="20181114T064312Z">
        <seg>(@id man-multi-dim-arrays)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>(@id man-numeric-literal-coefficients)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T120543Z" creationid="hsugawa8651" creationdate="20181118T120543Z">
        <seg>[@id manの数値リテラル係数](@id man-numeric-literal-coefficients)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>(@id man-raw-string-literals)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T021121Z" creationid="hsugawa8651" creationdate="20181116T021121Z">
        <seg>(@id man-raw-string-literals)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>(@id man-strings)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T094138Z" creationid="hsugawa8651" creationdate="20181120T094138Z">
        <seg>文字列 (@id man-strings)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>(@id man-supported-index-types)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T134939Z" creationid="hsugawa8651" creationdate="20181117T134939Z">
        <seg>(@id man-supported-index-types)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>(@id man-vectorized)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T120051Z" creationid="hsugawa8651" creationdate="20181118T120051Z">
        <seg>[man-vectorized](@id man-vectorized)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>(@id man-version-number-literals)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T021105Z" creationid="hsugawa8651" creationdate="20181116T021105Z">
        <seg>(@id man-version-number-literals)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>(@id math-ops)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T043422Z" creationid="hsugawa8651" creationdate="20181112T043422Z">
        <seg>(@id math-ops)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>(@id non-standard-string-literals)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T094435Z" creationid="hsugawa8651" creationdate="20181120T094415Z">
        <seg>非標準な文字列リテラル (@id non-standard-string-literals)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>(@id string-interpolation)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T020800Z" creationid="hsugawa8651" creationdate="20181116T020800Z">
        <seg>(@id string-interpolation)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>(@id writing-binary-broadcasting-rules)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T164851Z" creationid="hsugawa8651" creationdate="20181118T164851Z">
        <seg>(@id writing-binary-broadcasting-rules)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>(@ref &lt;:)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T063600Z" creationid="hsugawa8651" creationdate="20181114T063600Z">
        <seg>(@ref &lt;:)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>(@ref ===)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T063626Z" creationid="hsugawa8651" creationdate="20181114T063626Z">
        <seg>(@ref ===)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>(@ref &gt;:) (reverse of subtype operator)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T063616Z" creationid="hsugawa8651" creationdate="20181114T063604Z">
        <seg>(@ref&gt;:)(サブタイプ演算子の逆)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>(@ref Base.EnvDict)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T041814Z" creationid="hsugawa8651" creationdate="20181112T041814Z">
        <seg>(@ref Base.EnvDict)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>(@ref Base.ImmutableDict)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T041818Z" creationid="hsugawa8651" creationdate="20181112T041818Z">
        <seg>(@ref Base.ImmutableDict)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>(@ref Base.getproperty)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181110T025921Z" creationid="hsugawa8651" creationdate="20181110T025921Z">
        <seg>(@ref Base.getproperty)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>(@ref conversion-and-promotion)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T234543Z" creationid="hsugawa8651" creationdate="20181119T234543Z">
        <seg>(@ref conversion-and-promotion)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>(@ref man-array-indexing)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T022353Z" creationid="hsugawa8651" creationdate="20181113T022353Z">
        <seg>(@ref man-array-indexing)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>(@ref man-compound-expressions): &lt;x1/&gt;begin&lt;x2/&gt; and &lt;x3/&gt;(;)&lt;x4/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T235926Z" creationid="hsugawa8651" creationdate="20181119T235821Z">
        <seg>(@ref man-compound-expressions): 複合式: &lt;x1/&gt;begin&lt;x2/&gt; と&lt;x3/&gt;(;)&lt;x4/&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>(@ref man-conditional-evaluation): &lt;x1/&gt;if&lt;x2/&gt;-&lt;x3/&gt;elseif&lt;x4/&gt;-&lt;x5/&gt;else&lt;x6/&gt; and &lt;x7/&gt;?:&lt;x8/&gt; (ternary operator).</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T000048Z" creationid="hsugawa8651" creationdate="20181109T225720Z">
        <seg>
(@ref man-conditional-evaluation) 条件付き評価: &lt;x1/&gt;if&lt;x2/&gt;-&lt;x3/&gt;elseif&lt;x4/&gt;-&lt;x5/&gt;else&lt;x6/&gt;と &lt;x7/&gt;？:&lt;x8/&gt; (三項演算子)。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>(@ref man-constructors)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T234542Z" creationid="hsugawa8651" creationdate="20181119T234542Z">
        <seg>(@ref man-constructors)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>(@ref man-dot-operators) such as &lt;x1/&gt;.+&lt;x2/&gt; and &lt;x3/&gt;.*&lt;x4/&gt; are equivalent
to &lt;x5/&gt;broadcast&lt;x6/&gt; calls (except that they fuse, as described below).</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T122046Z" creationid="hsugawa8651" creationdate="20181114T161313Z">
        <seg>(@ref man-dot-operators)例えば&lt;x1/&gt;.+&lt;x2/&gt;&lt;x3/&gt;.*&lt;x4/&gt;は等価です。 &lt;x5/&gt;ブロードキャスト&lt;x6/&gt;コール(以下に説明するように融合することを除く)。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>(@ref man-dot-operators) such as &lt;x1/&gt;.+&lt;x2/&gt; and &lt;x3/&gt;.*&lt;x4/&gt; are equivalent
to &lt;x5/&gt;broadcast&lt;x6/&gt; calls (except that they fuse, as described below). There is also a
&lt;x7/&gt;`broadcast!`&lt;x8/&gt; function to specify an explicit destination (which can also
be accessed in a fusing fashion by &lt;x9/&gt;.=&lt;x10/&gt; assignment). In fact, &lt;x11/&gt;f.(args...)&lt;x12/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T135235Z" creationid="hsugawa8651" creationdate="20181117T135235Z">
        <seg>(@ref man dot演算子)例えば&lt;x1/&gt;.+&lt;x2/&gt;&lt;x3/&gt;.*&lt;x4/&gt;は等価です。 &lt;x5/&gt;ブロードキャスト&lt;x6/&gt;コール(以下に説明するように、これらのコールが融合されることを除く)に対しては、次のように設定されます。 &lt;x7/&gt;'ブロードキャスト!&lt;x8/&gt;関数は明示的な宛先を指定することができます(これは &lt;x9/&gt;.=&lt;x10/&gt;の割り当て方法でアクセスします。実際&lt;x11/&gt;f.(args.)&lt;x12/&gt;&lt;x12/&gt;&lt;x12/&gt;&lt;x12/&gt;&lt;x12/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>(@ref man-introduction)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T234325Z" creationid="hsugawa8651" creationdate="20181119T234325Z">
        <seg>(@ref man-introduction)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>(@ref man-multi-dim-arrays)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T234627Z" creationid="hsugawa8651" creationdate="20181119T234627Z">
        <seg>(@ref man-multi-dim-arrays)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>(@ref man-performance-tips)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T234914Z" creationid="hsugawa8651" creationdate="20181119T234914Z">
        <seg>(@ref man-performance-tips)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>(@ref man-tasks): &lt;x1/&gt;`yieldto()`&lt;x2/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T000148Z" creationid="hsugawa8651" creationdate="20181120T000148Z">
        <seg>(@ref man-tasks): &lt;x1/&gt;`yieldto()`&lt;x2/&gt;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>(@ref man-tasks): &lt;x1/&gt;`yieldto`&lt;x2/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T124327Z" creationid="hsugawa8651" creationdate="20181118T124327Z">
        <seg>(@ref man-tasks): &lt;x1/&gt;`yieldto`&lt;x2/&gt;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>(@ref man-types)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T234531Z" creationid="hsugawa8651" creationdate="20181119T234531Z">
        <seg>(@ref man-types)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>(@ref man-workflow-tips)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T234916Z" creationid="hsugawa8651" creationdate="20181119T234916Z">
        <seg>(@ref man-workflow-tips)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>(@ref next) returns next character at or after the index &lt;x1/&gt;i&lt;x2/&gt; and the next valid
character index following that.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T084231Z" creationid="hsugawa8651" creationdate="20181120T084133Z">
        <seg>(c, j = next(str,i) はインデックス&lt;x1/&gt;i&lt;x2/&gt; に格納された文字とインデックス i 以降で最初の有効なインデックスを返します。 </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>(@ref scope-of-variables)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T234529Z" creationid="hsugawa8651" creationdate="20181119T234529Z">
        <seg>(@ref scope-of-variables)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>(@ref start) gives the first valid index at which a character can be found in &lt;x1/&gt;str&lt;x2/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T084242Z" creationid="hsugawa8651" creationdate="20181120T084114Z">
        <seg>(@ref start) i=start(str) は、&lt;x1/&gt;str&lt;x2/&gt; にある最初の有効なインデックス(通常は1)を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>(A &lt;x7/&gt;`transcode()`&lt;x8/&gt; function is
provided to convert to/from other Unicode encodings.)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T075740Z" creationid="hsugawa8651" creationdate="20181120T075740Z">
        <seg>(Unicodeエンコードの変換を行うために &lt;x7/&gt;`transcode()`&lt;x8/&gt; 関数が 提供されていす。)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>(Again, one should
&lt;x7/&gt;import Base.display&lt;x8/&gt; to add new methods to &lt;x9/&gt;display&lt;x10/&gt;.) The return values of these functions are
up to the implementation (since in some cases it may be useful to return a display "handle" of
some type).</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T043334Z" creationid="hsugawa8651" creationdate="20181112T043334Z">
        <seg>(再度 &lt;x7/&gt;import Base.display&lt;x8/&gt;to add new methods to&lt;x9/&gt;display&lt;x10/&gt;.これらの関数の戻り値は、次のようになります。 実装まで(ある場合には、「handle」の「handle」を返すことが役に立つことがあるので、それを実行することができます。 あるタイプ)。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>(As we will see below, this does not necessarily mean that the last element is found
at index &lt;x1/&gt;n&lt;x2/&gt;, where &lt;x3/&gt;n&lt;x4/&gt; is the length of the string.)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T081039Z" creationid="hsugawa8651" creationdate="20181120T081039Z">
        <seg>しかし、下に示すように、文字列の長さ &lt;x3/&gt;n&lt;x4/&gt;のとき、文字列の最後の要素が、インデックス&lt;x1/&gt;n&lt;x2/&gt;が見出されるとは限りません。）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>(As we will see below, this does not necessarily mean that the last element is found
at index &lt;x7/&gt;n&lt;x8/&gt;, where &lt;x9/&gt;n&lt;x10/&gt; is the length of the string.)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T100304Z" creationid="hsugawa8651" creationdate="20181120T100304Z">
        <seg>しかし、下に示すように、 &lt;x3/&gt;n&lt;x4/&gt;が文字列の長さであるとき、文字列の最後の要素が、インデックス&lt;x1/&gt;n&lt;x2/&gt;が見出されるとは限りません。）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>(By convention, we tend to space operators more tightly if they get applied before other nearby
operators.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T063538Z" creationid="hsugawa8651" creationdate="20181113T132219Z">
        <seg>（慣例的に、他の演算子が適用される場合は、スペースを開けずに記載する傾向があります。 </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>(For comparison
operations like &lt;x5/&gt;&lt;&lt;x6/&gt;, &lt;x7/&gt;only&lt;x8/&gt; the elementwise &lt;x9/&gt;.&lt;&lt;x10/&gt; version is applicable to arrays.)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T160021Z" creationid="hsugawa8651" creationdate="20181109T160021Z">
        <seg>(比較のために &lt;x5/&gt;&lt;x6/&gt;のような操作、&lt;x7/&gt;&lt;x6/&gt;&lt;x8/&gt;&lt;x10/&gt;&lt;x8/&gt;&lt;x10/&gt;は、配列に適用されます。)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>(Given &lt;x8/&gt;r::Iterators.Reverse{T}&lt;x9/&gt;, the underling iterator of type &lt;x10/&gt;T&lt;x11/&gt; is &lt;x12/&gt;r.itr&lt;x13/&gt;.)
In our &lt;x14/&gt;Squares&lt;x15/&gt; example, we would implement &lt;x16/&gt;Iterators.Reverse{Squares}&lt;x17/&gt; methods:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T112931Z" creationid="hsugawa8651" creationdate="20181112T112931Z">
        <seg>(&lt;x8/&gt;r::Iterator.Reverse{T}&lt;x9/&gt;,the undering iterator of type&lt;x10/&gt;T&lt;x11/&gt;)は、&lt;x12/&gt;r.itr&lt;x13/&gt;である。 &lt;x14/&gt;Squares&lt;x15/&gt;の例では、&lt;x16/&gt;イテレータを実装します。逆{Squares}&lt;x17/&gt;メソッド:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>(If the
wrapper was calling a Fortran function instead, the corresponding function input
signature should instead be &lt;x9/&gt;(Ref{Csize_t},)&lt;x10/&gt;, since Fortran variables are
passed by pointers.) Furthermore, &lt;x11/&gt;n&lt;x12/&gt; can be any type that is convertible to a
&lt;x13/&gt;Csize_t&lt;x14/&gt; integer; the &lt;x15/&gt;`ccall`&lt;x16/&gt; implicitly calls &lt;x17/&gt;`Base.cconvert(Csize_t,
n)`&lt;x18/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T152055Z" creationid="hsugawa8651" creationdate="20181117T152055Z">
        <seg>( ラッパーは、代わりにFortran関数を呼び出し、対応する関数入力を呼び出しました。 Fortranの変数は次のようなものであるため、署名は&lt;x9/&gt;(Ref{Csize_t},)&lt;x10/&gt;でなければなりません。 ポインタによって渡される)。また、&lt;x11/&gt;n&lt;x12/&gt;は、変換可能な任意のタイプであることができます。 &lt;x13/&gt;Csize_t&lt;x14/&gt;integer;&lt;x15/&gt;`ccall`&lt;x16/&gt;は暗黙的に&lt;x17/&gt;`Base.チコンベルト(Csize_t n)`&lt;x18/&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>(Julia values &lt;x13/&gt;v&lt;x14/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T152549Z" creationid="hsugawa8651" creationdate="20181117T152549Z">
        <seg>(Julia values &lt;x13/&gt;v&lt;x14/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>(Non-library function calls in both C and Julia can
be inlined and thus may have even less overhead than calls to shared library functions.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T160555Z" creationid="hsugawa8651" creationdate="20181109T160555Z">
        <seg>(CとJuliaの両方での非ライブラリ関数呼び出しは 共有ライブラリ関数への呼び出しよりも、インライン化されているため、オーバーヘッドが少なくて済みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>(The &lt;x1/&gt;Clang package&lt;x2/&gt; can be used to auto-generate
Julia code from a C header file.)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T150555Z" creationid="hsugawa8651" creationdate="20181117T150555Z">
        <seg>(&lt;x1/&gt;Clangパッケージ&lt;x2/&gt;は自動生成のために使用できます。 Cヘッダー・ファイルからのJuliaコード。)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>(The above expression uses several features that have yet to be introduced, including &lt;a4&gt;for loops&lt;/a4&gt;, &lt;a5&gt;Strings&lt;/a5&gt;, and &lt;a6&gt;Interpolation&lt;/a6&gt;, but should be easy enough to understand for users with some existing programming experience.)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T185709Z" creationid="hsugawa8651" creationdate="20181118T185709Z">
        <seg>(上記の式では、&lt;x5/&gt;&lt;x6/&gt;&lt;x7/&gt;(@ref man loops)など、まだ導入されていないいくつかの機能を使用しています。 &lt;x8/&gt;&lt;x9/&gt;&lt;x10/&gt;(@ref man-strings)、&lt;x11/&gt;補間&lt;x12/&gt;は、ユーザが理解するのに十分な大きさである必要があります。 既存のプログラミング経験があります)。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>(The above expression uses several features that have yet to be introduced, including &lt;x5/&gt;&lt;x6/&gt;&lt;x7/&gt;(@ref man-loops),
&lt;x8/&gt;&lt;x9/&gt;&lt;x10/&gt;(@ref man-strings), and &lt;x11/&gt;Interpolation&lt;x12/&gt;, but should be easy enough to understand for users
with some existing programming experience.)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T122539Z" creationid="hsugawa8651" creationdate="20181109T225610Z">
        <seg>(上記の式では、&lt;x5/&gt;&lt;x6/&gt;&lt;x7/&gt;(@ref man loops)など、まだ導入されていないいくつかの機能を使用しています。 &lt;x8/&gt;&lt;x9/&gt;&lt;x10/&gt;(@ref man-strings)、&lt;x11/&gt;補間&lt;x12/&gt;は、ユーザが理解するのに十分な大きさである必要があります。 既存のプログラミング経験があります)。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>(The above expression uses several features we have yet to introduce, including &lt;x5/&gt;&lt;x6/&gt;&lt;x7/&gt;(@ref man-loops),
&lt;x8/&gt;&lt;x9/&gt;&lt;x10/&gt;(@ref man-strings), and &lt;x11/&gt;Interpolation&lt;x12/&gt;, but should be easy enough to understand for users
with some existing programming experience.)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T033127Z" creationid="hsugawa8651" creationdate="20181119T235141Z">
        <seg>（上記の式は、まだ紹介されていない for loops&lt;x5/&gt;&lt;x6/&gt;&lt;x7/&gt;(@ref man-loops),、Strings&lt;x8/&gt;&lt;x9/&gt;&lt;x10/&gt;(@ref man-strings)、&lt;x11/&gt;Interpolation&lt;x12/&gt; などの機能が含まれていますが、プログラミング経験者にとっては難しいものではないはずです。）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>(The exceptions are
operators with special evaluation semantics like &lt;x1/&gt;&amp;&amp;&lt;x2/&gt; and &lt;x3/&gt;||&lt;x4/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T130032Z" creationid="hsugawa8651" creationdate="20181120T130032Z">
        <seg>( （例外は評価戦略が特殊な演算子で、&lt;x1/&gt;&amp;&amp;&lt;x2/&gt;や&lt;x3/&gt;||&lt;x4/&gt;などがあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>(This allows for coexistence with other tools that might consider files called &lt;x13/&gt;Project.toml&lt;x14/&gt; and &lt;x15/&gt;Manifest.toml&lt;x16/&gt; significant.) For pure Julia projects, however, the names &lt;x17/&gt;Project.toml&lt;x18/&gt; and &lt;x19/&gt;Manifest.toml&lt;x20/&gt; are preferred.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T121055Z" creationid="hsugawa8651" creationdate="20181118T121055Z">
        <seg>(これにより、&lt;x13/&gt;Project.Schedule&lt;x14/&gt;と&lt;x15/&gt;Manifest.Menu&lt;x16/&gt;Significant.Menu&lt;x16/&gt;のような他のツールとの共存が可能になります。ただし、純粋なJuliaプロジェクトでは、&lt;x17/&gt;Project.トミル&lt;x18/&gt;と&lt;x19/&gt;Manifest.トミル&lt;x20/&gt;は推奨されます。トミルトミル。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>(Using mathematicians' &lt;x5/&gt;i&lt;x6/&gt; or engineers' &lt;x7/&gt;j&lt;x8/&gt; for this global constant were rejected since they are such popular index variable names.) Since Julia allows numeric literals to be &lt;x9/&gt;&lt;x10/&gt;&lt;x11/&gt;(@ref man-numeric-literal-coefficients),
this binding suffices to provide convenient syntax for complex numbers, similar to the traditional
mathematical notation:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T123035Z" creationid="hsugawa8651" creationdate="20181118T123035Z">
        <seg>(このグローバル定数に対して数学者の&lt;x5/&gt;i&lt;x6/&gt;を使用するか、あるいはエンジニアの&lt;x7/&gt;j&lt;x8/&gt;を使用することは拒否されました。なぜなら、Juliaは数値リテラルが&lt;x9/&gt;&lt;x10/&gt;&lt;x11/&gt;(@ref manの数値リテラル係数)であるためです。 この結合は、従来のものと同様に、複素数に対して便利な構文を提供するのに十分である。 数学的表記法:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>(generic function with 1 method)

julia&gt; change_array!(x)
5

julia&gt; x
3-element Array{Int64,1}:
 5
 2
 3</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181110T025053Z" creationid="hsugawa8651" creationdate="20181110T025053Z">
        <seg>(generic function with 1 method)

julia&gt; change_array!(x)
5

julia&gt; x
3-element Array{Int64,1}:
 5
 2
 3</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>(generic function with 1 method)

julia&gt; change_value!(x)
17

julia&gt; x &lt;x1/&gt; x is unchanged!</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181110T025006Z" creationid="hsugawa8651" creationdate="20181110T025006Z">
        <seg>(generic function with 1 method)

julia&gt; change_value!(x)
17

julia&gt; x &lt;x1/&gt; x is unchanged!</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>(if &lt;x1/&gt;IndexCartesian&lt;x2/&gt;, where &lt;x3/&gt;N = ndims(A)&lt;x4/&gt;) N-dimensional scalar indexed assignment</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T164734Z" creationid="hsugawa8651" creationdate="20181118T164734Z">
        <seg>(もし&lt;x1/&gt;IndexCartesian&lt;x2/&gt;であって、&lt;x3/&gt;N=ンダムス(A)&lt;x4/&gt;)N次元スカラーインデックス割り当て</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>(if &lt;x1/&gt;IndexCartesian&lt;x2/&gt;, where &lt;x3/&gt;N = ndims(A)&lt;x4/&gt;) N-dimensional scalar indexing</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T094445Z" creationid="hsugawa8651" creationdate="20181118T094445Z">
        <seg>(もし&lt;x1/&gt;IndexCartesian&lt;x2/&gt;である場合&lt;x3/&gt;N = ndims(A)&lt;x4/&gt;)N-次元スカラーインデックス</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>(if &lt;x1/&gt;IndexLinear&lt;x2/&gt;) Linear scalar indexing</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T164724Z" creationid="hsugawa8651" creationdate="20181118T164724Z">
        <seg>(&lt;x1/&gt;IndexLinear&lt;x2/&gt;)線形スカラーのインデックス作成</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>(if &lt;x1/&gt;IndexLinear&lt;x2/&gt;) Scalar indexed assignment</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T164731Z" creationid="hsugawa8651" creationdate="20181118T164731Z">
        <seg>(&lt;x1/&gt;IndexLinear&lt;x2/&gt;)スカラーのインデックス割り当て</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>(to view the structure of this expression, try &lt;x1/&gt;ex.head&lt;x2/&gt; and &lt;x3/&gt;ex.args&lt;x4/&gt;, or use &lt;x5/&gt;`dump`&lt;x6/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T115345Z" creationid="hsugawa8651" creationdate="20181118T115345Z">
        <seg>(この式の構造を表示するには、&lt;x1/&gt;ex.head&lt;x2/&gt;と&lt;x3/&gt;ex.args&lt;x4/&gt;を使用するか、&lt;x5/&gt;`dump'&lt;x6/&gt;を使用してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>(y, x) : (x, y)

julia&gt; range((min, max)) = max - min

julia&gt; range(minmax(10, 2))
8</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181110T030043Z" creationid="hsugawa8651" creationdate="20181110T030043Z">
        <seg>(y, x) : (x, y)

julia&gt; range((min, max)) = max - min

julia&gt; range(minmax(10, 2))
8</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>).</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T124405Z" creationid="hsugawa8651" creationdate="20181118T124405Z">
        <seg>).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* / % &amp; \ ÷&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T030836Z" creationid="hsugawa8651" creationdate="20181114T030836Z">
        <seg>* / % &amp; \ ÷&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* / % &amp; \&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T065708Z" creationid="hsugawa8651" creationdate="20181120T065708Z">
        <seg>* / % &amp; \&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>*&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T032336Z" creationid="hsugawa8651" creationdate="20181114T032336Z">
        <seg>*&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>*&lt;x1/&gt; typically denotes a &lt;x2/&gt;noncommutative&lt;x3/&gt; operation, where the
order of the operands &lt;x4/&gt;does&lt;x5/&gt; matter.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T082416Z" creationid="hsugawa8651" creationdate="20181120T082357Z">
        <seg>これに対して *&lt;x1/&gt;  はよく &lt;x2/&gt;noncommutative&lt;x3/&gt;非可換 演算（被演算子の順番が関係 ある 演算）を表します。&lt;x4/&gt;does&lt;x5/&gt; </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>+ - \| ⊻&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T030842Z" creationid="hsugawa8651" creationdate="20181114T030842Z">
        <seg>+ - \| ⊻&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>+ - √&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T165006Z" creationid="hsugawa8651" creationdate="20181118T165006Z">
        <seg>+ - √&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>+ x&lt;x4/&gt; or &lt;x5/&gt;1 .+ x&lt;x6/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T132647Z" creationid="hsugawa8651" creationdate="20181113T132647Z">
        <seg>+ x&lt;x4/&gt; or &lt;x5/&gt;1 .+ x&lt;x6/&gt;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>+(a, b) = +(promote(a, b)...)
&lt;x4/&gt; Once the elements have the same type, they can be added.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T054210Z" creationid="hsugawa8651" creationdate="20181116T054210Z">
        <seg>+(a, b) = +(promote(a, b)...)
&lt;x4/&gt; Once the elements have the same type, they can be added.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>+(a::Float64, b::Float64) = Core.add(a, b)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T054218Z" creationid="hsugawa8651" creationdate="20181116T054218Z">
        <seg>+(a::Float64, b::Float64) = Core.add(a, b)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>+(a::Matrix, b::Matrix) = map(+, a, b)
&lt;x2/&gt; Then dispatch handles each element and selects the appropriate
&lt;x3/&gt; common element type for the computation.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T054205Z" creationid="hsugawa8651" creationdate="20181116T054205Z">
        <seg>+(a::Matrix, b::Matrix) = map(+, a, b)
&lt;x2/&gt; Then dispatch handles each element and selects the appropriate
&lt;x3/&gt; common element type for the computation.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>+1 : 0)
       end
mycompare (generic function with 1 method)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T022650Z" creationid="hsugawa8651" creationdate="20181116T022650Z">
        <seg>+1 : 0)
       end
mycompare (generic function with 1 method)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>+=  -=  *=  /=  \=  ÷=  %=  ^=  &amp;=  |=  ⊻=  &gt;&gt;&gt;=  &gt;&gt;=  &lt;&lt;=</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T132406Z" creationid="hsugawa8651" creationdate="20181113T132406Z">
        <seg>+=  -=  *=  /=  \=  ÷=  %=  ^=  &amp;=  |=  ⊻=  &gt;&gt;&gt;=  &gt;&gt;=  &lt;&lt;=</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>+x&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T131941Z" creationid="hsugawa8651" creationdate="20181113T131941Z">
        <seg>+x&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>,&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T063157Z" creationid="hsugawa8651" creationdate="20181114T063157Z">
        <seg>,&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>-(A::AbstractArray{T}, b::Date) where {T&lt;:Date}</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T054448Z" creationid="hsugawa8651" creationdate="20181116T054448Z">
        <seg>-(A::AbstractArray{T}, b::Date) where {T&lt;:Date}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>-(A::MyArrayType{T}, b::T) where {T}</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T054450Z" creationid="hsugawa8651" creationdate="20181116T054450Z">
        <seg>-(A::MyArrayType{T}, b::T) where {T}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>--banner={yes\|no\|auto}&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T031804Z" creationid="hsugawa8651" creationdate="20181114T031804Z">
        <seg>--banner={yes\|no\|auto}&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>--check-bounds={yes\|no}&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T031833Z" creationid="hsugawa8651" creationdate="20181114T031833Z">
        <seg>--check-bounds={yes\|no}&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>--code-coverage&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T031909Z" creationid="hsugawa8651" creationdate="20181114T031909Z">
        <seg>--code-coverage&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>--code-coverage={none\|user\|all}&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T031849Z" creationid="hsugawa8651" creationdate="20181114T031849Z">
        <seg>--code-coverage={none\|user\|all}&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>--color={yes\|no\|auto}&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T031808Z" creationid="hsugawa8651" creationdate="20181114T031808Z">
        <seg>--color={yes\|no\|auto}&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>--compiled-modules={yes\|no}&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T031709Z" creationid="hsugawa8651" creationdate="20181114T031709Z">
        <seg>--compiled-modules={yes\|no}&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>--depwarn={yes\|no\|error}&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T031816Z" creationid="hsugawa8651" creationdate="20181114T031816Z">
        <seg>--depwarn={yes\|no\|error}&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>--handle-signals={yes\|no}&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T031655Z" creationid="hsugawa8651" creationdate="20181114T031655Z">
        <seg>--handle-signals={yes\|no}&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>--history-file={yes\|no}&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T031812Z" creationid="hsugawa8651" creationdate="20181114T031812Z">
        <seg>--history-file={yes\|no}&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>--inline={yes\|no}&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T031830Z" creationid="hsugawa8651" creationdate="20181114T031830Z">
        <seg>--inline={yes\|no}&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>--machine-file &lt;x1/&gt;&lt;x2/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T031749Z" creationid="hsugawa8651" creationdate="20181114T031749Z">
        <seg>--machine-file &lt;x1/&gt;&lt;x2/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>--math-mode={ieee,fast}&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T120237Z" creationid="hsugawa8651" creationdate="20181118T120237Z">
        <seg>--math-mode={ieee,fast}&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>--project[={&lt;x1/&gt;\|@.}]&lt;x2/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T031505Z" creationid="hsugawa8651" creationdate="20181114T031505Z">
        <seg>--project[={&lt;x1/&gt;\|@.}]&lt;x2/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>--startup-file={yes\|no}&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T031700Z" creationid="hsugawa8651" creationdate="20181114T031700Z">
        <seg>--startup-file={yes\|no}&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>--sysimage-native-code={yes\|no}&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T031705Z" creationid="hsugawa8651" creationdate="20181114T031705Z">
        <seg>--sysimage-native-code={yes\|no}&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>--track-allocation&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T031912Z" creationid="hsugawa8651" creationdate="20181114T031912Z">
        <seg>--track-allocation&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>--track-allocation={none\|user\|all}&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T031905Z" creationid="hsugawa8651" creationdate="20181114T031905Z">
        <seg>--track-allocation={none\|user\|all}&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>--warn-overwrite={yes\|no}&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T031819Z" creationid="hsugawa8651" creationdate="20181114T031819Z">
        <seg>--warn-overwrite={yes\|no}&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>-1 : ((a &gt; b) ?</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T022645Z" creationid="hsugawa8651" creationdate="20181116T022645Z">
        <seg>-1 : ((a &gt; b) ?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>-2^127</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T110210Z" creationid="hsugawa8651" creationdate="20181112T110210Z">
        <seg>-2^127</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>-2^15</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T110132Z" creationid="hsugawa8651" creationdate="20181112T110132Z">
        <seg>-2^15</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>-2^31</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T110150Z" creationid="hsugawa8651" creationdate="20181112T110150Z">
        <seg>-2^31</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>-2^63</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T110200Z" creationid="hsugawa8651" creationdate="20181112T110200Z">
        <seg>-2^63</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>-2^7</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T110121Z" creationid="hsugawa8651" creationdate="20181112T110121Z">
        <seg>-2^7</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>-C&lt;x1/&gt;, &lt;x2/&gt;--cpu-target &lt;x3/&gt;&lt;x4/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T031822Z" creationid="hsugawa8651" creationdate="20181114T031822Z">
        <seg>-C&lt;x1/&gt;, &lt;x2/&gt;--cpu-target &lt;x3/&gt;&lt;x4/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>-E&lt;x1/&gt;, &lt;x2/&gt;--print &lt;x3/&gt;&lt;x4/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T031738Z" creationid="hsugawa8651" creationdate="20181114T031738Z">
        <seg>-E&lt;x1/&gt;, &lt;x2/&gt;--print &lt;x3/&gt;&lt;x4/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>-H&lt;x1/&gt;, &lt;x2/&gt;--home &lt;x3/&gt;&lt;x4/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T031548Z" creationid="hsugawa8651" creationdate="20181114T031548Z">
        <seg>-H&lt;x1/&gt;, &lt;x2/&gt;--home &lt;x3/&gt;&lt;x4/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>-Inf16&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T110818Z" creationid="hsugawa8651" creationdate="20181112T110818Z">
        <seg>-Inf16&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>-Inf32&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T110819Z" creationid="hsugawa8651" creationdate="20181112T110819Z">
        <seg>-Inf32&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>-Inf&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T110820Z" creationid="hsugawa8651" creationdate="20181112T110820Z">
        <seg>-Inf&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>-Inf&lt;x1/&gt; is equal to itself and less then everything else except &lt;x2/&gt;NaN&lt;x3/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T064343Z" creationid="hsugawa8651" creationdate="20181114T030505Z">
        <seg> -Inf &lt;x1/&gt;はそれ自体と等しく、 &lt;x2/&gt;NaN&lt;x3/&gt; を除く全てよりも小さいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>-J&lt;x1/&gt;, &lt;x2/&gt;--sysimage &lt;x3/&gt;&lt;x4/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T031542Z" creationid="hsugawa8651" creationdate="20181114T031542Z">
        <seg>-J&lt;x1/&gt;, &lt;x2/&gt;--sysimage &lt;x3/&gt;&lt;x4/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>-L&lt;x1/&gt;, &lt;x2/&gt;--load &lt;x3/&gt;&lt;x4/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T031733Z" creationid="hsugawa8651" creationdate="20181114T031733Z">
        <seg>-L&lt;x1/&gt;, &lt;x2/&gt;--load &lt;x3/&gt;&lt;x4/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>-O&lt;x1/&gt;, &lt;x2/&gt;--optimize={0,1,2,3}&lt;x3/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T031825Z" creationid="hsugawa8651" creationdate="20181114T031825Z">
        <seg>-O&lt;x1/&gt;, &lt;x2/&gt;--optimize={0,1,2,3}&lt;x3/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>-e&lt;x1/&gt;, &lt;x2/&gt;--eval &lt;x3/&gt;&lt;x4/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T031712Z" creationid="hsugawa8651" creationdate="20181114T031712Z">
        <seg>-e&lt;x1/&gt;, &lt;x2/&gt;--eval &lt;x3/&gt;&lt;x4/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>-g&lt;x1/&gt;, &lt;x2/&gt;-g &lt;x3/&gt;&lt;x4/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T031827Z" creationid="hsugawa8651" creationdate="20181114T031827Z">
        <seg>-g&lt;x1/&gt;, &lt;x2/&gt;-g &lt;x3/&gt;&lt;x4/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>-h&lt;x1/&gt;, &lt;x2/&gt;--help&lt;x3/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T031510Z" creationid="hsugawa8651" creationdate="20181114T031510Z">
        <seg>-h&lt;x1/&gt;, &lt;x2/&gt;--help&lt;x3/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>-i&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T031753Z" creationid="hsugawa8651" creationdate="20181114T031753Z">
        <seg>-i&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>-p&lt;x1/&gt;, &lt;x2/&gt;--procs {N\|auto&lt;x3/&gt;}</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T031745Z" creationid="hsugawa8651" creationdate="20181114T031745Z">
        <seg>-p&lt;x1/&gt;, &lt;x2/&gt;--procs {N\|auto&lt;x3/&gt;}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>-q&lt;x1/&gt;, &lt;x2/&gt;--quiet&lt;x3/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T031758Z" creationid="hsugawa8651" creationdate="20181114T031758Z">
        <seg>-q&lt;x1/&gt;, &lt;x2/&gt;--quiet&lt;x3/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>-v&lt;x1/&gt;, &lt;x2/&gt;--version&lt;x3/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T224601Z" creationid="hsugawa8651" creationdate="20181109T224549Z">
        <seg>-v&lt;x1/&gt;, &lt;x2/&gt;--version&lt;x3/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>-x&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T131953Z" creationid="hsugawa8651" creationdate="20181113T131953Z">
        <seg>-x&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>...</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T224510Z" creationid="hsugawa8651" creationdate="20181109T224510Z">
        <seg>...</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>...&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T063526Z" creationid="hsugawa8651" creationdate="20181114T063526Z">
        <seg>...&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>...&lt;x1/&gt; (e.g. a vararg)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T151603Z" creationid="hsugawa8651" creationdate="20181117T151603Z">
        <seg>...&lt;x1/&gt; (e.g. a vararg)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>../../</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T003056Z" creationid="hsugawa8651" creationdate="20181119T003056Z">
        <seg>../../</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>../../assets/documenter.css</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T003034Z" creationid="hsugawa8651" creationdate="20181119T003034Z">
        <seg>../../assets/documenter.css</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>../../assets/julia-manual.css</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T003035Z" creationid="hsugawa8651" creationdate="20181119T003035Z">
        <seg>../../assets/julia-manual.css</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>../../assets/logo.png</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T003038Z" creationid="hsugawa8651" creationdate="20181119T003038Z">
        <seg>../../assets/logo.png</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>../../devdocs/ast/</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T192049Z" creationid="hsugawa8651" creationdate="20181118T192049Z">
        <seg>../../devdocs/ast/</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>../../devdocs/backtraces/</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T192125Z" creationid="hsugawa8651" creationdate="20181118T192125Z">
        <seg>../../devdocs/backtraces/</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>../../devdocs/boundscheck/</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T192117Z" creationid="hsugawa8651" creationdate="20181118T192117Z">
        <seg>../../devdocs/boundscheck/</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>../../devdocs/callconv/</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T192058Z" creationid="hsugawa8651" creationdate="20181118T192058Z">
        <seg>../../devdocs/callconv/</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>../../devdocs/cartesian/</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T192103Z" creationid="hsugawa8651" creationdate="20181118T192103Z">
        <seg>../../devdocs/cartesian/</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>../../devdocs/compiler/</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T192100Z" creationid="hsugawa8651" creationdate="20181118T192100Z">
        <seg>../../devdocs/compiler/</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>../../devdocs/debuggingtips/</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T192127Z" creationid="hsugawa8651" creationdate="20181118T192127Z">
        <seg>../../devdocs/debuggingtips/</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>../../devdocs/eval/</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T192056Z" creationid="hsugawa8651" creationdate="20181118T192056Z">
        <seg>../../devdocs/eval/</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>../../devdocs/functions/</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T192102Z" creationid="hsugawa8651" creationdate="20181118T192102Z">
        <seg>../../devdocs/functions/</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>../../devdocs/gc-sa/</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T130750Z" creationid="hsugawa8651" creationdate="20181119T130750Z">
        <seg>../../devdocs/gc-sa/</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>../../devdocs/inference/</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T192123Z" creationid="hsugawa8651" creationdate="20181118T192123Z">
        <seg>../../devdocs/inference/</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>../../devdocs/init/</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T192046Z" creationid="hsugawa8651" creationdate="20181118T192046Z">
        <seg>../../devdocs/init/</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>../../devdocs/isbitsunionarrays/</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T192109Z" creationid="hsugawa8651" creationdate="20181118T192109Z">
        <seg>../../devdocs/isbitsunionarrays/</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>../../devdocs/llvm/</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T192113Z" creationid="hsugawa8651" creationdate="20181118T192113Z">
        <seg>../../devdocs/llvm/</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>../../devdocs/locks/</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T192118Z" creationid="hsugawa8651" creationdate="20181118T192118Z">
        <seg>../../devdocs/locks/</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>../../devdocs/meta/</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T192105Z" creationid="hsugawa8651" creationdate="20181118T192105Z">
        <seg>../../devdocs/meta/</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>../../devdocs/object/</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T192054Z" creationid="hsugawa8651" creationdate="20181118T192054Z">
        <seg>../../devdocs/object/</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>../../devdocs/offset-arrays/</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T192120Z" creationid="hsugawa8651" creationdate="20181118T192120Z">
        <seg>../../devdocs/offset-arrays/</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>../../devdocs/offset-arrays/#man-custom-indices-1</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131723Z" creationid="hsugawa8651" creationdate="20181119T131723Z">
        <seg>../../devdocs/offset-arrays/#man-custom-indices-1</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>../../devdocs/reflection/</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T192043Z" creationid="hsugawa8651" creationdate="20181118T192043Z">
        <seg>../../devdocs/reflection/</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>../../devdocs/require/</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T192122Z" creationid="hsugawa8651" creationdate="20181118T192122Z">
        <seg>../../devdocs/require/</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>../../devdocs/sanitizers/</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T192130Z" creationid="hsugawa8651" creationdate="20181118T192130Z">
        <seg>../../devdocs/sanitizers/</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>../../devdocs/ssair/</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T130743Z" creationid="hsugawa8651" creationdate="20181119T130743Z">
        <seg>../../devdocs/ssair/</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>../../devdocs/stdio/</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T192115Z" creationid="hsugawa8651" creationdate="20181118T192115Z">
        <seg>../../devdocs/stdio/</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>../../devdocs/subarrays/</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T192107Z" creationid="hsugawa8651" creationdate="20181118T192107Z">
        <seg>../../devdocs/subarrays/</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>../../devdocs/sysimg/</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T192111Z" creationid="hsugawa8651" creationdate="20181118T192111Z">
        <seg>../../devdocs/sysimg/</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>../../devdocs/types/</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T192051Z" creationid="hsugawa8651" creationdate="20181118T192051Z">
        <seg>../../devdocs/types/</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>../../devdocs/valgrind/</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T192129Z" creationid="hsugawa8651" creationdate="20181118T192129Z">
        <seg>../../devdocs/valgrind/</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>../../index.html</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T003036Z" creationid="hsugawa8651" creationdate="20181119T003036Z">
        <seg>../../index.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>../../manual/arrays/</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T191817Z" creationid="hsugawa8651" creationdate="20181118T191817Z">
        <seg>../../manual/arrays/</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>../../manual/calling-c-and-fortran-code/</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T191830Z" creationid="hsugawa8651" creationdate="20181118T191830Z">
        <seg>../../manual/calling-c-and-fortran-code/</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>../../manual/code-loading/</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T191839Z" creationid="hsugawa8651" creationdate="20181118T191839Z">
        <seg>../../manual/code-loading/</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>../../manual/complex-and-rational-numbers/</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T003113Z" creationid="hsugawa8651" creationdate="20181119T003113Z">
        <seg>../../manual/complex-and-rational-numbers/</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>../../manual/constructors/</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T003127Z" creationid="hsugawa8651" creationdate="20181119T003127Z">
        <seg>../../manual/constructors/</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>../../manual/control-flow/</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T003119Z" creationid="hsugawa8651" creationdate="20181119T003119Z">
        <seg>../../manual/control-flow/</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>../../manual/conversion-and-promotion/</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T003129Z" creationid="hsugawa8651" creationdate="20181119T003129Z">
        <seg>../../manual/conversion-and-promotion/</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>../../manual/documentation/</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T003135Z" creationid="hsugawa8651" creationdate="20181119T003135Z">
        <seg>../../manual/documentation/</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>../../manual/embedding/</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T191837Z" creationid="hsugawa8651" creationdate="20181118T191837Z">
        <seg>../../manual/embedding/</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>../../manual/environment-variables/</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T191834Z" creationid="hsugawa8651" creationdate="20181118T191834Z">
        <seg>../../manual/environment-variables/</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>../../manual/faq/</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T191855Z" creationid="hsugawa8651" creationdate="20181118T191855Z">
        <seg>../../manual/faq/</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>../../manual/functions/</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T003117Z" creationid="hsugawa8651" creationdate="20181119T003117Z">
        <seg>../../manual/functions/</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>../../manual/functions/#man-vectorized-1</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131932Z" creationid="hsugawa8651" creationdate="20181119T131932Z">
        <seg>../../manual/functions/#man-vectorized-1</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>../../manual/getting-started/</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T003100Z" creationid="hsugawa8651" creationdate="20181119T003100Z">
        <seg>../../manual/getting-started/</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>../../manual/handling-operating-system-variation/</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T191832Z" creationid="hsugawa8651" creationdate="20181118T191832Z">
        <seg>../../manual/handling-operating-system-variation/</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>../../manual/integers-and-floating-point-numbers/</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T003108Z" creationid="hsugawa8651" creationdate="20181119T003108Z">
        <seg>../../manual/integers-and-floating-point-numbers/</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>../../manual/interfaces/</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T003131Z" creationid="hsugawa8651" creationdate="20181119T003131Z">
        <seg>../../manual/interfaces/</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>../../manual/interfaces/#man-interface-array-1</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T130925Z" creationid="hsugawa8651" creationdate="20181119T130925Z">
        <seg>../../manual/interfaces/#man-interface-array-1</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>../../manual/interfaces/#man-interface-strided-arrays-1</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131355Z" creationid="hsugawa8651" creationdate="20181119T131355Z">
        <seg>../../manual/interfaces/#man-interface-strided-arrays-1</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>../../manual/mathematical-operations/</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T003111Z" creationid="hsugawa8651" creationdate="20181119T003111Z">
        <seg>../../manual/mathematical-operations/</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>../../manual/metaprogramming/</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T191809Z" creationid="hsugawa8651" creationdate="20181118T191757Z">
        <seg>../../manual/metaprogramming/</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>../../manual/methods/</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T003125Z" creationid="hsugawa8651" creationdate="20181119T003125Z">
        <seg>../../manual/methods/</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>../../manual/missing/</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T191820Z" creationid="hsugawa8651" creationdate="20181118T191820Z">
        <seg>../../manual/missing/</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>../../manual/modules/</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T003133Z" creationid="hsugawa8651" creationdate="20181119T003133Z">
        <seg>../../manual/modules/</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>../../manual/networking-and-streams/</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T191822Z" creationid="hsugawa8651" creationdate="20181118T191822Z">
        <seg>../../manual/networking-and-streams/</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>../../manual/noteworthy-differences/</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T191858Z" creationid="hsugawa8651" creationdate="20181118T191858Z">
        <seg>../../manual/noteworthy-differences/</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>../../manual/parallel-computing/</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T191825Z" creationid="hsugawa8651" creationdate="20181118T191825Z">
        <seg>../../manual/parallel-computing/</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>../../manual/performance-tips/</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T191847Z" creationid="hsugawa8651" creationdate="20181118T191847Z">
        <seg>../../manual/performance-tips/</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>../../manual/profile/</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T191842Z" creationid="hsugawa8651" creationdate="20181118T191842Z">
        <seg>../../manual/profile/</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>../../manual/running-external-programs/</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T191827Z" creationid="hsugawa8651" creationdate="20181118T191827Z">
        <seg>../../manual/running-external-programs/</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>../../manual/stacktraces/</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T191844Z" creationid="hsugawa8651" creationdate="20181118T191844Z">
        <seg>../../manual/stacktraces/</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>../../manual/strings/</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T003115Z" creationid="hsugawa8651" creationdate="20181119T003115Z">
        <seg>../../manual/strings/</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>../../manual/style-guide/</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T191852Z" creationid="hsugawa8651" creationdate="20181118T191852Z">
        <seg>../../manual/style-guide/</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>../../manual/types/</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T003122Z" creationid="hsugawa8651" creationdate="20181119T003122Z">
        <seg>../../manual/types/</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>../../manual/unicode-input/</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T191900Z" creationid="hsugawa8651" creationdate="20181118T191900Z">
        <seg>../../manual/unicode-input/</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>../../manual/variables-and-scoping/</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T003121Z" creationid="hsugawa8651" creationdate="20181119T003121Z">
        <seg>../../manual/variables-and-scoping/</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>../../manual/variables/</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T003105Z" creationid="hsugawa8651" creationdate="20181119T003105Z">
        <seg>../../manual/variables/</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>../../manual/workflow-tips/</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T191849Z" creationid="hsugawa8651" creationdate="20181118T191849Z">
        <seg>../../manual/workflow-tips/</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>../../stdlib/Base64/</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T191940Z" creationid="hsugawa8651" creationdate="20181118T191940Z">
        <seg>../../stdlib/Base64/</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>../../stdlib/CRC32c/</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T191942Z" creationid="hsugawa8651" creationdate="20181118T191942Z">
        <seg>../../stdlib/CRC32c/</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>../../stdlib/Dates/</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T191947Z" creationid="hsugawa8651" creationdate="20181118T191947Z">
        <seg>../../stdlib/Dates/</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>../../stdlib/DelimitedFiles/</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T191949Z" creationid="hsugawa8651" creationdate="20181118T191949Z">
        <seg>../../stdlib/DelimitedFiles/</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>../../stdlib/Distributed/</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T191952Z" creationid="hsugawa8651" creationdate="20181118T191952Z">
        <seg>../../stdlib/Distributed/</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>../../stdlib/FileWatching/</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T191953Z" creationid="hsugawa8651" creationdate="20181118T191953Z">
        <seg>../../stdlib/FileWatching/</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>../../stdlib/InteractiveUtils/</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T191955Z" creationid="hsugawa8651" creationdate="20181118T191955Z">
        <seg>../../stdlib/InteractiveUtils/</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>../../stdlib/LibGit2/</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T191957Z" creationid="hsugawa8651" creationdate="20181118T191957Z">
        <seg>../../stdlib/LibGit2/</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>../../stdlib/Libdl/</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T191959Z" creationid="hsugawa8651" creationdate="20181118T191959Z">
        <seg>../../stdlib/Libdl/</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>../../stdlib/LinearAlgebra/</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T192001Z" creationid="hsugawa8651" creationdate="20181118T192001Z">
        <seg>../../stdlib/LinearAlgebra/</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>../../stdlib/Logging/</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T192004Z" creationid="hsugawa8651" creationdate="20181118T192004Z">
        <seg>../../stdlib/Logging/</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>../../stdlib/Markdown/</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T192005Z" creationid="hsugawa8651" creationdate="20181118T192005Z">
        <seg>../../stdlib/Markdown/</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>../../stdlib/Mmap/</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T192007Z" creationid="hsugawa8651" creationdate="20181118T192007Z">
        <seg>../../stdlib/Mmap/</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>../../stdlib/Pkg/</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T192009Z" creationid="hsugawa8651" creationdate="20181118T192009Z">
        <seg>../../stdlib/Pkg/</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>../../stdlib/Printf/</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T192011Z" creationid="hsugawa8651" creationdate="20181118T192011Z">
        <seg>../../stdlib/Printf/</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>../../stdlib/Profile/</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T192013Z" creationid="hsugawa8651" creationdate="20181118T192013Z">
        <seg>../../stdlib/Profile/</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>../../stdlib/REPL/</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T192015Z" creationid="hsugawa8651" creationdate="20181118T192015Z">
        <seg>../../stdlib/REPL/</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>../../stdlib/Random/</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T192017Z" creationid="hsugawa8651" creationdate="20181118T192017Z">
        <seg>../../stdlib/Random/</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>../../stdlib/SHA/</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T192019Z" creationid="hsugawa8651" creationdate="20181118T192019Z">
        <seg>../../stdlib/SHA/</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>../../stdlib/Serialization/</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T192021Z" creationid="hsugawa8651" creationdate="20181118T192021Z">
        <seg>../../stdlib/Serialization/</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>../../stdlib/SharedArrays/</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T192023Z" creationid="hsugawa8651" creationdate="20181118T192023Z">
        <seg>../../stdlib/SharedArrays/</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>../../stdlib/Sockets/</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T192025Z" creationid="hsugawa8651" creationdate="20181118T192025Z">
        <seg>../../stdlib/Sockets/</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>../../stdlib/SparseArrays/</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T192026Z" creationid="hsugawa8651" creationdate="20181118T192026Z">
        <seg>../../stdlib/SparseArrays/</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>../../stdlib/Statistics/</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T192029Z" creationid="hsugawa8651" creationdate="20181118T192029Z">
        <seg>../../stdlib/Statistics/</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>../../stdlib/Test/</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T192036Z" creationid="hsugawa8651" creationdate="20181118T192036Z">
        <seg>../../stdlib/Test/</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>../../stdlib/UUIDs/</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T192038Z" creationid="hsugawa8651" creationdate="20181118T192038Z">
        <seg>../../stdlib/UUIDs/</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>../../stdlib/Unicode/</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T192040Z" creationid="hsugawa8651" creationdate="20181118T192040Z">
        <seg>../../stdlib/Unicode/</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>../arrays/</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T191914Z" creationid="hsugawa8651" creationdate="20181118T191914Z">
        <seg>../arrays/</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>../base/</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T191902Z" creationid="hsugawa8651" creationdate="20181118T191902Z">
        <seg>../base/</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>../base/#Base.missing</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131055Z" creationid="hsugawa8651" creationdate="20181119T131055Z">
        <seg>../base/#Base.missing</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>../c/</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T191932Z" creationid="hsugawa8651" creationdate="20181118T191932Z">
        <seg>../c/</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>../collections/</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T191904Z" creationid="hsugawa8651" creationdate="20181118T191904Z">
        <seg>../collections/</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>../collections/#Base.UnitRange</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131813Z" creationid="hsugawa8651" creationdate="20181119T131813Z">
        <seg>../collections/#Base.UnitRange</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>../complex-and-rational-numbers/</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T031900Z" creationid="hsugawa8651" creationdate="20181119T031900Z">
        <seg>../complex-and-rational-numbers/</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>../constants/</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T191921Z" creationid="hsugawa8651" creationdate="20181118T191921Z">
        <seg>../constants/</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>../constants/#Core.nothing</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131047Z" creationid="hsugawa8651" creationdate="20181119T131047Z">
        <seg>../constants/#Core.nothing</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>../constructors/</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T032029Z" creationid="hsugawa8651" creationdate="20181119T032029Z">
        <seg>../constructors/</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>../control-flow/</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T031924Z" creationid="hsugawa8651" creationdate="20181119T031924Z">
        <seg>../control-flow/</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>../conversion-and-promotion/</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T032035Z" creationid="hsugawa8651" creationdate="20181119T032035Z">
        <seg>../conversion-and-promotion/</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>../file/</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T191923Z" creationid="hsugawa8651" creationdate="20181118T191923Z">
        <seg>../file/</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>../functions/</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T031919Z" creationid="hsugawa8651" creationdate="20181119T031919Z">
        <seg>../functions/</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>../getting-started/</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T034035Z" creationid="hsugawa8651" creationdate="20181119T034035Z">
        <seg>../getting-started/</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>../integers-and-floating-point-numbers/</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T031849Z" creationid="hsugawa8651" creationdate="20181119T031849Z">
        <seg>../integers-and-floating-point-numbers/</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>../io-network/</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T191925Z" creationid="hsugawa8651" creationdate="20181118T191925Z">
        <seg>../io-network/</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>../iterators/</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T003203Z" creationid="hsugawa8651" creationdate="20181119T003203Z">
        <seg>../iterators/</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>../libc/</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T191934Z" creationid="hsugawa8651" creationdate="20181118T191934Z">
        <seg>../libc/</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>../math/</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T191906Z" creationid="hsugawa8651" creationdate="20181118T191906Z">
        <seg>../math/</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>../math/#Base.conj</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131912Z" creationid="hsugawa8651" creationdate="20181119T131912Z">
        <seg>../math/#Base.conj</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>../mathematical-operations/</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T031855Z" creationid="hsugawa8651" creationdate="20181119T031855Z">
        <seg>../mathematical-operations/</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>../methods/</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T032025Z" creationid="hsugawa8651" creationdate="20181119T032025Z">
        <seg>../methods/</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>../multi-threading/</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T191918Z" creationid="hsugawa8651" creationdate="20181118T191918Z">
        <seg>../multi-threading/</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>../numbers/</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T191908Z" creationid="hsugawa8651" creationdate="20181118T191908Z">
        <seg>../numbers/</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>../numbers/#Core.Bool</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131600Z" creationid="hsugawa8651" creationdate="20181119T131600Z">
        <seg>../numbers/#Core.Bool</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>../parallel/</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T191916Z" creationid="hsugawa8651" creationdate="20181118T191916Z">
        <seg>../parallel/</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>../parallel/#Base.Channel</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T192151Z" creationid="hsugawa8651" creationdate="20181118T192151Z">
        <seg>../parallel/#Base.Channel</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>../punctuation/</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T191927Z" creationid="hsugawa8651" creationdate="20181118T191927Z">
        <seg>../punctuation/</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>../simd-types/</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T191937Z" creationid="hsugawa8651" creationdate="20181118T191937Z">
        <seg>../simd-types/</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>../sort/</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T191929Z" creationid="hsugawa8651" creationdate="20181118T191929Z">
        <seg>../sort/</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>../stacktraces/</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T191936Z" creationid="hsugawa8651" creationdate="20181118T191936Z">
        <seg>../stacktraces/</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>../strings/</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T191911Z" creationid="hsugawa8651" creationdate="20181118T191911Z">
        <seg>../strings/</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>../style-guide/#Style-Guide-1</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T034023Z" creationid="hsugawa8651" creationdate="20181119T034023Z">
        <seg>../style-guide/#Style-Guide-1</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>../types/</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T031956Z" creationid="hsugawa8651" creationdate="20181119T031956Z">
        <seg>../types/</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>../variables-and-scoping/</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T031928Z" creationid="hsugawa8651" creationdate="20181119T031928Z">
        <seg>../variables-and-scoping/</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>../variables/</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T031840Z" creationid="hsugawa8651" creationdate="20181119T031840Z">
        <seg>../variables/</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>.&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T063530Z" creationid="hsugawa8651" creationdate="20181114T063530Z">
        <seg>.&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>.&lt;x1/&gt; followed by &lt;x2/&gt;::&lt;x3/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T065649Z" creationid="hsugawa8651" creationdate="20181114T030812Z">
        <seg>.&lt;x1/&gt;の後に、&lt;x2/&gt;::&lt;x3/&gt; が続く  </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>//&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T165023Z" creationid="hsugawa8651" creationdate="20181118T165023Z">
        <seg>//&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>/etc/julia/startup.jl</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T054824Z" creationid="hsugawa8651" creationdate="20181116T054824Z">
        <seg>/etc/julia/startup.jl</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>/usr/local/julia/packages/Priv/HDkr/src/Priv.jl&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T121231Z" creationid="hsugawa8651" creationdate="20181118T121231Z">
        <seg>/usr/local/julia/packages/Priv/HDkr/src/Priv.jl&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>0</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T110126Z" creationid="hsugawa8651" creationdate="20181112T110126Z">
        <seg>0</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>0xxxxxxx&lt;x1/&gt;;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T020645Z" creationid="hsugawa8651" creationdate="20181116T020645Z">
        <seg>0xxxxxxx&lt;x1/&gt;;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>1 == 1.0 ?</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T015426Z" creationid="hsugawa8651" creationdate="20181116T015426Z">
        <seg>1 == 1.0 ?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>1 ⊘ 2&lt;x1/&gt;).</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T124147Z" creationid="hsugawa8651" creationdate="20181118T124147Z">
        <seg>1 ⊘ 2&lt;x1/&gt;).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>1-dimensional &lt;x2/&gt;`Array`&lt;x3/&gt;)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T043131Z" creationid="hsugawa8651" creationdate="20181112T043131Z">
        <seg>1-dimensional &lt;x2/&gt;`Array`&lt;x3/&gt;)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>1-dimensional &lt;x2/&gt;`BitArray`&lt;x3/&gt;)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T043133Z" creationid="hsugawa8651" creationdate="20181112T043133Z">
        <seg>1-dimensional &lt;x2/&gt;`BitArray`&lt;x3/&gt;)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>1.0

julia&gt; 0.5
0.5

julia&gt; .5
0.5

julia&gt; -1.23
-1.23

julia&gt; 1e10
1.0e10

julia&gt; 2.5e-4
0.00025</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T110544Z" creationid="hsugawa8651" creationdate="20181112T110544Z">
        <seg>1.0

julia&gt; 0.5
0.5

julia&gt; .5
0.5

julia&gt; -1.23
-1.23

julia&gt; 1e10
1.0e10

julia&gt; 2.5e-4
0.00025</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>10</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181110T025013Z" creationid="hsugawa8651" creationdate="20181110T025013Z">
        <seg>10</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>10-element Array{Base.StackTraces.StackFrame,1}:
 error at error.jl:33 [inlined]
 child() at REPL[1]:1
 parent() at REPL[2]:1
 grandparent() at REPL[3]:3
[...]</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T020423Z" creationid="hsugawa8651" creationdate="20181116T020423Z">
        <seg>10-element Array{Base.StackTraces.StackFrame,1}:
 error at error.jl:33 [inlined]
 child() at REPL[1]:1
 parent() at REPL[2]:1
 grandparent() at REPL[3]:3
[...]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>10xxxxxx&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T020630Z" creationid="hsugawa8651" creationdate="20181116T020630Z">
        <seg>10xxxxxx&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>10xxxxxx&lt;x1/&gt;;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T020628Z" creationid="hsugawa8651" creationdate="20181116T020628Z">
        <seg>10xxxxxx&lt;x1/&gt;;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>110xxxxx&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T020626Z" creationid="hsugawa8651" creationdate="20181116T020626Z">
        <seg>110xxxxx&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>1110xxxx&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T020629Z" creationid="hsugawa8651" creationdate="20181116T020629Z">
        <seg>1110xxxx&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>11110xxx&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T020632Z" creationid="hsugawa8651" creationdate="20181116T020632Z">
        <seg>11110xxx&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>128</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T110209Z" creationid="hsugawa8651" creationdate="20181112T110209Z">
        <seg>128</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>16</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T110131Z" creationid="hsugawa8651" creationdate="20181112T110131Z">
        <seg>16</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>1:5   &lt;x1/&gt; not strided (there is no storage associated with this array.)
Vector(1:5)  &lt;x2/&gt; is strided with strides (1,)
A = [1 5; 2 6; 3 7; 4 8]  &lt;x3/&gt; is strided with strides (1,4)
V = view(A, 1:2, :)   &lt;x4/&gt; is strided with strides (1,4)
V = view(A, 1:2:3, 1:2)   &lt;x5/&gt; is strided with strides (2,4)
V = view(A, [1,2,4], :)   &lt;x6/&gt; is not strided, as the spacing between rows is not fixed.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T094616Z" creationid="hsugawa8651" creationdate="20181118T094616Z">
        <seg>1:5   &lt;x1/&gt; not strided (there is no storage associated with this array.)
Vector(1:5)  &lt;x2/&gt; is strided with strides (1,)
A = [1 5; 2 6; 3 7; 4 8]  &lt;x3/&gt; is strided with strides (1,4)
V = view(A, 1:2, :)   &lt;x4/&gt; is strided with strides (1,4)
V = view(A, 1:2:3, 1:2)   &lt;x5/&gt; is strided with strides (2,4)
V = view(A, [1,2,4], :)   &lt;x6/&gt; is not strided, as the spacing between rows is not fixed.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>1:n&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T130258Z" creationid="hsugawa8651" creationdate="20181120T130258Z">
        <seg>1:n&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>1&lt;x1/&gt; is a literal 64-bit signed integer.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T115400Z" creationid="hsugawa8651" creationdate="20181118T115400Z">
        <seg>1&lt;x1/&gt;は、リテラル64ビットの符号付き整数です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>2*x : x, (opr1, opr2))
           retexpr = Expr(:call, op, opr1f, opr2f)
           return retexpr
       end
make_expr2 (generic function with 1 method)

julia&gt; make_expr2(:+, 1, 2)
:(2 + 4)

julia&gt; ex = make_expr2(:+, 1, Expr(:call, :*, 5, 8))
:(2 + 5 * 8)

julia&gt; eval(ex)
42</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T015247Z" creationid="hsugawa8651" creationdate="20181116T015247Z">
        <seg>2*x : x, (opr1, opr2))
           retexpr = Expr(:call, op, opr1f, opr2f)
           return retexpr
       end
make_expr2 (generic function with 1 method)

julia&gt; make_expr2(:+, 1, 2)
:(2 + 4)

julia&gt; ex = make_expr2(:+, 1, Expr(:call, :*, 5, 8))
:(2 + 5 * 8)

julia&gt; eval(ex)
42</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>2A^2 + sin(A)&lt;x16/&gt;, using the &lt;x17/&gt;&lt;x18/&gt;&lt;x19/&gt;(@ref @&lt;x20/&gt;dot&lt;x21/&gt;) macro) for
an array &lt;x22/&gt;A&lt;x23/&gt;, it performs a &lt;x24/&gt;single&lt;x25/&gt; loop over &lt;x26/&gt;A&lt;x27/&gt;, computing &lt;x28/&gt;2a^2 + sin(a)&lt;x29/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T132558Z" creationid="hsugawa8651" creationdate="20181113T132553Z">
        <seg>2a^2+sin(A)&lt;x16/&gt;&lt;x19/&gt;&lt;x19/&gt;(@ref@&lt;x20/&gt;dot&lt;X21/&gt;)マクロを使用して array&lt;x22/&gt;A&lt;x23/&gt;&lt;x26/&gt;A&lt;x27/&gt;で&lt;x24/&gt;ループを実行し、&lt;x28/&gt;2A^2+sin(a)&lt;x29/&gt;を計算します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>2^127 - 1</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T110211Z" creationid="hsugawa8651" creationdate="20181112T110211Z">
        <seg>2^127 - 1</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>2^128 - 1</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T110216Z" creationid="hsugawa8651" creationdate="20181112T110216Z">
        <seg>2^128 - 1</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>2^15 - 1</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T110133Z" creationid="hsugawa8651" creationdate="20181112T110133Z">
        <seg>2^15 - 1</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>2^16 - 1</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T110139Z" creationid="hsugawa8651" creationdate="20181112T110139Z">
        <seg>2^16 - 1</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>2^31 - 1</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T110151Z" creationid="hsugawa8651" creationdate="20181112T110151Z">
        <seg>2^31 - 1</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>2^32 - 1</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T110155Z" creationid="hsugawa8651" creationdate="20181112T110155Z">
        <seg>2^32 - 1</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>2^63 - 1</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T110201Z" creationid="hsugawa8651" creationdate="20181112T110201Z">
        <seg>2^63 - 1</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>2^64 - 1</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T110205Z" creationid="hsugawa8651" creationdate="20181112T110205Z">
        <seg>2^64 - 1</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>2^7 - 1</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T110122Z" creationid="hsugawa8651" creationdate="20181112T110122Z">
        <seg>2^7 - 1</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>2^8 - 1</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T110127Z" creationid="hsugawa8651" creationdate="20181112T110127Z">
        <seg>2^8 - 1</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>3-argument conditional operator (used like: &lt;x1/&gt;conditional ?</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T063206Z" creationid="hsugawa8651" creationdate="20181114T063206Z">
        <seg>3引数条件付き演算子(&lt;x1/&gt;条件付きのように使用されますか?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>32</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T110149Z" creationid="hsugawa8651" creationdate="20181112T110149Z">
        <seg>32</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>64</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T110158Z" creationid="hsugawa8651" creationdate="20181112T110158Z">
        <seg>64</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>8</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T110043Z" creationid="hsugawa8651" creationdate="20181112T110043Z">
        <seg>8</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T150421Z" creationid="hsugawa8651" creationdate="20181117T150421Z">
        <seg>:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>:
In C++ or Java, for example, in a method call like &lt;x1/&gt;obj.meth(arg1,arg2)&lt;x2/&gt;, the object obj "receives"
the method call and is implicitly passed to the method via the &lt;x3/&gt;this&lt;x4/&gt; keyword, rather than as
an explicit method argument.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T011945Z" creationid="hsugawa8651" creationdate="20181120T011924Z">
        <seg>:例えば、C ++やJavaでは、obj.meth(arg1,arg2)のようなメソッドが呼ばれる時は、オブジェクトobjはメソッド呼び出しを「受け取り」、暗黙のうちにthisキーワードを介して、引数だと明示されずに、メソッドに引き渡されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>:
Nomenclature: while the term "constructor" generally refers to the entire function which constructs
objects of a type, it is common to abuse terminology slightly and refer to specific constructor
methods as "constructors".</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T155659Z" creationid="hsugawa8651" creationdate="20181117T155659Z">
        <seg>: 命名法:「コンストラクタ」という用語は、一般的には、次のような機能を構成する関数全体を指します。 タイプのオブジェクトで、用語をわずかに乱用し、特定のコンストラクタを参照することが一般的です。 「コンストラクタ」としてのメソッド。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>:
The unary operators &lt;x1/&gt;+&lt;x2/&gt; and &lt;x3/&gt;-&lt;x4/&gt; require explicit parentheses around their argument to disambiguate them from the operator &lt;x5/&gt;++&lt;x6/&gt;, etc.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T030927Z" creationid="hsugawa8651" creationdate="20181114T030915Z">
        <seg>: 単項演算子&lt;x1/&gt;+&lt;x2/&gt;と&lt;x3/&gt;は、演算子&lt;x5/&gt;++&lt;x6/&gt;などからそれらを区別するために、引数の周りに明示的な括弧を必要とします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>: ..&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T165047Z" creationid="hsugawa8651" creationdate="20181118T165047Z">
        <seg>: ..&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>: ..&lt;x1/&gt; followed by &lt;x2/&gt;\|&gt;&lt;x3/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T065808Z" creationid="hsugawa8651" creationdate="20181120T065808Z">
        <seg>: ..&lt;x1/&gt; の後に、&lt;x2/&gt;\|&gt;&lt;x3/&gt;が続く</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>: &lt;x1/&gt;iid&lt;x2/&gt;, independently and identically distributed.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T064449Z" creationid="hsugawa8651" creationdate="20181114T064449Z">
        <seg>&lt;x1/&gt;iid&lt;x2/&gt;、独立して、同一に分布している。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>:( )&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T063553Z" creationid="hsugawa8651" creationdate="20181114T063553Z">
        <seg>:( )&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>:( println("Hello, world!") )</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T101445Z" creationid="hsugawa8651" creationdate="20181116T015259Z">
        <seg>:( println("Hello, world!") ) に置き換えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>::&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T063547Z" creationid="hsugawa8651" creationdate="20181114T063547Z">
        <seg>::&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>:&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T063544Z" creationid="hsugawa8651" creationdate="20181114T063544Z">
        <seg>:&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>:_fopen : :fopen), ...)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T120257Z" creationid="hsugawa8651" creationdate="20181118T120257Z">
        <seg>:_fopen : :fopen), ...)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>:a : (@static Sys.isapple() ?</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T225018Z" creationid="hsugawa8651" creationdate="20181109T225018Z">
        <seg>:a : (@static Sys.isapple() ?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>:a : (@static is_apple() ?</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T234314Z" creationid="hsugawa8651" creationdate="20181119T234314Z">
        <seg>:a : (@static is_apple() ?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>:a&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T063556Z" creationid="hsugawa8651" creationdate="20181114T063556Z">
        <seg>:a&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>:b : :c)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T225020Z" creationid="hsugawa8651" creationdate="20181109T225020Z">
        <seg>:b : :c)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>:b&lt;x1/&gt; is used in the expression construction, so the value of the
variable &lt;x2/&gt;b&lt;x3/&gt; at that time is irrelevant -- &lt;x4/&gt;:b&lt;x5/&gt; is just a symbol and the variable &lt;x6/&gt;b&lt;x7/&gt; need not
even be defined.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T165313Z" creationid="hsugawa8651" creationdate="20181118T165313Z">
        <seg>:b&lt;x1/&gt;は式構築で使用されるので その時の変数&lt;x2/&gt;b&lt;x3/&gt;は無関係である-&lt;x4/&gt;:b&lt;x5/&gt;は単なる記号であり、変数&lt;x6/&gt;b&lt;x7/&gt;は必要ない。 定義する必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>;&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T063149Z" creationid="hsugawa8651" creationdate="20181114T063149Z">
        <seg>;&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;:&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T063559Z" creationid="hsugawa8651" creationdate="20181114T063559Z">
        <seg>&lt;:&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;&lt; &gt;&gt; &gt;&gt;&gt;&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T165018Z" creationid="hsugawa8651" creationdate="20181118T165018Z">
        <seg>&lt;&lt; &gt;&gt; &gt;&gt;&gt;&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;\|&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T030856Z" creationid="hsugawa8651" creationdate="20181114T030856Z">
        <seg>&lt;\|&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;a0&gt;&lt;c1&gt;Base.AbstractMatrix&lt;/c1&gt;&lt;/a0&gt; — &lt;s2&gt;Type&lt;/s2&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131001Z" creationid="hsugawa8651" creationdate="20181119T131001Z">
        <seg>&lt;a0&gt;&lt;c1&gt;Base.AbstractMatrix&lt;/c1&gt;&lt;/a0&gt; — &lt;s2&gt;Type&lt;/s2&gt;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;a0&gt;&lt;c1&gt;Base.AbstractVecOrMat&lt;/c1&gt;&lt;/a0&gt; — &lt;s2&gt;Constant&lt;/s2&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131009Z" creationid="hsugawa8651" creationdate="20181119T131009Z">
        <seg>&lt;a0&gt;&lt;c1&gt;Base.AbstractVecOrMat&lt;/c1&gt;&lt;/a0&gt; — &lt;s2&gt;Constant&lt;/s2&gt;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;a0&gt;&lt;c1&gt;Base.AbstractVector&lt;/c1&gt;&lt;/a0&gt; — &lt;s2&gt;Type&lt;/s2&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T130938Z" creationid="hsugawa8651" creationdate="20181119T130938Z">
        <seg>&lt;a0&gt;&lt;c1&gt;Base.AbstractVector&lt;/c1&gt;&lt;/a0&gt; — &lt;s2&gt;Type&lt;/s2&gt;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;a0&gt;&lt;c1&gt;Base.BitArray&lt;/c1&gt;&lt;/a0&gt; — &lt;s2&gt;Method&lt;/s2&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131501Z" creationid="hsugawa8651" creationdate="20181119T131501Z">
        <seg>&lt;a0&gt;&lt;c1&gt;Base.BitArray&lt;/c1&gt;&lt;/a0&gt; — &lt;s2&gt;Method&lt;/s2&gt;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;a0&gt;&lt;c1&gt;Base.BitArray&lt;/c1&gt;&lt;/a0&gt; — &lt;s2&gt;Type&lt;/s2&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131446Z" creationid="hsugawa8651" creationdate="20181119T131446Z">
        <seg>&lt;a0&gt;&lt;c1&gt;Base.BitArray&lt;/c1&gt;&lt;/a0&gt; — &lt;s2&gt;Type&lt;/s2&gt;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;a0&gt;&lt;c1&gt;Base.DenseMatrix&lt;/c1&gt;&lt;/a0&gt; — &lt;s2&gt;Type&lt;/s2&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131338Z" creationid="hsugawa8651" creationdate="20181119T131338Z">
        <seg>&lt;a0&gt;&lt;c1&gt;Base.DenseMatrix&lt;/c1&gt;&lt;/a0&gt; — &lt;s2&gt;Type&lt;/s2&gt;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;a0&gt;&lt;c1&gt;Base.DenseVecOrMat&lt;/c1&gt;&lt;/a0&gt; — &lt;s2&gt;Constant&lt;/s2&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131346Z" creationid="hsugawa8651" creationdate="20181119T131346Z">
        <seg>&lt;a0&gt;&lt;c1&gt;Base.DenseVecOrMat&lt;/c1&gt;&lt;/a0&gt; — &lt;s2&gt;Constant&lt;/s2&gt;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;a0&gt;&lt;c1&gt;Base.DenseVector&lt;/c1&gt;&lt;/a0&gt; — &lt;s2&gt;Type&lt;/s2&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131329Z" creationid="hsugawa8651" creationdate="20181119T131329Z">
        <seg>&lt;a0&gt;&lt;c1&gt;Base.DenseVector&lt;/c1&gt;&lt;/a0&gt; — &lt;s2&gt;Type&lt;/s2&gt;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;a0&gt;&lt;c1&gt;Base.IndexCartesian&lt;/c1&gt;&lt;/a0&gt; — &lt;s2&gt;Type&lt;/s2&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131857Z" creationid="hsugawa8651" creationdate="20181119T131857Z">
        <seg>&lt;a0&gt;&lt;c1&gt;Base.IndexCartesian&lt;/c1&gt;&lt;/a0&gt; — &lt;s2&gt;Type&lt;/s2&gt;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;a0&gt;&lt;c1&gt;Base.IndexLinear&lt;/c1&gt;&lt;/a0&gt; — &lt;s2&gt;Type&lt;/s2&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131848Z" creationid="hsugawa8651" creationdate="20181119T131848Z">
        <seg>&lt;a0&gt;&lt;c1&gt;Base.IndexLinear&lt;/c1&gt;&lt;/a0&gt; — &lt;s2&gt;Type&lt;/s2&gt;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;a0&gt;&lt;c1&gt;Base.IndexStyle&lt;/c1&gt;&lt;/a0&gt; — &lt;s2&gt;Type&lt;/s2&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131822Z" creationid="hsugawa8651" creationdate="20181119T131822Z">
        <seg>&lt;a0&gt;&lt;c1&gt;Base.IndexStyle&lt;/c1&gt;&lt;/a0&gt; — &lt;s2&gt;Type&lt;/s2&gt;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;a0&gt;&lt;c1&gt;Base.Iterators.Stateful&lt;/c1&gt;&lt;/a0&gt; — &lt;s2&gt;Type&lt;/s2&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T192145Z" creationid="hsugawa8651" creationdate="20181118T192145Z">
        <seg>&lt;a0&gt;&lt;c1&gt;Base.Iterators.Stateful&lt;/c1&gt;&lt;/a0&gt; — &lt;s2&gt;Type&lt;/s2&gt;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;a0&gt;&lt;c1&gt;Base.Iterators.countfrom&lt;/c1&gt;&lt;/a0&gt; — &lt;s2&gt;Function&lt;/s2&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T192246Z" creationid="hsugawa8651" creationdate="20181118T192246Z">
        <seg>&lt;a0&gt;&lt;c1&gt;Base.Iterators.countfrom&lt;/c1&gt;&lt;/a0&gt; — &lt;s2&gt;Function&lt;/s2&gt;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;a0&gt;&lt;c1&gt;Base.Iterators.cycle&lt;/c1&gt;&lt;/a0&gt; — &lt;s2&gt;Function&lt;/s2&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T192317Z" creationid="hsugawa8651" creationdate="20181118T192317Z">
        <seg>&lt;a0&gt;&lt;c1&gt;Base.Iterators.cycle&lt;/c1&gt;&lt;/a0&gt; — &lt;s2&gt;Function&lt;/s2&gt;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;a0&gt;&lt;c1&gt;Base.Iterators.drop&lt;/c1&gt;&lt;/a0&gt; — &lt;s2&gt;Function&lt;/s2&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T192308Z" creationid="hsugawa8651" creationdate="20181118T192308Z">
        <seg>&lt;a0&gt;&lt;c1&gt;Base.Iterators.drop&lt;/c1&gt;&lt;/a0&gt; — &lt;s2&gt;Function&lt;/s2&gt;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;a0&gt;&lt;c1&gt;Base.Iterators.enumerate&lt;/c1&gt;&lt;/a0&gt; — &lt;s2&gt;Function&lt;/s2&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T192220Z" creationid="hsugawa8651" creationdate="20181118T192220Z">
        <seg>&lt;a0&gt;&lt;c1&gt;Base.Iterators.enumerate&lt;/c1&gt;&lt;/a0&gt; — &lt;s2&gt;Function&lt;/s2&gt;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;a0&gt;&lt;c1&gt;Base.Iterators.flatten&lt;/c1&gt;&lt;/a0&gt; — &lt;s2&gt;Function&lt;/s2&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T192352Z" creationid="hsugawa8651" creationdate="20181118T192352Z">
        <seg>&lt;a0&gt;&lt;c1&gt;Base.Iterators.flatten&lt;/c1&gt;&lt;/a0&gt; — &lt;s2&gt;Function&lt;/s2&gt;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;a0&gt;&lt;c1&gt;Base.Iterators.product&lt;/c1&gt;&lt;/a0&gt; — &lt;s2&gt;Function&lt;/s2&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T192341Z" creationid="hsugawa8651" creationdate="20181118T192341Z">
        <seg>&lt;a0&gt;&lt;c1&gt;Base.Iterators.product&lt;/c1&gt;&lt;/a0&gt; — &lt;s2&gt;Function&lt;/s2&gt;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;a0&gt;&lt;c1&gt;Base.Iterators.repeated&lt;/c1&gt;&lt;/a0&gt; — &lt;s2&gt;Function&lt;/s2&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T192328Z" creationid="hsugawa8651" creationdate="20181118T192328Z">
        <seg>&lt;a0&gt;&lt;c1&gt;Base.Iterators.repeated&lt;/c1&gt;&lt;/a0&gt; — &lt;s2&gt;Function&lt;/s2&gt;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;a0&gt;&lt;c1&gt;Base.Iterators.rest&lt;/c1&gt;&lt;/a0&gt; — &lt;s2&gt;Function&lt;/s2&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T192234Z" creationid="hsugawa8651" creationdate="20181118T192234Z">
        <seg>&lt;a0&gt;&lt;c1&gt;Base.Iterators.rest&lt;/c1&gt;&lt;/a0&gt; — &lt;s2&gt;Function&lt;/s2&gt;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;a0&gt;&lt;c1&gt;Base.Iterators.take&lt;/c1&gt;&lt;/a0&gt; — &lt;s2&gt;Function&lt;/s2&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T192257Z" creationid="hsugawa8651" creationdate="20181118T192257Z">
        <seg>&lt;a0&gt;&lt;c1&gt;Base.Iterators.take&lt;/c1&gt;&lt;/a0&gt; — &lt;s2&gt;Function&lt;/s2&gt;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;a0&gt;&lt;c1&gt;Base.Iterators.zip&lt;/c1&gt;&lt;/a0&gt; — &lt;s2&gt;Function&lt;/s2&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T192208Z" creationid="hsugawa8651" creationdate="20181118T192208Z">
        <seg>&lt;a0&gt;&lt;c1&gt;Base.Iterators.zip&lt;/c1&gt;&lt;/a0&gt; — &lt;s2&gt;Function&lt;/s2&gt;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;a0&gt;&lt;c1&gt;Base.Matrix&lt;/c1&gt;&lt;/a0&gt; — &lt;s2&gt;Method&lt;/s2&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131214Z" creationid="hsugawa8651" creationdate="20181119T131214Z">
        <seg>&lt;a0&gt;&lt;c1&gt;Base.Matrix&lt;/c1&gt;&lt;/a0&gt; — &lt;s2&gt;Method&lt;/s2&gt;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;a0&gt;&lt;c1&gt;Base.Matrix&lt;/c1&gt;&lt;/a0&gt; — &lt;s2&gt;Type&lt;/s2&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131204Z" creationid="hsugawa8651" creationdate="20181119T131204Z">
        <seg>&lt;a0&gt;&lt;c1&gt;Base.Matrix&lt;/c1&gt;&lt;/a0&gt; — &lt;s2&gt;Type&lt;/s2&gt;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;a0&gt;&lt;c1&gt;Base.StridedArray&lt;/c1&gt;&lt;/a0&gt; — &lt;s2&gt;Constant&lt;/s2&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131352Z" creationid="hsugawa8651" creationdate="20181119T131352Z">
        <seg>&lt;a0&gt;&lt;c1&gt;Base.StridedArray&lt;/c1&gt;&lt;/a0&gt; — &lt;s2&gt;Constant&lt;/s2&gt;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;a0&gt;&lt;c1&gt;Base.StridedMatrix&lt;/c1&gt;&lt;/a0&gt; — &lt;s2&gt;Constant&lt;/s2&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131408Z" creationid="hsugawa8651" creationdate="20181119T131408Z">
        <seg>&lt;a0&gt;&lt;c1&gt;Base.StridedMatrix&lt;/c1&gt;&lt;/a0&gt; — &lt;s2&gt;Constant&lt;/s2&gt;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;a0&gt;&lt;c1&gt;Base.StridedVecOrMat&lt;/c1&gt;&lt;/a0&gt; — &lt;s2&gt;Constant&lt;/s2&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131414Z" creationid="hsugawa8651" creationdate="20181119T131414Z">
        <seg>&lt;a0&gt;&lt;c1&gt;Base.StridedVecOrMat&lt;/c1&gt;&lt;/a0&gt; — &lt;s2&gt;Constant&lt;/s2&gt;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;a0&gt;&lt;c1&gt;Base.StridedVector&lt;/c1&gt;&lt;/a0&gt; — &lt;s2&gt;Constant&lt;/s2&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131402Z" creationid="hsugawa8651" creationdate="20181119T131402Z">
        <seg>&lt;a0&gt;&lt;c1&gt;Base.StridedVector&lt;/c1&gt;&lt;/a0&gt; — &lt;s2&gt;Constant&lt;/s2&gt;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;a0&gt;&lt;c1&gt;Base.VecOrMat&lt;/c1&gt;&lt;/a0&gt; — &lt;s2&gt;Constant&lt;/s2&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131314Z" creationid="hsugawa8651" creationdate="20181119T131314Z">
        <seg>&lt;a0&gt;&lt;c1&gt;Base.VecOrMat&lt;/c1&gt;&lt;/a0&gt; — &lt;s2&gt;Constant&lt;/s2&gt;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;a0&gt;&lt;c1&gt;Base.Vector&lt;/c1&gt;&lt;/a0&gt; — &lt;s2&gt;Method&lt;/s2&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131133Z" creationid="hsugawa8651" creationdate="20181119T131133Z">
        <seg>&lt;a0&gt;&lt;c1&gt;Base.Vector&lt;/c1&gt;&lt;/a0&gt; — &lt;s2&gt;Method&lt;/s2&gt;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;a0&gt;&lt;c1&gt;Base.Vector&lt;/c1&gt;&lt;/a0&gt; — &lt;s2&gt;Type&lt;/s2&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131123Z" creationid="hsugawa8651" creationdate="20181119T131123Z">
        <seg>&lt;a0&gt;&lt;c1&gt;Base.Vector&lt;/c1&gt;&lt;/a0&gt; — &lt;s2&gt;Type&lt;/s2&gt;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;a0&gt;&lt;c1&gt;Base.axes&lt;/c1&gt;&lt;/a0&gt; — &lt;s2&gt;Method&lt;/s2&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131730Z" creationid="hsugawa8651" creationdate="20181119T131730Z">
        <seg>&lt;a0&gt;&lt;c1&gt;Base.axes&lt;/c1&gt;&lt;/a0&gt; — &lt;s2&gt;Method&lt;/s2&gt;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;a0&gt;&lt;c1&gt;Base.conj!&lt;/c1&gt;&lt;/a0&gt; — &lt;s2&gt;Function&lt;/s2&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131909Z" creationid="hsugawa8651" creationdate="20181119T131909Z">
        <seg>&lt;a0&gt;&lt;c1&gt;Base.conj!&lt;/c1&gt;&lt;/a0&gt; — &lt;s2&gt;Function&lt;/s2&gt;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;a0&gt;&lt;c1&gt;Base.eachindex&lt;/c1&gt;&lt;/a0&gt; — &lt;s2&gt;Function&lt;/s2&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131809Z" creationid="hsugawa8651" creationdate="20181119T131809Z">
        <seg>&lt;a0&gt;&lt;c1&gt;Base.eachindex&lt;/c1&gt;&lt;/a0&gt; — &lt;s2&gt;Function&lt;/s2&gt;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;a0&gt;&lt;c1&gt;Base.falses&lt;/c1&gt;&lt;/a0&gt; — &lt;s2&gt;Function&lt;/s2&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131524Z" creationid="hsugawa8651" creationdate="20181119T131524Z">
        <seg>&lt;a0&gt;&lt;c1&gt;Base.falses&lt;/c1&gt;&lt;/a0&gt; — &lt;s2&gt;Function&lt;/s2&gt;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;a0&gt;&lt;c1&gt;Base.fill!&lt;/c1&gt;&lt;/a0&gt; — &lt;s2&gt;Function&lt;/s2&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131541Z" creationid="hsugawa8651" creationdate="20181119T131541Z">
        <seg>&lt;a0&gt;&lt;c1&gt;Base.fill!&lt;/c1&gt;&lt;/a0&gt; — &lt;s2&gt;Function&lt;/s2&gt;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;a0&gt;&lt;c1&gt;Base.fill&lt;/c1&gt;&lt;/a0&gt; — &lt;s2&gt;Function&lt;/s2&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131530Z" creationid="hsugawa8651" creationdate="20181119T131530Z">
        <seg>&lt;a0&gt;&lt;c1&gt;Base.fill&lt;/c1&gt;&lt;/a0&gt; — &lt;s2&gt;Function&lt;/s2&gt;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;a0&gt;&lt;c1&gt;Base.getindex&lt;/c1&gt;&lt;/a0&gt; — &lt;s2&gt;Method&lt;/s2&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131420Z" creationid="hsugawa8651" creationdate="20181119T131420Z">
        <seg>&lt;a0&gt;&lt;c1&gt;Base.getindex&lt;/c1&gt;&lt;/a0&gt; — &lt;s2&gt;Method&lt;/s2&gt;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;a0&gt;&lt;c1&gt;Base.length&lt;/c1&gt;&lt;/a0&gt; — &lt;s2&gt;Method&lt;/s2&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131758Z" creationid="hsugawa8651" creationdate="20181119T131758Z">
        <seg>&lt;a0&gt;&lt;c1&gt;Base.length&lt;/c1&gt;&lt;/a0&gt; — &lt;s2&gt;Method&lt;/s2&gt;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;a0&gt;&lt;c1&gt;Base.ndims&lt;/c1&gt;&lt;/a0&gt; — &lt;s2&gt;Function&lt;/s2&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131711Z" creationid="hsugawa8651" creationdate="20181119T131711Z">
        <seg>&lt;a0&gt;&lt;c1&gt;Base.ndims&lt;/c1&gt;&lt;/a0&gt; — &lt;s2&gt;Function&lt;/s2&gt;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;a0&gt;&lt;c1&gt;Base.ones&lt;/c1&gt;&lt;/a0&gt; — &lt;s2&gt;Function&lt;/s2&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131437Z" creationid="hsugawa8651" creationdate="20181119T131437Z">
        <seg>&lt;a0&gt;&lt;c1&gt;Base.ones&lt;/c1&gt;&lt;/a0&gt; — &lt;s2&gt;Function&lt;/s2&gt;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;a0&gt;&lt;c1&gt;Base.similar&lt;/c1&gt;&lt;/a0&gt; — &lt;s2&gt;Function&lt;/s2&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131550Z" creationid="hsugawa8651" creationdate="20181119T131550Z">
        <seg>&lt;a0&gt;&lt;c1&gt;Base.similar&lt;/c1&gt;&lt;/a0&gt; — &lt;s2&gt;Function&lt;/s2&gt;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;a0&gt;&lt;c1&gt;Base.size&lt;/c1&gt;&lt;/a0&gt; — &lt;s2&gt;Function&lt;/s2&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131719Z" creationid="hsugawa8651" creationdate="20181119T131719Z">
        <seg>&lt;a0&gt;&lt;c1&gt;Base.size&lt;/c1&gt;&lt;/a0&gt; — &lt;s2&gt;Function&lt;/s2&gt;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;a0&gt;&lt;c1&gt;Base.stride&lt;/c1&gt;&lt;/a0&gt; — &lt;s2&gt;Function&lt;/s2&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131918Z" creationid="hsugawa8651" creationdate="20181119T131918Z">
        <seg>&lt;a0&gt;&lt;c1&gt;Base.stride&lt;/c1&gt;&lt;/a0&gt; — &lt;s2&gt;Function&lt;/s2&gt;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;a0&gt;&lt;c1&gt;Base.strides&lt;/c1&gt;&lt;/a0&gt; — &lt;s2&gt;Function&lt;/s2&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131925Z" creationid="hsugawa8651" creationdate="20181119T131925Z">
        <seg>&lt;a0&gt;&lt;c1&gt;Base.strides&lt;/c1&gt;&lt;/a0&gt; — &lt;s2&gt;Function&lt;/s2&gt;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;a0&gt;&lt;c1&gt;Base.trues&lt;/c1&gt;&lt;/a0&gt; — &lt;s2&gt;Function&lt;/s2&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131517Z" creationid="hsugawa8651" creationdate="20181119T131517Z">
        <seg>&lt;a0&gt;&lt;c1&gt;Base.trues&lt;/c1&gt;&lt;/a0&gt; — &lt;s2&gt;Function&lt;/s2&gt;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;a0&gt;&lt;c1&gt;Base.zeros&lt;/c1&gt;&lt;/a0&gt; — &lt;s2&gt;Function&lt;/s2&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131429Z" creationid="hsugawa8651" creationdate="20181119T131429Z">
        <seg>&lt;a0&gt;&lt;c1&gt;Base.zeros&lt;/c1&gt;&lt;/a0&gt; — &lt;s2&gt;Function&lt;/s2&gt;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;a0&gt;&lt;c1&gt;Core.Array&lt;/c1&gt;&lt;/a0&gt; — &lt;s2&gt;Method&lt;/s2&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131023Z" creationid="hsugawa8651" creationdate="20181119T131023Z">
        <seg>&lt;a0&gt;&lt;c1&gt;Core.Array&lt;/c1&gt;&lt;/a0&gt; — &lt;s2&gt;Method&lt;/s2&gt;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;a0&gt;&lt;c1&gt;Core.Array&lt;/c1&gt;&lt;/a0&gt; — &lt;s2&gt;Type&lt;/s2&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131015Z" creationid="hsugawa8651" creationdate="20181119T131015Z">
        <seg>&lt;a0&gt;&lt;c1&gt;Core.Array&lt;/c1&gt;&lt;/a0&gt; — &lt;s2&gt;Type&lt;/s2&gt;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;a0&gt;&lt;c1&gt;Core.DenseArray&lt;/c1&gt;&lt;/a0&gt; — &lt;s2&gt;Type&lt;/s2&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131322Z" creationid="hsugawa8651" creationdate="20181119T131322Z">
        <seg>&lt;a0&gt;&lt;c1&gt;Core.DenseArray&lt;/c1&gt;&lt;/a0&gt; — &lt;s2&gt;Type&lt;/s2&gt;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;a0&gt;&lt;c1&gt;Core.UndefInitializer&lt;/c1&gt;&lt;/a0&gt; — &lt;s2&gt;Type&lt;/s2&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131103Z" creationid="hsugawa8651" creationdate="20181119T131103Z">
        <seg>&lt;a0&gt;&lt;c1&gt;Core.UndefInitializer&lt;/c1&gt;&lt;/a0&gt; — &lt;s2&gt;Type&lt;/s2&gt;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;a0&gt;&lt;c1&gt;Core.undef&lt;/c1&gt;&lt;/a0&gt; — &lt;s2&gt;Constant&lt;/s2&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131113Z" creationid="hsugawa8651" creationdate="20181119T131113Z">
        <seg>&lt;a0&gt;&lt;c1&gt;Core.undef&lt;/c1&gt;&lt;/a0&gt; — &lt;s2&gt;Constant&lt;/s2&gt;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;a0&gt;&lt;c1&gt;Task&lt;/c1&gt;&lt;/a0&gt;s are not so standard: they provide non-local control flow, making it possible to switch between temporarily-suspended computations.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T133425Z" creationid="hsugawa8651" creationdate="20181119T133350Z">
        <seg>&lt;a0&gt;&lt;c1&gt; タスク&lt;/c1&gt;&lt;/a0&gt;はそれほど標準的ではありませんが、ローカルに限らない制御構造で、一時的に保留している計算を切り替えることができます。 </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;a0&gt;&lt;s1&gt;Previous&lt;/s1&gt;&lt;s2&gt;Getting Started&lt;/s2&gt;&lt;/a0&gt;&lt;a3&gt;&lt;s4&gt;Next&lt;/s4&gt;&lt;s5&gt;Integers and Floating-Point Numbers&lt;/s5&gt;&lt;/a3&gt;&lt;/f6&gt;&lt;/a7&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T034114Z" creationid="hsugawa8651" creationdate="20181119T034102Z">
        <seg>&lt;a0&gt;&lt;s1&gt;前&lt;/s1&gt;&lt;s2&gt;スタートアップ&lt;/s2&gt;&lt;/a0&gt;&lt;a3&gt;&lt;s4&gt;次&lt;/s4&gt;&lt;s5&gt;整数および浮動小数点数&lt;/s&gt;&lt;/a&gt;&lt;/a3&gt;&lt;/a7&gt;&lt;/a3&gt;&lt;/f3&gt;&lt;/a7&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;a0&gt;&lt;s1&gt;&lt;/s1&gt; Edit on GitHub&lt;/a0&gt;&lt;/n2&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T130846Z" creationid="hsugawa8651" creationdate="20181119T130846Z">
        <seg>&lt;a0&gt;&lt;s1&gt;&lt;/s1&gt; Edit on GitHub&lt;/a0&gt;&lt;/n2&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;a0&gt;Allowed Variable Names&lt;/a0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T033437Z" creationid="hsugawa8651" creationdate="20181119T033437Z">
        <seg>&lt;a0&gt;Allowed Variable Names&lt;/a0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;a0&gt;Array functions&lt;/a0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T125840Z" creationid="hsugawa8651" creationdate="20181119T125840Z">
        <seg>&lt;a0&gt;配列関数&lt;/a0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;a0&gt;Arrays with custom indices&lt;/a0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T130731Z" creationid="hsugawa8651" creationdate="20181119T130731Z">
        <seg>&lt;a0&gt;カスタムインデックスを持つ配列&lt;/a0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;a0&gt;Arrays&lt;/a0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T125559Z" creationid="hsugawa8651" creationdate="20181119T125559Z">
        <seg>&lt;a0&gt;配列&lt;/a0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;a0&gt;Base.Cartesian&lt;/a0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T130611Z" creationid="hsugawa8651" creationdate="20181119T130611Z">
        <seg>&lt;a0&gt;Base.Cartesian&lt;/a0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;a0&gt;Base64&lt;/a0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T130119Z" creationid="hsugawa8651" creationdate="20181119T130119Z">
        <seg>&lt;a0&gt;Base64&lt;/a0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;a0&gt;Basic functions&lt;/a0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T125630Z" creationid="hsugawa8651" creationdate="20181119T125616Z">
        <seg>&lt;a0&gt;基本関数&lt;/a0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;a0&gt;Bounds checking&lt;/a0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T130715Z" creationid="hsugawa8651" creationdate="20181119T130715Z">
        <seg>&lt;a0&gt;境界チェック&lt;/a0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;a0&gt;Broadcast and vectorization&lt;/a0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T125623Z" creationid="hsugawa8651" creationdate="20181119T125623Z">
        <seg>&lt;a0&gt;ブロードキャストおよびベクトル化&lt;/a0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;a0&gt;C Interface&lt;/a0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T130046Z" creationid="hsugawa8651" creationdate="20181119T130046Z">
        <seg>&lt;a0&gt;Cインタフェース&lt;/a0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;a0&gt;C Standard Library&lt;/a0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T130056Z" creationid="hsugawa8651" creationdate="20181119T130056Z">
        <seg>&lt;a0&gt;C標準ライブラリ&lt;/a0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;a0&gt;CRC32c&lt;/a0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T130121Z" creationid="hsugawa8651" creationdate="20181119T130121Z">
        <seg>&lt;a0&gt;CRC32c&lt;/a0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;a0&gt;Calling C and Fortran Code&lt;/a0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T072405Z" creationid="hsugawa8651" creationdate="20181119T072405Z">
        <seg>&lt;a0&gt;CとFortranのコードを呼び出す&lt;/a0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;a0&gt;Code Loading&lt;/a0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T072433Z" creationid="hsugawa8651" creationdate="20181119T072433Z">
        <seg>&lt;a0&gt;コードのロード&lt;/a0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;a0&gt;Collections and Data Structures&lt;/a0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T125547Z" creationid="hsugawa8651" creationdate="20181119T125547Z">
        <seg>&lt;a0&gt;コレクションとデータ構造&lt;/a0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;a0&gt;Combinatorics&lt;/a0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T125922Z" creationid="hsugawa8651" creationdate="20181119T125922Z">
        <seg>&lt;a0&gt;組み合わせ&lt;/a0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;a0&gt;Complex and Rational Numbers&lt;/a0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T031915Z" creationid="hsugawa8651" creationdate="20181119T031915Z">
        <seg>&lt;a0&gt;複素数と有理数&lt;/a0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;a0&gt;Compound Expressions&lt;/a0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T133438Z" creationid="hsugawa8651" creationdate="20181119T133438Z">
        <seg>複合式&lt;a0&gt;Compound Expressions&lt;/a0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;a0&gt;Compound Expressions&lt;/a0&gt;: &lt;c1&gt;begin&lt;/c1&gt; and &lt;c2&gt;(;)&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T132810Z" creationid="hsugawa8651" creationdate="20181119T132810Z">
        <seg>&lt;a0&gt;複合式&lt;/a0&gt;: &lt;c1&gt;begin&lt;/c1&gt; と&lt;c2&gt;(;)&lt;/c2&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;a0&gt;Concatenation and permutation&lt;/a0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T125828Z" creationid="hsugawa8651" creationdate="20181119T125828Z">
        <seg>&lt;a0&gt;連結と置換&lt;/a0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;a0&gt;Conditional Evaluation&lt;/a0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T133820Z" creationid="hsugawa8651" creationdate="20181119T133820Z">
        <seg>&lt;a0&gt;条件付き評価&lt;/a0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;a0&gt;Conditional Evaluation&lt;/a0&gt;: &lt;c1&gt;if&lt;/c1&gt;-&lt;c2&gt;elseif&lt;/c2&gt;-&lt;c3&gt;else&lt;/c3&gt; and &lt;c4&gt;?:&lt;/c4&gt; (ternary operator).</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T132917Z" creationid="hsugawa8651" creationdate="20181119T132917Z">
        <seg>&lt;a0&gt;条件評価&lt;/a0&gt;: &lt;c1&gt;if&lt;/c1&gt;-&lt;c2&gt;elseif&lt;/c2&gt;-&lt;c3&gt;else&lt;/c3&gt; と &lt;c4&gt;？:&lt;/c4&gt; (三項演算子)。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;a0&gt;Constants&lt;/a0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T125932Z" creationid="hsugawa8651" creationdate="20181119T125932Z">
        <seg>&lt;a0&gt;定数&lt;/a0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;a0&gt;Constructors and Types&lt;/a0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T125611Z" creationid="hsugawa8651" creationdate="20181119T125611Z">
        <seg>&lt;a0&gt;コンストラクタと型&lt;/a0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;a0&gt;Constructors&lt;/a0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T032034Z" creationid="hsugawa8651" creationdate="20181119T032034Z">
        <seg>&lt;a0&gt;コンストラクタ&lt;/a0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;a0&gt;Control Flow&lt;/a0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T031927Z" creationid="hsugawa8651" creationdate="20181119T031927Z">
        <seg>&lt;a0&gt;制御フロー&lt;/a0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;a0&gt;Conversion and Promotion&lt;/a0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T032234Z" creationid="hsugawa8651" creationdate="20181119T032234Z">
        <seg>&lt;a0&gt;変換と昇格&lt;/a0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;a0&gt;Dates&lt;/a0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T130125Z" creationid="hsugawa8651" creationdate="20181119T130125Z">
        <seg>&lt;a0&gt;日付&lt;/a0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;a0&gt;Delimited Files&lt;/a0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T130153Z" creationid="hsugawa8651" creationdate="20181119T130153Z">
        <seg>&lt;a0&gt;デリミタ付きファイル&lt;/a0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;a0&gt;Distributed Computing&lt;/a0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T130157Z" creationid="hsugawa8651" creationdate="20181119T130157Z">
        <seg>&lt;a0&gt;分散コンピューティング&lt;/a0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;a0&gt;Dynamic Linker&lt;/a0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T130211Z" creationid="hsugawa8651" creationdate="20181119T130211Z">
        <seg>&lt;a0&gt;ダイナミックリンカー&lt;/a0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;a0&gt;Embedding Julia&lt;/a0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T072431Z" creationid="hsugawa8651" creationdate="20181119T072431Z">
        <seg>&lt;a0&gt;埋め込みJulia&lt;/a0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;a0&gt;Environment Variables&lt;/a0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T072428Z" creationid="hsugawa8651" creationdate="20181119T072428Z">
        <seg>&lt;a0&gt;環境変数&lt;/a0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;a0&gt;Essentials&lt;/a0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T125543Z" creationid="hsugawa8651" creationdate="20181119T125543Z">
        <seg>&lt;a0&gt;Essentials&lt;/a0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;a0&gt;Eval of Julia code&lt;/a0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T130539Z" creationid="hsugawa8651" creationdate="20181119T130539Z">
        <seg>&lt;a0&gt;Juliaコードの評価&lt;/a0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;a0&gt;Exception Handling&lt;/a0&gt;: &lt;c1&gt;try&lt;/c1&gt;-&lt;c2&gt;catch&lt;/c2&gt;, &lt;a3&gt;&lt;c4&gt;error()&lt;/c4&gt;&lt;/a3&gt; and &lt;a5&gt;&lt;c6&gt;throw()&lt;/c6&gt;&lt;/a5&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T133215Z" creationid="hsugawa8651" creationdate="20181119T133215Z">
        <seg>&lt;a0&gt;例外処理&lt;/a0&gt;: &lt;c1&gt;try&lt;/c1&gt;-&lt;c2&gt;catch&lt;/c2&gt;, &lt;a3&gt;&lt;c4&gt;error()&lt;/c4&gt;&lt;/a3&gt; と &lt;a5&gt;&lt;c6&gt;throw()&lt;/c6&gt;&lt;/a5&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;a0&gt;File Events&lt;/a0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T130200Z" creationid="hsugawa8651" creationdate="20181119T130200Z">
        <seg>&lt;a0&gt;ファイル・イベント&lt;/a0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;a0&gt;Filesystem&lt;/a0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T125935Z" creationid="hsugawa8651" creationdate="20181119T125935Z">
        <seg>&lt;a0&gt;ファイルシステム&lt;/a0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;a0&gt;Functions&lt;/a0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T031923Z" creationid="hsugawa8651" creationdate="20181119T031923Z">
        <seg>&lt;a0&gt;関数&lt;/a0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;a0&gt;Getting Started&lt;/a0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T031832Z" creationid="hsugawa8651" creationdate="20181119T031832Z">
        <seg>&lt;a0&gt;はじめよう&lt;/a0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;a0&gt;Handling Operating System Variation&lt;/a0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T072423Z" creationid="hsugawa8651" creationdate="20181119T072423Z">
        <seg>&lt;a0&gt;オペレーティング・システムの違いを扱う&lt;/a0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;a0&gt;High-level Overview of the Native-Code Generation Process&lt;/a0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T130603Z" creationid="hsugawa8651" creationdate="20181119T130603Z">
        <seg>&lt;a0&gt;ネイティブ・コード生成過程の高水準な概要(&lt;/a0&gt;)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;a0&gt;Home&lt;/a0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T031805Z" creationid="hsugawa8651" creationdate="20181119T031805Z">
        <seg>&lt;a0&gt;Home&lt;/a0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;a0&gt;I/O and Network&lt;/a0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T125948Z" creationid="hsugawa8651" creationdate="20181119T125948Z">
        <seg>&lt;a0&gt;入出力およびネットワーク&lt;/a0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;a0&gt;Indexing and assignment&lt;/a0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T125644Z" creationid="hsugawa8651" creationdate="20181119T125644Z">
        <seg>&lt;a0&gt;インデックスと代入&lt;/a0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;a0&gt;Inference&lt;/a0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T130741Z" creationid="hsugawa8651" creationdate="20181119T130741Z">
        <seg>&lt;a0&gt;型推論&lt;/a0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;a0&gt;Initialization of the Julia runtime&lt;/a0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T130443Z" creationid="hsugawa8651" creationdate="20181119T130443Z">
        <seg>&lt;a0&gt;Juliaランタイムの初期化&lt;/a0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;a0&gt;Integers and Floating-Point Numbers&lt;/a0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T031854Z" creationid="hsugawa8651" creationdate="20181119T031854Z">
        <seg>&lt;a0&gt;整数および浮動小数点数&lt;/a0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;a0&gt;Interactive Utilities&lt;/a0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T130202Z" creationid="hsugawa8651" creationdate="20181119T130202Z">
        <seg>&lt;a0&gt;インタラクティブ・ユーティリティ&lt;/a0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;a0&gt;Interfaces&lt;/a0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T072245Z" creationid="hsugawa8651" creationdate="20181119T072245Z">
        <seg>&lt;a0&gt;インタフェース&lt;/a0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;a0&gt;Julia ASTs&lt;/a0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T130501Z" creationid="hsugawa8651" creationdate="20181119T130447Z">
        <seg>&lt;a0&gt;Julia AST&lt;/a0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;a0&gt;Julia Functions&lt;/a0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T130609Z" creationid="hsugawa8651" creationdate="20181119T130609Z">
        <seg>&lt;a0&gt;Julia関数&lt;/a0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;a0&gt;Julia SSA-form IR&lt;/a0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T130747Z" creationid="hsugawa8651" creationdate="20181119T130747Z">
        <seg>&lt;a0&gt;Julia SSA-form IR&lt;/a0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;a0&gt;LibGit2&lt;/a0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T130204Z" creationid="hsugawa8651" creationdate="20181119T130204Z">
        <seg>&lt;a0&gt;LibGit2&lt;/a0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;a0&gt;Linear Algebra&lt;/a0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T130213Z" creationid="hsugawa8651" creationdate="20181119T130213Z">
        <seg>&lt;a0&gt;線形代数&lt;/a0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;a0&gt;Logging&lt;/a0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T130215Z" creationid="hsugawa8651" creationdate="20181119T130215Z">
        <seg>&lt;a0&gt;ロギング&lt;/a0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;a0&gt;Markdown&lt;/a0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T130217Z" creationid="hsugawa8651" creationdate="20181119T130217Z">
        <seg>&lt;a0&gt;Markdown&lt;/a0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;a0&gt;Mathematical Operations and Elementary Functions&lt;/a0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T031859Z" creationid="hsugawa8651" creationdate="20181119T031859Z">
        <seg>&lt;a0&gt;算術演算と基本関数&lt;/a0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;a0&gt;Mathematics&lt;/a0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T125550Z" creationid="hsugawa8651" creationdate="20181119T125550Z">
        <seg>&lt;a0&gt;数学&lt;/a0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;a0&gt;Memory layout of Julia Objects&lt;/a0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T130529Z" creationid="hsugawa8651" creationdate="20181119T130529Z">
        <seg>&lt;a0&gt;Juliaオブジェクトのメモリ配置&lt;/a0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;a0&gt;Memory-mapped I/O&lt;/a0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T130252Z" creationid="hsugawa8651" creationdate="20181119T130252Z">
        <seg>&lt;a0&gt;メモリ配置入出力&lt;/a0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;a0&gt;Metaprogramming&lt;/a0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T191807Z" creationid="hsugawa8651" creationdate="20181118T191807Z">
        <seg>メタプログラミング</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;a0&gt;Methods&lt;/a0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T032028Z" creationid="hsugawa8651" creationdate="20181119T032028Z">
        <seg>&lt;a0&gt;メソッド&lt;/a0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;a0&gt;Missing Values&lt;/a0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T072317Z" creationid="hsugawa8651" creationdate="20181119T072317Z">
        <seg>&lt;a0&gt;欠損値&lt;/a0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;a0&gt;Module loading&lt;/a0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T130733Z" creationid="hsugawa8651" creationdate="20181119T130733Z">
        <seg>&lt;a0&gt;モジュールのロード&lt;/a0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;a0&gt;Modules&lt;/a0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T072252Z" creationid="hsugawa8651" creationdate="20181119T072252Z">
        <seg>&lt;a0&gt;モジュール&lt;/a0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;a0&gt;More about types&lt;/a0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T130516Z" creationid="hsugawa8651" creationdate="20181119T130516Z">
        <seg>&lt;a0&gt;型について詳しく&lt;/a0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;a0&gt;Multi-Threading&lt;/a0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T125929Z" creationid="hsugawa8651" creationdate="20181119T125929Z">
        <seg>&lt;a0&gt;マルチスレッド&lt;/a0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;a0&gt;Multi-dimensional Arrays&lt;/a0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T072302Z" creationid="hsugawa8651" creationdate="20181119T072302Z">
        <seg>&lt;a0&gt;多次元配列&lt;/a0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;a0&gt;Networking and Streams&lt;/a0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T072322Z" creationid="hsugawa8651" creationdate="20181119T072322Z">
        <seg>&lt;a0&gt;ネットワーキングおよびストリーム&lt;/a0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;a0&gt;Numbers&lt;/a0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T125552Z" creationid="hsugawa8651" creationdate="20181119T125552Z">
        <seg>&lt;a0&gt;数値&lt;/a0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;a0&gt;Parallel Computing&lt;/a0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T072325Z" creationid="hsugawa8651" creationdate="20181119T072325Z">
        <seg>&lt;a0&gt;並列計算&lt;/a0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;a0&gt;Performance Tips&lt;/a0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T072532Z" creationid="hsugawa8651" creationdate="20181119T072532Z">
        <seg>&lt;a0&gt;性能向上のヒント&lt;/a0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;a0&gt;Pkg&lt;/a0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T130255Z" creationid="hsugawa8651" creationdate="20181119T130255Z">
        <seg>&lt;a0&gt;Pkg&lt;/a0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;a0&gt;Printf&lt;/a0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T130259Z" creationid="hsugawa8651" creationdate="20181119T130259Z">
        <seg>&lt;a0&gt;Printf&lt;/a0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;a0&gt;Profiling&lt;/a0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T072450Z" creationid="hsugawa8651" creationdate="20181119T072450Z">
        <seg>&lt;a0&gt;プロファイリング&lt;/a0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;a0&gt;Proper maintenance and care of multi-threading locks&lt;/a0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T130722Z" creationid="hsugawa8651" creationdate="20181119T130722Z">
        <seg>&lt;a0&gt;マルチスレッド・ロックの適切な保守と管理&lt;/a0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;a0&gt;Punctuation&lt;/a0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T130014Z" creationid="hsugawa8651" creationdate="20181119T130014Z">
        <seg>&lt;a0&gt;句読法&lt;/a0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;a0&gt;Random Numbers&lt;/a0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T130321Z" creationid="hsugawa8651" creationdate="20181119T130321Z">
        <seg>&lt;a0&gt;乱数&lt;/a0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;a0&gt;Reflection and introspection&lt;/a0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T130421Z" creationid="hsugawa8651" creationdate="20181119T130421Z">
        <seg>&lt;a0&gt;リフレクションとイントロスペクション&lt;/a0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;a0&gt;Repeated Evaluation: Loops&lt;/a0&gt;: &lt;c1&gt;while&lt;/c1&gt; and &lt;c2&gt;for&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T133056Z" creationid="hsugawa8651" creationdate="20181119T133056Z">
        <seg>&lt;a0&gt;繰り返し評価: ループ&lt;/a0&gt;: &lt;c1&gt;while&lt;/c1&gt; と &lt;c2&gt;for&lt;/c2&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;a0&gt;Reporting and analyzing crashes (segfaults)&lt;/a0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T130809Z" creationid="hsugawa8651" creationdate="20181119T130809Z">
        <seg>&lt;a0&gt;クラッシュの報告と分析(segfaults)&lt;/a0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;a0&gt;Running External Programs&lt;/a0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T072343Z" creationid="hsugawa8651" creationdate="20181119T072343Z">
        <seg>&lt;a0&gt;外部プログラムの実行&lt;/a0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;a0&gt;SHA&lt;/a0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T130322Z" creationid="hsugawa8651" creationdate="20181119T130322Z">
        <seg>&lt;a0&gt;SHA&lt;/a0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;a0&gt;SIMD Support&lt;/a0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T130113Z" creationid="hsugawa8651" creationdate="20181119T130113Z">
        <seg>&lt;a0&gt;SIMDサポート&lt;/a0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;a0&gt;Sanitizer support&lt;/a0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T130837Z" creationid="hsugawa8651" creationdate="20181119T130837Z">
        <seg>&lt;a0&gt;サニタイザのサポート&lt;/a0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;a0&gt;Scope of Variables&lt;/a0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T031954Z" creationid="hsugawa8651" creationdate="20181119T031954Z">
        <seg>&lt;a0&gt;変数のスコープ (可視範囲)&lt;/a0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;a0&gt;Serialization&lt;/a0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T130326Z" creationid="hsugawa8651" creationdate="20181119T130326Z">
        <seg>&lt;a0&gt;シリアル化&lt;/a0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;a0&gt;Shared Arrays&lt;/a0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T130335Z" creationid="hsugawa8651" creationdate="20181119T130335Z">
        <seg>&lt;a0&gt;共有配列&lt;/a0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;a0&gt;Short-Circuit Evaluation&lt;/a0&gt;: &lt;c1&gt;&amp;&amp;&lt;/c1&gt;, &lt;c2&gt;||&lt;/c2&gt; and chained comparisons.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T133000Z" creationid="hsugawa8651" creationdate="20181119T133000Z">
        <seg>&lt;a0&gt;短絡評価&lt;/a0&gt;: &lt;c1&gt;&amp;&amp;&lt;/c1&gt;, &lt;c2&gt;||&lt;/c2&gt; と比較の連鎖。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;a0&gt;Sockets&lt;/a0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T130340Z" creationid="hsugawa8651" creationdate="20181119T130340Z">
        <seg>&lt;a0&gt;ソケット&lt;/a0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;a0&gt;Sorting and Related Functions&lt;/a0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T130024Z" creationid="hsugawa8651" creationdate="20181119T130024Z">
        <seg>&lt;a0&gt;整列と関連関数&lt;/a0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;a0&gt;Sparse Arrays&lt;/a0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T130351Z" creationid="hsugawa8651" creationdate="20181119T130351Z">
        <seg>&lt;a0&gt;疎行列&lt;/a0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;a0&gt;Stack Traces&lt;/a0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T072507Z" creationid="hsugawa8651" creationdate="20181119T072507Z">
        <seg>&lt;a0&gt;スタック・トレース&lt;/a0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;a0&gt;StackTraces&lt;/a0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T130110Z" creationid="hsugawa8651" creationdate="20181119T130110Z">
        <seg>&lt;a0&gt;スタック・トレース&lt;/a0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;a0&gt;Static analyzer annotations for GC correctness in C code&lt;/a0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T130758Z" creationid="hsugawa8651" creationdate="20181119T130758Z">
        <seg>&lt;a0&gt;CコードにおけるGCの正確さのための静的アナライザ注釈(&lt;/a0&gt;)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;a0&gt;Statistics&lt;/a0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T130400Z" creationid="hsugawa8651" creationdate="20181119T130353Z">
        <seg>&lt;a0&gt;統計&lt;/a0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;a0&gt;Strings&lt;/a0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T031918Z" creationid="hsugawa8651" creationdate="20181119T031918Z">
        <seg>&lt;a0&gt;文字列&lt;/a0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;a0&gt;Style Guide&lt;/a0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T072545Z" creationid="hsugawa8651" creationdate="20181119T072545Z">
        <seg>&lt;a0&gt;スタイル・ガイド&lt;/a0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;a0&gt;SubArrays&lt;/a0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T130631Z" creationid="hsugawa8651" creationdate="20181119T130631Z">
        <seg>&lt;a0&gt;部分配列&lt;/a0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;a0&gt;System Image Building&lt;/a0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T130641Z" creationid="hsugawa8651" creationdate="20181119T130641Z">
        <seg>&lt;a0&gt;システムイメージのビルド&lt;/a0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;a0&gt;Talking to the compiler (the &lt;c1&gt;:meta&lt;/c1&gt; mechanism)&lt;/a0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T130622Z" creationid="hsugawa8651" creationdate="20181119T130622Z">
        <seg>&lt;a0&gt;コンパイラとの対話(&lt;c1&gt;:メタ&lt;/c1&gt;メカニズム)&lt;/a0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;a0&gt;Tasks (aka Coroutines)&lt;/a0&gt;: &lt;a1&gt;&lt;c2&gt;yieldto()&lt;/c2&gt;&lt;/a1&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T133312Z" creationid="hsugawa8651" creationdate="20181119T133312Z">
        <seg>&lt;a0&gt;タスク (コルーチンの別称)&lt;/a0&gt;: &lt;a1&gt;&lt;c2&gt;yieldto()&lt;/c2&gt;&lt;/a1&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;a0&gt;Tasks&lt;/a0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T125927Z" creationid="hsugawa8651" creationdate="20181119T125927Z">
        <seg>&lt;a0&gt;タスク&lt;/a0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;a0&gt;The Julia REPL&lt;/a0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T130309Z" creationid="hsugawa8651" creationdate="20181119T130309Z">
        <seg>&lt;a0&gt;Julia REPL&lt;/a0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;a0&gt;Types&lt;/a0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T032023Z" creationid="hsugawa8651" creationdate="20181119T032023Z">
        <seg>&lt;a0&gt;型&lt;/a0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;a0&gt;UUIDs&lt;/a0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T130405Z" creationid="hsugawa8651" creationdate="20181119T130405Z">
        <seg>&lt;a0&gt;UUIDs&lt;/a0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;a0&gt;Unicode Input&lt;/a0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T125537Z" creationid="hsugawa8651" creationdate="20181119T125537Z">
        <seg>&lt;a0&gt;Unicode入力&lt;/a0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;a0&gt;Unicode&lt;/a0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T130409Z" creationid="hsugawa8651" creationdate="20181119T130409Z">
        <seg>&lt;a0&gt;Unicode&lt;/a0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;a0&gt;Unit Testing&lt;/a0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T130403Z" creationid="hsugawa8651" creationdate="20181119T130403Z">
        <seg>&lt;a0&gt;ユニット・テスト&lt;/a0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;a0&gt;Using Valgrind with Julia&lt;/a0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T130827Z" creationid="hsugawa8651" creationdate="20181119T130827Z">
        <seg>&lt;a0&gt;Julia&lt;/a0&gt;におけるValgrindの使用&lt;/a&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;a0&gt;Variables&lt;/a0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T031847Z" creationid="hsugawa8651" creationdate="20181119T031847Z">
        <seg>&lt;a0&gt;変数&lt;/a0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;a0&gt;Working with LLVM&lt;/a0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T130647Z" creationid="hsugawa8651" creationdate="20181119T130647Z">
        <seg>&lt;a0&gt;LLVMを使用する&lt;/a0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;a0&gt;gdb debugging tips&lt;/a0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T130813Z" creationid="hsugawa8651" creationdate="20181119T130813Z">
        <seg>&lt;a0&gt;gdbデバッグのヒント&lt;/a0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;a0&gt;printf() and stdio in the Julia runtime&lt;/a0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T130707Z" creationid="hsugawa8651" creationdate="20181119T130707Z">
        <seg>&lt;a0&gt;Juliaランタイムにおけるprintf()とstdio&lt;/a&gt;&lt;/a&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;a0&gt;source&lt;/a0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131611Z" creationid="hsugawa8651" creationdate="20181119T131605Z">
        <seg>&lt;a0&gt;ソース&lt;/a0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;a0&gt;source&lt;/a0&gt;&lt;/s1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131630Z" creationid="hsugawa8651" creationdate="20181119T131630Z">
        <seg>&lt;a0&gt;source&lt;/a0&gt;&lt;/s1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;a0&gt;source&lt;/a0&gt;&lt;/s1&gt;&lt;s2&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T132308Z" creationid="hsugawa8651" creationdate="20181119T130930Z">
        <seg>&lt;a0&gt;ソース&lt;/a0&gt;&lt;/s1&gt;&lt;s2&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;c0&gt;# Assign the value 10 to the variable x
julia&gt; x = 10
10

# Doing math with x's value
julia&gt; x + 1
11

# Reassign x's value
julia&gt; x = 1 + 1
2

# You can assign values of other types, like strings of text
julia&gt; x = "Hello World!"
"Hello World!"&lt;/c0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T032411Z" creationid="hsugawa8651" creationdate="20181119T032411Z">
        <seg>&lt;c0&gt;# Assign the value 10 to the variable x
julia&gt; x = 10
10

# Doing math with x's value
julia&gt; x + 1
11

# Reassign x's value
julia&gt; x = 1 + 1
2

# You can assign values of other types, like strings of text
julia&gt; x = "Hello World!"
"Hello World!"&lt;/c0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;c0&gt;AbstractArray{T,N}&lt;/c0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T130922Z" creationid="hsugawa8651" creationdate="20181119T130922Z">
        <seg>&lt;c0&gt;AbstractArray{T,N}&lt;/c0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;c0&gt;AbstractMatrix{T}&lt;/c0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131002Z" creationid="hsugawa8651" creationdate="20181119T131002Z">
        <seg>&lt;c0&gt;AbstractMatrix{T}&lt;/c0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;c0&gt;AbstractVecOrMat{T}&lt;/c0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131011Z" creationid="hsugawa8651" creationdate="20181119T131011Z">
        <seg>&lt;c0&gt;AbstractVecOrMat{T}&lt;/c0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;c0&gt;AbstractVector{T}&lt;/c0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T130952Z" creationid="hsugawa8651" creationdate="20181119T130952Z">
        <seg>&lt;c0&gt;AbstractVector{T}&lt;/c0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;c0&gt;Array{T,N} &lt;: AbstractArray{T,N}&lt;/c0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131016Z" creationid="hsugawa8651" creationdate="20181119T131016Z">
        <seg>&lt;c0&gt;Array{T,N} &lt;: AbstractArray{T,N}&lt;/c0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;c0&gt;Array{T}(missing, dims)
Array{T,N}(missing, dims)&lt;/c0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131054Z" creationid="hsugawa8651" creationdate="20181119T131054Z">
        <seg>&lt;c0&gt;Array{T}(missing, dims)
Array{T,N}(missing, dims)&lt;/c0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;c0&gt;Array{T}(nothing, dims)
Array{T,N}(nothing, dims)&lt;/c0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131045Z" creationid="hsugawa8651" creationdate="20181119T131045Z">
        <seg>&lt;c0&gt;Array{T}(nothing, dims)
Array{T,N}(nothing, dims)&lt;/c0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;c0&gt;Array{T}(undef, dims)
Array{T,N}(undef, dims)&lt;/c0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131024Z" creationid="hsugawa8651" creationdate="20181119T131024Z">
        <seg>&lt;c0&gt;Array{T}(undef, dims)
Array{T,N}(undef, dims)&lt;/c0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;c0&gt;Base.IndexStyle(::Type{&lt;:MyArray}) = IndexLinear()&lt;/c0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131827Z" creationid="hsugawa8651" creationdate="20181119T131827Z">
        <seg>&lt;c0&gt;Base.IndexStyle(::Type{&lt;:MyArray}) = IndexLinear()&lt;/c0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;c0&gt;BitArray(itr)&lt;/c0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131510Z" creationid="hsugawa8651" creationdate="20181119T131510Z">
        <seg>&lt;c0&gt;BitArray(itr)&lt;/c0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;c0&gt;BitArray(undef, dims::Integer...)
BitArray{N}(undef, dims::NTuple{N,Int})&lt;/c0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131456Z" creationid="hsugawa8651" creationdate="20181119T131456Z">
        <seg>&lt;c0&gt;BitArray(undef, dims::Integer...)
BitArray{N}(undef, dims::NTuple{N,Int})&lt;/c0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;c0&gt;BitArray{N} &lt;: DenseArray{Bool, N}&lt;/c0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131447Z" creationid="hsugawa8651" creationdate="20181119T131447Z">
        <seg>&lt;c0&gt;BitArray{N} &lt;: DenseArray{Bool, N}&lt;/c0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;c0&gt;DenseArray{T, N} &lt;: AbstractArray{T,N}&lt;/c0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131323Z" creationid="hsugawa8651" creationdate="20181119T131323Z">
        <seg>&lt;c0&gt;DenseArray{T, N} &lt;: AbstractArray{T,N}&lt;/c0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;c0&gt;DenseMatrix{T}&lt;/c0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131339Z" creationid="hsugawa8651" creationdate="20181119T131339Z">
        <seg>&lt;c0&gt;DenseMatrix{T}&lt;/c0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;c0&gt;DenseVecOrMat{T}&lt;/c0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131347Z" creationid="hsugawa8651" creationdate="20181119T131347Z">
        <seg>&lt;c0&gt;DenseVecOrMat{T}&lt;/c0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;c0&gt;DenseVector{T}&lt;/c0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131330Z" creationid="hsugawa8651" creationdate="20181119T131330Z">
        <seg>&lt;c0&gt;DenseVector{T}&lt;/c0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;c0&gt;Exception&lt;/c0&gt;s are thrown when an unexpected condition has occurred.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T143244Z" creationid="hsugawa8651" creationdate="20181119T143206Z">
        <seg>&lt;c0&gt;例外&lt;/c0&gt;は予想外の状況が発生したときに投げられます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;c0&gt;IndexCartesian()&lt;/c0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131858Z" creationid="hsugawa8651" creationdate="20181119T131858Z">
        <seg>&lt;c0&gt;IndexCartesian()&lt;/c0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;c0&gt;IndexLinear()&lt;/c0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131850Z" creationid="hsugawa8651" creationdate="20181119T131850Z">
        <seg>&lt;c0&gt;IndexLinear()&lt;/c0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;c0&gt;IndexStyle(A)
IndexStyle(typeof(A))&lt;/c0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131823Z" creationid="hsugawa8651" creationdate="20181119T131823Z">
        <seg>&lt;c0&gt;IndexStyle(A)
IndexStyle(typeof(A))&lt;/c0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;c0&gt;Matrix{T} &lt;: AbstractMatrix{T}&lt;/c0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131206Z" creationid="hsugawa8651" creationdate="20181119T131206Z">
        <seg>&lt;c0&gt;Matrix{T} &lt;: AbstractMatrix{T}&lt;/c0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;c0&gt;Matrix{T}(missing, m, n)&lt;/c0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131306Z" creationid="hsugawa8651" creationdate="20181119T131306Z">
        <seg>&lt;c0&gt;Matrix{T}(missing, m, n)&lt;/c0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;c0&gt;Matrix{T}(nothing, m, n)&lt;/c0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131224Z" creationid="hsugawa8651" creationdate="20181119T131224Z">
        <seg>&lt;c0&gt;Matrix{T}(nothing, m, n)&lt;/c0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;c0&gt;Matrix{T}(undef, m, n)&lt;/c0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131216Z" creationid="hsugawa8651" creationdate="20181119T131216Z">
        <seg>&lt;c0&gt;Matrix{T}(undef, m, n)&lt;/c0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;c0&gt;Stateful(itr)&lt;/c0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T192147Z" creationid="hsugawa8651" creationdate="20181118T192147Z">
        <seg>&lt;c0&gt;Stateful(itr)&lt;/c0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;c0&gt;StridedArray{T, N}&lt;/c0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131354Z" creationid="hsugawa8651" creationdate="20181119T131354Z">
        <seg>&lt;c0&gt;StridedArray{T, N}&lt;/c0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;c0&gt;StridedMatrix{T}&lt;/c0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131409Z" creationid="hsugawa8651" creationdate="20181119T131409Z">
        <seg>&lt;c0&gt;StridedMatrix{T}&lt;/c0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;c0&gt;StridedVecOrMat{T}&lt;/c0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131415Z" creationid="hsugawa8651" creationdate="20181119T131415Z">
        <seg>&lt;c0&gt;StridedVecOrMat{T}&lt;/c0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;c0&gt;StridedVector{T}&lt;/c0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131403Z" creationid="hsugawa8651" creationdate="20181119T131403Z">
        <seg>&lt;c0&gt;StridedVector{T}&lt;/c0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;c0&gt;UndefInitializer&lt;/c0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131105Z" creationid="hsugawa8651" creationdate="20181119T131105Z">
        <seg>&lt;c0&gt;UndefInitializer&lt;/c0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;c0&gt;VecOrMat{T}&lt;/c0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131315Z" creationid="hsugawa8651" creationdate="20181119T131315Z">
        <seg>&lt;c0&gt;VecOrMat{T}&lt;/c0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;c0&gt;Vector{T} &lt;: AbstractVector{T}&lt;/c0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131125Z" creationid="hsugawa8651" creationdate="20181119T131125Z">
        <seg>&lt;c0&gt;Vector{T} &lt;: AbstractVector{T}&lt;/c0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;c0&gt;Vector{T}(missing, m)&lt;/c0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131155Z" creationid="hsugawa8651" creationdate="20181119T131155Z">
        <seg>&lt;c0&gt;Vector{T}(missing, m)&lt;/c0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;c0&gt;Vector{T}(nothing, m)&lt;/c0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131146Z" creationid="hsugawa8651" creationdate="20181119T131146Z">
        <seg>&lt;c0&gt;Vector{T}(nothing, m)&lt;/c0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;c0&gt;Vector{T}(undef, n)&lt;/c0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131136Z" creationid="hsugawa8651" creationdate="20181119T131136Z">
        <seg>&lt;c0&gt;Vector{T}(undef, n)&lt;/c0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;c0&gt;axes(A)&lt;/c0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131731Z" creationid="hsugawa8651" creationdate="20181119T131731Z">
        <seg>&lt;c0&gt;axes(A)&lt;/c0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;c0&gt;axes(A, d)&lt;/c0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131738Z" creationid="hsugawa8651" creationdate="20181119T131738Z">
        <seg>&lt;c0&gt;axes(A, d)&lt;/c0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;c0&gt;conj!(A)&lt;/c0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131910Z" creationid="hsugawa8651" creationdate="20181119T131910Z">
        <seg>&lt;c0&gt;conj!(A)&lt;/c0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;c0&gt;countfrom(start=1, step=1)&lt;/c0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T192247Z" creationid="hsugawa8651" creationdate="20181118T192247Z">
        <seg>&lt;c0&gt;countfrom(start=1, step=1)&lt;/c0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;c0&gt;cycle(iter)&lt;/c0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T192319Z" creationid="hsugawa8651" creationdate="20181118T192319Z">
        <seg>&lt;c0&gt;cycle(iter)&lt;/c0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;c0&gt;drop(iter, n)&lt;/c0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T192310Z" creationid="hsugawa8651" creationdate="20181118T192310Z">
        <seg>&lt;c0&gt;drop(iter, n)&lt;/c0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;c0&gt;eachindex(A...)&lt;/c0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131810Z" creationid="hsugawa8651" creationdate="20181119T131810Z">
        <seg>&lt;c0&gt;eachindex(A...)&lt;/c0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;c0&gt;enumerate(iter)&lt;/c0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T192222Z" creationid="hsugawa8651" creationdate="20181118T192222Z">
        <seg>&lt;c0&gt;enumerate(iter)&lt;/c0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;c0&gt;falses(dims)&lt;/c0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131526Z" creationid="hsugawa8651" creationdate="20181119T131526Z">
        <seg>&lt;c0&gt;falses(dims)&lt;/c0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;c0&gt;fill!(A, x)&lt;/c0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131542Z" creationid="hsugawa8651" creationdate="20181119T131542Z">
        <seg>&lt;c0&gt;fill!(A, x)&lt;/c0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;c0&gt;fill(x, dims)&lt;/c0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131532Z" creationid="hsugawa8651" creationdate="20181119T131532Z">
        <seg>&lt;c0&gt;fill(x, dims)&lt;/c0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;c0&gt;flatten(iter)&lt;/c0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T192354Z" creationid="hsugawa8651" creationdate="20181118T192354Z">
        <seg>&lt;c0&gt;flatten(iter)&lt;/c0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;c0&gt;getindex(type[, elements...])&lt;/c0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131421Z" creationid="hsugawa8651" creationdate="20181119T131421Z">
        <seg>&lt;c0&gt;getindex(type[, elements...])&lt;/c0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;c0&gt;if&lt;/c0&gt; blocks also return a value, which may seem unintuitive to users coming from many other languages.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T134714Z" creationid="hsugawa8651" creationdate="20181119T134649Z">
        <seg>&lt;c0&gt;if&lt;/c0&gt;ブロックは値を返しますが、他の言語を利用する多くの人の直観に反するようです。 </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;c0&gt;if&lt;/c0&gt; blocks are "leaky", i.e. they do not introduce a local scope.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T134528Z" creationid="hsugawa8651" creationdate="20181119T134425Z">
        <seg>&lt;c0&gt;if&lt;/c0&gt;ブロックには「漏れ」があり、ローカルスコープを採用していません。 </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;c0&gt;julia&gt; A = Array{Float64,2}(undef, 2, 3) # N given explicitly
2×3 Array{Float64,2}:
 6.90198e-310  6.90198e-310  6.90198e-310
 6.90198e-310  6.90198e-310  0.0

julia&gt; B = Array{Float64}(undef, 2) # N determined by the input
2-element Array{Float64,1}:
 1.87103e-320
 0.0&lt;/c0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131032Z" creationid="hsugawa8651" creationdate="20181119T131032Z">
        <seg>&lt;c0&gt;julia&gt; A = Array{Float64,2}(undef, 2, 3) # N given explicitly
2×3 Array{Float64,2}:
 6.90198e-310  6.90198e-310  6.90198e-310
 6.90198e-310  6.90198e-310  0.0

julia&gt; B = Array{Float64}(undef, 2) # N determined by the input
2-element Array{Float64,1}:
 1.87103e-320
 0.0&lt;/c0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;c0&gt;julia&gt; A = [1 2; 3 4];

julia&gt; for i in eachindex(A) # linear indexing
           println(i)
       end
1
2
3
4

julia&gt; for i in eachindex(view(A, 1:2, 1:1)) # Cartesian indexing
           println(i)
       end
CartesianIndex(1, 1)
CartesianIndex(2, 1)&lt;/c0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131817Z" creationid="hsugawa8651" creationdate="20181119T131817Z">
        <seg>&lt;c0&gt;julia&gt; A = [1 2; 3 4];

julia&gt; for i in eachindex(A) # linear indexing
           println(i)
       end
1
2
3
4

julia&gt; for i in eachindex(view(A, 1:2, 1:1)) # Cartesian indexing
           println(i)
       end
CartesianIndex(1, 1)
CartesianIndex(2, 1)&lt;/c0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;c0&gt;julia&gt; A = [1+im 2-im; 2+2im 3+im]
2×2 Array{Complex{Int64},2}:
 1+1im  2-1im
 2+2im  3+1im

julia&gt; conj!(A);

julia&gt; A
2×2 Array{Complex{Int64},2}:
 1-1im  2+1im
 2-2im  3-1im&lt;/c0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131915Z" creationid="hsugawa8651" creationdate="20181119T131915Z">
        <seg>&lt;c0&gt;julia&gt; A = [1+im 2-im; 2+2im 3+im]
2×2 Array{Complex{Int64},2}:
 1+1im  2-1im
 2+2im  3+1im

julia&gt; conj!(A);

julia&gt; A
2×2 Array{Complex{Int64},2}:
 1-1im  2+1im
 2-2im  3-1im&lt;/c0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;c0&gt;julia&gt; A = [1, 2, 3, 4, 5]
5-element Array{Int64,1}:
 1
 2
 3
 4
 5

julia&gt; B = [1 2; 3 4; 5 6; 7 8; 9 10]
5×2 Array{Int64,2}:
 1   2
 3   4
 5   6
 7   8
 9  10

julia&gt; broadcast(+, A, B)
5×2 Array{Int64,2}:
  2   3
  5   6
  8   9
 11  12
 14  15

julia&gt; parse.(Int, ["1", "2"])
2-element Array{Int64,1}:
 1
 2

julia&gt; abs.((1, -2))
(1, 2)

julia&gt; broadcast(+, 1.0, (0, -2.0))
(1.0, -1.0)

julia&gt; (+).([[0,2], [1,3]], Ref{Vector{Int}}([1,-1]))
2-element Array{Array{Int64,1},1}:
 [1, 1]
 [2, 2]

julia&gt; string.(("one","two","three","four"), ": ", 1:4)
4-element Array{String,1}:
 "one: 1"
 "two: 2"
 "three: 3"
 "four: 4"
&lt;/c0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T132215Z" creationid="hsugawa8651" creationdate="20181119T132215Z">
        <seg>&lt;c0&gt;julia&gt; A = [1, 2, 3, 4, 5]
5-element Array{Int64,1}:
 1
 2
 3
 4
 5

julia&gt; B = [1 2; 3 4; 5 6; 7 8; 9 10]
5×2 Array{Int64,2}:
 1   2
 3   4
 5   6
 7   8
 9  10

julia&gt; broadcast(+, A, B)
5×2 Array{Int64,2}:
  2   3
  5   6
  8   9
 11  12
 14  15

julia&gt; parse.(Int, ["1", "2"])
2-element Array{Int64,1}:
 1
 2

julia&gt; abs.((1, -2))
(1, 2)

julia&gt; broadcast(+, 1.0, (0, -2.0))
(1.0, -1.0)

julia&gt; (+).([[0,2], [1,3]], Ref{Vector{Int}}([1,-1]))
2-element Array{Array{Int64,1},1}:
 [1, 1]
 [2, 2]

julia&gt; string.(("one","two","three","four"), ": ", 1:4)
4-element Array{String,1}:
 "one: 1"
 "two: 2"
 "three: 3"
 "four: 4"
&lt;/c0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;c0&gt;julia&gt; A = fill(1, (2,3,4));

julia&gt; size(A)
(2, 3, 4)

julia&gt; size(A, 2)
3&lt;/c0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131726Z" creationid="hsugawa8651" creationdate="20181119T131726Z">
        <seg>&lt;c0&gt;julia&gt; A = fill(1, (2,3,4));

julia&gt; size(A)
(2, 3, 4)

julia&gt; size(A, 2)
3&lt;/c0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;c0&gt;julia&gt; A = fill(1, (3,4,5));

julia&gt; ndims(A)
3&lt;/c0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131715Z" creationid="hsugawa8651" creationdate="20181119T131715Z">
        <seg>&lt;c0&gt;julia&gt; A = fill(1, (3,4,5));

julia&gt; ndims(A)
3&lt;/c0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;c0&gt;julia&gt; A = fill(1, (3,4,5));

julia&gt; stride(A,2)
3

julia&gt; stride(A,3)
12&lt;/c0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131922Z" creationid="hsugawa8651" creationdate="20181119T131922Z">
        <seg>&lt;c0&gt;julia&gt; A = fill(1, (3,4,5));

julia&gt; stride(A,2)
3

julia&gt; stride(A,3)
12&lt;/c0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;c0&gt;julia&gt; A = fill(1, (3,4,5));

julia&gt; strides(A)
(1, 3, 12)&lt;/c0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131929Z" creationid="hsugawa8651" creationdate="20181119T131929Z">
        <seg>&lt;c0&gt;julia&gt; A = fill(1, (3,4,5));

julia&gt; strides(A)
(1, 3, 12)&lt;/c0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;c0&gt;julia&gt; A = fill(1, (5,6,7));

julia&gt; axes(A)
(Base.OneTo(5), Base.OneTo(6), Base.OneTo(7))&lt;/c0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131734Z" creationid="hsugawa8651" creationdate="20181119T131734Z">
        <seg>&lt;c0&gt;julia&gt; A = fill(1, (5,6,7));

julia&gt; axes(A)
(Base.OneTo(5), Base.OneTo(6), Base.OneTo(7))&lt;/c0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;c0&gt;julia&gt; A = fill(1, (5,6,7));

julia&gt; axes(A, 2)
Base.OneTo(6)&lt;/c0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131742Z" creationid="hsugawa8651" creationdate="20181119T131742Z">
        <seg>&lt;c0&gt;julia&gt; A = fill(1, (5,6,7));

julia&gt; axes(A, 2)
Base.OneTo(6)&lt;/c0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;c0&gt;julia&gt; A = zeros(2,3)
2×3 Array{Float64,2}:
 0.0  0.0  0.0
 0.0  0.0  0.0

julia&gt; fill!(A, 2.)
2×3 Array{Float64,2}:
 2.0  2.0  2.0
 2.0  2.0  2.0

julia&gt; a = [1, 1, 1]; A = fill!(Vector{Vector{Int}}(undef, 3), a); a[1] = 2; A
3-element Array{Array{Int64,1},1}:
 [2, 1, 1]
 [2, 1, 1]
 [2, 1, 1]

julia&gt; x = 0; f() = (global x += 1; x); fill!(Vector{Int}(undef, 3), f())
3-element Array{Int64,1}:
 1
 1
 1&lt;/c0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131546Z" creationid="hsugawa8651" creationdate="20181119T131546Z">
        <seg>&lt;c0&gt;julia&gt; A = zeros(2,3)
2×3 Array{Float64,2}:
 0.0  0.0  0.0
 0.0  0.0  0.0

julia&gt; fill!(A, 2.)
2×3 Array{Float64,2}:
 2.0  2.0  2.0
 2.0  2.0  2.0

julia&gt; a = [1, 1, 1]; A = fill!(Vector{Vector{Int}}(undef, 3), a); a[1] = 2; A
3-element Array{Array{Int64,1},1}:
 [2, 1, 1]
 [2, 1, 1]
 [2, 1, 1]

julia&gt; x = 0; f() = (global x += 1; x); fill!(Vector{Int}(undef, 3), f())
3-element Array{Int64,1}:
 1
 1
 1&lt;/c0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;c0&gt;julia&gt; Array{Float64,1}(UndefInitializer(), 3)
3-element Array{Float64,1}:
 2.2752528595e-314
 2.202942107e-314
 2.275252907e-314&lt;/c0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131110Z" creationid="hsugawa8651" creationdate="20181119T131110Z">
        <seg>&lt;c0&gt;julia&gt; Array{Float64,1}(UndefInitializer(), 3)
3-element Array{Float64,1}:
 2.2752528595e-314
 2.202942107e-314
 2.275252907e-314&lt;/c0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;c0&gt;julia&gt; Array{Float64,1}(undef, 3)
3-element Array{Float64,1}:
 2.2752528595e-314
 2.202942107e-314
 2.275252907e-314&lt;/c0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131118Z" creationid="hsugawa8651" creationdate="20181119T131118Z">
        <seg>&lt;c0&gt;julia&gt; Array{Float64,1}(undef, 3)
3-element Array{Float64,1}:
 2.2752528595e-314
 2.202942107e-314
 2.275252907e-314&lt;/c0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;c0&gt;julia&gt; Array{Union{Missing, String}}(missing, 2)
2-element Array{Union{Missing, String},1}:
 missing
 missing

julia&gt; Array{Union{Missing, Int}}(missing, 2, 3)
2×3 Array{Union{Missing, Int64},2}:
 missing  missing  missing
 missing  missing  missing&lt;/c0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131100Z" creationid="hsugawa8651" creationdate="20181119T131100Z">
        <seg>&lt;c0&gt;julia&gt; Array{Union{Missing, String}}(missing, 2)
2-element Array{Union{Missing, String},1}:
 missing
 missing

julia&gt; Array{Union{Missing, Int}}(missing, 2, 3)
2×3 Array{Union{Missing, Int64},2}:
 missing  missing  missing
 missing  missing  missing&lt;/c0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;c0&gt;julia&gt; Array{Union{Nothing, String}}(nothing, 2)
2-element Array{Union{Nothing, String},1}:
 nothing
 nothing

julia&gt; Array{Union{Nothing, Int}}(nothing, 2, 3)
2×3 Array{Union{Nothing, Int64},2}:
 nothing  nothing  nothing
 nothing  nothing  nothing&lt;/c0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131050Z" creationid="hsugawa8651" creationdate="20181119T131050Z">
        <seg>&lt;c0&gt;julia&gt; Array{Union{Nothing, String}}(nothing, 2)
2-element Array{Union{Nothing, String},1}:
 nothing
 nothing

julia&gt; Array{Union{Nothing, Int}}(nothing, 2, 3)
2×3 Array{Union{Nothing, Int64},2}:
 nothing  nothing  nothing
 nothing  nothing  nothing&lt;/c0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;c0&gt;julia&gt; BitArray([1 0; 0 1])
2×2 BitArray{2}:
  true  false
 false   true

julia&gt; BitArray(x+y == 3 for x = 1:2, y = 1:3)
2×3 BitArray{2}:
 false   true  false
  true  false  false

julia&gt; BitArray(x+y == 3 for x = 1:2 for y = 1:3)
6-element BitArray{1}:
 false
  true
 false
  true
 false
 false&lt;/c0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131513Z" creationid="hsugawa8651" creationdate="20181119T131513Z">
        <seg>&lt;c0&gt;julia&gt; BitArray([1 0; 0 1])
2×2 BitArray{2}:
  true  false
 false   true

julia&gt; BitArray(x+y == 3 for x = 1:2, y = 1:3)
2×3 BitArray{2}:
 false   true  false
  true  false  false

julia&gt; BitArray(x+y == 3 for x = 1:2 for y = 1:3)
6-element BitArray{1}:
 false
  true
 false
  true
 false
 false&lt;/c0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;c0&gt;julia&gt; BitArray(undef, 2, 2)
2×2 BitArray{2}:
 false  false
 false  true

julia&gt; BitArray(undef, (3, 1))
3×1 BitArray{2}:
 false
 true
 false&lt;/c0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131506Z" creationid="hsugawa8651" creationdate="20181119T131506Z">
        <seg>&lt;c0&gt;julia&gt; BitArray(undef, 2, 2)
2×2 BitArray{2}:
 false  false
 false  true

julia&gt; BitArray(undef, (3, 1))
3×1 BitArray{2}:
 false
 true
 false&lt;/c0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;c0&gt;julia&gt; Int8[1, 2, 3]
3-element Array{Int8,1}:
 1
 2
 3

julia&gt; getindex(Int8, 1, 2, 3)
3-element Array{Int8,1}:
 1
 2
 3&lt;/c0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131425Z" creationid="hsugawa8651" creationdate="20181119T131425Z">
        <seg>&lt;c0&gt;julia&gt; Int8[1, 2, 3]
3-element Array{Int8,1}:
 1
 2
 3

julia&gt; getindex(Int8, 1, 2, 3)
3-element Array{Int8,1}:
 1
 2
 3&lt;/c0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;c0&gt;julia&gt; Matrix{Float64}(undef, 2, 3)
2×3 Array{Float64,2}:
 6.93517e-310  6.93517e-310  6.93517e-310
 6.93517e-310  6.93517e-310  1.29396e-320&lt;/c0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131219Z" creationid="hsugawa8651" creationdate="20181119T131219Z">
        <seg>&lt;c0&gt;julia&gt; Matrix{Float64}(undef, 2, 3)
2×3 Array{Float64,2}:
 6.93517e-310  6.93517e-310  6.93517e-310
 6.93517e-310  6.93517e-310  1.29396e-320&lt;/c0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;c0&gt;julia&gt; Matrix{Union{Missing, String}}(missing, 2, 3)
2×3 Array{Union{Missing, String},2}:
 missing  missing  missing
 missing  missing  missing&lt;/c0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131309Z" creationid="hsugawa8651" creationdate="20181119T131309Z">
        <seg>&lt;c0&gt;julia&gt; Matrix{Union{Missing, String}}(missing, 2, 3)
2×3 Array{Union{Missing, String},2}:
 missing  missing  missing
 missing  missing  missing&lt;/c0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;c0&gt;julia&gt; Matrix{Union{Nothing, String}}(nothing, 2, 3)
2×3 Array{Union{Nothing, String},2}:
 nothing  nothing  nothing
 nothing  nothing  nothing&lt;/c0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131259Z" creationid="hsugawa8651" creationdate="20181119T131259Z">
        <seg>&lt;c0&gt;julia&gt; Matrix{Union{Nothing, String}}(nothing, 2, 3)
2×3 Array{Union{Nothing, String},2}:
 nothing  nothing  nothing
 nothing  nothing  nothing&lt;/c0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;c0&gt;julia&gt; Vector{Float64}(undef, 3)
3-element Array{Float64,1}:
 6.90966e-310
 6.90966e-310
 6.90966e-310&lt;/c0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131140Z" creationid="hsugawa8651" creationdate="20181119T131140Z">
        <seg>&lt;c0&gt;julia&gt; Vector{Float64}(undef, 3)
3-element Array{Float64,1}:
 6.90966e-310
 6.90966e-310
 6.90966e-310&lt;/c0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;c0&gt;julia&gt; Vector{Union{Missing, String}}(missing, 2)
2-element Array{Union{Missing, String},1}:
 missing
 missing&lt;/c0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131159Z" creationid="hsugawa8651" creationdate="20181119T131159Z">
        <seg>&lt;c0&gt;julia&gt; Vector{Union{Missing, String}}(missing, 2)
2-element Array{Union{Missing, String},1}:
 missing
 missing&lt;/c0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;c0&gt;julia&gt; Vector{Union{Nothing, String}}(nothing, 2)
2-element Array{Union{Nothing, String},1}:
 nothing
 nothing&lt;/c0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131150Z" creationid="hsugawa8651" creationdate="20181119T131150Z">
        <seg>&lt;c0&gt;julia&gt; Vector{Union{Nothing, String}}(nothing, 2)
2-element Array{Union{Nothing, String},1}:
 nothing
 nothing&lt;/c0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;c0&gt;julia&gt; a = 1:2:11
1:2:11

julia&gt; collect(a)
6-element Array{Int64,1}:
  1
  3
  5
  7
  9
 11

julia&gt; collect(Iterators.drop(a,4))
2-element Array{Int64,1}:
  9
 11&lt;/c0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T192312Z" creationid="hsugawa8651" creationdate="20181118T192312Z">
        <seg>&lt;c0&gt;julia&gt; a = 1:2:11
1:2:11

julia&gt; collect(a)
6-element Array{Int64,1}:
  1
  3
  5
  7
  9
 11

julia&gt; collect(Iterators.drop(a,4))
2-element Array{Int64,1}:
  9
 11&lt;/c0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;c0&gt;julia&gt; a = 1:2:11
1:2:11

julia&gt; collect(a)
6-element Array{Int64,1}:
  1
  3
  5
  7
  9
 11

julia&gt; collect(Iterators.take(a,3))
3-element Array{Int64,1}:
 1
 3
 5&lt;/c0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T192303Z" creationid="hsugawa8651" creationdate="20181118T192303Z">
        <seg>&lt;c0&gt;julia&gt; a = 1:2:11
1:2:11

julia&gt; collect(a)
6-element Array{Int64,1}:
  1
  3
  5
  7
  9
 11

julia&gt; collect(Iterators.take(a,3))
3-element Array{Int64,1}:
 1
 3
 5&lt;/c0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;c0&gt;julia&gt; a = 1:5
1:5

julia&gt; b = ["e","d","b","c","a"]
5-element Array{String,1}:
 "e"
 "d"
 "b"
 "c"
 "a"

julia&gt; c = zip(a,b)
Base.Iterators.Zip2{UnitRange{Int64},Array{String,1}}(1:5, ["e", "d", "b", "c", "a"])

julia&gt; length(c)
5

julia&gt; first(c)
(1, "e")&lt;/c0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T192213Z" creationid="hsugawa8651" creationdate="20181118T192213Z">
        <seg>&lt;c0&gt;julia&gt; a = 1:5
1:5

julia&gt; b = ["e","d","b","c","a"]
5-element Array{String,1}:
 "e"
 "d"
 "b"
 "c"
 "a"

julia&gt; c = zip(a,b)
Base.Iterators.Zip2{UnitRange{Int64},Array{String,1}}(1:5, ["e", "d", "b", "c", "a"])

julia&gt; length(c)
5

julia&gt; first(c)
(1, "e")&lt;/c0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;c0&gt;julia&gt; a = Iterators.Stateful("abcdef");

julia&gt; isempty(a)
false

julia&gt; popfirst!(a)
'a': ASCII/Unicode U+0061 (category Ll: Letter, lowercase)

julia&gt; collect(Iterators.take(a, 3))
3-element Array{Char,1}:
 'b'
 'c'
 'd'

julia&gt; collect(a)
2-element Array{Char,1}:
 'e'
 'f'&lt;/c0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T192158Z" creationid="hsugawa8651" creationdate="20181118T192158Z">
        <seg>&lt;c0&gt;julia&gt; a = Iterators.Stateful("abcdef");

julia&gt; isempty(a)
false

julia&gt; popfirst!(a)
'a': ASCII/Unicode U+0061 (category Ll: Letter, lowercase)

julia&gt; collect(Iterators.take(a, 3))
3-element Array{Char,1}:
 'b'
 'c'
 'd'

julia&gt; collect(a)
2-element Array{Char,1}:
 'e'
 'f'&lt;/c0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;c0&gt;julia&gt; a = Iterators.Stateful([1,1,1,2,3,4]);

julia&gt; for x in a; x == 1 || break; end

julia&gt; Base.peek(a)
3

julia&gt; sum(a) # Sum the remaining elements
7&lt;/c0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T192200Z" creationid="hsugawa8651" creationdate="20181118T192200Z">
        <seg>&lt;c0&gt;julia&gt; a = Iterators.Stateful([1,1,1,2,3,4]);

julia&gt; for x in a; x == 1 || break; end

julia&gt; Base.peek(a)
3

julia&gt; sum(a) # Sum the remaining elements
7&lt;/c0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;c0&gt;julia&gt; a = Iterators.repeated([1 2], 4);

julia&gt; collect(a)
4-element Array{Array{Int64,2},1}:
 [1 2]
 [1 2]
 [1 2]
 [1 2]&lt;/c0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T192334Z" creationid="hsugawa8651" creationdate="20181118T192334Z">
        <seg>&lt;c0&gt;julia&gt; a = Iterators.repeated([1 2], 4);

julia&gt; collect(a)
4-element Array{Array{Int64,2},1}:
 [1 2]
 [1 2]
 [1 2]
 [1 2]&lt;/c0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;c0&gt;julia&gt; a = ["a", "b", "c"];

julia&gt; for (index, value) in enumerate(a)
           println("$index $value")
       end
1 a
2 b
3 c&lt;/c0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T192226Z" creationid="hsugawa8651" creationdate="20181118T192226Z">
        <seg>&lt;c0&gt;julia&gt; a = ["a", "b", "c"];

julia&gt; for (index, value) in enumerate(a)
           println("$index $value")
       end
1 a
2 b
3 c&lt;/c0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;c0&gt;julia&gt; collect(Iterators.flatten((1:2, 8:9)))
4-element Array{Int64,1}:
 1
 2
 8
 9&lt;/c0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T192357Z" creationid="hsugawa8651" creationdate="20181118T192357Z">
        <seg>&lt;c0&gt;julia&gt; collect(Iterators.flatten((1:2, 8:9)))
4-element Array{Int64,1}:
 1
 2
 8
 9&lt;/c0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;c0&gt;julia&gt; collect(Iterators.product(1:2, 3:5))
2×3 Array{Tuple{Int64,Int64},2}:
 (1, 3)  (1, 4)  (1, 5)
 (2, 3)  (2, 4)  (2, 5)&lt;/c0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T192347Z" creationid="hsugawa8651" creationdate="20181118T192347Z">
        <seg>&lt;c0&gt;julia&gt; collect(Iterators.product(1:2, 3:5))
2×3 Array{Tuple{Int64,Int64},2}:
 (1, 3)  (1, 4)  (1, 5)
 (2, 3)  (2, 4)  (2, 5)&lt;/c0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;c0&gt;julia&gt; collect(Iterators.rest([1,2,3,4], 2))
3-element Array{Int64,1}:
 2
 3
 4&lt;/c0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T192240Z" creationid="hsugawa8651" creationdate="20181118T192240Z">
        <seg>&lt;c0&gt;julia&gt; collect(Iterators.rest([1,2,3,4], 2))
3-element Array{Int64,1}:
 2
 3
 4&lt;/c0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;c0&gt;julia&gt; else = false
ERROR: syntax: unexpected "else"

julia&gt; try = "No"
ERROR: syntax: unexpected "="&lt;/c0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T033347Z" creationid="hsugawa8651" creationdate="20181119T033347Z">
        <seg>&lt;c0&gt;julia&gt; else = false
ERROR: syntax: unexpected "else"

julia&gt; try = "No"
ERROR: syntax: unexpected "="&lt;/c0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;c0&gt;julia&gt; falses(2,3)
2×3 BitArray{2}:
 false  false  false
 false  false  false&lt;/c0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131527Z" creationid="hsugawa8651" creationdate="20181119T131527Z">
        <seg>&lt;c0&gt;julia&gt; falses(2,3)
2×3 BitArray{2}:
 false  false  false
 false  false  false&lt;/c0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;c0&gt;julia&gt; fill(1.0, (5,5))
5×5 Array{Float64,2}:
 1.0  1.0  1.0  1.0  1.0
 1.0  1.0  1.0  1.0  1.0
 1.0  1.0  1.0  1.0  1.0
 1.0  1.0  1.0  1.0  1.0
 1.0  1.0  1.0  1.0  1.0&lt;/c0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131536Z" creationid="hsugawa8651" creationdate="20181119T131536Z">
        <seg>&lt;c0&gt;julia&gt; fill(1.0, (5,5))
5×5 Array{Float64,2}:
 1.0  1.0  1.0  1.0  1.0
 1.0  1.0  1.0  1.0  1.0
 1.0  1.0  1.0  1.0  1.0
 1.0  1.0  1.0  1.0  1.0
 1.0  1.0  1.0  1.0  1.0&lt;/c0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;c0&gt;julia&gt; for (i, v) in enumerate(Iterators.cycle("hello"))
           print(v)
           i &gt; 10 &amp;&amp; break
       end
hellohelloh&lt;/c0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T192323Z" creationid="hsugawa8651" creationdate="20181118T192323Z">
        <seg>&lt;c0&gt;julia&gt; for (i, v) in enumerate(Iterators.cycle("hello"))
           print(v)
           i &gt; 10 &amp;&amp; break
       end
hellohelloh&lt;/c0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;c0&gt;julia&gt; for v in Iterators.countfrom(5, 2)
           v &gt; 10 &amp;&amp; break
           println(v)
       end
5
7
9&lt;/c0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T192251Z" creationid="hsugawa8651" creationdate="20181118T192251Z">
        <seg>&lt;c0&gt;julia&gt; for v in Iterators.countfrom(5, 2)
           v &gt; 10 &amp;&amp; break
           println(v)
       end
5
7
9&lt;/c0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;c0&gt;julia&gt; isconcretetype(Complex)
false

julia&gt; isconcretetype(Complex{Float32})
true

julia&gt; isconcretetype(Vector{Complex})
true

julia&gt; isconcretetype(Vector{Complex{Float32}})
true

julia&gt; isconcretetype(Union{})
false

julia&gt; isconcretetype(Union{Int,String})
false&lt;/c0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T193039Z" creationid="hsugawa8651" creationdate="20181118T193039Z">
        <seg>&lt;c0&gt;julia&gt; isconcretetype(Complex)
false

julia&gt; isconcretetype(Complex{Float32})
true

julia&gt; isconcretetype(Vector{Complex})
true

julia&gt; isconcretetype(Vector{Complex{Float32}})
true

julia&gt; isconcretetype(Union{})
false

julia&gt; isconcretetype(Union{Int,String})
false&lt;/c0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;c0&gt;julia&gt; length([1, 2, 3, 4])
4

julia&gt; length([1 2; 3 4])
4&lt;/c0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131805Z" creationid="hsugawa8651" creationdate="20181119T131805Z">
        <seg>&lt;c0&gt;julia&gt; length([1, 2, 3, 4])
4

julia&gt; length([1 2; 3 4])
4&lt;/c0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;c0&gt;julia&gt; ones(1,2)
1×2 Array{Float64,2}:
 1.0  1.0

julia&gt; ones(ComplexF64, 2, 3)
2×3 Array{Complex{Float64},2}:
 1.0+0.0im  1.0+0.0im  1.0+0.0im
 1.0+0.0im  1.0+0.0im  1.0+0.0im&lt;/c0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131442Z" creationid="hsugawa8651" creationdate="20181119T131442Z">
        <seg>&lt;c0&gt;julia&gt; ones(1,2)
1×2 Array{Float64,2}:
 1.0  1.0

julia&gt; ones(ComplexF64, 2, 3)
2×3 Array{Complex{Float64},2}:
 1.0+0.0im  1.0+0.0im  1.0+0.0im
 1.0+0.0im  1.0+0.0im  1.0+0.0im&lt;/c0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;c0&gt;julia&gt; similar(1:10, 1, 4)
1×4 Array{Int64,2}:
 4419743872  4374413872  4419743888  0&lt;/c0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131557Z" creationid="hsugawa8651" creationdate="20181119T131557Z">
        <seg>&lt;c0&gt;julia&gt; similar(1:10, 1, 4)
1×4 Array{Int64,2}:
 4419743872  4374413872  4419743888  0&lt;/c0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;c0&gt;julia&gt; similar(falses(10), Float64, 2, 4)
2×4 Array{Float64,2}:
 2.18425e-314  2.18425e-314  2.18425e-314  2.18425e-314
 2.18425e-314  2.18425e-314  2.18425e-314  2.18425e-314&lt;/c0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131602Z" creationid="hsugawa8651" creationdate="20181119T131602Z">
        <seg>&lt;c0&gt;julia&gt; similar(falses(10), Float64, 2, 4)
2×4 Array{Float64,2}:
 2.18425e-314  2.18425e-314  2.18425e-314  2.18425e-314
 2.18425e-314  2.18425e-314  2.18425e-314  2.18425e-314&lt;/c0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;c0&gt;julia&gt; similar(trues(10,10), 2)
2-element BitArray{1}:
 false
 false&lt;/c0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131559Z" creationid="hsugawa8651" creationdate="20181119T131559Z">
        <seg>&lt;c0&gt;julia&gt; similar(trues(10,10), 2)
2-element BitArray{1}:
 false
 false&lt;/c0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;c0&gt;julia&gt; trues(2,3)
2×3 BitArray{2}:
 true  true  true
 true  true  true&lt;/c0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131521Z" creationid="hsugawa8651" creationdate="20181119T131521Z">
        <seg>&lt;c0&gt;julia&gt; trues(2,3)
2×3 BitArray{2}:
 true  true  true
 true  true  true&lt;/c0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;c0&gt;julia&gt; x = 1.0
1.0

julia&gt; y = -3
-3

julia&gt; Z = "My string"
"My string"

julia&gt; customary_phrase = "Hello world!"
"Hello world!"

julia&gt; UniversalDeclarationOfHumanRightsStart = "人人生而自由，在尊严和权利上一律平等。"
"人人生而自由，在尊严和权利上一律平等。"&lt;/c0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T032501Z" creationid="hsugawa8651" creationdate="20181119T032501Z">
        <seg>&lt;c0&gt;julia&gt; x = 1.0
1.0

julia&gt; y = -3
-3

julia&gt; Z = "My string"
"My string"

julia&gt; customary_phrase = "Hello world!"
"Hello world!"

julia&gt; UniversalDeclarationOfHumanRightsStart = "人人生而自由，在尊严和权利上一律平等。"
"人人生而自由，在尊严和权利上一律平等。"&lt;/c0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;c0&gt;julia&gt; zeros(1)
1-element Array{Float64,1}:
 0.0

julia&gt; zeros(Int8, 2, 3)
2×3 Array{Int8,2}:
 0  0  0
 0  0  0&lt;/c0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131435Z" creationid="hsugawa8651" creationdate="20181119T131435Z">
        <seg>&lt;c0&gt;julia&gt; zeros(1)
1-element Array{Float64,1}:
 0.0

julia&gt; zeros(Int8, 2, 3)
2×3 Array{Int8,2}:
 0  0  0
 0  0  0&lt;/c0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;c0&gt;length(A::AbstractArray)&lt;/c0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131801Z" creationid="hsugawa8651" creationdate="20181119T131801Z">
        <seg>&lt;c0&gt;length(A::AbstractArray)&lt;/c0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;c0&gt;ndims(A::AbstractArray) -&gt; Integer&lt;/c0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131712Z" creationid="hsugawa8651" creationdate="20181119T131712Z">
        <seg>&lt;c0&gt;ndims(A::AbstractArray) -&gt; Integer&lt;/c0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;c0&gt;ones([T=Float64,] dims...)&lt;/c0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131438Z" creationid="hsugawa8651" creationdate="20181119T131438Z">
        <seg>&lt;c0&gt;ones([T=Float64,] dims...)&lt;/c0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;c0&gt;product(iters...)&lt;/c0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T192342Z" creationid="hsugawa8651" creationdate="20181118T192342Z">
        <seg>&lt;c0&gt;product(iters...)&lt;/c0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;c0&gt;repeated(x[, n::Int])&lt;/c0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T192330Z" creationid="hsugawa8651" creationdate="20181118T192330Z">
        <seg>&lt;c0&gt;repeated(x[, n::Int])&lt;/c0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;c0&gt;rest(iter, state)&lt;/c0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T192235Z" creationid="hsugawa8651" creationdate="20181118T192235Z">
        <seg>&lt;c0&gt;rest(iter, state)&lt;/c0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;c0&gt;similar(Array{Int}, axes(A))&lt;/c0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131623Z" creationid="hsugawa8651" creationdate="20181119T131623Z">
        <seg>&lt;c0&gt;similar(Array{Int}, axes(A))&lt;/c0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;c0&gt;similar(BitArray, (axes(A, 2),))&lt;/c0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131626Z" creationid="hsugawa8651" creationdate="20181119T131626Z">
        <seg>&lt;c0&gt;similar(BitArray, (axes(A, 2),))&lt;/c0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;c0&gt;similar(array, [element_type=eltype(array)], [dims=size(array)])&lt;/c0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131551Z" creationid="hsugawa8651" creationdate="20181119T131551Z">
        <seg>&lt;c0&gt;similar(array, [element_type=eltype(array)], [dims=size(array)])&lt;/c0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;c0&gt;similar(storagetype, axes)&lt;/c0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131612Z" creationid="hsugawa8651" creationdate="20181119T131612Z">
        <seg>&lt;c0&gt;similar(storagetype, axes)&lt;/c0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;c0&gt;size(A::AbstractArray, [dim])&lt;/c0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131720Z" creationid="hsugawa8651" creationdate="20181119T131720Z">
        <seg>&lt;c0&gt;size(A::AbstractArray, [dim])&lt;/c0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;c0&gt;stride(A, k::Integer)&lt;/c0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131920Z" creationid="hsugawa8651" creationdate="20181119T131920Z">
        <seg>&lt;c0&gt;stride(A, k::Integer)&lt;/c0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;c0&gt;strides(A)&lt;/c0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131927Z" creationid="hsugawa8651" creationdate="20181119T131927Z">
        <seg>&lt;c0&gt;strides(A)&lt;/c0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;c0&gt;take(iter, n)&lt;/c0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T192300Z" creationid="hsugawa8651" creationdate="20181118T192300Z">
        <seg>&lt;c0&gt;take(iter, n)&lt;/c0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;c0&gt;trues(dims)&lt;/c0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131518Z" creationid="hsugawa8651" creationdate="20181119T131518Z">
        <seg>&lt;c0&gt;trues(dims)&lt;/c0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;c0&gt;undef&lt;/c0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131115Z" creationid="hsugawa8651" creationdate="20181119T131115Z">
        <seg>&lt;c0&gt;undef&lt;/c0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;c0&gt;zeros([T=Float64,] dims...)&lt;/c0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131430Z" creationid="hsugawa8651" creationdate="20181119T131430Z">
        <seg>&lt;c0&gt;zeros([T=Float64,] dims...)&lt;/c0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;c0&gt;zip(iters...)&lt;/c0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T192210Z" creationid="hsugawa8651" creationdate="20181118T192210Z">
        <seg>&lt;c0&gt;zip(iters...)&lt;/c0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;c11&gt;count&lt;/c11&gt; is the number of workers to spawn on the node, and defaults to 1.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T173959Z" creationid="hsugawa8651" creationdate="20181118T173959Z">
        <seg>&lt;c11&gt;count&lt;/c11&gt;はノードで作成されるワーカーの数で、デフォルトは1です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;c21&gt;&lt;s22&gt;user&lt;/s22&gt;&lt;/c21&gt; defaults to current user,
&lt;c23&gt;&lt;s24&gt;port&lt;/s24&gt;&lt;/c23&gt; to the standard ssh port.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T085227Z" creationid="hsugawa8651" creationdate="20181118T084952Z">
        <seg>デフォルトでは、&lt;c21&gt;&lt;s22&gt;user&lt;/s22&gt;&lt;/c21&gt; は現在のユーザー、 &lt;c23&gt;&lt;s24&gt;port&lt;/s24&gt;&lt;/c23&gt; は標準のsshポートになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;c25&gt;&lt;s26&gt;count&lt;/s26&gt;&lt;/c25&gt; is the number of workers to spawn
on the node, and defaults to 1.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T085203Z" creationid="hsugawa8651" creationdate="20181118T085004Z">
        <seg>&lt;c25&gt;&lt;s26&gt;count&lt;/s26&gt;&lt;/c25&gt; はノードで作成されるワーカーの数で、デフォルトは1です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;c2&gt;-p n&lt;/c2&gt; will launch an additional &lt;c3&gt;n&lt;/c3&gt; worker processes, while &lt;c4&gt;--machine-file file&lt;/c4&gt; will launch a worker for each line in file &lt;c5&gt;file&lt;/c5&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T173755Z" creationid="hsugawa8651" creationdate="20181118T173755Z">
        <seg>&lt;c2&gt;-p n&lt;/c2&gt; で&lt;c3&gt;n&lt;/c3&gt;個のワーカーを追加で起動することができ、 --&lt;c4&gt;machinefile file&lt;/c4&gt; では &lt;c5&gt;file&lt;/c5&gt; ファイルの各行ごとにワーカーが起動されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;c2&gt;storagetype&lt;/c2&gt; might be a type or a function.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131614Z" creationid="hsugawa8651" creationdate="20181119T131614Z">
        <seg>&lt;c2&gt;storagetype&lt;/c2&gt; might be a type or a function.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;c4&gt;&lt;s5&gt;-p&lt;/s5&gt; &lt;s6&gt;n&lt;/s6&gt;&lt;/c4&gt; will launch an additional &lt;c7&gt;&lt;s8&gt;n&lt;/s8&gt;&lt;/c7&gt; worker
processes, while &lt;c9&gt;&lt;s10&gt;--machinefile&lt;/s10&gt; &lt;s11&gt;file&lt;/s11&gt;&lt;/c9&gt; will launch a worker for each line in
file &lt;c12&gt;&lt;s13&gt;file&lt;/s13&gt;&lt;/c12&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T175618Z" creationid="hsugawa8651" creationdate="20181118T084910Z">
        <seg>&lt;c4&gt;&lt;s5&gt;-p&lt;/s5&gt; &lt;s6&gt;n&lt;/s6&gt;&lt;/c4&gt;  で&lt;c7&gt;&lt;s8&gt;n&lt;/s8&gt;&lt;/c7&gt;個のワーカーを追加で起動することができ、&lt;c9&gt;&lt;s10&gt;--machinefile&lt;/s10&gt; &lt;s11&gt;file&lt;/s11&gt;&lt;/c9&gt; では&lt;c12&gt;&lt;s13&gt;file&lt;/s13&gt;&lt;/c12&gt; ファイルの各行ごとにワーカーが起動されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;c6&gt;&lt;s7&gt;ARGS&lt;/s7&gt;&lt;/c6&gt; is also set when script code
is given using the &lt;c8&gt;&lt;s9&gt;-e&lt;/s9&gt;&lt;/c8&gt; option on the command line (see the &lt;c10&gt;&lt;s11&gt;julia&lt;/s11&gt;&lt;/c10&gt;
help output below).</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T175418Z" creationid="hsugawa8651" creationdate="20181118T084517Z">
        <seg>コマンドラインで &lt;c8&gt;&lt;s9&gt;-e&lt;/s9&gt;&lt;/c8&gt; オプションが設定された際にも&lt;c6&gt;&lt;s7&gt; ARGS&lt;/s7&gt;&lt;/c6&gt; は設定されます（下の  &lt;c10&gt;&lt;s11&gt;julia&lt;/s11&gt;&lt;/c10&gt; ヘルプ出力を参照してください）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;c9&gt;user&lt;/c9&gt; defaults to current user, &lt;c10&gt;port&lt;/c10&gt; to the standard ssh port.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T173937Z" creationid="hsugawa8651" creationdate="20181118T173937Z">
        <seg>デフォルトでは、&lt;c9&gt;user&lt;/c9&gt; は現在のユーザー、 &lt;c10&gt;port&lt;/c10&gt; は標準のsshポートになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;cond&gt; &lt;statement&gt; end&lt;/c4&gt;, one can write &lt;c5&gt;&lt;cond&gt; || &lt;statement&gt;&lt;/c5&gt; (which could be read as: &lt;cond&gt; &lt;e6&gt;or else&lt;/e6&gt; &lt;statement&gt;).</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T140623Z" creationid="hsugawa8651" creationdate="20181119T140538Z">
        <seg>&lt;条件式&gt; &lt;実行文&gt; end&lt;/c4&gt;は、 &lt;c5&gt;&lt;条件式&gt; || &lt;実行文&gt;&lt;/c5&gt;と書けます （||は、&lt;e6&gt;"でなければ"&lt;/e6&gt; と読み下せます)。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;s0&gt;&lt;/s0&gt;&lt;s1&gt;$&lt;/s1&gt; &lt;s2&gt;julia&lt;/s2&gt; &lt;s3&gt;script&lt;/s3&gt;&lt;s4&gt;.&lt;/s4&gt;&lt;s5&gt;jl&lt;/s5&gt; &lt;s6&gt;arg1&lt;/s6&gt; &lt;s7&gt;arg2&lt;/s7&gt;&lt;s8&gt;...&lt;/s8&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T084039Z" creationid="hsugawa8651" creationdate="20181118T084039Z">
        <seg>&lt;s0&gt;&lt;/s0&gt;&lt;s1&gt;$&lt;/s1&gt; &lt;s2&gt;julia&lt;/s2&gt; &lt;s3&gt;script&lt;/s3&gt;&lt;s4&gt;.&lt;/s4&gt;&lt;s5&gt;jl&lt;/s5&gt; &lt;s6&gt;arg1&lt;/s6&gt; &lt;s7&gt;arg2&lt;/s7&gt;&lt;s8&gt;...&lt;/s8&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;s0&gt;&lt;/s0&gt;julia [switches] -- [programfile] [args...]
 -v, --version             Display version information
 -h, --help                Print this message

 -J, --sysimage &lt;file&gt;     Start up with the given system image file
 --precompiled={yes|no}    Use precompiled code from system image if available
 -H, --home &lt;dir&gt;          Set location of `julia` executable
 --startup-file={yes|no}   Load ~/.juliarc.jl
 -f, --no-startup          Don't load ~/.juliarc (deprecated, use --startup-file=no)
 -F                        Load ~/.juliarc (deprecated, use --startup-file=yes)
 --handle-signals={yes|no} Enable or disable Julia's default signal handlers

 -e, --eval &lt;expr&gt;         Evaluate &lt;expr&gt;
 -E, --print &lt;expr&gt;        Evaluate and show &lt;expr&gt;
 -P, --post-boot &lt;expr&gt;    Evaluate &lt;expr&gt;, but don't disable interactive mode (deprecated, use -i -e instead)
 -L, --load &lt;file&gt;         Load &lt;file&gt; immediately on all processors

 -p, --procs {N|auto}      Integer value N launches N additional local worker processes
                           "auto" launches as many workers as the number of local cores
 --machinefile &lt;file&gt;      Run processes on hosts listed in &lt;file&gt;

 -i                        Interactive mode; REPL runs and isinteractive() is true
 -q, --quiet               Quiet startup (no banner)
 --color={yes|no}          Enable or disable color text
 --history-file={yes|no}   Load or save history
 --no-history-file         Don't load history file (deprecated, use --history-file=no)

 --compile={yes|no|all}    Enable or disable compiler, or request exhaustive compilation
 -C, --cpu-target &lt;target&gt; Limit usage of cpu features up to &lt;target&gt;
 -O, --optimize            Run time-intensive code optimizations
 --inline={yes|no}         Control whether inlining is permitted (overrides functions declared as @inline)
 --check-bounds={yes|no}   Emit bounds checks always or never (ignoring declarations)
 --math-mode={ieee,fast}   Disallow or enable unsafe floating point optimizations (overrides @fastmath declaration)

 --depwarn={yes|no|error}  Enable or disable syntax and method deprecation warnings ("error" turns warnings into errors)

 --output-o name           Generate an object file (including system image data)
 --output-ji name          Generate a system image data file (.ji)
 --output-bc name          Generate LLVM bitcode (.bc)

 --output-incremental=no   Generate an incremental output file (rather than complete)

 --code-coverage={none|user|all}, --code-coverage
                           Count executions of source lines (omitting setting is equivalent to "user")
 --track-allocation={none|user|all}, --track-allocation
                           Count bytes allocated by each source line</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T085527Z" creationid="hsugawa8651" creationdate="20181118T085527Z">
        <seg>&lt;s0&gt;&lt;/s0&gt;julia [switches] -- [programfile] [args...]
 -v, --version             Display version information
 -h, --help                Print this message

 -J, --sysimage &lt;file&gt;     Start up with the given system image file
 --precompiled={yes|no}    Use precompiled code from system image if available
 -H, --home &lt;dir&gt;          Set location of `julia` executable
 --startup-file={yes|no}   Load ~/.juliarc.jl
 -f, --no-startup          Don't load ~/.juliarc (deprecated, use --startup-file=no)
 -F                        Load ~/.juliarc (deprecated, use --startup-file=yes)
 --handle-signals={yes|no} Enable or disable Julia's default signal handlers

 -e, --eval &lt;expr&gt;         Evaluate &lt;expr&gt;
 -E, --print &lt;expr&gt;        Evaluate and show &lt;expr&gt;
 -P, --post-boot &lt;expr&gt;    Evaluate &lt;expr&gt;, but don't disable interactive mode (deprecated, use -i -e instead)
 -L, --load &lt;file&gt;         Load &lt;file&gt; immediately on all processors

 -p, --procs {N|auto}      Integer value N launches N additional local worker processes
                           "auto" launches as many workers as the number of local cores
 --machinefile &lt;file&gt;      Run processes on hosts listed in &lt;file&gt;

 -i                        Interactive mode; REPL runs and isinteractive() is true
 -q, --quiet               Quiet startup (no banner)
 --color={yes|no}          Enable or disable color text
 --history-file={yes|no}   Load or save history
 --no-history-file         Don't load history file (deprecated, use --history-file=no)

 --compile={yes|no|all}    Enable or disable compiler, or request exhaustive compilation
 -C, --cpu-target &lt;target&gt; Limit usage of cpu features up to &lt;target&gt;
 -O, --optimize            Run time-intensive code optimizations
 --inline={yes|no}         Control whether inlining is permitted (overrides functions declared as @inline)
 --check-bounds={yes|no}   Emit bounds checks always or never (ignoring declarations)
 --math-mode={ieee,fast}   Disallow or enable unsafe floating point optimizations (overrides @fastmath declaration)

 --depwarn={yes|no|error}  Enable or disable syntax and method deprecation warnings ("error" turns warnings into errors)

 --output-o name           Generate an object file (including system image data)
 --output-ji name          Generate a system image data file (.ji)
 --output-bc name          Generate LLVM bitcode (.bc)

 --output-incremental=no   Generate an incremental output file (rather than complete)

 --code-coverage={none|user|all}, --code-coverage
                           Count executions of source lines (omitting setting is equivalent to "user")
 --track-allocation={none|user|all}, --track-allocation
                           Count bytes allocated by each source line</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;s0&gt;Arrays&lt;/s0&gt;&lt;a1&gt;&lt;/a1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T130911Z" creationid="hsugawa8651" creationdate="20181119T130911Z">
        <seg>&lt;s0&gt;配列&lt;/s0&gt;&lt;a1&gt;&lt;/a1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;s0&gt;Base&lt;/s0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T125541Z" creationid="hsugawa8651" creationdate="20181119T125541Z">
        <seg>&lt;s0&gt;Base&lt;/s0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;s0&gt;Developer Documentation&lt;/s0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T130415Z" creationid="hsugawa8651" creationdate="20181119T130415Z">
        <seg>&lt;s0&gt;開発者用ドキュメント&lt;/s0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;s0&gt;Developing/debugging Julia's C code&lt;/s0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T130805Z" creationid="hsugawa8651" creationdate="20181119T130805Z">
        <seg>&lt;s0&gt;JuliaのCコードを作成/デバッグする&lt;/s0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;s0&gt;Documentation of Julia's Internals&lt;/s0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T130439Z" creationid="hsugawa8651" creationdate="20181119T130439Z">
        <seg>&lt;s0&gt;Julia内部構造の記述&lt;/s0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;s0&gt;Examples&lt;/s0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T132225Z" creationid="hsugawa8651" creationdate="20181119T131040Z">
        <seg>&lt;s0&gt;Examples&lt;/s0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;s0&gt;Examples&lt;/s0&gt;:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131622Z" creationid="hsugawa8651" creationdate="20181119T131622Z">
        <seg>&lt;s0&gt;例&lt;/s0&gt;:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;s0&gt;Manual&lt;/s0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T031820Z" creationid="hsugawa8651" creationdate="20181119T031820Z">
        <seg>&lt;s0&gt;マニュアル&lt;/s0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;s0&gt;Standard Library&lt;/s0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T130116Z" creationid="hsugawa8651" creationdate="20181119T130116Z">
        <seg>&lt;s0&gt;標準ライブラリ&lt;/s0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;x1/&gt; 32-bit or 64-bit system:
julia&gt; typeof(3000000000)
Int64</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T225311Z" creationid="hsugawa8651" creationdate="20181109T225311Z">
        <seg>&lt;x1/&gt; 32-bit or 64-bit system:
julia&gt; typeof(3000000000)
Int64</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;x1/&gt; 32-bit system:
julia&gt; Int
Int32
julia&gt; UInt
UInt32

&lt;x2/&gt; 64-bit system:
julia&gt; Int
Int64
julia&gt; UInt
UInt64</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T110343Z" creationid="hsugawa8651" creationdate="20181112T110343Z">
        <seg>&lt;x1/&gt; 32-bit system:
julia&gt; Int
Int32
julia&gt; UInt
UInt32

&lt;x2/&gt; 64-bit system:
julia&gt; Int
Int64
julia&gt; UInt
UInt64</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;x1/&gt; 32-bit system:
julia&gt; Sys.WORD_SIZE
32

&lt;x2/&gt; 64-bit system:
julia&gt; Sys.WORD_SIZE
64</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T110333Z" creationid="hsugawa8651" creationdate="20181112T110333Z">
        <seg>&lt;x1/&gt; 32-bit system:
julia&gt; Sys.WORD_SIZE
32

&lt;x2/&gt; 64-bit system:
julia&gt; Sys.WORD_SIZE
64</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;x1/&gt; 32-bit system:
julia&gt; UInt
UInt32

&lt;x2/&gt; 64-bit system:
julia&gt; UInt
UInt64</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T022040Z" creationid="hsugawa8651" creationdate="20181116T022040Z">
        <seg>&lt;x1/&gt; 32-bit system:
julia&gt; UInt
UInt32

&lt;x2/&gt; 64-bit system:
julia&gt; UInt
UInt64</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;x1/&gt; 32-bit system:
julia&gt; typeof(1)
Int32

&lt;x2/&gt; 64-bit system:
julia&gt; typeof(1)
Int64</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T225233Z" creationid="hsugawa8651" creationdate="20181109T225233Z">
        <seg>&lt;x1/&gt; 32-bit system:
julia&gt; typeof(1)
Int32

&lt;x2/&gt; 64-bit system:
julia&gt; typeof(1)
Int64</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;x1/&gt; 32-bit system:
primitive type Ptr{T} 32 end

&lt;x2/&gt; 64-bit system:
primitive type Ptr{T} 64 end</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T022002Z" creationid="hsugawa8651" creationdate="20181116T022002Z">
        <seg>&lt;x1/&gt; 32-bit system:
primitive type Ptr{T} 32 end

&lt;x2/&gt; 64-bit system:
primitive type Ptr{T} 64 end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;x1/&gt; Examples
```jldoctest
julia&gt; a = [1 2; 3 4]
2×2 Array{Int64,2}:
 1  2
 3  4
```
"""</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T020023Z" creationid="hsugawa8651" creationdate="20181116T020023Z">
        <seg>&lt;x1/&gt; Examples
```jldoctest
julia&gt; a = [1 2; 3 4]
2×2 Array{Int64,2}:
 1  2
 3  4
```
"""</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;x1/&gt; The corresponding C signature is
&lt;x2/&gt;     void gsl_permutation_free (gsl_permutation * p);
function permutation_free(p::Ref{gsl_permutation})
    ccall(
        (:gsl_permutation_free, :libgsl), &lt;x3/&gt; name of C function and library
        Cvoid,                             &lt;x4/&gt; output type
        (Ref{gsl_permutation},),          &lt;x5/&gt; tuple of input types
        p                                 &lt;x6/&gt; name of Julia variable to pass in
    )
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T152059Z" creationid="hsugawa8651" creationdate="20181117T152059Z">
        <seg>&lt;x1/&gt; The corresponding C signature is
&lt;x2/&gt;     void gsl_permutation_free (gsl_permutation * p);
function permutation_free(p::Ref{gsl_permutation})
    ccall(
        (:gsl_permutation_free, :libgsl), &lt;x3/&gt; name of C function and library
        Cvoid,                             &lt;x4/&gt; output type
        (Ref{gsl_permutation},),          &lt;x5/&gt; tuple of input types
        p                                 &lt;x6/&gt; name of Julia variable to pass in
    )
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;x1/&gt; The corresponding C signature is
&lt;x2/&gt;    int gsl_sf_bessel_Jn_array (int nmin, int nmax, double x,
&lt;x3/&gt;                                double result_array[])
function sf_bessel_Jn_array(nmin::Integer, nmax::Integer, x::Real)
    if nmax &lt; nmin
        throw(DomainError())
    end
    result_array = Vector{Cdouble}(undef, nmax - nmin + 1)
    errorcode = ccall(
        (:gsl_sf_bessel_Jn_array, :libgsl), &lt;x4/&gt; name of C function and library
        Cint,                               &lt;x5/&gt; output type
        (Cint, Cint, Cdouble, Ref{Cdouble}),&lt;x6/&gt; tuple of input types
        nmin, nmax, x, result_array         &lt;x7/&gt; names of Julia variables to pass in
    )
    if errorcode != 0
        error("GSL error code $errorcode")
    end
    return result_array
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T152147Z" creationid="hsugawa8651" creationdate="20181117T152147Z">
        <seg>&lt;x1/&gt; The corresponding C signature is
&lt;x2/&gt;    int gsl_sf_bessel_Jn_array (int nmin, int nmax, double x,
&lt;x3/&gt;                                double result_array[])
function sf_bessel_Jn_array(nmin::Integer, nmax::Integer, x::Real)
    if nmax &lt; nmin
        throw(DomainError())
    end
    result_array = Vector{Cdouble}(undef, nmax - nmin + 1)
    errorcode = ccall(
        (:gsl_sf_bessel_Jn_array, :libgsl), &lt;x4/&gt; name of C function and library
        Cint,                               &lt;x5/&gt; output type
        (Cint, Cint, Cdouble, Ref{Cdouble}),&lt;x6/&gt; tuple of input types
        nmin, nmax, x, result_array         &lt;x7/&gt; names of Julia variables to pass in
    )
    if errorcode != 0
        error("GSL error code $errorcode")
    end
    return result_array
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;x1/&gt;!/bin/bash
&lt;x2/&gt;=
exec julia --color=yes --startup-file=no -e 'include(popfirst!(ARGS))' \
    "${BASH_SOURCE[0]}" "$@"
=&lt;x3/&gt;

@show ARGS  &lt;x4/&gt; put any Julia code here</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181110T024929Z" creationid="hsugawa8651" creationdate="20181110T024929Z">
        <seg>&lt;x1/&gt;!/bin/bash
&lt;x2/&gt;=
exec julia --color=yes --startup-file=no -e 'include(popfirst!(ARGS))' \
    "${BASH_SOURCE[0]}" "$@"
=&lt;x3/&gt;

@show ARGS  &lt;x4/&gt; put any Julia code here</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;x1/&gt;&lt;x2/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T032247Z" creationid="hsugawa8651" creationdate="20181114T032247Z">
        <seg>&lt;x1/&gt;&lt;x2/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;x1/&gt;=&lt;x2/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T032251Z" creationid="hsugawa8651" creationdate="20181114T032251Z">
        <seg>&lt;x1/&gt;=&lt;x2/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;x1/&gt;IndexLinear()&lt;x2/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T022821Z" creationid="hsugawa8651" creationdate="20181113T022821Z">
        <seg>&lt;x1/&gt;IndexLinear()&lt;x2/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;x1/&gt;OurRational&lt;x2/&gt; has a single inner constructor method which checks that
both of &lt;x3/&gt;num&lt;x4/&gt; and &lt;x5/&gt;den&lt;x6/&gt; aren't zero and ensures that every rational is constructed in "lowest
terms" with a non-negative denominator.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T124121Z" creationid="hsugawa8651" creationdate="20181118T124121Z">
        <seg>&lt;x1/&gt;OurRational&lt;x2/&gt;は、単一のインナー・コンストラクタ・メソッドを持っていて、それをチェックする。 &lt;x3/&gt;num&lt;x4/&gt;の両方と&lt;x5/&gt;den&lt;x6/&gt;は0ではなく、すべての有理が「最低」で構築されることを保証します。 「負ではない分母を持つ」。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;x1/&gt;Recursive data structures&lt;x2/&gt;,
especially those that may be self-referential, often cannot be constructed cleanly without first
being created in an incomplete state and then altered programmatically to be made whole, as a
separate step from object creation.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T155652Z" creationid="hsugawa8651" creationdate="20181117T155652Z">
        <seg>&lt;x1/&gt;再帰データ構造体&lt;x2/&gt; 特に、自己参照することができるものは、しばしば、最初には、きれいに構築することはできない は不完全な状態で作成され、次にプログラムによって変更されて全体として作成されます。 オブジェクト作成とは別のステップです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;x1/&gt;`CartesianIndex` and arrays of `CartesianIndex` are not compatible with the&lt;x2/&gt;&lt;x3/&gt;`end` keyword to represent the last index of a dimension.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T155752Z" creationid="hsugawa8651" creationdate="20181109T155752Z">
        <seg>&lt;x1/&gt;`CartesianIndex'と「CartesianIndex」の配列は、次元の最後のインデックスを表すために、&lt;x2/&gt;&lt;x3/&gt;'end"キーワードと互換性がない。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;x1/&gt;`CartesianIndex` and arrays of `CartesianIndex` are not compatible with the&lt;x2/&gt;&lt;x3/&gt;`end` keyword to represent the last index of a dimension. Do not use `end`&lt;x4/&gt;&lt;x5/&gt;in indexing expressions that may contain either `CartesianIndex` or arrays thereof.&lt;x6/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T135101Z" creationid="hsugawa8651" creationdate="20181117T135101Z">
        <seg>&lt;x1/&gt;`CartesianIndex'と「CartesianIndex」の配列は、次元の最後のインデックスを表すために&lt;x2/&gt;&lt;x/&gt;&lt;x/&gt;&lt;x3/&gt;'end"キーワードとは互換性がありません。"end"&lt;x4/&gt;&lt;x5/&gt;は、「CartesianIndex」またはその配列のいずれかを含むことができるインデックス表現では使用しないでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;x1/&gt;`Task`&lt;x2/&gt;s
are not so standard: they provide non-local control flow, making it possible to switch between
temporarily-suspended computations.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T225746Z" creationid="hsugawa8651" creationdate="20181109T225746Z">
        <seg>&lt;x1/&gt;`タスク`&lt;x2/&gt;s はあまり標準的ではないため、ローカルではない制御フローを提供することができます。 一時的に中断された計算です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;x1/&gt;```c&lt;x2/&gt;&lt;x3/&gt;int main(int argc, char **argv);&lt;x4/&gt;&lt;x5/&gt;```&lt;x6/&gt;&lt;x7/&gt;&lt;x8/&gt;&lt;x9/&gt;can be called via the following Julia code:&lt;x10/&gt;&lt;x11/&gt;&lt;x12/&gt;&lt;x13/&gt;```julia&lt;x14/&gt;&lt;x15/&gt;argv = [ "a.out", "arg1", "arg2" ]&lt;x16/&gt;&lt;x17/&gt;ccall(:main, Int32, (Int32, Ptr{Ptr{UInt8}}), length(argv), argv)&lt;x18/&gt;&lt;x19/&gt;```&lt;x20/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T151041Z" creationid="hsugawa8651" creationdate="20181117T151041Z">
        <seg>&lt;x1/&gt;`"c&lt;x2/&gt;&lt;x3/&gt;int主(int argc,char**argv);&lt;x4/&gt;&lt;x5/&gt;`"&lt;x6/&gt;&lt;x8/&gt;&lt;x9/&gt;&lt;x10/&gt;&lt;x11/&gt;&lt;x13/&gt;`"julia&lt;x14/&gt;&lt;x15/&gt;&lt;x20/&gt;""julia&lt;x14/&gt;&lt;x15/&gt;&lt;x20/&gt;&lt;x17/&gt;&lt;x15/&gt;&lt;x17/&gt;"x18/&gt;&lt;x19/&gt;&lt;x19/&gt;"&lt;x18/&gt;&lt;x19/&gt;&lt;x20/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;x1/&gt;```jldoctest&lt;x2/&gt;&lt;x3/&gt;julia&gt; x = 0x01; typeof(x)&lt;x4/&gt;&lt;x5/&gt;UInt8&lt;x6/&gt;&lt;x7/&gt;&lt;x8/&gt;&lt;x9/&gt;julia&gt; x *= 2 &lt;x10/&gt; Same as x = x * 2&lt;x11/&gt;&lt;x12/&gt;2&lt;x13/&gt;&lt;x14/&gt;&lt;x15/&gt;&lt;x16/&gt;julia&gt; typeof(x)&lt;x17/&gt;&lt;x18/&gt;Int64&lt;x19/&gt;&lt;x20/&gt;```&lt;x21/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T132427Z" creationid="hsugawa8651" creationdate="20181113T132427Z">
        <seg>&lt;x1/&gt;```jldoctest&lt;x2/&gt;&lt;x3/&gt;julia&gt; x = 0x01; typeof(x)&lt;x4/&gt;&lt;x5/&gt;UInt8&lt;x6/&gt;&lt;x7/&gt;&lt;x8/&gt;&lt;x9/&gt;julia&gt; x *= 2 &lt;x10/&gt; Same as x = x * 2&lt;x11/&gt;&lt;x12/&gt;2&lt;x13/&gt;&lt;x14/&gt;&lt;x15/&gt;&lt;x16/&gt;julia&gt; typeof(x)&lt;x17/&gt;&lt;x18/&gt;Int64&lt;x19/&gt;&lt;x20/&gt;```&lt;x21/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;x1/&gt;include &lt;immintrin.h&gt;

__m256 dist( __m256 a, __m256 b ) {
    return _mm256_sqrt_ps(_mm256_add_ps(_mm256_mul_ps(a, a),
                                        _mm256_mul_ps(b, b)));
}</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T151318Z" creationid="hsugawa8651" creationdate="20181117T151318Z">
        <seg>&lt;x1/&gt;include &lt;immintrin.h&gt;

__m256 dist( __m256 a, __m256 b ) {
    return _mm256_sqrt_ps(_mm256_add_ps(_mm256_mul_ps(a, a),
                                        _mm256_mul_ps(b, b)));
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;x1/&gt;is preferred over&lt;x2/&gt;&lt;x3/&gt;&lt;x4/&gt;&lt;x5/&gt;`size(A) == size(B) || throw(DimensionMismatch("Size of A not equal to size of B"))`.&lt;x6/&gt;&lt;x7/&gt;&lt;x8/&gt;&lt;x9/&gt;However, sometimes it makes sense to keep the uppercase first letter, for instance if an argument&lt;x10/&gt;&lt;x11/&gt;to a function is a capital letter: `size(A,1) == size(B,2) || throw(DimensionMismatch("A has first dimension..."))`.&lt;x12/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T124708Z" creationid="hsugawa8651" creationdate="20181118T124708Z">
        <seg>&lt;x1/&gt;&lt;x3/&gt;&lt;x4/&gt;&lt;x5/&gt;'サイズ(A)==サイズ(Bの大きさに等しくないDimensionMismatch(Size of A not equal to size of B"))`&lt;x6/&gt;&lt;x7/&gt;&lt;x8/&gt;&lt;x9/&gt;ただし、引数&lt;x12/&gt;&lt;x11/&gt;&lt;x8/&gt;&lt;x12/&gt;が大文字である場合などは、大文字の文字を使用することを意味します。&lt;x12/&gt;&lt;x11/&gt;&lt;x8/&gt;&lt;x12/&gt;&lt;x12/&gt;&lt;x12/&gt;&lt;x12/&gt;&lt;x12/&gt;A,1B,2DimensionMismatch</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;x1/&gt;strides(A)[i]&lt;x2/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T083450Z" creationid="hsugawa8651" creationdate="20181113T083450Z">
        <seg>&lt;x1/&gt;strides(A)[i]&lt;x2/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;x1/&gt;x&lt;x2/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T132233Z" creationid="hsugawa8651" creationdate="20181113T132233Z">
        <seg>&lt;x1/&gt;x&lt;x2/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;x11/&gt;&lt;x12/&gt;&lt;x13/&gt;:
The operators &lt;x14/&gt;+&lt;x15/&gt;, &lt;x16/&gt;++&lt;x17/&gt; and &lt;x18/&gt;*&lt;x19/&gt; are non-associative.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T030943Z" creationid="hsugawa8651" creationdate="20181114T030934Z">
        <seg>&lt;x11/&gt;&lt;x12/&gt;&lt;x13/&gt;: 演算子&lt;x14/&gt;+&lt;x15/&gt;、&lt;x16/&gt;++&lt;x17/&gt;、&lt;x18/&gt;*&lt;x19/&gt;は、非自動調整ではありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;x12/&gt;user&lt;x13/&gt; defaults to current user,
&lt;x14/&gt;port&lt;x15/&gt; to the standard ssh port.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T092522Z" creationid="hsugawa8651" creationdate="20181109T224441Z">
        <seg>デフォルトでは、&lt;x12/&gt;user&lt;x13/&gt; は現在のユーザー、 &lt;x14/&gt;port&lt;x15/&gt; は標準のsshポートになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;x14/&gt;&lt;x15/&gt;&lt;x16/&gt; This
loop fusion is not a compiler optimization that may or may not occur, it is a &lt;x17/&gt;syntactic guarantee&lt;x18/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T120139Z" creationid="hsugawa8651" creationdate="20181118T120139Z">
        <seg>&lt;x14/&gt;&lt;x15/&gt;&lt;x16/&gt; ループ融合はコンパイラーの最適化ではなく、あるいは発生する可能性のあるコンパイラーの最適化ではありません。&lt;x17/&gt;の構文保証&lt;x18/&gt;です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;x16/&gt;count&lt;x17/&gt; is the number of workers to spawn on the node, and defaults
to 1.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T092547Z" creationid="hsugawa8651" creationdate="20181109T224446Z">
        <seg>&lt;x16/&gt;count&lt;x17/&gt;はノードで作成されるワーカーの数で、デフォルトは1です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;x2/&gt; &lt;x3/&gt; end&lt;x4/&gt;,
one can write &lt;x5/&gt;&lt;x6/&gt; || &lt;x7/&gt;&lt;x8/&gt; (which could be read as: &lt;x9/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T124411Z" creationid="hsugawa8651" creationdate="20181118T124411Z">
        <seg>&lt;x2/&gt;&lt;x3/&gt;end&lt;x4/&gt; &lt;x5/&gt;&lt;x6/&gt;&lt;x7/&gt;&lt;x8/&gt;(以下のように読むことができる)を書くことができます。&lt;x9/&gt;&lt;x6/&gt;&lt;x6/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;x2/&gt;QuickSort&lt;x3/&gt; is the default algorithm for numeric values, including
integers and floats.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T064035Z" creationid="hsugawa8651" creationdate="20181114T064035Z">
        <seg>&lt;x2/&gt;QuickSort&lt;x3/&gt;は、次のような数値のデフォルト・アルゴリズムです。 整数と浮動小数点を指定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;x20/&gt;a + b + c&lt;x21/&gt; is parsed as &lt;x22/&gt;+(a, b, c)&lt;x23/&gt; not &lt;x24/&gt;+(+(a, b),
c)&lt;x25/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T030937Z" creationid="hsugawa8651" creationdate="20181114T030937Z">
        <seg>&lt;x20/&gt;a + b + c&lt;x21/&gt; is parsed as &lt;x22/&gt;+(a, b, c)&lt;x23/&gt; not &lt;x24/&gt;+(+(a, b),
c)&lt;x25/&gt;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;x21/&gt;DenseArray&lt;x22/&gt; is a
very specific example of a strided array where the elements are arranged contiguously, thus it
provides its subtypes with the appropriate definition of &lt;x23/&gt;strides&lt;x24/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T160511Z" creationid="hsugawa8651" creationdate="20181109T160511Z">
        <seg>&lt;X21/&gt;DenseArray&lt;x22/&gt;は エレメントが隣接して配置されたストローブ配列の非常に特異的な例であり、したがって は、&lt;x23/&gt;の拡張&lt;x24/&gt;の適切な定義を使用してサブタイプを提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;x23/&gt;App&lt;x24/&gt; has a direct dependency on your private &lt;x25/&gt;Priv&lt;x26/&gt; package, and an indirect dependency, through &lt;x27/&gt;Pub&lt;x28/&gt;, on the new public &lt;x29/&gt;Priv&lt;x30/&gt; package.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T152902Z" creationid="hsugawa8651" creationdate="20181117T152902Z">
        <seg>&lt;x23/&gt;アプリケーション&lt;x24/&gt;は、&lt;x27/&gt;Priv&lt;x26/&gt;パッケージに直接依存します。また、&lt;x27/&gt;Pub&lt;x28/&gt;を介して、新しい&lt;x29/&gt;Priv&lt;x30/&gt;パッケージ上の間接的な依存関係もあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;x28/&gt;`StridedVector`&lt;x29/&gt; and &lt;x30/&gt;`StridedMatrix`&lt;x31/&gt; are convenient aliases for many of the builtin array types that
are considered strided arrays, allowing them to dispatch to select specialized implementations that
call highly tuned and optimized BLAS and LAPACK functions using just the pointer and strides.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T160519Z" creationid="hsugawa8651" creationdate="20181109T160519Z">
        <seg>&lt;x28/&gt;「StridedVector」&lt;x29/&gt;および&lt;x30/&gt;「StridedMatrix」&lt;x31/&gt;は、組み込み型の配列タイプの多くにとって便利なエイリアスです。 は、ストレーテッド・アレイとみなされ、選択された特殊な実装にディスパッチできるようになります。 ポインタと前進だけを使って、BLASとLAPACK関数を高度に調整し、最適化することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;x3/&gt;
import REPL, Markdown
const NBSP = '\u00A0'

function tab_completions(symbols...)
    completions = Dict{String, Vector{String}}()
    for each in symbols, (k, v) in each
        completions[v] = push!(get!(completions, v, String[]), k)
    end
    return completions
end

function unicode_data()
    file = normpath(Sys.BINDIR, "..", "..", "doc", "UnicodeData.txt")
    names = Dict{UInt32, String}()
    open(file) do unidata
        for line in readlines(unidata)
            id, name, desc = split(line, ";")[[1, 2, 11]]
            codepoint = parse(UInt32, "0x$id")
            names[codepoint] = titlecase(lowercase(
                name == "" ?</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T022214Z" creationid="hsugawa8651" creationdate="20181116T022214Z">
        <seg>&lt;x3/&gt;
import REPL, Markdown
const NBSP = '\u00A0'

function tab_completions(symbols...)
    completions = Dict{String, Vector{String}}()
    for each in symbols, (k, v) in each
        completions[v] = push!(get!(completions, v, String[]), k)
    end
    return completions
end

function unicode_data()
    file = normpath(Sys.BINDIR, "..", "..", "doc", "UnicodeData.txt")
    names = Dict{UInt32, String}()
    open(file) do unidata
        for line in readlines(unidata)
            id, name, desc = split(line, ";")[[1, 2, 11]]
            codepoint = parse(UInt32, "0x$id")
            names[codepoint] = titlecase(lowercase(
                name == "" ?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;x3/&gt;&lt;x4/&gt;&lt;x5/&gt; Using all of a function's arguments to choose which method should be invoked, rather than
just the first, is known as &lt;x6/&gt;multiple dispatch&lt;x7/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T011742Z" creationid="hsugawa8651" creationdate="20181120T011503Z">
        <seg>&lt;x3/&gt;&lt;x4/&gt;&lt;x5/&gt; 関数の、最初の引数だけではなく、すべての引数を使用して、呼び出すメソッドを選択することは、多重ディスパッチとして知られています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;x3/&gt;&lt;x4/&gt;&lt;x5/&gt;(@ref conversion-and-promotion) are defined
so that operations on any combination of predefined numeric types, whether primitive or composite,
behave as expected.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T123023Z" creationid="hsugawa8651" creationdate="20181118T123023Z">
        <seg>&lt;x3/&gt;&lt;x4/&gt;&lt;x5/&gt;(@ref変換とプロモーション)は定義されています。 定義済みの数値タイプの任意の組合せで、プリミティブまたはコンポジットのいずれであっても動作するようにします。 期待どおりに動作します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;x3/&gt;`abs2`&lt;x4/&gt; gives the square of the absolute value, and is of particular use for complex
numbers since it avoids taking a square root.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T123226Z" creationid="hsugawa8651" creationdate="20181118T123226Z">
        <seg>&lt;x3/&gt;`abs2&lt;x4/&gt;は絶対値の2乗を与え、複雑な値に対しては特に有用である。 これは平方根を取らないためです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;x4/&gt;Cstring&lt;x5/&gt; can also be used as
the &lt;x6/&gt;`ccall`&lt;x7/&gt; return type, but in that case it obviously does not introduce any extra
checks and is only meant to improve readability of the call.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T150955Z" creationid="hsugawa8651" creationdate="20181117T150955Z">
        <seg>&lt;x4/&gt;Cstring&lt;x5/&gt;は、次のように使用することもできます。 &lt;x6/&gt;`ccall'&lt;x7/&gt;return typeであるが、この場合は明らかに余分なものは導入されない。 は、呼び出しの可読性を向上させることを目的としています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;x4/&gt;library&lt;x5/&gt; refers
to the shared library name: shared libraries available in the (platform-specific) load path will
be resolved by name, and if necessary a direct path may be specified.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T161423Z" creationid="hsugawa8651" creationdate="20181114T161423Z">
        <seg>&lt;x4/&gt;ライブラリ&lt;x5/&gt;は以下のとおりです。 共有ライブラリの名前:(プラットフォーム固有の)ロードパスで使用可能な共有ライブラリ 名前で解決する必要があり、必要に応じて直接パスを指定することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;x5/&gt;-p n&lt;x6/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T000638Z" creationid="hsugawa8651" creationdate="20181120T000638Z">
        <seg>&lt;x5/&gt;-p n&lt;x6/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;x5/&gt;&lt;x6/&gt;&lt;x7/&gt;(@ref conversion-and-promotion),
however, shows how clever application of sufficiently advanced technology can be indistinguishable
from magic.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T013842Z" creationid="hsugawa8651" creationdate="20181120T013842Z">
        <seg>しかし、[Conversion and Promotion]（@ ref conversion-and-promotion）では、十分に高度な技術をうまく使うと、魔法と区別できないほどになることを示しています。[^ Clarke61]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;x5/&gt;X .+= Y&lt;x6/&gt; etcetera is equivalent to &lt;x7/&gt;X .= X .+ Y&lt;x8/&gt; and results in a fused in-place assignment;
see also &lt;x9/&gt;&lt;x10/&gt;&lt;x11/&gt;(@ref man-dot-operators).</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T122046Z" creationid="hsugawa8651" creationdate="20181112T105916Z">
        <seg>&lt;x5/&gt;X.+=Y&lt;x6/&gt;eteteraは&lt;x7/&gt;Xと同等であり、X.+Y&lt;x8/&gt;Y&lt;x8/&gt;となり、結果は融合されたインプレース割り当てになります。 &lt;x9/&gt;&lt;x10/&gt;&lt;x11/&gt;(@ref man-dot-operators)も参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;x5/&gt;`angle`&lt;x6/&gt; returns the phase angle in radians
(also known as the &lt;x7/&gt;argument&lt;x8/&gt; or &lt;x9/&gt;arg&lt;x10/&gt; function).</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T123358Z" creationid="hsugawa8651" creationdate="20181118T123358Z">
        <seg>&lt;x5/&gt;'角度&lt;x6/&gt;は位相角をラジアン単位で返します。 (&lt;x7/&gt;引数&lt;x8/&gt;または&lt;x9/&gt;arg&lt;x10/&gt;関数とも呼ばれます)。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;x7/&gt;DefaultArrayStyle&lt;x8/&gt; and the abstract supertype, &lt;x9/&gt;AbstractArrayStyle&lt;x10/&gt;, store the dimensionality as a type parameter to support specialized
array types that have fixed dimensionality requirements.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T131806Z" creationid="hsugawa8651" creationdate="20181113T131806Z">
        <seg>&lt;x7/&gt;DefaultArrayStyle&lt;x8/&gt;と抽象型スーパータイプ&lt;x9/&gt;AbstractArrayStyle&lt;x10/&gt;は、特殊化されたものをサポートするために、次元をタイプパラメータとして格納します。 固定された次元要件を持つ配列タイプ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;x7/&gt;Priv&lt;x8/&gt; is a private package that you created, whereas &lt;x9/&gt;Pub&lt;x10/&gt; is a public package that you use but don't control.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T152850Z" creationid="hsugawa8651" creationdate="20181117T152850Z">
        <seg>&lt;x7/&gt;Priv&lt;x8/&gt;は、作成したプライベート・パッケージですが、&lt;x9/&gt;Pub&lt;x10/&gt;は使用するパブリック・パッケージですが、制御することはできません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;x7/&gt;`AbstractVector`&lt;x8/&gt; and &lt;x9/&gt;`AbstractMatrix`&lt;x10/&gt; are
aliases for the 1-d and 2-d cases.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T161351Z" creationid="hsugawa8651" creationdate="20181114T161351Z">
        <seg>&lt;x7/&gt;'AbstractVector'&lt;x8/&gt;および&lt;x9/&gt;'AbstractMatrix&lt;x10/&gt;は 1-dおよび2-dケースのエイリアス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;x7/&gt;`ccall`&lt;x8/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T152231Z" creationid="hsugawa8651" creationdate="20181117T152231Z">
        <seg>&lt;x7/&gt;`ccall`&lt;x8/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;x7/&gt;compare&lt;x8/&gt; is a callback function which takes pointers to two elements &lt;x9/&gt;a&lt;x10/&gt; and &lt;x11/&gt;b&lt;x12/&gt; and returns
an integer less/greater than zero if &lt;x13/&gt;a&lt;x14/&gt; should appear before/after &lt;x15/&gt;b&lt;x16/&gt; (or zero if any order
is permitted).</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T150526Z" creationid="hsugawa8651" creationdate="20181117T150526Z">
        <seg>&lt;x7/&gt;比較&lt;x8/&gt;は、2つの要素&lt;x9/&gt;a&lt;x10/&gt;と&lt;x11/&gt;b&lt;x12/&gt;と&lt;x12/&gt;b&lt;x12/&gt;のポインタを取得するコールバック関数であり &lt;x15/&gt;b&lt;x16/&gt;の前/後&lt;x15/&gt;b&lt;x16/&gt;(いずれかの順序がある場合は0)の前に&lt;x13/&gt;a&lt;x14/&gt;を表示する必要がある場合は、0より小さい/大きい整数 が許可されています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;x7/&gt;new{T,S}&lt;x8/&gt; can be used in any constructor definition, but for convenience the parameters
to &lt;x9/&gt;new{}&lt;x10/&gt; are automatically derived from the type being constructed when possible.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T124313Z" creationid="hsugawa8651" creationdate="20181118T124313Z">
        <seg>&lt;x7/&gt;新しい{T,S}&lt;x8/&gt;は、任意のコンストラクタ定義で使用できますが、便宜上、パラメータを使用します。 &lt;x9/&gt;新しい{}&lt;x10/&gt;は、可能な場合に構築されているタイプから自動的に導出されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;x8/&gt;`view`&lt;x9/&gt; stores the input index vectors in a
&lt;x10/&gt;SubArray&lt;x11/&gt; object, which can later be used to index the original array
indirectly.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T160440Z" creationid="hsugawa8651" creationdate="20181109T160440Z">
        <seg>&lt;x8/&gt;'view'&lt;x9/&gt;は、入力インデックスベクトルを &lt;x10/&gt;サブアレイ&lt;x11/&gt;オブジェクトで、後でオリジナルの配列をインデックス化するために使用できます。 間接的に。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>= += -= *= /= //= \= ^= ÷= %= \|= &amp;= ⊻= &lt;&lt;= &gt;&gt;= &gt;&gt;&gt;=&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T030912Z" creationid="hsugawa8651" creationdate="20181114T030912Z">
        <seg>= += -= *= /= //= \= ^= ÷= %= \|= &amp;= ⊻= &lt;&lt;= &gt;&gt;= &gt;&gt;&gt;=&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>=&lt;x1/&gt;&lt;x2/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T032255Z" creationid="hsugawa8651" creationdate="20181114T032255Z">
        <seg>=&lt;x1/&gt;&lt;x2/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>=&lt;x1/&gt;&lt;x2/&gt; is ignored by &lt;x3/&gt;bash&lt;x4/&gt; since it stops
parsing the file once it reaches to the &lt;x5/&gt;exec&lt;x6/&gt; statement.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181110T024947Z" creationid="hsugawa8651" creationdate="20181110T024947Z">
        <seg>=&lt;x1/&gt;&lt;x2/&gt;は、&lt;x3/&gt;bash&lt;x4/&gt;によって無視されます。なぜならば、それは停止するからです。 &lt;x5/&gt;exec&lt;x6/&gt;ステートメントに到達したファイルを解析します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>===&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T063624Z" creationid="hsugawa8651" creationdate="20181114T063624Z">
        <seg>===&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>=&gt;&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T030907Z" creationid="hsugawa8651" creationdate="20181114T030907Z">
        <seg>=&gt;&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&gt; &lt; &gt;= &lt;= == === != !== &lt;:&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T030859Z" creationid="hsugawa8651" creationdate="20181114T030859Z">
        <seg>&gt; &lt; &gt;= &lt;= == === != !== &lt;:&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&gt;:&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T063602Z" creationid="hsugawa8651" creationdate="20181114T063602Z">
        <seg>&gt;:&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>?&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T063201Z" creationid="hsugawa8651" creationdate="20181114T063201Z">
        <seg>?&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>?cos
?@time
?r""</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T020059Z" creationid="hsugawa8651" creationdate="20181116T020059Z">
        <seg>?cos
?@time
?r""</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>@doc (@doc foo!) foo</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T020125Z" creationid="hsugawa8651" creationdate="20181116T020125Z">
        <seg>@doc (@doc foo!) foo</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>@doc raw"""
...
"""
f(x) = x</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T020121Z" creationid="hsugawa8651" creationdate="20181116T020121Z">
        <seg>@doc raw"""
...
"""
f(x) = x</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>@eval begin
    &lt;x1/&gt; multiple lines
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T015609Z" creationid="hsugawa8651" creationdate="20181116T015609Z">
        <seg>@eval begin
    &lt;x1/&gt; multiple lines
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>@eval ccall(($(string("a", "b")), "lib"), ...</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T152304Z" creationid="hsugawa8651" creationdate="20181117T152304Z">
        <seg>@eval ccall(($(string("a", "b")), "lib"), ...</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>@m&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T150220Z" creationid="hsugawa8651" creationdate="20181117T150220Z">
        <seg>@m&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>@name (expr1, expr2, ...)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T015403Z" creationid="hsugawa8651" creationdate="20181116T015403Z">
        <seg>@name (expr1, expr2, ...)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>@name expr1 expr2 ...
@name(expr1, expr2, ...)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T015400Z" creationid="hsugawa8651" creationdate="20181116T015400Z">
        <seg>@name expr1 expr2 ...
@name(expr1, expr2, ...)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>@name[a b] * v
@name([a b]) * v</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T015406Z" creationid="hsugawa8651" creationdate="20181116T015406Z">
        <seg>@name[a b] * v
@name([a b]) * v</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>@static Sys.iswindows() ?</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T225012Z" creationid="hsugawa8651" creationdate="20181109T225012Z">
        <seg>@static Sys.iswindows() ?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>@static if Sys.islinux()
    linux_specific_thing(a)
else
    generic_thing(a)
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T224958Z" creationid="hsugawa8651" creationdate="20181109T224958Z">
        <seg>@static if Sys.islinux()
    linux_specific_thing(a)
else
    generic_thing(a)
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>@static if Sys.islinux()
    some_complicated_thing(a)
else
    some_different_thing(a)
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T001537Z" creationid="hsugawa8651" creationdate="20181120T001537Z">
        <seg>@static if Sys.islinux()
    some_complicated_thing(a)
else
    some_different_thing(a)
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>@static if is_linux()
    some_complicated_thing(a)
else
    some_different_thing(a)
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T234123Z" creationid="hsugawa8651" creationdate="20181119T234123Z">
        <seg>@static if is_linux()
    some_complicated_thing(a)
else
    some_different_thing(a)
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>@static is_windows() ?</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T234312Z" creationid="hsugawa8651" creationdate="20181119T234312Z">
        <seg>@static is_windows() ?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A
great deal of care has been taken to ensure that Julia does them correctly.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T064710Z" creationid="hsugawa8651" creationdate="20181114T030659Z">
        <seg> Juliaでは、このような処理を正確に実施できるよう、細心の注意が払われています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A "strided" array is stored in memory with elements laid out in regular offsets such that
an instance with a supported &lt;x1/&gt;isbits&lt;x2/&gt; element type can be passed to
external C and Fortran functions that expect this memory layout.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T160455Z" creationid="hsugawa8651" creationdate="20181109T160455Z">
        <seg>"stried"配列は、規則的なオフセットに配置された要素を含むメモリに格納されます。 サポートされる&lt;x1/&gt;イスビトス&lt;x2/&gt;エレメントタイプを持つインスタンスは このメモリレイアウトを期待する外部CとFortranの関数です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A &lt;x1/&gt;(:function, "library")&lt;x2/&gt; pair, which must be written as a literal constant,</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T223837Z" creationid="hsugawa8651" creationdate="20181109T223837Z">
        <seg>&lt;x1/&gt;(:関数、"ライブラリ")&lt;x2/&gt;ペアで、リテラル定数として記述される必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A &lt;x1/&gt;(name, library)&lt;x2/&gt; function specification must be a constant expression.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T152259Z" creationid="hsugawa8651" creationdate="20181117T152259Z">
        <seg>&lt;x1/&gt;(名前、ライブラリ)&lt;x2/&gt;関数仕様は、定数式でなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A &lt;x1/&gt;Char&lt;x2/&gt; value represents a single character: it is just a 32-bit primitive type with a special literal
representation and appropriate arithmetic behaviors, and which can be converted
to a numeric value representing a
&lt;x3/&gt;Unicode code point&lt;x4/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T095452Z" creationid="hsugawa8651" creationdate="20181120T095452Z">
        <seg>&lt;x1/&gt;Char&lt;x2/&gt; 値は単体の文字を表します。これは特殊なリテラル表現と適切な算術演算を持つ32ビットのプリミティブタイプであり、 数値は &lt;x3/&gt;Unicode code point&lt;x4/&gt;Unicodeコードポイント として解釈されます。 </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A &lt;x1/&gt;Char&lt;x2/&gt; value represents a single character: it is just a 32-bit primitive type with a special literal
representation and appropriate arithmetic behaviors, whose numeric value is interpreted as a
&lt;x3/&gt;Unicode code point&lt;x4/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T080154Z" creationid="hsugawa8651" creationdate="20181120T080107Z">
        <seg>&lt;x1/&gt;Char&lt;x2/&gt; 値は単体の文字を表します。これは特殊なリテラル表現と適切な算術演算を持つ32ビットのプリミティブタイプであり、 数値は &lt;x3/&gt;Unicode code point&lt;x4/&gt;Unicodeコードポイント として解釈されます。 C</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A &lt;x1/&gt;break&lt;x2/&gt; statement inside such a loop exits the entire nest of loops, not just the inner one.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T000428Z" creationid="hsugawa8651" creationdate="20181120T000428Z">
        <seg>このようなループ内の&lt;x1/&gt;break&lt;x2/&gt;ステートメントは、内部だけではなくループのネスト全体を終了させます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A &lt;x1/&gt;package&lt;x2/&gt; is a source tree with a standard layout providing functionality that can be reused by other Julia projects.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T152804Z" creationid="hsugawa8651" creationdate="20181117T152804Z">
        <seg>&lt;x1/&gt;パッケージ&lt;x2/&gt;は、他のジュリアプロジェクトによって再利用可能な機能を提供する標準的なレイアウトを備えたソースツリーです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A &lt;x17/&gt;MethodError&lt;x18/&gt; should be thrown if &lt;x19/&gt;x&lt;x20/&gt; cannot be displayed
as that MIME type; this is automatic if one calls &lt;x21/&gt;show&lt;x22/&gt; or &lt;x23/&gt;repr&lt;x24/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T043316Z" creationid="hsugawa8651" creationdate="20181112T043316Z">
        <seg>&lt;x19/&gt;x&lt;x20/&gt;が表示されない場合は、&lt;x17/&gt;MethodError&lt;x18/&gt;をスローする必要があります。 このMIMEタイプは、&lt;X21/&gt;show&lt;x22/&gt;または&lt;x23/&gt;repr&lt;x24/&gt;を呼び出すと自動的に表示されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A &lt;x4/&gt;SubArray&lt;x5/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T150516Z" creationid="hsugawa8651" creationdate="20181117T150509Z">
        <seg>&lt;x4/&gt;サブアレイ&lt;x5/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A = [ F(x,y,...) for x=rx, y=ry, ... ]</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T064529Z" creationid="hsugawa8651" creationdate="20181114T064529Z">
        <seg>A = [ F(x,y,...) for x=rx, y=ry, ... ]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A Julia Function</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T133904Z" creationid="hsugawa8651" creationdate="20181117T133904Z">
        <seg>ジュリア関数</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A classic example is &lt;x1/&gt;`map()`&lt;x2/&gt;, which applies a function to each value of
an array and returns a new array containing the resulting values:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T130623Z" creationid="hsugawa8651" creationdate="20181120T130623Z">
        <seg> 定番の例としては、&lt;x1/&gt;`map()`&lt;x2/&gt;があります。 この関数は、 配列の各要素に関数を適用したものを、新しい配列として返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A classic example is the standard C library &lt;x1/&gt;qsort&lt;x2/&gt; function, declared as:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T133921Z" creationid="hsugawa8651" creationdate="20181117T133921Z">
        <seg>典型的な例として、標準的なCライブラリ&lt;x1/&gt;qsort&lt;x2/&gt;関数があり、次のように宣言されています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A constructor is just like any other function in Julia in that its overall behavior is defined
by the combined behavior of its methods.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T155705Z" creationid="hsugawa8651" creationdate="20181117T155705Z">
        <seg>コンストラクタは、その全体的な振る舞いが定義されているという点で、Juliaの他の関数と同じです。 それは、その方法の組み合わせによるものである。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A convenient syntax for this is &lt;x5/&gt;X .= ...&lt;x6/&gt;, which
is equivalent to &lt;x7/&gt;broadcast!(identity, X, ...)&lt;x8/&gt; except that, as above, the &lt;x9/&gt;broadcast!&lt;x10/&gt; loop is
fused with any nested "dot" calls.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T120152Z" creationid="hsugawa8651" creationdate="20181118T120152Z">
        <seg>このための便利な構文は&lt;x5/&gt;X.=.…&lt;x6/&gt;である。 は、&lt;x7/&gt;ブロードキャストと同等であり、&lt;x9/&gt;ブロードキャスト!&lt;x8/&gt;は、上記のように、&lt;x9/&gt;ブロードキャスト!&lt;x10/&gt;ループを意味します。 ネストされた「ドット」コールと融合されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A curated list of useful learning resources to help new users get started can be found on the &lt;a0&gt;learning&lt;/a0&gt; page of the main Julia web site.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T183249Z" creationid="hsugawa8651" creationdate="20181118T183249Z">
        <seg>新しいユーザを支援するための有用な学習リソースのリストは、Julia Webサイトの&lt;a0&gt;learning&lt;/a0&gt; ページに掲載されています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A curated list of useful learning resources to help new users get started can be found on the &lt;x1/&gt;learning&lt;x2/&gt; page of the main Julia web site.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T224812Z" creationid="hsugawa8651" creationdate="20181109T224812Z">
        <seg>新しいユーザを支援するための有用な学習リソースのリストは、Julia Webサイトの&lt;x1/&gt;学習&lt;x2/&gt;ページに掲載されています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A definition of one possible behavior for
a function is called a &lt;x1/&gt;method&lt;x2/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T005932Z" creationid="hsugawa8651" creationdate="20181120T005932Z">
        <seg>こうした関数の、とるかもしれない１つの動作の定義は、メソッドと呼ばれます。 </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A few general rules to note:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T121329Z" creationid="hsugawa8651" creationdate="20181118T121329Z">
        <seg>注意する一般的な規則は次のとおりです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A few special expressions correspond to calls to functions with non-obvious names.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T130222Z" creationid="hsugawa8651" creationdate="20181120T130222Z">
        <seg>特殊な式で、分かりづらい名前ながら、関数呼び出しに対応しているものが、いくつかあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A function &lt;x1/&gt;`display(x)`&lt;x2/&gt; to request the richest available multimedia display of a Julia object
&lt;x3/&gt;x&lt;x4/&gt; (with a plain-text fallback).</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T043225Z" creationid="hsugawa8651" creationdate="20181112T043225Z">
        <seg>Juliaオブジェクトの最もリッチなマルチメディアディスプレイを要求する関数&lt;x1/&gt;`display(x)`&lt;x2/&gt; &lt;x3/&gt;x&lt;x4/&gt;(プレーンテキストのフォールバックを使用)。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A function can also take one or more &lt;x4/&gt;Expr&lt;x5/&gt; objects as arguments, and return another
&lt;x6/&gt;Expr&lt;x7/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T165327Z" creationid="hsugawa8651" creationdate="20181118T165327Z">
        <seg>関数はまた、一つ以上の&lt;x4/&gt;Expr&lt;x5/&gt;オブジェクトを引数として取得することもでき、また別のオブジェクトを返すこともできます。 &lt;x6/&gt;Expr&lt;x7/&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A function is called using the traditional parenthesis syntax:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T125247Z" creationid="hsugawa8651" creationdate="20181110T025625Z">
        <seg>関数は、従来の括弧を使う構文で呼び出されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A function name may be used alone in place of the tuple (just &lt;x1/&gt;:function&lt;x2/&gt; or &lt;x3/&gt;"function"&lt;x4/&gt;).</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T223757Z" creationid="hsugawa8651" creationdate="20181109T223757Z">
        <seg>関数の関数名はタプルの代わりに単独で使用することができる(単に&lt;x1/&gt;:関数&lt;x2/&gt;または&lt;x3/&gt;"関数&lt;x4/&gt;)。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A function name may be used alone in place of the tuple (just &lt;x1/&gt;:function&lt;x2/&gt; or &lt;x3/&gt;"function"&lt;x4/&gt;). In
this case the name is resolved within the current process. This form can be used to call C library
functions, functions in the Julia runtime, or functions in an application linked to Julia.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T133752Z" creationid="hsugawa8651" creationdate="20181117T133752Z">
        <seg>タプルの代わりに関数名を使用することができます(単に&lt;x1/&gt;:関数&lt;x2/&gt;または&lt;x3/&gt;"関数&lt;x4/&gt;&lt;x x/&gt;&lt;x4/&gt;&lt;x/&gt;)。 この場合、現在のプロセス内で名前が解決されます。このフォームを使用してCライブラリを呼び出すことができます。 関数、Juliaランタイム内の関数、またはJuliaにリンクされたアプリケーションの関数です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A key part in defining an &lt;x1/&gt;AbstractArray&lt;x2/&gt; subtype is &lt;x3/&gt;`IndexStyle`&lt;x4/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T022659Z" creationid="hsugawa8651" creationdate="20181113T022659Z">
        <seg>&lt;x1/&gt;AbstractArray&lt;x2/&gt;サブタイプの定義における重要な部分は&lt;x3/&gt;'IndexStyleである&lt;x4/&gt;である。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A literal tuple of input types</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T133909Z" creationid="hsugawa8651" creationdate="20181117T133909Z">
        <seg>入力タイプのリテラル・タプル</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A logical index
must be a vector of the same length as the dimension it indexes into, or it
must be the only index provided and match the size and dimensionality of the
array it indexes into.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T155807Z" creationid="hsugawa8651" creationdate="20181109T155807Z">
        <seg>論理インデックス は、インデックスを作成する寸法と同じ長さのベクトルである必要があります。また 指定された唯一のインデックスであり にインデックスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A lot of the power and extensibility in Julia comes from a collection of informal interfaces.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T112047Z" creationid="hsugawa8651" creationdate="20181112T112047Z">
        <seg>Juliaのパワーと拡張性の多くは、インフォーマルなインターフェースの集合から生まれています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A macro maps
a tuple of arguments to a returned &lt;x1/&gt;expression&lt;x2/&gt;, and the resulting expression is compiled directly
rather than requiring a runtime &lt;x3/&gt;`eval`&lt;x4/&gt; call.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T165338Z" creationid="hsugawa8651" creationdate="20181118T165338Z">
        <seg>マクロマップ 返された&lt;x1/&gt;式&lt;x2/&gt;への引数のタプルで、生成された式は直接コンパイルされる。 実行時の&lt;x3/&gt;`eval'&lt;x4/&gt;呼び出しを要求するのではありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A manifest file contains a stanza for each of a project's direct or indirect dependencies, including for each one, its UUID and a source tree hash or an explicit path to the source code.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T121117Z" creationid="hsugawa8651" creationdate="20181118T121117Z">
        <seg>マニフェスト・ファイルには、各プロジェクトの直接的または間接的依存関係のスタンザが含まれています。たとえば、各プロジェクトのUUIDとソース・ツリーのハッシュまたはソース・コードへの明示的なパスが含まれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A nested tree of
&lt;x5/&gt;Broadcasted&lt;x6/&gt; containers is directly constructed by the implicit dot syntax; &lt;x7/&gt;5 .+ 2.*x&lt;x8/&gt; is
transiently represented by &lt;x9/&gt;Broadcasted(+, 5, Broadcasted(*, 2, x))&lt;x10/&gt;, for example.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T131520Z" creationid="hsugawa8651" creationdate="20181113T131520Z">
        <seg>ネストされたツリー &lt;x5/&gt;ブロードキャスト&lt;x6/&gt;コンテナは、暗黙的なドット構文によって構成されます。&lt;x7/&gt;5.+2.*x&lt;x8/&gt;は &lt;x9/&gt;ブロードキャスト(+,5,ブロードキャスト(*, 2, x))&lt;x10/&gt;などによって一時的に表現される。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A notable exception is &lt;x25/&gt;AbstractString&lt;x26/&gt;;
strings are special-cased to behave as scalars for the purposes of broadcast even though
they are iterable collections of their characters (see &lt;x27/&gt;Strings&lt;x28/&gt; for more).</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T131103Z" creationid="hsugawa8651" creationdate="20181113T131103Z">
        <seg>注目すべき例外は&lt;x25/&gt;AbstractString&lt;x26/&gt;です。 文字列は、ブロードキャストの目的で、ブロードキャストのために それらは、それらの文字(詳細は&lt;x27/&gt;の文字列&lt;x28/&gt;を参照)のコレクションです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A notable exception is &lt;x5/&gt;`unsafe_wrap`&lt;x6/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T152246Z" creationid="hsugawa8651" creationdate="20181117T152246Z">
        <seg>注目すべき例外は、&lt;x5/&gt;'insafe_wrap'&lt;x6/&gt;です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A package directory&lt;x1/&gt; is a directory containing the source trees of a set of packages as subdirectories.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T152923Z" creationid="hsugawa8651" creationdate="20181117T152923Z">
        <seg>パッケージディレクトリ&lt;x1/&gt;は、サブディレクトリとしてパッケージセットのソースツリーを格納したディレクトリです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A package is loaded by &lt;x3/&gt;import X&lt;x4/&gt; or  &lt;x5/&gt;using X&lt;x6/&gt; statements.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T152801Z" creationid="hsugawa8651" creationdate="20181117T152801Z">
        <seg>X&lt;x6/&gt;ステートメントを使用して、&lt;x3/&gt;インポートX&lt;x4/&gt;または&lt;x5/&gt;を使用してパッケージをロードします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A package with a project file but no explicit UUID can only be depended on by packages without project files since dummy UUIDs assigned to these packages are strictly internal.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T121337Z" creationid="hsugawa8651" creationdate="20181118T121337Z">
        <seg>プロジェクトファイルが含まれるが明示的なUUIDはないパッケージは、これらのパッケージに割り当てられたダミーUUIDが厳密に内部的であるため、プロジェクトファイルを含まないパッケージによってのみ依存することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A package with a project file cannot depend on one without a project file since packages with project files can only load packages in &lt;x1/&gt;graph&lt;x2/&gt; and packages without project files do not appear in &lt;x3/&gt;graph&lt;x4/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T121334Z" creationid="hsugawa8651" creationdate="20181118T121334Z">
        <seg>プロジェクトファイルを持つパッケージは&lt;x1/&gt;グラフ&lt;x2/&gt;でのみロードでき、プロジェクトファイルのないパッケージは&lt;x3/&gt;グラフ&lt;x4/&gt;にはロードされないため、プロジェクトファイルを持たないパッケージは、プロジェクトファイルなしのものに依存することはありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A package without a project file can depend on any top-level dependency, and since every package in a package directory is available at the top-level, it can import all packages in the environment.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T121331Z" creationid="hsugawa8651" creationdate="20181118T121331Z">
        <seg>プロジェクト・ファイルがないパッケージは、最上位の依存関係に依存することができ、パッケージ・ディレクトリ内のすべてのパッケージが最上位レベルで使用可能なので、環境内のすべてのパッケージをインポートできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A pointer
to memory allocated by Julia must be of type &lt;x13/&gt;Ref{gsl_permutation}&lt;x14/&gt;, to ensure that the memory
address pointed to is valid and that Julia's garbage collector manages the chunk of memory pointed
to correctly.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T152134Z" creationid="hsugawa8651" creationdate="20181117T152134Z">
        <seg>ポインタ Juliaによって割り当てられたメモリは、メモリを確保するためには&lt;x13/&gt;Ref{gsl_mutation}&lt;x14/&gt;のようにする必要があります。 指定されたアドレスは有効であり、ジュリアのガーベッジ・コレクターは、指定されたメモリーのチャンクを管理しています。 正確に。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A prefix &lt;x1/&gt;&amp;&lt;x2/&gt; is used on an argument to &lt;x3/&gt;`ccall`&lt;x4/&gt; to indicate that a pointer to a scalar
argument should be passed instead of the scalar value itself (required for all Fortran function
arguments, as noted above).</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T151844Z" creationid="hsugawa8651" creationdate="20181117T151844Z">
        <seg>プレフィックス&lt;x1/&gt;&amp;&lt;x2/&gt;は、スカラーへのポインタを示すために、&lt;x3/&gt;'ccall'&lt;x4/&gt;への引数で使用されます。 スカラー値自体の代わりに引数を渡す必要があります(すべてのFortran関数に対して必要です)。 引数は前述のとおりです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A project environment is determined by a directory containing a project file called &lt;x1/&gt;Project.toml&lt;x2/&gt;, and optionally a manifest file called &lt;x3/&gt;Manifest.toml&lt;x4/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T121049Z" creationid="hsugawa8651" creationdate="20181118T121049Z">
        <seg>プロジェクト環境は、&lt;x1/&gt;Project.トミル&lt;x2/&gt;と呼ばれるプロジェクトファイルを含むディレクトリ、およびオプションで&lt;x3/&gt;マニフェスト.トミル&lt;x4/&gt;と呼ばれるマニフェストファイルによって決定されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A project environment&lt;x1/&gt; is a directory with a project file and an optional manifest file.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T152917Z" creationid="hsugawa8651" creationdate="20181117T152917Z">
        <seg>プロジェクト環境&lt;x1/&gt;は、プロジェクトファイルとオプションのマニフェストファイルを持つディレクトリです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A rich language of types for constructing and describing objects,
that can also optionally be used to make type declarations</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T082102Z" creationid="hsugawa8651" creationdate="20181118T082013Z">
        <seg>オブジェクトを作成したり説明したりするのに使うことができる、型に関する豊富な機能を提供します。プログラマ自身で型を宣言することもできます</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A rich language of types for constructing and describing objects, that can also optionally be used to make type declarations</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T182505Z" creationid="hsugawa8651" creationdate="20181118T182505Z">
        <seg>オブジェクトを作成したり説明したりするのに使うことができる、型に関する豊富な機能を提供します。プログラマ自身で型を宣言することもできます</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A scalar index.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T150441Z" creationid="hsugawa8651" creationdate="20181117T150441Z">
        <seg>スカラーインデックスです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A scalar index. By default this includes:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T134945Z" creationid="hsugawa8651" creationdate="20181117T134945Z">
        <seg>スカラー・インデックスです。デフォルトでは、次のようになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A similar example can be constructed for &lt;x6/&gt;`@cfunction`&lt;x7/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T152315Z" creationid="hsugawa8651" creationdate="20181117T152315Z">
        <seg>同様の例は、&lt;x6/&gt;`@cfunction`&lt;x7/&gt;のために構成することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A simple example is an iterable sequence of square numbers with a defined length:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T112450Z" creationid="hsugawa8651" creationdate="20181112T112450Z">
        <seg>単純な例は、定義された長さの2乗数のiterableシーケンスです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A stacked environment&lt;x1/&gt; is an ordered set of project environments and package directories, overlaid to make a single composite environment in which all the packages available in its constituent environments are available.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T152930Z" creationid="hsugawa8651" creationdate="20181117T152930Z">
        <seg>スタック環境&lt;x1/&gt;は、プロジェクト環境とパッケージディレクトリの順序付きセットで、その構成環境で使用可能なすべてのパッケージが利用可能な単一の複合環境を作成するためにオーバーレイされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A strided array is a subtype of &lt;x1/&gt;AbstractArray&lt;x2/&gt; whose entries are stored in memory with fixed strides.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T083457Z" creationid="hsugawa8651" creationdate="20181113T083457Z">
        <seg>ストローブされたアレイは、&lt;x1/&gt;AbstractArray&lt;x2/&gt;のサブタイプであり、そのエントリは固定された歩進でメモリ内に格納される。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A symbol is an &lt;x3/&gt;interned string&lt;x4/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T115212Z" creationid="hsugawa8651" creationdate="20181118T115212Z">
        <seg>シンボルは、&lt;x3/&gt;インターンの文字列&lt;x4/&gt;です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A symbol representing the operator associativity can also be found by calling the built-in function &lt;x1/&gt;Base.operator_associativity&lt;x2/&gt;:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T095638Z" creationid="hsugawa8651" creationdate="20181118T095638Z">
        <seg>演算子の自動調整を表すシンボルは、組み込み関数&lt;x1/&gt;Base.operator_associative&lt;x2/&gt;:を呼び出すことによっても検出されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A tuple of input types.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T223952Z" creationid="hsugawa8651" creationdate="20181109T223952Z">
        <seg>入力タイプのタプル。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A tuple of input types. The input types must be written as a literal tuple, not a tuple-valued
variable or expression.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T133810Z" creationid="hsugawa8651" creationdate="20181117T133810Z">
        <seg>入力タイプのタプル。入力タイプはタプルではなくリテラル・タプルとして記述される必要があります。 変数または式。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A typical example of a user-defined strided array is one
that wraps a standard &lt;x3/&gt;Array&lt;x4/&gt; with additional structure.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T083506Z" creationid="hsugawa8651" creationdate="20181113T083506Z">
        <seg>ユーザ定義のストローブ配列の典型的な例は一つです。 これは、標準的な&lt;x3/&gt;アレイ&lt;x/&gt;を追加の構造でラップします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A typical usage of such a pair of return values, however, extracts each value into a variable.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T101451Z" creationid="hsugawa8651" creationdate="20181112T101451Z">
        <seg>しかし、このような戻り値の典型的な使用法は、それぞれの値を変数に抽出することです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A variable, in Julia, is a name associated (or bound) to a value.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T032356Z" creationid="hsugawa8651" creationdate="20181119T032356Z">
        <seg>Juliaにおける変数は、値に関連（または紐づく）する名前になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A way to determine that a file is run in
this fashion is to check if &lt;x3/&gt;abspath(PROGRAM_FILE) == @__FILE__&lt;x4/&gt; is &lt;x5/&gt;true&lt;x6/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181110T024900Z" creationid="hsugawa8651" creationdate="20181110T024900Z">
        <seg>ファイルが実行されることを判別する方法 この方法は、&lt;x3/&gt;アブスパス(PROGRAM_FILE)==@_FILE__&lt;x4/&gt;が&lt;x6/&gt;真&lt;x6/&gt;であるかどうかをチェックすることです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A zero-argument anonymous function is written as &lt;x3/&gt;()-&gt;3&lt;x4/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T130908Z" creationid="hsugawa8651" creationdate="20181120T130817Z">
        <seg>引数が０個の場合は&lt;x3/&gt;()-&gt;3&lt;x4/&gt;.のように書きます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A'&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181110T025859Z" creationid="hsugawa8651" creationdate="20181110T025859Z">
        <seg>A'&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A.'&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T130255Z" creationid="hsugawa8651" creationdate="20181120T130255Z">
        <seg>A.'&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A.n = x&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181110T025934Z" creationid="hsugawa8651" creationdate="20181110T025934Z">
        <seg>A.n = x&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A.n&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181110T025918Z" creationid="hsugawa8651" creationdate="20181110T025918Z">
        <seg>A.n&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A&lt;x1/&gt; is overwritten with the value &lt;x2/&gt;X[i_1, i_2, ..., i_n]&lt;x3/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T155417Z" creationid="hsugawa8651" creationdate="20181109T155417Z">
        <seg>&lt;x1/&gt;は、&lt;x2/&gt;X[i_1,i_2,…,i_n]&lt;x3/&gt;の値で上書きされる。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A&lt;x1/&gt; is overwritten with the value &lt;x2/&gt;X[i_1, i_2, ..., i_n]&lt;x3/&gt;. If &lt;x4/&gt;X&lt;x5/&gt; is not an array, its value
is written to all referenced locations of &lt;x6/&gt;A&lt;x7/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T134928Z" creationid="hsugawa8651" creationdate="20181117T134928Z">
        <seg>&lt;x1/&gt;は値&lt;x2/&gt;X[i_1,i_2,…i_n]&lt;x3/&gt;で上書きされます。&lt;x4/&gt;X&lt;x5/&gt;が配列でない場合、その値はその値を返します。 は、&lt;x6/&gt;A&lt;x7/&gt;の参照されたすべての場所に書き込まれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A&lt;x1/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T132601Z" creationid="hsugawa8651" creationdate="20181113T132601Z">
        <seg>A&lt;x1/&gt;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A[I_1, I_2, ..., I_n] = X</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T134919Z" creationid="hsugawa8651" creationdate="20181117T134919Z">
        <seg>A[I_1, I_2, ..., I_n] = X</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A[i] = x&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181110T025915Z" creationid="hsugawa8651" creationdate="20181110T025915Z">
        <seg>A[i] = x&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A[i]&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181110T025906Z" creationid="hsugawa8651" creationdate="20181110T025906Z">
        <seg>A[i]&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Aardvark/
    src/Aardvark.jl:
        import Bobcat
        import Cobra

Bobcat/
    Project.toml:
        [deps]
        Cobra = "4725e24d-f727-424b-bca0-c4307a3456fa"
        Dingo = "7a7925be-828c-4418-bbeb-bac8dfc843bc"

    src/Bobcat.jl:
        import Cobra
        import Dingo

Cobra/
    Project.toml:
        uuid = "4725e24d-f727-424b-bca0-c4307a3456fa"
        [deps]
        Dingo = "7a7925be-828c-4418-bbeb-bac8dfc843bc"

    src/Cobra.jl:
        import Dingo

Dingo/
    Project.toml:
        uuid = "7a7925be-828c-4418-bbeb-bac8dfc843bc"

    src/Dingo.jl:
        &lt;x1/&gt; no imports</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T015945Z" creationid="hsugawa8651" creationdate="20181116T015945Z">
        <seg>Aardvark/
    src/Aardvark.jl:
        import Bobcat
        import Cobra

Bobcat/
    Project.toml:
        [deps]
        Cobra = "4725e24d-f727-424b-bca0-c4307a3456fa"
        Dingo = "7a7925be-828c-4418-bbeb-bac8dfc843bc"

    src/Bobcat.jl:
        import Cobra
        import Dingo

Cobra/
    Project.toml:
        uuid = "4725e24d-f727-424b-bca0-c4307a3456fa"
        [deps]
        Dingo = "7a7925be-828c-4418-bbeb-bac8dfc843bc"

    src/Cobra.jl:
        import Dingo

Dingo/
    Project.toml:
        uuid = "7a7925be-828c-4418-bbeb-bac8dfc843bc"

    src/Dingo.jl:
        &lt;x1/&gt; no imports</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Aardvark&lt;x1/&gt; can import on any of &lt;x2/&gt;Bobcat&lt;x3/&gt;, &lt;x4/&gt;Cobra&lt;x5/&gt; or &lt;x6/&gt;Dingo&lt;x7/&gt;; it does import &lt;x8/&gt;Bobcat&lt;x9/&gt; and &lt;x10/&gt;Cobra&lt;x11/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T121341Z" creationid="hsugawa8651" creationdate="20181118T121341Z">
        <seg>ツチブタ&lt;x1/&gt;は、&lt;x2/&gt;ボブキャット&lt;x3/&gt;、&lt;x4/&gt;Cobra&lt;x5/&gt;、または&lt;x6/&gt;ディンゴ&lt;x7/&gt;のいずれかにインポートできます。また、&lt;x8/&gt;ボブキャット&lt;x9/&gt;と&lt;x10/&gt;Cobra&lt;x11/&gt;をインポートします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Abstract number types</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T044708Z" creationid="hsugawa8651" creationdate="20181112T044708Z">
        <seg>Abstract number types</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>AbstractString&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T041613Z" creationid="hsugawa8651" creationdate="20181112T041613Z">
        <seg>AbstractString&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>AbstractString&lt;x1/&gt;s.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T035828Z" creationid="hsugawa8651" creationdate="20181120T035828Z">
        <seg></seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Accessing Data through a Pointer</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T152522Z" creationid="hsugawa8651" creationdate="20181117T152522Z">
        <seg>ポインタを介してデータにアクセスする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Accessing Global Variables</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T152506Z" creationid="hsugawa8651" creationdate="20181117T152506Z">
        <seg>グローバル変数へのアクセス</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Accordingly, in
Julia, these behaviors all belong to a single object: the &lt;x4/&gt;+&lt;x5/&gt; function.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T005902Z" creationid="hsugawa8651" creationdate="20181120T005902Z">
        <seg> したがって、Juliaでは、これらの挙動はすべて1つのオブジェクト「+関数」に属します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Accordingly, you can add functionality to a constructor
by simply defining new methods.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T155707Z" creationid="hsugawa8651" creationdate="20181117T155707Z">
        <seg>したがって、コンストラクタに機能を追加することができます。 新しい方法を定義することです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Adding an integer to a &lt;x5/&gt;Ptr&lt;x6/&gt; in Julia always moves the pointer by some number of
&lt;x7/&gt;bytes&lt;x8/&gt;, not elements.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T152616Z" creationid="hsugawa8651" creationdate="20181117T152616Z">
        <seg>ジュリアの&lt;x6/&gt;Ptr&lt;x6/&gt;に整数を追加すると、常にポインタがいくつかの数だけ移動します。 &lt;x7/&gt;バイト&lt;x8/&gt;で、要素ではありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Adding parentheses lets
us add a third argument to &lt;x3/&gt;`map`&lt;x4/&gt;:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154956Z" creationid="hsugawa8651" creationdate="20181109T154956Z">
        <seg>括弧を追加すると &lt;x3/&gt;'map`&lt;x4/&gt;:に3番目の引数を追加します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Addition</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T165046Z" creationid="hsugawa8651" creationdate="20181118T165046Z">
        <seg>加算</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Additional
convenience constructor methods, supplying default values or auxiliary transformations, should
be provided as outer constructors that call the inner constructors to do the heavy lifting.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T155833Z" creationid="hsugawa8651" creationdate="20181117T155833Z">
        <seg>追加 便利なコンストラクタメソッド、デフォルト値または補助変換を提供する必要があります。 内部コンストラクタを呼び出す外部コンストラクタとして提供され、このコンストラクタは重いリフティングを実行します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Additional discussion of other encodings and
how to implement support for them is beyond the scope of this document for the time being.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T081951Z" creationid="hsugawa8651" creationdate="20181120T081951Z">
        <seg>その他のエンコーディングとその実装方法は当ドキュメントの対象外となります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Additional functionality is available from a growing collection of available packages.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T150049Z" creationid="hsugawa8651" creationdate="20181110T041650Z">
        <seg>その他の機能は、利用可能なパッケージのコレクションから入手できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Additionally,
there is a macro &lt;x7/&gt;@static&lt;x8/&gt; which makes it possible to use these functions to conditionally hide
invalid code, as demonstrated in the following examples.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T224947Z" creationid="hsugawa8651" creationdate="20181109T224947Z">
        <seg>さらに マクロ&lt;x7/&gt;@static&lt;x8/&gt;があるため、これらの関数を使用して条件付きで非表示にすることができます。 次の例で示されているように、無効なコードです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Additionally, &lt;x1/&gt;`broadcast`&lt;x2/&gt; is not limited to arrays (see the function documentation),
it also handles tuples and treats any argument that is not an array, tuple or &lt;x3/&gt;`Ref`&lt;x4/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T160134Z" creationid="hsugawa8651" creationdate="20181109T160134Z">
        <seg>さらに、&lt;x1/&gt;`broadcast'&lt;x2/&gt;は配列に限定されるものではありません(関数の文書を参照してください)。 また、タプルや、配列ではない引数、タプル、&lt;x3/&gt;`Ref"&lt;x4/&gt;を処理することもできません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Additionally, &lt;x1/&gt;`sinpi(x)`&lt;x2/&gt; and &lt;x3/&gt;`cospi(x)`&lt;x4/&gt; are provided for more accurate computations
of &lt;x5/&gt;`sin(pi*x)`&lt;x6/&gt; and &lt;x7/&gt;`cos(pi*x)`&lt;x8/&gt; respectively.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T074626Z" creationid="hsugawa8651" creationdate="20181118T100122Z">
        <seg>さらに、&lt;x1/&gt;`sinpi(x)`&lt;x2/&gt; および&lt;x3/&gt;`cospi(x)`&lt;x4/&gt;は、より正確な &lt;x5/&gt;`sin(pi*x)`&lt;x6/&gt; および &lt;x7/&gt;`cos(pi*x)`&lt;x8/&gt;の計算のために提供されています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Additionally, Julia provides
software support for &lt;x1/&gt;Arbitrary Precision Arithmetic&lt;x2/&gt;, which can handle operations on numeric
values that cannot be represented effectively in native hardware representations, but at the cost
of relatively slower performance.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T032242Z" creationid="hsugawa8651" creationdate="20181109T225054Z">
        <seg>さらに、Juliaは、 使用しているハードウェアでは効果的に表現できない数値の演算処理を行うことができる 任意精度計算 の ソフトウェアサポートを提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Additionally, Julia provides software support for &lt;a0&gt;Arbitrary Precision Arithmetic&lt;/a0&gt;, which can handle operations on numeric values that cannot be represented effectively in native hardware representations, but at the cost of relatively slower performance.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T184625Z" creationid="hsugawa8651" creationdate="20181118T184625Z">
        <seg>さらに、ジュリアは &lt;a0&gt;Arbitrary Precision Arithmetic&lt;/a0&gt;をソフトウェアサポートします。ネイティブのハードウェア表現では効果的に表現できないが、コストでは効果的に表現できない値 比較的遅いパフォーマンスとなるような、数値の操作を処理できます。 </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Additionally, full support for &lt;x1/&gt;Complex and Rational Numbers&lt;x2/&gt; is built on top of these primitive
numeric types.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T032518Z" creationid="hsugawa8651" creationdate="20181109T225152Z">
        <seg>加えて、&lt;x1/&gt;&gt;複素数と有理数&lt;x2/&gt; へのサポートは、これらの数値プリミティブ型を踏まえて構築されています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Additionally, parenthesized expressions can be used as coefficients to variables, implying multiplication
of the expression by the variable:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T111834Z" creationid="hsugawa8651" creationdate="20181112T111834Z">
        <seg>さらに、括弧で括られた表現は変数の係数として使用され、乗算を意味します。 変数による表現は次のようになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Additionally, some exception types take one or more arguments that are used for error reporting:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T124650Z" creationid="hsugawa8651" creationdate="20181118T124650Z">
        <seg>また、いくつかの例外タイプには、エラー報告に使用される一つ以上の引数があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Additionally, to support the syntax &lt;x1/&gt;S[end]&lt;x2/&gt;, we must define &lt;x3/&gt;`lastindex`&lt;x4/&gt; to specify the last
valid index.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T113116Z" creationid="hsugawa8651" creationdate="20181112T113116Z">
        <seg>さらに、構文&lt;x1/&gt;S[end]&lt;x2/&gt;をサポートするためには、最後の値を指定するために&lt;x3/&gt;`lastindex'&lt;x4/&gt;を定義する必要があります。 有効なインデックスです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>After the identity of &lt;x3/&gt;X&lt;x4/&gt; in &lt;x5/&gt;import X&lt;x6/&gt; has been resolved to a UUID via &lt;x7/&gt;roots&lt;x8/&gt; or &lt;x9/&gt;graph&lt;x10/&gt; (depending on whether it is loaded from the main project or a dependency), Julia determines what file to load to acquire &lt;x11/&gt;X&lt;x12/&gt; by looking up &lt;x13/&gt;paths[uuid,:X]&lt;x14/&gt; in the environment.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T121027Z" creationid="hsugawa8651" creationdate="20181118T121027Z">
        <seg>&lt;x5/&gt;のインポートX&lt;x6/&gt;&lt;x6/&gt;のX&lt;x4/&gt;のIDは、&lt;x7/&gt;ルート&lt;x8/&gt;または&lt;x9/&gt;グラフ&lt;x10/&gt;(主プロジェクトからロードされるか依存性からロードされるかによって異なります)を介してUUIDに分解された後、&lt;x13/&gt;のパス[uuid,:X]&lt;x14/&gt;を検索して&lt;x13/&gt;X&lt;x12/&gt;を取得することによって、ロードするファイルを決定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>All comma-separated expressions after &lt;x1/&gt;for&lt;x2/&gt; are interpreted as ranges.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154952Z" creationid="hsugawa8651" creationdate="20181109T154948Z">
        <seg>&lt;x2/&gt;のために&lt;x1/&gt;の後にコンマで区切られたすべての式は、範囲として解釈されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>All comma-separated expressions after &lt;x1/&gt;for&lt;x2/&gt; are interpreted as ranges. Adding parentheses lets
us add a third argument to &lt;x3/&gt;`map`&lt;x4/&gt;:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T134816Z" creationid="hsugawa8651" creationdate="20181117T134816Z">
        <seg>&lt;x2/&gt;で&lt;x1/&gt;の後にカンマで区切られたすべての式は、範囲として解釈されます。括弧を追加すると &lt;x3/&gt;'map`&lt;x4/&gt;:に3番目の引数を追加します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>All dimensions indexed with scalars are dropped.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T160835Z" creationid="hsugawa8651" creationdate="20181114T160835Z">
        <seg>スカラーでインデックス付けされたすべての次元は削除されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>All indexing in Julia is 1-based: the first element of any integer-indexed object is found at
index 1.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T080841Z" creationid="hsugawa8651" creationdate="20181120T080829Z">
        <seg>Julia のインデックスは全て1から始まります。つまり、整数インデックスを持つオブジェクトの最初の要素のインデックスは1になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>All numeric types interoperate naturally without explicit casting, thanks to a
flexible, user-extensible &lt;x3/&gt;&lt;x4/&gt;&lt;x5/&gt;(@ref conversion-and-promotion).</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T032554Z" creationid="hsugawa8651" creationdate="20181109T225156Z">
        <seg> 全ての数値型は、明示的に割り当てることなく自然に相互運用します。&lt;x3/&gt;&lt;x4/&gt;&lt;x5/&gt;(@ref conversion-and-promotion)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>All numeric types interoperate naturally without explicit casting, thanks to a flexible, user-extensible &lt;a1&gt;type promotion system&lt;/a1&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T184752Z" creationid="hsugawa8651" creationdate="20181118T184752Z">
        <seg>すべての数値型は、 柔軟なユーザー拡張可能な&lt;a1&gt;type promotion system&lt;/a1&gt; のおかげで、明示的なキャストなしで自然に相互運用されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>All other types are stored as a pointer
to the data.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T151139Z" creationid="hsugawa8651" creationdate="20181117T151139Z">
        <seg>他のすべてのタイプはポインタとして保存されます。 データに変換します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>All string types are subtypes of the abstract type &lt;x1/&gt;AbstractString&lt;x2/&gt;, and external packages define
additional &lt;x3/&gt;AbstractString&lt;x4/&gt; subtypes (e.g. for other encodings).</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T075834Z" creationid="hsugawa8651" creationdate="20181120T075803Z">
        <seg>すべての文字列型は抽象型 &lt;x1/&gt;AbstractString&lt;x2/&gt; のサブタイプであり、外部パッケージは追加の&lt;x3/&gt;AbstractString&lt;x4/&gt;  のサブタイプ（例えばその他のエンコーディング用） を定義します。文</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>All the looping is performed compile-time,
and we avoid looping during execution entirely.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T032336Z" creationid="hsugawa8651" creationdate="20181116T032336Z">
        <seg>すべてのループはコンパイル時に実行されます。 実行中のループを完全に回避することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>All the sorting and order related functions rely on a "less than" relation defining a total order
on the values to be manipulated.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T063939Z" creationid="hsugawa8651" creationdate="20181112T045027Z">
        <seg>ソートと順序の関連関数はすべて、合計オーダーを定義する「より少ない」リレーションに依存しています。 操作する値を指定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>All the standard trigonometric and hyperbolic functions are also defined:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T074431Z" creationid="hsugawa8651" creationdate="20181118T100110Z">
        <seg>標準的な全ての三角関数と双曲線関数も定義されています。:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Allocation of output container</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T083532Z" creationid="hsugawa8651" creationdate="20181113T083532Z">
        <seg>Allocation of output container</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Alright, now that we have a better understanding of how generated functions work, let's use them
to build some more advanced (and valid) functionality...</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T032239Z" creationid="hsugawa8651" creationdate="20181116T032239Z">
        <seg>分かりました、生成された関数がどのように機能するかをよく理解してから、それを使ってみましょう。 より高度な(かつ有効な)機能を構築するために。。。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Also &lt;x3/&gt;in&lt;x4/&gt; and &lt;x5/&gt;isa&lt;x6/&gt; are parsed as infix operators.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181110T041805Z" creationid="hsugawa8651" creationdate="20181110T041805Z">
        <seg>&lt;x4/&gt;では&lt;x3/&gt;、&lt;x5/&gt;では&lt;x6/&gt;である&lt;x6/&gt;は、インフィックス演算子として解析されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Also notice the difference between &lt;x1/&gt;max.(a,b)&lt;x2/&gt;, which &lt;x3/&gt;`broadcast`&lt;x4/&gt;s &lt;x5/&gt;`max`&lt;x6/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T160027Z" creationid="hsugawa8651" creationdate="20181109T160027Z">
        <seg>また、&lt;x1/&gt;の最大値(a,b)&lt;x2/&gt;は、&lt;x3/&gt;"ブロードキャスト"&lt;x4/&gt;"max"&lt;x6/&gt;"max'&lt;x6/&gt;の差があることに注意してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Also recommended is Bruce Dawson's &lt;x1/&gt;series of blog posts on floating-point numbers&lt;x2/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T035203Z" creationid="hsugawa8651" creationdate="20181112T111500Z">
        <seg>Bruce Dawsonによる浮動小数点数に関する一連のブログ記事もお勧めします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Also, &lt;x1/&gt;every&lt;x2/&gt; binary operator supports a &lt;x3/&gt;&lt;x4/&gt;&lt;x5/&gt;(@ref man-dot-operators)
that can be applied to arrays (and combinations of arrays and scalars) in such
&lt;x6/&gt;&lt;x7/&gt;&lt;x8/&gt;(@ref man-vectorized), e.g. &lt;x9/&gt;z .== sin.(x .* y)&lt;x10/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T122046Z" creationid="hsugawa8651" creationdate="20181109T160010Z">
        <seg>また、&lt;x2/&gt;バイナリ演算子の&lt;x1/&gt;は、&lt;x3/&gt;&lt;x4/&gt;&lt;x5/&gt;(@ref man-dot-operators)をサポートします。 は、配列(および配列とスカラーの組み合わせ)に適用することができます。 &lt;x6/&gt;&lt;x7/&gt;&lt;x8/&gt;(@ref man-vectorized)、例えば&lt;x9/&gt;z.=sin.(x .* y)&lt;x10/&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Also, note that there is no compatibility layer that ensures the intrinsic makes
sense and works on the current target,
unlike the equivalent Julia functions exposed by &lt;x3/&gt;Core.Intrinsics&lt;x4/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T152503Z" creationid="hsugawa8651" creationdate="20181117T152503Z">
        <seg>また、固有のmakeを確実にする互換性レイヤーは存在しないことに注意してください。 現在の目標を意識して これは、&lt;x3/&gt;コアによって露出される同等のジュリア関数とは異なります。inintrics&lt;x4/&gt;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Also, when calling a Fortran function, all inputs must be passed as
pointers to allocated values on the heap or stack.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T223810Z" creationid="hsugawa8651" creationdate="20181109T223810Z">
        <seg>また、Fortran関数を呼び出す場合は、すべての入力を次のように指定する必要があります。 ヒープまたはスタック上の割り当てられた値へのポインタ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Alternatively, &lt;x1/&gt;using Module&lt;x2/&gt; will import all exported &lt;x3/&gt;Module&lt;x4/&gt; functions into the current namespace.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181110T041717Z" creationid="hsugawa8651" creationdate="20181110T041717Z">
        <seg>あるいは、モジュール&lt;x2/&gt;を使用する&lt;x1/&gt;は、エクスポートされたすべての&lt;x3/&gt;モジュール&lt;x4/&gt;関数を現在の名前空間にインポートします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Alternatively, the precision
or the rounding can be changed only within the execution of a particular block of code by using
the same functions with a &lt;x4/&gt;do&lt;x5/&gt; block:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T040110Z" creationid="hsugawa8651" creationdate="20181112T111701Z">
        <seg>また、コード内の特定のブロックのみの精度や端数処理の変更をしたい場合は、 &lt;x4/&gt;do&lt;x5/&gt;  ブロックを併用することで設定が可能です。:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Alternatively, you can use &lt;x7/&gt;julia -e 'include(popfirst!(ARGS))'
file.jl&lt;x8/&gt; to execute a script while being able to catch
&lt;x9/&gt;InterruptException&lt;x10/&gt; in the &lt;x11/&gt;`try`&lt;x12/&gt; block.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181110T024913Z" creationid="hsugawa8651" creationdate="20181110T024913Z">
        <seg>または、&lt;x7/&gt;julia-e'include(ポプファースト!(ARGS))'を使用することもできます。 ファイル.jl&lt;x8/&gt;を実行すると、スクリプトをキャッチしながらスクリプトを実行することができます。 &lt;x11/&gt;'try'&lt;x12/&gt;ブロックで&lt;x9/&gt;InterruptException&lt;x10/&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Although it is generally a good idea to return a fully initialized object from an inner constructor,
it is possible to return incompletely initialized objects:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T155923Z" creationid="hsugawa8651" creationdate="20181117T155923Z">
        <seg>一般的には、内部コンストラクタから完全に初期化されたオブジェクトを返すことは、良い考えです。 不完全に初期化されたオブジェクトを返すことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Although it is typical, there is no requirement that &lt;c1&gt;begin&lt;/c1&gt; blocks be multiline or that &lt;c2&gt;(;)&lt;/c2&gt; chains be single-line:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T133805Z" creationid="hsugawa8651" creationdate="20181119T133724Z">
        <seg>&lt;c1&gt;begin&lt;/c1&gt;ブロックは複数行で、セミコロン&lt;c2&gt;(;)&lt;/c2&gt;連鎖は単一行で使うのが一般的ですが、これに従う必要はありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Although it is typical, there is no requirement that &lt;x3/&gt;begin&lt;x4/&gt; blocks be multiline
or that &lt;x5/&gt;(;)&lt;x6/&gt; chains be single-line:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T225821Z" creationid="hsugawa8651" creationdate="20181109T225821Z">
        <seg>典型的なものではあるが、&lt;x3/&gt;が&lt;x4/&gt;ブロックがマルチラインである必要はない。 または&lt;x5/&gt;(;)&lt;x6/&gt;鎖は単一行である。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Although it seems a simple concept, multiple dispatch on the types of values is perhaps the single
most powerful and central feature of the Julia language.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T014201Z" creationid="hsugawa8651" creationdate="20181120T014149Z">
        <seg>単純な考え方のように見えますが、値型に対する多重ディスパッチは、おそらくJulia言語の最も強力で中心的な機能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Although one sometimes speaks of dynamic languages as being "typeless",
they are definitely not: every object, whether primitive or
user-defined, has a type.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T183824Z" creationid="hsugawa8651" creationdate="20181118T183824Z">
        <seg>動的言語は「型がない」と言われることがありますが、そんなことはありません。 プリミティブであれユーザー定義であれ、全てのオブジェクトは何らかの型を持ちます。 </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Although one sometimes speaks of dynamic languages as being "typeless", they are definitely not: every object, whether primitive or user-defined, has a type.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T182553Z" creationid="hsugawa8651" creationdate="20181118T182553Z">
        <seg>動的言語は「型がない」と言われることがありますが、そんなことはありません。 プリミティブであれユーザー定義であれ、全てのオブジェクトは何らかの型を持ちます。 </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Although one sometimes speaks of dynamic languages as being “typeless”,
they are definitely not: every object, whether primitive or
user-defined, has a type.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T082226Z" creationid="hsugawa8651" creationdate="20181118T082226Z">
        <seg>動的言語は「型がない」と言われることがありますが、そんなことはありません。 プリミティブであれユーザー定義であれ、全てのオブジェクトは何らかの型を持ちます。 </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An &lt;x1/&gt;environment&lt;x2/&gt; determines what &lt;x3/&gt;import X&lt;x4/&gt; and &lt;x5/&gt;using X&lt;x6/&gt; mean in various code contexts and what files these statements cause to be loaded.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T152914Z" creationid="hsugawa8651" creationdate="20181117T152914Z">
        <seg>&lt;x1/&gt;環境&lt;x2/&gt;は、X&lt;x6/&gt;のインポートX&lt;x4/&gt;および&lt;x5/&gt;を、さまざまなコードコンテキストでX&lt;x6/&gt;平均を使用して決定し、これらの文がロードするファイルを決定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An anonymous function accepting multiple arguments can be written using the syntax &lt;x1/&gt;(x,y,z)-&gt;2x+y-z&lt;x2/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T130839Z" creationid="hsugawa8651" creationdate="20181120T130808Z">
        <seg>無名関数が複数の引数をとる場合は、&lt;x1/&gt;(x,y,z)-&gt;2x+y-z&lt;x2/&gt;のように書きます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An array is a collection of objects stored in a multi-dimensional grid.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154138Z" creationid="hsugawa8651" creationdate="20181109T154138Z">
        <seg>配列は、多次元グリッドに格納されたオブジェクトの集合です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An array of scalar indices.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T155517Z" creationid="hsugawa8651" creationdate="20181109T155517Z">
        <seg>スカラー・インデックスの配列です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An array of scalar indices. This includes:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T134957Z" creationid="hsugawa8651" creationdate="20181117T134957Z">
        <seg>スカラー・インデックスの配列です。これには次のようなものがあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An array with a specific element type can be constructed using the syntax &lt;x1/&gt;T[A, B, C, ...]&lt;x2/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154659Z" creationid="hsugawa8651" creationdate="20181109T154659Z">
        <seg>特定の要素タイプを持つ配列は、構文&lt;x1/&gt;T[A,B,C,…]&lt;x2/&gt;を使用して構築することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An array with a specific element type can be constructed using the syntax &lt;x1/&gt;T[A, B, C, ...]&lt;x2/&gt;. This
will construct a 1-d array with element type &lt;x3/&gt;T&lt;x4/&gt;, initialized to contain elements &lt;x5/&gt;A&lt;x6/&gt;, &lt;x7/&gt;B&lt;x8/&gt;, &lt;x9/&gt;C&lt;x10/&gt;,
etc. For example, &lt;x11/&gt;Any[x, y, z]&lt;x12/&gt; constructs a heterogeneous array that can contain any values.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T134641Z" creationid="hsugawa8651" creationdate="20181117T134641Z">
        <seg>特定のエレメントタイプを持つ配列は、構文&lt;x1/&gt;T[A,B,C,…]&lt;x2/&gt;を使用して構築できます。 要素タイプ&lt;x3/&gt;T&lt;x4/&gt;を持つ1dアレイを構築し、要素&lt;x5/&gt;A&lt;x6/&gt;、&lt;x7/&gt;B&lt;x8/&gt;、&lt;x9/&gt;C&lt;x10/&gt;を含むように初期化します。 たとえば、&lt;x11/&gt;任意の[x,y,z]&lt;x12/&gt;は、任意の値を含むことができる異機種間配列を構成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An environment's &lt;x1/&gt;graph&lt;x2/&gt; is a multilevel map which assigns, for each &lt;x3/&gt;context&lt;x4/&gt; UUID, a map from names to UUIDs, similar to the &lt;x5/&gt;roots&lt;x6/&gt; map but specific to that &lt;x7/&gt;context&lt;x8/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T121011Z" creationid="hsugawa8651" creationdate="20181118T121011Z">
        <seg>環境の&lt;x1/&gt;グラフ&lt;x2/&gt;は、&lt;x3/&gt;の各コンテキスト&lt;x4/&gt;UUIDに対して、名前からUUIDへのマップを割り当てます。&lt;x6/&gt;&lt;x6/&gt;&lt;x6/&gt;は、&lt;x5/&gt;&lt;x6/&gt;マップと同様に、&lt;x7/&gt;のコンテキスト&lt;x8/&gt;に特有です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An environment's &lt;x1/&gt;roots&lt;x2/&gt; map assigns package names to UUIDs for all the top-level dependencies that the environment makes available to the main project (i.e. the ones that can be loaded in &lt;x3/&gt;Main&lt;x4/&gt;).</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T121001Z" creationid="hsugawa8651" creationdate="20181118T121001Z">
        <seg>環境の&lt;x1/&gt;ルート&lt;x2/&gt;マップは、環境が主プロジェクトで利用可能なすべてのトップレベル依存関係(すなわち、&lt;x3/&gt;メイン&lt;x4/&gt;にロード可能なもの)に対して、UUIDにパッケージ名を割り当てます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An example of this is matrix addition, where &lt;x5/&gt;A + B == B + A&lt;x6/&gt; for any matrices &lt;x7/&gt;A&lt;x8/&gt; and &lt;x9/&gt;B&lt;x10/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T082306Z" creationid="hsugawa8651" creationdate="20181120T082306Z">
        <seg>例えば行列の加算は、&lt;x5/&gt;A + B == B + A&lt;x6/&gt; は &lt;x7/&gt;A&lt;x8/&gt; と &lt;x9/&gt;B&lt;x10/&gt;が同じサイズで有る限り成り立つ可換演算です。 </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An example of this is matrix multiplication, where in general
&lt;x6/&gt;A * B != B * A&lt;x7/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T082432Z" creationid="hsugawa8651" creationdate="20181120T082413Z">
        <seg>例えば行列の乗算は、&lt;x6/&gt;A * B != B * A&lt;x7/&gt;が基本的に成り立つ非可換演算です。 </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An inefficient way to do this would
be to replicate the vector to the size of the matrix:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T160043Z" creationid="hsugawa8651" creationdate="20181109T160043Z">
        <seg>非効率的な方法は ベクトルをマトリックスのサイズに複製することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An inner constructor method
is like an outer constructor method, except for two differences:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T155735Z" creationid="hsugawa8651" creationdate="20181117T155735Z">
        <seg>内部コンストラクタのメソッド は、2つの違いを除いて、外部コンストラクタメソッドのようなものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An object that represents an array of scalar indices and can be converted to such by &lt;x1/&gt;`to_indices`&lt;x2/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T155534Z" creationid="hsugawa8651" creationdate="20181109T155534Z">
        <seg>スカラーインデックスの配列を表すオブジェクトであって、&lt;x1/&gt;"to_indices"&lt;x2/&gt;によって変換されることが可能である。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An object that represents an array of scalar indices and can be converted to such by &lt;x1/&gt;`to_indices`&lt;x2/&gt;. By default this includes:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T135000Z" creationid="hsugawa8651" creationdate="20181117T135000Z">
        <seg>スカラーインデックスの配列を表すオブジェクトで、&lt;x1/&gt;によって変換されて、&lt;x1/&gt;によって変換されます。デフォルトでは、次のようになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Another way to view expressions is with &lt;x1/&gt;Meta.show_sexpr&lt;x2/&gt;, which displays the &lt;x3/&gt;S-expression&lt;x4/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T115255Z" creationid="hsugawa8651" creationdate="20181118T115255Z">
        <seg>式を表示するもう一つの方法は、&lt;x1/&gt;Meta.show_screen&lt;x2/&gt;であり、&lt;x3/&gt;S式&lt;x4/&gt;を表示します。セクプル</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Another way to view expressions is with Meta.show_sexpr, which displays the &lt;x1/&gt;S-expression&lt;x2/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T001609Z" creationid="hsugawa8651" creationdate="20181120T001609Z">
        <seg>式を表示するもう一つの方法は、&lt;x1/&gt;Meta.show_screen&lt;x2/&gt;であり、&lt;x3/&gt;S式&lt;x4/&gt;を表示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Any Julia type that is not a subtype of &lt;x5/&gt;`Signed`&lt;x6/&gt; is assumed to be unsigned.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T150822Z" creationid="hsugawa8651" creationdate="20181117T150822Z">
        <seg>&lt;x5/&gt;'署名された&lt;x6/&gt;のサブタイプではないジュリア型は、符号なしであると仮定されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Any custom array of scalar indices that is a subtype of &lt;x1/&gt;AbstractArray&lt;x2/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T155529Z" creationid="hsugawa8651" creationdate="20181109T155529Z">
        <seg>&lt;x1/&gt;AbstractArray&lt;x2/&gt;のサブタイプであるスカラーインデックスの任意のカスタム配列</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Any object that defines this function is iterable and can be used in the &lt;x1/&gt;&lt;x2/&gt;&lt;x3/&gt;(@ref lib-collections-iteration).</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T112432Z" creationid="hsugawa8651" creationdate="20181112T112432Z">
        <seg>この関数を定義するすべてのオブジェクトは、iterableであることができ、&lt;x1/&gt;&lt;x2/&gt;&lt;x3/&gt;(@ref libコレクション反復)で使用できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Any object that has &lt;x10/&gt;`axes`&lt;x11/&gt; and supports
indexing can participate as an argument in broadcasting, and by default the result is stored
in an &lt;x12/&gt;Array&lt;x13/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T131018Z" creationid="hsugawa8651" creationdate="20181113T131018Z">
        <seg>&lt;x10/&gt;'軸&lt;x11/&gt;を持つすべてのオブジェクトをサポートします。 インデックス作成はブロードキャスト時に引き数として参加することができ、デフォルトではその結果は格納される &lt;x12/&gt;アレイ&lt;x13/&gt;で使用されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Any operation that throws an error is probably currently unimplemented and should be posted as
a bug so that it can be resolved.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T152604Z" creationid="hsugawa8651" creationdate="20181117T152604Z">
        <seg>エラーをスローする操作は、現在実装されていないため、次のように記述する必要があります。 バグを解決できるようにします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Any&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T112202Z" creationid="hsugawa8651" creationdate="20181112T112202Z">
        <seg>Any&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Any&lt;x1/&gt;, &lt;x2/&gt;AbstractArray{T, N}&lt;x3/&gt;, &lt;x4/&gt;Complex{T}&lt;x5/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T150633Z" creationid="hsugawa8651" creationdate="20181117T150633Z">
        <seg>Any&lt;x1/&gt;, &lt;x2/&gt;AbstractArray{T, N}&lt;x3/&gt;, &lt;x4/&gt;Complex{T}&lt;x5/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Applied to the &lt;x1/&gt;sub2ind&lt;x2/&gt; example above, it would look like this:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T032353Z" creationid="hsugawa8651" creationdate="20181116T032353Z">
        <seg>上記の&lt;x1/&gt;sub2ind&lt;x2/&gt;の例に適用されますが、次のようになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Applying it to any other types of arguments will result in a &lt;x1/&gt;`MethodError`&lt;x2/&gt;:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T012517Z" creationid="hsugawa8651" creationdate="20181120T012517Z">
        <seg>この関数定義を他の型の引数に適用すると、次のような&lt;x1/&gt;`MethodError`&lt;x2/&gt;になります。:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Arbitrary Precision Arithmetic</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T120359Z" creationid="hsugawa8651" creationdate="20181118T120359Z">
        <seg>任意精度計算</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Argument Passing Behavior</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T125333Z" creationid="hsugawa8651" creationdate="20181120T101739Z">
        <seg>引数渡しの振る舞い</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Arguments
to &lt;x3/&gt;`ccall`&lt;x4/&gt; are as follows:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T223834Z" creationid="hsugawa8651" creationdate="20181109T223834Z">
        <seg>引数 &lt;x3/&gt;'ccall'&lt;x4/&gt;は次のようになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Arguments to &lt;x3/&gt;`@cfunction`&lt;x4/&gt; are as follows:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T153935Z" creationid="hsugawa8651" creationdate="20181109T153935Z">
        <seg>&lt;x3/&gt;`@cfunction`&lt;x4/&gt;への引数は次のとおりです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Arithmetic Operators</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T094728Z" creationid="hsugawa8651" creationdate="20181118T094728Z">
        <seg>算術演算子</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Arithmetic on the &lt;x1/&gt;Ptr&lt;x2/&gt; type in Julia (e.g. using &lt;x3/&gt;+&lt;x4/&gt;) does not behave the same as C's pointer
arithmetic.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T152613Z" creationid="hsugawa8651" creationdate="20181117T152613Z">
        <seg>&lt;x1/&gt;Ptr&lt;x2/&gt;の算術は、ジュリア(例えば&lt;x3/&gt;+&lt;x4/&gt;)の場合と同じように、Cのポインタと同じように動作しません。 演算。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Array and Vectorized Operators and Functions</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T135137Z" creationid="hsugawa8651" creationdate="20181117T135137Z">
        <seg>配列演算子とベクトル化演算子と関数</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Array data structures are typically
defined in one of two ways: either it most efficiently accesses its elements using just one index
(linear indexing) or it intrinsically accesses the elements with indices specified for every dimension.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T022707Z" creationid="hsugawa8651" creationdate="20181113T022707Z">
        <seg>アレイ・データ構造は通常 2つの方法の一つで定義されています:1つのインデックスのみを使用して、その要素に最も効率的にアクセスすることができます (linear indexing)または本質的に、すべての次元に指定されたインデックスを持つ要素にアクセスします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Array functions</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T020245Z" creationid="hsugawa8651" creationdate="20181116T020245Z">
        <seg>Array functions</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Array traits</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T150444Z" creationid="hsugawa8651" creationdate="20181117T150444Z">
        <seg>配列特性</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Arrays can be constructed and also concatenated using the following functions:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154543Z" creationid="hsugawa8651" creationdate="20181109T154543Z">
        <seg>配列は、次の関数を使用して構成したり、連結することもできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Arrays can easily be sorted according to an arbitrary transformation of their values:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T063824Z" creationid="hsugawa8651" creationdate="20181114T063824Z">
        <seg>配列は、値の任意の変換に従って簡単に並べ替えることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Arrays of &lt;x1/&gt;CartesianIndex{N}&lt;x2/&gt; (see below for more details)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T155531Z" creationid="hsugawa8651" creationdate="20181109T155531Z">
        <seg>&lt;x1/&gt;CartesianIndex{N}&lt;x2/&gt;(詳細については以下を参照)のアレイ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Arrays of &lt;x1/&gt;CartesianIndex{N}&lt;x2/&gt; are also supported.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T161022Z" creationid="hsugawa8651" creationdate="20181114T161022Z">
        <seg>&lt;x1/&gt;CartesianIndex{N}&lt;x2/&gt;のアレイもサポートされている。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Arrays of &lt;x1/&gt;CartesianIndex{N}&lt;x2/&gt; are also supported. They represent a collection
of scalar indices that each span &lt;x3/&gt;N&lt;x4/&gt; dimensions, enabling a form of indexing
that is sometimes referred to as pointwise indexing. For example, it enables
accessing the diagonal elements from the first "page" of &lt;x5/&gt;A&lt;x6/&gt; from above:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T135025Z" creationid="hsugawa8651" creationdate="20181117T135025Z">
        <seg>&lt;x1/&gt;CartesianIndex{N}&lt;x2/&gt;の配列もサポートされています。これらはコレクションを表します。 各スパン&lt;x3/&gt;N&lt;x4/&gt;の各次元を使用可能にするスカラー指数のことで、索引の形式が可能になります。 これはポイントインデキシングと呼ばれることがあります。たとえば、次のようになります。 上からの&lt;x5/&gt;A&lt;x6/&gt;の最初の「ページ」からの対角線要素へのアクセス</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Arrays of booleans, which select elements at their &lt;x1/&gt;true&lt;x2/&gt; indices (see below for more details)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T155544Z" creationid="hsugawa8651" creationdate="20181109T155544Z">
        <seg>ブール値の配列で、&lt;x1/&gt;真の&lt;x2/&gt;インデックスで要素を選択します(詳細については、以下を参照)。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Arrays of parameters can be expressed with &lt;x1/&gt;NTuple&lt;x2/&gt;:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T151154Z" creationid="hsugawa8651" creationdate="20181117T151154Z">
        <seg>パラメータの配列は、&lt;x1/&gt;NUpset&lt;x2/&gt;で表現することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Arrays of plain data types exhibit the same behavior.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T123807Z" creationid="hsugawa8651" creationdate="20181118T123807Z">
        <seg>プレーン・データ型の配列は、同じ動作を示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Arrays of unknown size (C99-compliant variable length structs specified by &lt;x1/&gt;[]&lt;x2/&gt; or &lt;x3/&gt;[0]&lt;x4/&gt;) are not directly supported.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T022808Z" creationid="hsugawa8651" creationdate="20181116T022808Z">
        <seg>Arrays of unknown size (C99-compliant variable length structs specified by &lt;x1/&gt;[]&lt;x2/&gt; or &lt;x3/&gt;[0]&lt;x4/&gt;) are not directly supported.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Array{Ref,1}&lt;x1/&gt; to hold these values, until
the C library notifies you that it is finished with them.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T152238Z" creationid="hsugawa8651" creationdate="20181117T152238Z">
        <seg>配列{Ref,1}&lt;x1/&gt;を指定して、次の値を保持します。 Cライブラリは、それが完了したことを通知します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Array{S}(undef, dims)&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T022453Z" creationid="hsugawa8651" creationdate="20181113T022453Z">
        <seg>Array{S}(undef, dims)&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Array{T,N}&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T134455Z" creationid="hsugawa8651" creationdate="20181117T134455Z">
        <seg>Array{T,N}&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As &lt;x1/&gt;&lt;x2/&gt;&lt;x3/&gt;(@ref man-characters), in character
literals, Unicode code points can be represented using Unicode &lt;x4/&gt;\u&lt;x5/&gt; and &lt;x6/&gt;\U&lt;x7/&gt; escape sequences,
as well as all the standard C escape sequences.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T081415Z" creationid="hsugawa8651" creationdate="20181120T081415Z">
        <seg>上記 &lt;x1/&gt;&lt;x2/&gt;&lt;x3/&gt;(@ref man-characters), の通り、 文字列リテラルでは、Unicodeコードポイントは、C言語の標準的なエスケープ方法と同様に、Unicodeは &lt;x4/&gt;\u&lt;x5/&gt;  および &lt;x6/&gt;\U&lt;x7/&gt; の エスケープを使用することで表すことができます。こ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As a complete but simple example, the following calls the &lt;x1/&gt;clock&lt;x2/&gt; function from the standard C
library:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T224014Z" creationid="hsugawa8651" creationdate="20181109T224014Z">
        <seg>完全ではあるが単純な例として、以下の呼び出しは標準Cから&lt;x1/&gt;クロック&lt;x2/&gt;関数を呼び出します。 ライブラリ:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As a more complicated example, let's define our own toy N-dimensional sparse-like array type built
on top of &lt;x1/&gt;`Dict`&lt;x2/&gt;:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T083217Z" creationid="hsugawa8651" creationdate="20181113T083217Z">
        <seg>より複雑な例として、独自の玩具N次元の疎な配列タイプの配列を作成します。 top of&lt;x1/&gt;'Dict'&lt;x2/&gt;:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As a result, the code may produce a memory leak if &lt;x14/&gt;result_array&lt;x15/&gt; never gets
freed by the garbage collector, or if the garbage collector prematurely frees &lt;x16/&gt;result_array&lt;x17/&gt;,
the C function may end up throwing an invalid memory access exception.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T152221Z" creationid="hsugawa8651" creationdate="20181117T152221Z">
        <seg>結果として、&lt;x14/&gt;result_array&lt;x15/&gt;が決して実行されない場合、コードはメモリリークを生成する可能性があります。 ガーベッジ・コレクタによって解放されるか、ガーベッジ・コレクタが&lt;x16/&gt;の結果_array&lt;x17/&gt;を早期に解放するか C関数は、無効なメモリアクセス例外をスローする可能性があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As a result, the type of the
variable may change.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T064018Z" creationid="hsugawa8651" creationdate="20181113T132421Z">
        <seg>これにより、変数の型が変更されることがあります。

</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As a special part of this syntax, the &lt;x1/&gt;end&lt;x2/&gt; keyword may be used to represent the last index of
each dimension within the indexing brackets, as determined by the size of the innermost array
being indexed.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T155252Z" creationid="hsugawa8651" creationdate="20181109T155252Z">
        <seg>この構文の特殊な部分として、&lt;x1/&gt;end&lt;x2/&gt;キーワードを使用して、最後のインデックスを表すことができます。 最も内側の配列のサイズによって決定される、索引付けブラケット内の各寸法 インデックス化されています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As a special part of this syntax, the &lt;x1/&gt;end&lt;x2/&gt; keyword may be used to represent the last index of
each dimension within the indexing brackets, as determined by the size of the innermost array
being indexed. Indexing syntax without the &lt;x3/&gt;end&lt;x4/&gt; keyword is equivalent to a call to &lt;x5/&gt;`getindex`&lt;x6/&gt;:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T134841Z" creationid="hsugawa8651" creationdate="20181117T134841Z">
        <seg>この構文の特殊な部分として、&lt;x1/&gt;end&lt;x2/&gt;キーワードを使用して、最後のインデックスを表すことができます。 最も内側の配列のサイズによって決定される、索引付けブラケット内の各寸法 インデックス作成されています。&lt;x3/&gt;end&lt;x4/&gt;キーワードなしのインデックス構文は、&lt;x5/&gt;`getindex'&lt;x6/&gt;への呼び出しと同じです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As an abstraction, an environment provides three maps: &lt;x1/&gt;roots&lt;x2/&gt;, &lt;x3/&gt;graph&lt;x4/&gt; and &lt;x5/&gt;paths&lt;x6/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T120946Z" creationid="hsugawa8651" creationdate="20181118T120946Z">
        <seg>抽象化として、環境は3つのマップを提供します。&lt;x1/&gt;ルーツ&lt;x2/&gt;、&lt;x3/&gt;グラフ&lt;x4/&gt;、&lt;x5/&gt;パス&lt;x6/&gt;の各パス&lt;x6/&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As an alternative, Julia allows &lt;x5/&gt;interpolation&lt;x6/&gt; of
literals or expressions into quoted expressions.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T115410Z" creationid="hsugawa8651" creationdate="20181118T115410Z">
        <seg>代わりに、Juliaは、&lt;x5/&gt;補間&lt;x6/&gt;を可能にします。 リテラルまたはエクスプレッションを引用して表現します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As an example, suppose a package directory has the following structure and content:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T121323Z" creationid="hsugawa8651" creationdate="20181118T121323Z">
        <seg>たとえば、パッケージディレクトリに次の構造と内容があるとします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As an example, the builtin &lt;x1/&gt;AbstractRange&lt;x2/&gt; objects use this machinery to optimize pieces
of broadcasted expressions that can be eagerly evaluated purely in terms of the start,
step, and length (or stop) instead of computing every single element.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T131616Z" creationid="hsugawa8651" creationdate="20181113T131616Z">
        <seg>たとえば、組み込みの&lt;x1/&gt;AbstractRange&lt;x2/&gt;オブジェクトは、この機械を使用してピースを最適化します。 純粋に評価された表現の始まりです 1つの要素を計算するのではなく、ステップと長さ(または停止)を計算します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As another example, here is a function that doubles any numeric argument, but leaves expressions
alone:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T165332Z" creationid="hsugawa8651" creationdate="20181118T165332Z">
        <seg>別の例としては、数値引数を2倍にする関数がありますが、式は次のようになります。 単独:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As can be seen, &lt;x1/&gt;A&lt;x2/&gt; is changed to the sorted array &lt;x3/&gt;[-2.7, 1.3, 3.1, 4.4]&lt;x4/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T150538Z" creationid="hsugawa8651" creationdate="20181117T150538Z">
        <seg>図示されるように、&lt;x1/&gt;A&lt;x2/&gt;は、ソートされたアレイ&lt;x3/&gt;[-2.7、1.3、3.1、4.4]&lt;x4/&gt;に変更される。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As can be seen, &lt;x1/&gt;A&lt;x2/&gt; is changed to the sorted array &lt;x3/&gt;[-2.7, 1.3, 3.1, 4.4]&lt;x4/&gt;. Note that Julia
knows how to convert an array into a &lt;x5/&gt;Ptr{Cdouble}&lt;x6/&gt;, how to compute the size of a type in bytes
(identical to C's &lt;x7/&gt;sizeof&lt;x8/&gt; operator), and so on. For fun, try inserting a &lt;x9/&gt;println("mycompare($a, $b)")&lt;x10/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T134209Z" creationid="hsugawa8651" creationdate="20181117T134209Z">
        <seg>図のように、&lt;x1/&gt;A&lt;x2/&gt;はソートされた配列&lt;x3/&gt;[-2.7、1.3、3.1、4.4]&lt;x4/&gt;に変更されることに注意してください。 配列を&lt;x5/&gt;Ptr{Cdouble}&lt;x6/&gt;に変換する方法を知っています。バイト単位でタイプのサイズを計算する方法 (Cの&lt;x7/&gt;sizeof&lt;x8/&gt;演算子と同じ)。遊びの場合は&lt;x9/&gt;println("ミコンパレ($a, $b)")を挿入してください。&lt;x10/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As for hexadecimal literals, binary and octal literals produce unsigned integer types.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T225505Z" creationid="hsugawa8651" creationdate="20181109T225505Z">
        <seg>16進数のリテラルに関しては、バイナリと8進数のリテラルは符号なしの整数型を生成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As for numeric arrays, choosing a non-stable default algorithm for array types for which the notion
of a stable sort is meaningless (i.e. when two values comparing equal can not be distinguished)
may make sense.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T064234Z" creationid="hsugawa8651" creationdate="20181114T064234Z">
        <seg>数値配列については、概念が存在する配列タイプに対して、安定していないデフォルトアルゴリズムを選択してください。 安定したソートは意味がありません(つまり、等しい値を比較する2つの値が区別されない場合) 意味があるかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As hinted above, one extremely useful feature of Julia is the capability to generate and manipulate
Julia code within Julia itself.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T165320Z" creationid="hsugawa8651" creationdate="20181118T165320Z">
        <seg>上で示唆したように、Juliaの非常に有用な機能の一つは、生成と操作を可能にする機能です。 Julia自身内のJuliaコード。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As in C and most other imperative
or functional languages, the &lt;x5/&gt;return&lt;x6/&gt; keyword causes a function to return immediately, providing
an expression whose value is returned:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T125606Z" creationid="hsugawa8651" creationdate="20181110T025731Z">
        <seg>C言語ほかの命令型言語や、関数型言語と同様に、&lt;x5/&gt;return&lt;x6/&gt; キーワードを使うと、指定された式の値がすぐに返されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As in Java, strings are immutable: the value of an &lt;x1/&gt;AbstractString&lt;x2/&gt; object cannot be changed.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T075938Z" creationid="hsugawa8651" creationdate="20181120T075938Z">
        <seg>Javaと同様に、文字列は変更不可能です。つまり &lt;x1/&gt;AbstractString&lt;x2/&gt;  オブジェクトの値は変更できません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As mentioned above, one can also define new display backends.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T043304Z" creationid="hsugawa8651" creationdate="20181112T043304Z">
        <seg>上記のように、新しいディスプレイバックエンドを定義することもできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As mentioned briefly in &lt;x1/&gt;&lt;x2/&gt;&lt;x3/&gt;(@ref man-functions), optional arguments are implemented as syntax for multiple
method definitions.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T023057Z" creationid="hsugawa8651" creationdate="20181120T022855Z">
        <seg>As mentioned briefly in &lt;x1/&gt;&lt;x2/&gt;&lt;x3/&gt;(@ref man-functions), optional arguments are implemented as syntax for multiple
method definitions.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As of this writing, the valid Unicode code points are &lt;x1/&gt;U+00&lt;x2/&gt; through &lt;x3/&gt;U+d7ff&lt;x4/&gt; and &lt;x5/&gt;U+e000&lt;x6/&gt; through
&lt;x7/&gt;U+10ffff&lt;x8/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T080523Z" creationid="hsugawa8651" creationdate="20181120T080419Z">
        <seg>現時点では、有効なコードポイントは &lt;x1/&gt;U+00&lt;x2/&gt; から &lt;x3/&gt;U+d7ff&lt;x4/&gt;　までと &lt;x5/&gt;U+e000&lt;x6/&gt; から &lt;x7/&gt;U+10ffff&lt;x8/&gt;までとなっています。 </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As such, &lt;x10/&gt;*&lt;x11/&gt; is a more natural choice for an infix string concatenation
operator, consistent with common mathematical use.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T082515Z" creationid="hsugawa8651" creationdate="20181120T082515Z">
        <seg>これらのことから、 文字列連結演算子としての&lt;x10/&gt;*&lt;x11/&gt; はより数学においての使われ方に準拠した、自然な選択といえるでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As such, it's also possible to define custom array types by inheriting
from &lt;x1/&gt;`AbstractArray`&lt;x2/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154132Z" creationid="hsugawa8651" creationdate="20181109T154132Z">
        <seg>このように、カスタム配列タイプを継承することによって、カスタム配列タイプを定義することも可能です。 &lt;x1/&gt;'AbstractArray'&lt;x2/&gt;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As the example implies, the following command-line arguments to &lt;c0&gt;&lt;s1&gt;julia&lt;/s1&gt;&lt;/c0&gt;
are taken as command-line arguments to the program &lt;c2&gt;&lt;s3&gt;script.jl&lt;/s3&gt;&lt;/c2&gt;, passed
in the global constant &lt;c4&gt;&lt;s5&gt;ARGS&lt;/s5&gt;&lt;/c4&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T084705Z" creationid="hsugawa8651" creationdate="20181118T084507Z">
        <seg>上の例が示すように、後ろの引数は &lt;c2&gt;&lt;s3&gt;script.jl&lt;/s3&gt;&lt;/c2&gt; というプログラムのコマンドライン引数として取られ、 グローバル定数 &lt;c4&gt;&lt;s5&gt;ARGS&lt;/s5&gt;&lt;/c4&gt;に渡されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As the example implies, the following command-line arguments to &lt;c0&gt;julia&lt;/c0&gt; are interpreted as command-line arguments to the program &lt;c1&gt;script.jl&lt;/c1&gt;, passed in the global constant &lt;c2&gt;ARGS&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T181701Z" creationid="hsugawa8651" creationdate="20181118T173533Z">
        <seg>上の例が示すように、&lt;c0&gt;julia&lt;/c0&gt; に続くコマンドライン引数は、 &lt;c1&gt;script.jl&lt;/c1&gt;というプログラムのコマンドライン引数として取られ、 グローバル定数 &lt;c2&gt;ARGS&lt;/c2&gt;に渡されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As the example implies, the following command-line arguments to &lt;x1/&gt;julia&lt;x2/&gt; are interpreted as
command-line arguments to the program &lt;x3/&gt;script.jl&lt;x4/&gt;, passed in the global constant &lt;x5/&gt;ARGS&lt;x6/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T091747Z" creationid="hsugawa8651" creationdate="20181109T224332Z">
        <seg>上の例が示すように、後ろの引数は &lt;x1/&gt;script.jl&lt;x2/&gt;というプログラムのコマンドライン引数として取られ、 グローバル定数 &lt;x5/&gt;ARGS&lt;x6/&gt;に渡されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As the example implies, the following command-line arguments to &lt;x1/&gt;julia&lt;x2/&gt; are taken as command-line
arguments to the program &lt;x3/&gt;script.jl&lt;x4/&gt;, passed in the global constant &lt;x5/&gt;ARGS&lt;x6/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T231840Z" creationid="hsugawa8651" creationdate="20181119T231840Z">
        <seg>上の例が示すように、後ろの引数は &lt;c2&gt;&lt;s3&gt;script.jl&lt;/s3&gt;&lt;/c2&gt; というプログラムのコマンドライン引数として取られ、 グローバル定数 &lt;c4&gt;&lt;s5&gt;ARGS&lt;/s5&gt;&lt;/c4&gt;に渡されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As user code never has to look inside the &lt;x9/&gt;gsl_permutation&lt;x10/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T151936Z" creationid="hsugawa8651" creationdate="20181117T151936Z">
        <seg>ユーザコードは、&lt;x9/&gt;gsl_mutation&lt;x10/&gt;の中では絶対に内部を見る必要がない。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As usual, the absolute value (&lt;x1/&gt;`abs`&lt;x2/&gt;) of a complex number is its distance from zero.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T123230Z" creationid="hsugawa8651" creationdate="20181118T123230Z">
        <seg>通常のように、複素数の絶対値(&lt;x1/&gt;abs'&lt;x2/&gt;)は、0からの距離である。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As usual, the promotion system makes interactions with other numeric types effortless:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T123656Z" creationid="hsugawa8651" creationdate="20181118T123656Z">
        <seg>通常のように、プロモーションシステムは、他の数値型との相互作用を容易にします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As we have seen, a typical parametric type has inner constructors that are called when type parameters
are known; e.g. they apply to &lt;x1/&gt;Point{Int}&lt;x2/&gt; but not to &lt;x3/&gt;Point&lt;x4/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T124229Z" creationid="hsugawa8651" creationdate="20181118T124229Z">
        <seg>これまで見てきたように、典型的なパラメトリック型は、型パラメータがある場合に呼び出される内部コンストラクタです。 例えば、それらは&lt;x1/&gt;点{Int}&lt;x2/&gt;に適用されるが、&lt;x3/&gt;点&lt;x4/&gt;には適用されない。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As we have seen, such expressions support interpolation with &lt;x1/&gt;$&lt;x2/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T165222Z" creationid="hsugawa8651" creationdate="20181118T165218Z">
        <seg>前述のように、このような表現は、&lt;x1/&gt;$x2/&gt;で補間をサポートしています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As with any &lt;x1/&gt;ccall&lt;x2/&gt;, it is essential to get the argument signature exactly correct.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T152501Z" creationid="hsugawa8651" creationdate="20181117T152501Z">
        <seg>任意の&lt;x1/&gt;ccall&lt;x2/&gt;と同様に、引数シグニチャを正確に取得することが必須です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As with incomplete objects returned from constructors, if &lt;x1/&gt;complete_me&lt;x2/&gt; or any of its callees
try to access the &lt;x3/&gt;data&lt;x4/&gt; field of the &lt;x5/&gt;Lazy&lt;x6/&gt; object before it has been initialized, an error will
be thrown immediately.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T123820Z" creationid="hsugawa8651" creationdate="20181118T123820Z">
        <seg>コンストラクタから返される不完全なオブジェクトの場合と同様に、&lt;x1/&gt;complete_me&lt;x2/&gt;またはその呼び出し先のいずれかである場合 &lt;x5/&gt;遅延&lt;x6/&gt;オブジェクトの&lt;x3/&gt;データ&lt;x4/&gt;フィールドにアクセスしてから、初期化するようにしてください。エラーが発生すると、エラーが発生する可能性があります。 すぐにスローされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As with matrix multiplication, string concatenation is noncommutative:
&lt;x8/&gt;greet * whom != whom * greet&lt;x9/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T082455Z" creationid="hsugawa8651" creationdate="20181120T082455Z">
        <seg>そして文字列の連結は &lt;x8/&gt;greet * whom != whom * greet&lt;x9/&gt;であるように行列の乗算と同様、非可換演算です。 </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As with variables, Unicode can also be used for function names:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T125318Z" creationid="hsugawa8651" creationdate="20181120T125318Z">
        <seg>変数名と同様に関数名にもUnicodeを使用できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As you can see, for constructor calls with explicit type parameters, the arguments are converted
to the implied field types: &lt;x1/&gt;Point{Int64}(1,2)&lt;x2/&gt; works, but &lt;x3/&gt;Point{Int64}(1.0,2.5)&lt;x4/&gt; raises an
&lt;x5/&gt;`InexactError`&lt;x6/&gt; when converting &lt;x7/&gt;2.5&lt;x8/&gt; to &lt;x9/&gt;`Int64`&lt;x10/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T123900Z" creationid="hsugawa8651" creationdate="20181118T123900Z">
        <seg>明示的な型パラメータを持つコンストラクタ呼び出しでは、引数は変換されます。 &lt;x1/&gt;点{Int64}(1,2)&lt;x2/&gt;は動作しますが、&lt;x3/&gt;点{Int64}(1.0,2.5)&lt;x4/&gt;は &lt;x7/&gt;2.5&lt;x8/&gt;を&lt;x9/&gt;"Int64"&lt;x10/&gt;に変換する際には、&lt;x6/&gt;'InexactError'&lt;x6/&gt;'となります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As you can see, the arguments must be precisely of type &lt;x1/&gt;`Float64`&lt;x2/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T012546Z" creationid="hsugawa8651" creationdate="20181120T012546Z">
        <seg>これを見て分かるように、引数はちょうど&lt;x1/&gt;`Float64`&lt;x2/&gt;型でなければなりません。 </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As you can see, the type of the appended element must match the element type of the vector it
is appended to, or else a &lt;x1/&gt;`MethodError`&lt;x2/&gt; is raised.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T020142Z" creationid="hsugawa8651" creationdate="20181120T020142Z">
        <seg>ご覧のように、追加する要素の型は、追加されるベクトルの要素の型と一致しなければなりません。でなければ、MethodError が生成されます。 </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Assignment</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T134913Z" creationid="hsugawa8651" creationdate="20181117T134913Z">
        <seg>割り当て</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Assignments</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T165133Z" creationid="hsugawa8651" creationdate="20181118T165133Z">
        <seg>代入</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Associativity</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T164950Z" creationid="hsugawa8651" creationdate="20181118T164950Z">
        <seg>結合度</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>At &lt;x1/&gt;-O3&lt;x2/&gt;, the compiler &lt;x3/&gt;might&lt;x4/&gt; automatically vectorize operations on such tuples.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T063651Z" creationid="hsugawa8651" creationdate="20181114T063651Z">
        <seg>&lt;x1/&gt;-O3&lt;x2/&gt;では、コンパイラ&lt;x/&gt;は、そのようなタプル上のオペレーションを自動的にベクトル化することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>At expression evaluation time, however, the value of the symbol &lt;x8/&gt;:b&lt;x9/&gt; is resolved
by looking up the value of the variable &lt;x10/&gt;b&lt;x11/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T165315Z" creationid="hsugawa8651" creationdate="20181118T165315Z">
        <seg>しかし、エクスプレッション評価時には、シンボル&lt;x8/&gt;:b&lt;x9/&gt;の値が解決されます。 変数&lt;x10/&gt;b&lt;x11/&gt;の値を調べます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>At the risk of spoiling the suspense, we can reveal here that all it takes is the following outer
method definition to make all calls to the general &lt;x4/&gt;Point&lt;x5/&gt; constructor work as one would expect:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T124031Z" creationid="hsugawa8651" creationdate="20181118T124031Z">
        <seg>サスペンスを台無しにする危険性がある場合は、以下のように、すべてが以下の外にあることを明らかにすることができます。 一般的な&lt;x4/&gt;ポイント&lt;x5/&gt;コンストラクタへのすべての呼び出しを行うメソッド定義は、次のように動作します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Auto-conversion:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T150557Z" creationid="hsugawa8651" creationdate="20181117T150557Z">
        <seg>自動変換:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Automatic generation of efficient, specialized code for different
argument types</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T082127Z" creationid="hsugawa8651" creationdate="20181118T082127Z">
        <seg>それぞれの引数の型ごとに最適化されたコードを自動生成します
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Automatic generation of efficient, specialized code for different argument types</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T182539Z" creationid="hsugawa8651" creationdate="20181118T182539Z">
        <seg>それぞれの引数の型ごとに最適化されたコードを自動生成します
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Background and References</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T035033Z" creationid="hsugawa8651" creationdate="20181118T120355Z">
        <seg>背景と考察</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Base</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T130839Z" creationid="hsugawa8651" creationdate="20181119T130839Z">
        <seg>Base</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Base Modules</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T150102Z" creationid="hsugawa8651" creationdate="20181117T150102Z">
        <seg>Base Modules</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Base.:-(::Any)
Base.:(+)
Base.:-(::Any, ::Any)
Base.:*(::Any, ::Any...)
Base.:(/)
Base.:\(::Any, ::Any)
Base.:^(::Number, ::Number)
Base.fma
Base.muladd
Base.inv(::Number)
Base.div
Base.fld
Base.cld
Base.mod
Base.rem
Base.rem2pi
Base.Math.mod2pi
Base.divrem
Base.fldmod
Base.fld1
Base.mod1
Base.fldmod1
Base.:(//)
Base.rationalize
Base.numerator
Base.denominator
Base.:(&lt;&lt;)
Base.:(&gt;&gt;)
Base.:(&gt;&gt;&gt;)
Base.:(:)
Base.range
Base.OneTo
Base.StepRangeLen
Base.:(==)
Base.:(!=)
Base.:(!==)
Base.:(&lt;)
Base.:(&lt;=)
Base.:(&gt;)
Base.:(&gt;=)
Base.cmp
Base.:(&lt;x1/&gt;)
Base.:(&amp;)
Base.:(|)
Base.xor
Base.:(!)
&amp;&amp;
||</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T043423Z" creationid="hsugawa8651" creationdate="20181112T043423Z">
        <seg>Base.:-(::Any)
Base.:(+)
Base.:-(::Any, ::Any)
Base.:*(::Any, ::Any...)
Base.:(/)
Base.:\(::Any, ::Any)
Base.:^(::Number, ::Number)
Base.fma
Base.muladd
Base.inv(::Number)
Base.div
Base.fld
Base.cld
Base.mod
Base.rem
Base.rem2pi
Base.Math.mod2pi
Base.divrem
Base.fldmod
Base.fld1
Base.mod1
Base.fldmod1
Base.:(//)
Base.rationalize
Base.numerator
Base.denominator
Base.:(&lt;&lt;)
Base.:(&gt;&gt;)
Base.:(&gt;&gt;&gt;)
Base.:(:)
Base.range
Base.OneTo
Base.StepRangeLen
Base.:(==)
Base.:(!=)
Base.:(!==)
Base.:(&lt;)
Base.:(&lt;=)
Base.:(&gt;)
Base.:(&gt;=)
Base.cmp
Base.:(&lt;x1/&gt;)
Base.:(&amp;)
Base.:(|)
Base.xor
Base.:(!)
&amp;&amp;
||</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Base.@__dot__</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T020229Z" creationid="hsugawa8651" creationdate="20181116T020229Z">
        <seg>Base.@__dot__</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Base.@threadcall</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T044703Z" creationid="hsugawa8651" creationdate="20181112T044703Z">
        <seg>Base.@threadcall</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Base.AbstractRange
Base.OrdinalRange
Base.AbstractUnitRange
Base.StepRange
Base.UnitRange
Base.LinRange</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T041618Z" creationid="hsugawa8651" creationdate="20181112T041618Z">
        <seg>Base.AbstractRange
Base.OrdinalRange
Base.AbstractUnitRange
Base.StepRange
Base.UnitRange
Base.LinRange</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Base.Base
Base.Broadcast
Base.Docs
Base.Iterators
Base.Libc
Base.Meta
Base.StackTraces
Base.Sys
Base.Threads
Base.GC</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181110T041817Z" creationid="hsugawa8651" creationdate="20181110T041817Z">
        <seg>Base.Base
Base.Broadcast
Base.Docs
Base.Iterators
Base.Libc
Base.Meta
Base.StackTraces
Base.Sys
Base.Threads
Base.GC</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Base.Broadcast.broadcasted(f, args...)&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T083628Z" creationid="hsugawa8651" creationdate="20181113T083628Z">
        <seg>Base.Broadcast.broadcasted(f, args...)&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Base.Broadcast.instantiate(bc::Broadcasted{DestStyle})&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T083641Z" creationid="hsugawa8651" creationdate="20181113T083641Z">
        <seg>Base.Broadcast.instantiate(bc::Broadcasted{DestStyle})&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Base.BroadcastStyle
Base.Broadcast.AbstractArrayStyle
Base.Broadcast.ArrayStyle
Base.Broadcast.DefaultArrayStyle
Base.Broadcast.broadcastable</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T020231Z" creationid="hsugawa8651" creationdate="20181116T020231Z">
        <seg>Base.BroadcastStyle
Base.Broadcast.AbstractArrayStyle
Base.Broadcast.ArrayStyle
Base.Broadcast.DefaultArrayStyle
Base.Broadcast.broadcastable</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Base.BroadcastStyle(::Broadcast.Style{Tuple}, ::Broadcast.AbstractArrayStyle{0}) = Broadcast.Style{Tuple}()</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T131750Z" creationid="hsugawa8651" creationdate="20181113T131750Z">
        <seg>Base.BroadcastStyle(::Broadcast.Style{Tuple}, ::Broadcast.AbstractArrayStyle{0}) = Broadcast.Style{Tuple}()</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Base.BroadcastStyle(::Style1, ::Style2) = Style12()</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T131741Z" creationid="hsugawa8651" creationdate="20181113T131741Z">
        <seg>Base.BroadcastStyle(::Style1, ::Style2) = Style12()</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Base.BroadcastStyle(::Style1, ::Style2) = Style12()&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T083536Z" creationid="hsugawa8651" creationdate="20181113T083536Z">
        <seg>Base.BroadcastStyle(::Style1, ::Style2) = Style12()&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Base.BroadcastStyle(::Type{&lt;:ArrayAndChar}) = Broadcast.ArrayStyle{ArrayAndChar}()
&lt;x1/&gt; output</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T131405Z" creationid="hsugawa8651" creationdate="20181113T131405Z">
        <seg>Base.BroadcastStyle(::Type{&lt;:ArrayAndChar}) = Broadcast.ArrayStyle{ArrayAndChar}()
&lt;x1/&gt; output</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Base.BroadcastStyle(::Type{&lt;:MyType}) = Broadcast.ArrayStyle{MyType}()&lt;x1/&gt; is preferred
if &lt;x2/&gt;MyType&lt;x3/&gt; is an &lt;x4/&gt;AbstractArray&lt;x5/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T131239Z" creationid="hsugawa8651" creationdate="20181113T131152Z">
        <seg>Base.BroadcastStyle(::Type{&lt;:MyType})=ブロードキャスト.ArrayStyle{MyType}()&lt;x1/&gt;は優先されます。 &lt;x2/&gt;MyType&lt;x3/&gt;が&lt;x4/&gt;AbstractArray&lt;x5/&gt;である場合。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Base.BroadcastStyle(::Type{&lt;:MyType}) = Broadcast.Style{MyType}()&lt;x1/&gt; can be
used for arbitrary types.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T131144Z" creationid="hsugawa8651" creationdate="20181113T131144Z">
        <seg>Base.BroadcastStyle(::Type{&lt;:MyType}) = Broadcast.Style{MyType}()&lt;x1/&gt; can be
used for arbitrary types.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Base.BroadcastStyle(::Type{SrcType}) = SrcStyle()&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T083522Z" creationid="hsugawa8651" creationdate="20181113T083522Z">
        <seg>Base.BroadcastStyle(::Type{SrcType}) = SrcStyle()&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Base.BroadcastStyle&lt;x1/&gt; is the abstract type from which all broadcast styles are derived.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T131117Z" creationid="hsugawa8651" creationdate="20181113T131117Z">
        <seg>Base.BroadcastStyle&lt;x1/&gt;は、すべてのブロードキャストスタイルが派生する抽象型のタイプです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Base.Dict
Base.IdDict
Base.WeakKeyDict
Base.ImmutableDict
Base.haskey
Base.get(::Any, ::Any, ::Any)
Base.get
Base.get!(::Any, ::Any, ::Any)
Base.get!(::Function, ::Any, ::Any)
Base.getkey
Base.delete!</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T041800Z" creationid="hsugawa8651" creationdate="20181112T041800Z">
        <seg>Base.Dict
Base.IdDict
Base.WeakKeyDict
Base.ImmutableDict
Base.haskey
Base.get(::Any, ::Any, ::Any)
Base.get
Base.get!(::Any, ::Any, ::Any)
Base.get!(::Function, ::Any, ::Any)
Base.getkey
Base.delete!</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Base.Filesystem.pwd
Base.Filesystem.cd(::AbstractString)
Base.Filesystem.cd(::Function)
Base.Filesystem.readdir
Base.Filesystem.walkdir
Base.Filesystem.mkdir
Base.Filesystem.mkpath
Base.Filesystem.symlink
Base.Filesystem.readlink
Base.Filesystem.chmod
Base.Filesystem.chown
Base.RawFD
Base.stat
Base.Filesystem.lstat
Base.Filesystem.ctime
Base.Filesystem.mtime
Base.Filesystem.filemode
Base.Filesystem.filesize
Base.Filesystem.uperm
Base.Filesystem.gperm
Base.Filesystem.operm
Base.Filesystem.cp
Base.download
Base.Filesystem.mv
Base.Filesystem.rm
Base.Filesystem.touch
Base.Filesystem.tempname
Base.Filesystem.tempdir
Base.Filesystem.mktemp(::Any)
Base.Filesystem.mktemp(::Function, ::Any)
Base.Filesystem.mktempdir(::Any)
Base.Filesystem.mktempdir(::Function, ::Any)
Base.Filesystem.isblockdev
Base.Filesystem.ischardev
Base.Filesystem.isdir
Base.Filesystem.isfifo
Base.Filesystem.isfile
Base.Filesystem.islink
Base.Filesystem.ismount
Base.Filesystem.ispath
Base.Filesystem.issetgid
Base.Filesystem.issetuid
Base.Filesystem.issocket
Base.Filesystem.issticky
Base.Filesystem.homedir
Base.Filesystem.dirname
Base.Filesystem.basename
Base.@__FILE__
Base.@__DIR__
Base.@__LINE__
Base.Filesystem.isabspath
Base.Filesystem.isdirpath
Base.Filesystem.joinpath
Base.Filesystem.abspath
Base.Filesystem.normpath
Base.Filesystem.realpath
Base.Filesystem.relpath
Base.Filesystem.expanduser
Base.Filesystem.splitdir
Base.Filesystem.splitdrive
Base.Filesystem.splitext
Base.Filesystem.splitpath</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T043207Z" creationid="hsugawa8651" creationdate="20181112T043207Z">
        <seg>Base.Filesystem.pwd
Base.Filesystem.cd(::AbstractString)
Base.Filesystem.cd(::Function)
Base.Filesystem.readdir
Base.Filesystem.walkdir
Base.Filesystem.mkdir
Base.Filesystem.mkpath
Base.Filesystem.symlink
Base.Filesystem.readlink
Base.Filesystem.chmod
Base.Filesystem.chown
Base.RawFD
Base.stat
Base.Filesystem.lstat
Base.Filesystem.ctime
Base.Filesystem.mtime
Base.Filesystem.filemode
Base.Filesystem.filesize
Base.Filesystem.uperm
Base.Filesystem.gperm
Base.Filesystem.operm
Base.Filesystem.cp
Base.download
Base.Filesystem.mv
Base.Filesystem.rm
Base.Filesystem.touch
Base.Filesystem.tempname
Base.Filesystem.tempdir
Base.Filesystem.mktemp(::Any)
Base.Filesystem.mktemp(::Function, ::Any)
Base.Filesystem.mktempdir(::Any)
Base.Filesystem.mktempdir(::Function, ::Any)
Base.Filesystem.isblockdev
Base.Filesystem.ischardev
Base.Filesystem.isdir
Base.Filesystem.isfifo
Base.Filesystem.isfile
Base.Filesystem.islink
Base.Filesystem.ismount
Base.Filesystem.ispath
Base.Filesystem.issetgid
Base.Filesystem.issetuid
Base.Filesystem.issocket
Base.Filesystem.issticky
Base.Filesystem.homedir
Base.Filesystem.dirname
Base.Filesystem.basename
Base.@__FILE__
Base.@__DIR__
Base.@__LINE__
Base.Filesystem.isabspath
Base.Filesystem.isdirpath
Base.Filesystem.joinpath
Base.Filesystem.abspath
Base.Filesystem.normpath
Base.Filesystem.realpath
Base.Filesystem.relpath
Base.Filesystem.expanduser
Base.Filesystem.splitdir
Base.Filesystem.splitdrive
Base.Filesystem.splitext
Base.Filesystem.splitpath</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Base.GC.gc
Base.GC.enable
Base.GC.@preserve
Meta.lower
Meta.@lower
Meta.parse(::AbstractString, ::Int)
Meta.parse(::AbstractString)
Meta.ParseError
Base.macroexpand
Base.@macroexpand
Base.@macroexpand1
Base.code_lowered
Base.code_typed
Base.precompile</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181110T042021Z" creationid="hsugawa8651" creationdate="20181110T042021Z">
        <seg>Base.GC.gc
Base.GC.enable
Base.GC.@preserve
Meta.lower
Meta.@lower
Meta.parse(::AbstractString, ::Int)
Meta.parse(::AbstractString)
Meta.ParseError
Base.macroexpand
Base.@macroexpand
Base.@macroexpand1
Base.code_lowered
Base.code_typed
Base.precompile</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Base.IndexStyle(::Type{&lt;:MyArray}) = IndexLinear()</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T155911Z" creationid="hsugawa8651" creationdate="20181109T155911Z">
        <seg>Base.IndexStyle(::Type{&lt;:MyArray}) = IndexLinear()</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Base.Iterators.Stateful
Base.Iterators.zip
Base.Iterators.enumerate
Base.Iterators.rest
Base.Iterators.countfrom
Base.Iterators.take
Base.Iterators.drop
Base.Iterators.cycle
Base.Iterators.repeated
Base.Iterators.product
Base.Iterators.flatten
Base.Iterators.partition
Base.Iterators.filter
Base.Iterators.reverse</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T043416Z" creationid="hsugawa8651" creationdate="20181112T043416Z">
        <seg>Base.Iterators.Stateful
Base.Iterators.zip
Base.Iterators.enumerate
Base.Iterators.rest
Base.Iterators.countfrom
Base.Iterators.take
Base.Iterators.drop
Base.Iterators.cycle
Base.Iterators.repeated
Base.Iterators.product
Base.Iterators.flatten
Base.Iterators.partition
Base.Iterators.filter
Base.Iterators.reverse</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Base.Libc.malloc
Base.Libc.calloc
Base.Libc.realloc
Base.Libc.free
Base.Libc.errno
Base.Libc.strerror
Base.Libc.GetLastError
Base.Libc.FormatMessage
Base.Libc.time(::Base.Libc.TmStruct)
Base.Libc.strftime
Base.Libc.strptime
Base.Libc.TmStruct
Base.Libc.flush_cstdio</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T043420Z" creationid="hsugawa8651" creationdate="20181112T043420Z">
        <seg>Base.Libc.malloc
Base.Libc.calloc
Base.Libc.realloc
Base.Libc.free
Base.Libc.errno
Base.Libc.strerror
Base.Libc.GetLastError
Base.Libc.FormatMessage
Base.Libc.time(::Base.Libc.TmStruct)
Base.Libc.strftime
Base.Libc.strptime
Base.Libc.TmStruct
Base.Libc.flush_cstdio</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Base.MPFR.BigFloat(::Any)
Base.precision
Base.MPFR.precision(::Type{BigFloat})
Base.MPFR.setprecision
Base.MPFR.BigFloat(x, prec::Int)
Base.MPFR.BigFloat(x::Union{Integer, AbstractFloat, String}, rounding::RoundingMode)
Base.MPFR.BigFloat(x, prec::Int, rounding::RoundingMode)
Base.GMP.BigInt(::Any)
Base.@big_str</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T044736Z" creationid="hsugawa8651" creationdate="20181112T044736Z">
        <seg>Base.MPFR.BigFloat(::Any)
Base.precision
Base.MPFR.precision(::Type{BigFloat})
Base.MPFR.setprecision
Base.MPFR.BigFloat(x, prec::Int)
Base.MPFR.BigFloat(x::Union{Integer, AbstractFloat, String}, rounding::RoundingMode)
Base.MPFR.BigFloat(x, prec::Int, rounding::RoundingMode)
Base.GMP.BigInt(::Any)
Base.@big_str</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Base.Missing
Base.missing
Base.coalesce
Base.ismissing
Base.skipmissing</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181110T041934Z" creationid="hsugawa8651" creationdate="20181110T041934Z">
        <seg>Base.Missing
Base.missing
Base.coalesce
Base.ismissing
Base.skipmissing</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Base.Multimedia.display
Base.Multimedia.redisplay
Base.Multimedia.displayable
Base.show(::Any, ::Any, ::Any)
Base.Multimedia.showable
Base.repr(::MIME, ::Any)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T043300Z" creationid="hsugawa8651" creationdate="20181112T043300Z">
        <seg>Base.Multimedia.display
Base.Multimedia.redisplay
Base.Multimedia.displayable
Base.show(::Any, ::Any, ::Any)
Base.Multimedia.showable
Base.repr(::MIME, ::Any)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Base.Multimedia.pushdisplay
Base.Multimedia.popdisplay
Base.Multimedia.TextDisplay
Base.Multimedia.istextmime</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T043352Z" creationid="hsugawa8651" creationdate="20181112T043352Z">
        <seg>Base.Multimedia.pushdisplay
Base.Multimedia.popdisplay
Base.Multimedia.TextDisplay
Base.Multimedia.istextmime</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Base.Pair
Iterators.Pairs</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T043135Z" creationid="hsugawa8651" creationdate="20181112T043135Z">
        <seg>Base.Pair
Iterators.Pairs</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Base.Set
Base.BitSet
Base.union
Base.union!</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T041821Z" creationid="hsugawa8651" creationdate="20181112T041821Z">
        <seg>Base.Set
Base.BitSet
Base.union
Base.union!</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Base.Sort.partialsort
Base.Sort.partialsortperm
Base.Sort.partialsortperm!</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T063957Z" creationid="hsugawa8651" creationdate="20181114T063957Z">
        <seg>Base.Sort.partialsort
Base.Sort.partialsortperm
Base.Sort.partialsortperm!</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Base.Sort.sortslices</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T150326Z" creationid="hsugawa8651" creationdate="20181117T150326Z">
        <seg>Base.Sort.sortslices</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Base.StackTraces.StackFrame
Base.StackTraces.StackTrace
Base.StackTraces.stacktrace</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T064238Z" creationid="hsugawa8651" creationdate="20181114T064238Z">
        <seg>Base.StackTraces.StackFrame
Base.StackTraces.StackTrace
Base.StackTraces.stacktrace</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Base.StackTraces.lookup
Base.StackTraces.remove_frames!</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T064252Z" creationid="hsugawa8651" creationdate="20181114T064252Z">
        <seg>Base.StackTraces.lookup
Base.StackTraces.remove_frames!</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Base.Threads.AbstractLock
Base.lock
Base.unlock
Base.trylock
Base.islocked
Base.ReentrantLock
Base.Threads.Mutex
Base.Threads.SpinLock
Base.Threads.RecursiveSpinLock
Base.Semaphore
Base.acquire
Base.release</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T044705Z" creationid="hsugawa8651" creationdate="20181112T044705Z">
        <seg>Base.Threads.AbstractLock
Base.lock
Base.unlock
Base.trylock
Base.islocked
Base.ReentrantLock
Base.Threads.Mutex
Base.Threads.SpinLock
Base.Threads.RecursiveSpinLock
Base.Semaphore
Base.acquire
Base.release</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Base.Threads.atomic_add!</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T044652Z" creationid="hsugawa8651" creationdate="20181112T044652Z">
        <seg>Base.Threads.atomic_add!</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Base.Threads.atomic_and!</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T044655Z" creationid="hsugawa8651" creationdate="20181112T044655Z">
        <seg>Base.Threads.atomic_and!</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Base.Threads.atomic_fence</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T044701Z" creationid="hsugawa8651" creationdate="20181112T044701Z">
        <seg>Base.Threads.atomic_fence</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Base.Threads.atomic_max!</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T044659Z" creationid="hsugawa8651" creationdate="20181112T044659Z">
        <seg>Base.Threads.atomic_max!</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Base.Threads.atomic_min!</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T044700Z" creationid="hsugawa8651" creationdate="20181112T044700Z">
        <seg>Base.Threads.atomic_min!</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Base.Threads.atomic_nand!</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T044656Z" creationid="hsugawa8651" creationdate="20181112T044656Z">
        <seg>Base.Threads.atomic_nand!</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Base.Threads.atomic_or!</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T044657Z" creationid="hsugawa8651" creationdate="20181112T044657Z">
        <seg>Base.Threads.atomic_or!</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Base.Threads.atomic_sub!</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T044654Z" creationid="hsugawa8651" creationdate="20181112T044654Z">
        <seg>Base.Threads.atomic_sub!</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Base.Threads.atomic_xchg!</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T044651Z" creationid="hsugawa8651" creationdate="20181112T044651Z">
        <seg>Base.Threads.atomic_xchg!</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Base.Threads.atomic_xor!</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T044658Z" creationid="hsugawa8651" creationdate="20181112T044658Z">
        <seg>Base.Threads.atomic_xor!</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Base.Threads.threadid
Base.Threads.nthreads
Base.Threads.@threads
Base.Threads.Atomic
Base.Threads.atomic_cas!</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T044650Z" creationid="hsugawa8651" creationdate="20181112T044650Z">
        <seg>Base.Threads.threadid
Base.Threads.nthreads
Base.Threads.@threads
Base.Threads.Atomic
Base.Threads.atomic_cas!</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Base.Timer(::Function, ::Real)
Base.Timer
Base.AsyncCondition
Base.AsyncCondition(::Function)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181110T042015Z" creationid="hsugawa8651" creationdate="20181110T042015Z">
        <seg>Base.Timer(::Function, ::Real)
Base.Timer
Base.AsyncCondition
Base.AsyncCondition(::Function)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Base.VersionNumber
Base.@v_str</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181110T041945Z" creationid="hsugawa8651" creationdate="20181110T041945Z">
        <seg>Base.VersionNumber
Base.@v_str</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Base.abs
Base.Checked.checked_abs
Base.Checked.checked_neg
Base.Checked.checked_add
Base.Checked.checked_sub
Base.Checked.checked_mul
Base.Checked.checked_div
Base.Checked.checked_rem
Base.Checked.checked_fld
Base.Checked.checked_mod
Base.Checked.checked_cld
Base.Checked.add_with_overflow
Base.Checked.sub_with_overflow
Base.Checked.mul_with_overflow
Base.abs2
Base.copysign
Base.sign
Base.signbit
Base.flipsign
Base.sqrt(::Real)
Base.isqrt
Base.Math.cbrt
Base.real(::Complex)
Base.imag
Base.reim
Base.conj
Base.angle
Base.cis
Base.binomial
Base.factorial
Base.gcd
Base.lcm
Base.gcdx
Base.ispow2
Base.nextpow
Base.prevpow
Base.nextprod
Base.invmod
Base.powermod
Base.ndigits
Base.widemul
Base.Math.@evalpoly
Base.FastMath.@fastmath</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T043426Z" creationid="hsugawa8651" creationdate="20181112T043426Z">
        <seg>Base.abs
Base.Checked.checked_abs
Base.Checked.checked_neg
Base.Checked.checked_add
Base.Checked.checked_sub
Base.Checked.checked_mul
Base.Checked.checked_div
Base.Checked.checked_rem
Base.Checked.checked_fld
Base.Checked.checked_mod
Base.Checked.checked_cld
Base.Checked.add_with_overflow
Base.Checked.sub_with_overflow
Base.Checked.mul_with_overflow
Base.abs2
Base.copysign
Base.sign
Base.signbit
Base.flipsign
Base.sqrt(::Real)
Base.isqrt
Base.Math.cbrt
Base.real(::Complex)
Base.imag
Base.reim
Base.conj
Base.angle
Base.cis
Base.binomial
Base.factorial
Base.gcd
Base.lcm
Base.gcdx
Base.ispow2
Base.nextpow
Base.prevpow
Base.nextprod
Base.invmod
Base.powermod
Base.ndigits
Base.widemul
Base.Math.@evalpoly
Base.FastMath.@fastmath</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Base.accumulate
Base.accumulate!</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181110T041610Z" creationid="hsugawa8651" creationdate="20181110T041610Z">
        <seg>Base.accumulate
Base.accumulate!</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Base.all(::Any)
Base.all(::AbstractArray, ::Any)
Base.all!</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T041641Z" creationid="hsugawa8651" creationdate="20181112T041641Z">
        <seg>Base.all(::Any)
Base.all(::AbstractArray, ::Any)
Base.all!</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Base.allunique
Base.reduce(::Any, ::Any)
Base.foldl(::Any, ::Any)
Base.foldr(::Any, ::Any)
Base.maximum
Base.maximum!</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T041633Z" creationid="hsugawa8651" creationdate="20181112T041633Z">
        <seg>Base.allunique
Base.reduce(::Any, ::Any)
Base.foldl(::Any, ::Any)
Base.foldr(::Any, ::Any)
Base.maximum
Base.maximum!</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Base.any(::Any)
Base.any(::AbstractArray, ::Any)
Base.any!</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T041640Z" creationid="hsugawa8651" creationdate="20181112T041640Z">
        <seg>Base.any(::Any)
Base.any(::AbstractArray, ::Any)
Base.any!</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Base.append!</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T041923Z" creationid="hsugawa8651" creationdate="20181112T041923Z">
        <seg>Base.append!</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Base.axes(x)&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T164826Z" creationid="hsugawa8651" creationdate="20181118T164826Z">
        <seg>Base.axes(x)&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Base.bitstring
Base.parse
Base.tryparse
Base.big
Base.signed
Base.unsigned
Base.float(::Any)
Base.Math.significand
Base.Math.exponent
Base.complex(::Complex)
Base.bswap
Base.hex2bytes
Base.hex2bytes!</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T044714Z" creationid="hsugawa8651" creationdate="20181112T044714Z">
        <seg>Base.bitstring
Base.parse
Base.tryparse
Base.big
Base.signed
Base.unsigned
Base.float(::Any)
Base.Math.significand
Base.Math.exponent
Base.complex(::Complex)
Base.bswap
Base.hex2bytes
Base.hex2bytes!</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Base.broadcast
Base.Broadcast.broadcast!</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T150011Z" creationid="hsugawa8651" creationdate="20181117T150011Z">
        <seg>Base.broadcast
Base.Broadcast.broadcast!</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Base.broadcast_axes(x)&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T001122Z" creationid="hsugawa8651" creationdate="20181120T001122Z">
        <seg>Base.broadcast_axes(x)&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Base.broadcastable(x)&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T083544Z" creationid="hsugawa8651" creationdate="20181113T083544Z">
        <seg>Base.broadcastable(x)&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Base.bytes2hex</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T044715Z" creationid="hsugawa8651" creationdate="20181112T044715Z">
        <seg>Base.bytes2hex</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Base.bytesavailable
Base.ntoh
Base.hton
Base.ltoh
Base.htol
Base.ENDIAN_BOM</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T043413Z" creationid="hsugawa8651" creationdate="20181112T043413Z">
        <seg>Base.bytesavailable
Base.ntoh
Base.hton
Base.ltoh
Base.htol
Base.ENDIAN_BOM</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Base.cat
Base.vcat
Base.hcat
Base.hvcat
Base.vect
Base.circshift
Base.circshift!</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T020237Z" creationid="hsugawa8651" creationdate="20181116T020237Z">
        <seg>Base.cat
Base.vcat
Base.hcat
Base.hvcat
Base.vect
Base.circshift
Base.circshift!</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Base.copy(bc::Broadcasted{DestStyle})&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T083600Z" creationid="hsugawa8651" creationdate="20181113T083600Z">
        <seg>Base.copy(bc::Broadcasted{DestStyle})&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Base.copyto!(dest, bc::Broadcasted{DestStyle})&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T083609Z" creationid="hsugawa8651" creationdate="20181113T083609Z">
        <seg>Base.copyto!(dest, bc::Broadcasted{DestStyle})&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Base.copyto!(dest::DestType, bc::Broadcasted{Nothing})&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T083619Z" creationid="hsugawa8651" creationdate="20181113T083619Z">
        <seg>Base.copyto!(dest::DestType, bc::Broadcasted{Nothing})&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Base.count
Base.any(::Any, ::Any)
Base.all(::Any, ::Any)
Base.foreach
Base.map
Base.map!</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T041642Z" creationid="hsugawa8651" creationdate="20181112T041642Z">
        <seg>Base.count
Base.any(::Any, ::Any)
Base.all(::Any, ::Any)
Base.foreach
Base.map
Base.map!</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Base.count_ones
Base.count_zeros
Base.leading_zeros
Base.leading_ones
Base.trailing_zeros
Base.trailing_ones
Base.isodd
Base.iseven
Base.@int128_str
Base.@uint128_str</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T044718Z" creationid="hsugawa8651" creationdate="20181112T044718Z">
        <seg>Base.count_ones
Base.count_zeros
Base.leading_zeros
Base.leading_ones
Base.trailing_zeros
Base.trailing_ones
Base.isodd
Base.iseven
Base.@int128_str
Base.@uint128_str</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Base.cumprod
Base.cumprod!</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181110T041615Z" creationid="hsugawa8651" creationdate="20181110T041615Z">
        <seg>Base.cumprod
Base.cumprod!</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Base.cumsum
Base.cumsum!</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181110T041619Z" creationid="hsugawa8651" creationdate="20181110T041619Z">
        <seg>Base.cumsum
Base.cumsum!</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Base.deleteat!</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T041920Z" creationid="hsugawa8651" creationdate="20181112T041920Z">
        <seg>Base.deleteat!</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Base.diff
Base.repeat
Base.rot180
Base.rotl90
Base.rotr90
Base.mapslices</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181110T041623Z" creationid="hsugawa8651" creationdate="20181110T041623Z">
        <seg>Base.diff
Base.repeat
Base.rot180
Base.rotl90
Base.rotr90
Base.mapslices</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Base.digits
Base.digits!</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T044713Z" creationid="hsugawa8651" creationdate="20181112T044713Z">
        <seg>Base.digits
Base.digits!</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Base.error
Core.throw
Base.rethrow
Base.backtrace
Base.catch_backtrace
Base.catch_stack
Base.@assert
Base.ArgumentError
Base.AssertionError
Core.BoundsError
Base.CompositeException
Base.DimensionMismatch
Core.DivideError
Core.DomainError
Base.EOFError
Core.ErrorException
Core.InexactError
Core.InterruptException
Base.KeyError
Base.LoadError
Base.MethodError
Base.MissingException
Core.OutOfMemoryError
Core.ReadOnlyMemoryError
Core.OverflowError
Core.StackOverflowError
Base.SystemError
Core.TypeError
Core.UndefKeywordError
Core.UndefRefError
Core.UndefVarError
Base.StringIndexError
Base.InitError
Base.retry
Base.ExponentialBackOff</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181110T042002Z" creationid="hsugawa8651" creationdate="20181110T042002Z">
        <seg>Base.error
Core.throw
Base.rethrow
Base.backtrace
Base.catch_backtrace
Base.catch_stack
Base.@assert
Base.ArgumentError
Base.AssertionError
Core.BoundsError
Base.CompositeException
Base.DimensionMismatch
Core.DivideError
Core.DomainError
Base.EOFError
Core.ErrorException
Core.InexactError
Core.InterruptException
Base.KeyError
Base.LoadError
Base.MethodError
Base.MissingException
Core.OutOfMemoryError
Core.ReadOnlyMemoryError
Core.OverflowError
Core.StackOverflowError
Base.SystemError
Core.TypeError
Core.UndefKeywordError
Core.UndefRefError
Core.UndefVarError
Base.StringIndexError
Base.InitError
Base.retry
Base.ExponentialBackOff</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Base.exit
Base.atexit
Base.isinteractive
Base.summarysize
Base.require
Base.compilecache
Base.__precompile__
Base.include
Base.MainInclude.include
Base.include_string
Base.include_dependency
Base.which(::Any, ::Any)
Base.methods
Base.@show
ans</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181110T041730Z" creationid="hsugawa8651" creationdate="20181110T041730Z">
        <seg>Base.exit
Base.atexit
Base.isinteractive
Base.summarysize
Base.require
Base.compilecache
Base.__precompile__
Base.include
Base.MainInclude.include
Base.include_string
Base.include_dependency
Base.which(::Any, ::Any)
Base.methods
Base.@show
ans</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Base.extrema
Base.argmax
Base.argmin
Base.findmax
Base.findmin
Base.findmax!</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T041635Z" creationid="hsugawa8651" creationdate="20181112T041635Z">
        <seg>Base.extrema
Base.argmax
Base.argmin
Base.findmax
Base.findmin
Base.findmax!</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Base.findall(::Any)
Base.findall(::Function, ::Any)
Base.findfirst(::Any)
Base.findfirst(::Function, ::Any)
Base.findlast(::Any)
Base.findlast(::Function, ::Any)
Base.findnext(::Any, ::Integer)
Base.findnext(::Function, ::Any, ::Integer)
Base.findprev(::Any, ::Integer)
Base.findprev(::Function, ::Any, ::Integer)
Base.permutedims
Base.permutedims!</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T020240Z" creationid="hsugawa8651" creationdate="20181116T020240Z">
        <seg>Base.findall(::Any)
Base.findall(::Function, ::Any)
Base.findfirst(::Any)
Base.findfirst(::Function, ::Any)
Base.findlast(::Any)
Base.findlast(::Function, ::Any)
Base.findnext(::Any, ::Integer)
Base.findnext(::Function, ::Any, ::Integer)
Base.findprev(::Any, ::Integer)
Base.findprev(::Function, ::Any, ::Integer)
Base.permutedims
Base.permutedims!</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Base.findmin!</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T041636Z" creationid="hsugawa8651" creationdate="20181112T041636Z">
        <seg>Base.findmin!</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Base.firstindex
Base.lastindex</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T041648Z" creationid="hsugawa8651" creationdate="20181112T041648Z">
        <seg>Base.firstindex
Base.lastindex</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Base.getindex
Base.setindex!</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T041647Z" creationid="hsugawa8651" creationdate="20181112T041647Z">
        <seg>Base.getindex
Base.setindex!</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Base.getindex(::AbstractArray, ::Any...)
Base.setindex!(::AbstractArray, ::Any, ::Any...)
Base.copyto!(::AbstractArray, ::CartesianIndices, ::AbstractArray, ::CartesianIndices)
Base.isassigned
Base.Colon
Base.CartesianIndex
Base.CartesianIndices
Base.Dims
Base.LinearIndices
Base.to_indices
Base.checkbounds
Base.checkindex</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T020233Z" creationid="hsugawa8651" creationdate="20181116T020233Z">
        <seg>Base.getindex(::AbstractArray, ::Any...)
Base.setindex!(::AbstractArray, ::Any, ::Any...)
Base.copyto!(::AbstractArray, ::CartesianIndices, ::AbstractArray, ::CartesianIndices)
Base.isassigned
Base.Colon
Base.CartesianIndex
Base.CartesianIndices
Base.Dims
Base.LinearIndices
Base.to_indices
Base.checkbounds
Base.checkindex</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Base.in
Base.:∉
Base.eltype
Base.indexin
Base.unique
Base.unique!</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T041632Z" creationid="hsugawa8651" creationdate="20181112T041632Z">
        <seg>Base.in
Base.:∉
Base.eltype
Base.indexin
Base.unique
Base.unique!</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Base.insert!</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T041919Z" creationid="hsugawa8651" creationdate="20181112T041919Z">
        <seg>Base.insert!</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Base.intersect
Base.setdiff
Base.setdiff!</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T041822Z" creationid="hsugawa8651" creationdate="20181112T041822Z">
        <seg>Base.intersect
Base.setdiff
Base.setdiff!</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Base.intersect!</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T041825Z" creationid="hsugawa8651" creationdate="20181112T041825Z">
        <seg>Base.intersect!</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Base.invperm
Base.isperm
Base.permute!(::Any, ::AbstractVector)
Base.invpermute!</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181110T041628Z" creationid="hsugawa8651" creationdate="20181110T041628Z">
        <seg>Base.invperm
Base.isperm
Base.permute!(::Any, ::AbstractVector)
Base.invpermute!</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Base.isapprox
Base.sin(::Number)
Base.cos(::Number)
Base.sincos(::Float64)
Base.tan(::Number)
Base.Math.sind
Base.Math.cosd
Base.Math.tand
Base.Math.sinpi
Base.Math.cospi
Base.sinh(::Number)
Base.cosh(::Number)
Base.tanh(::Number)
Base.asin(::Number)
Base.acos(::Number)
Base.atan(::Number)
Base.Math.asind
Base.Math.acosd
Base.Math.atand
Base.Math.sec(::Number)
Base.Math.csc(::Number)
Base.Math.cot(::Number)
Base.Math.secd
Base.Math.cscd
Base.Math.cotd
Base.Math.asec(::Number)
Base.Math.acsc(::Number)
Base.Math.acot(::Number)
Base.Math.asecd
Base.Math.acscd
Base.Math.acotd
Base.Math.sech(::Number)
Base.Math.csch(::Number)
Base.Math.coth(::Number)
Base.asinh(::Number)
Base.acosh(::Number)
Base.atanh(::Number)
Base.Math.asech(::Number)
Base.Math.acsch(::Number)
Base.Math.acoth(::Number)
Base.Math.sinc
Base.Math.cosc
Base.Math.deg2rad
Base.Math.rad2deg
Base.Math.hypot
Base.log(::Number)
Base.log(::Number, ::Number)
Base.log2
Base.log10
Base.log1p
Base.Math.frexp
Base.exp(::Float64)
Base.exp2
Base.exp10
Base.Math.ldexp
Base.Math.modf
Base.expm1
Base.round(::Type, ::Any)
Base.Rounding.RoundingMode
Base.Rounding.RoundNearest
Base.Rounding.RoundNearestTiesAway
Base.Rounding.RoundNearestTiesUp
Base.Rounding.RoundToZero
Base.Rounding.RoundFromZero
Base.Rounding.RoundUp
Base.Rounding.RoundDown
Base.round(::Complex{&lt;: AbstractFloat}, ::RoundingMode, ::RoundingMode)
Base.ceil
Base.floor
Base.trunc
Base.unsafe_trunc
Base.min
Base.max
Base.minmax
Base.Math.clamp
Base.Math.clamp!</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T043425Z" creationid="hsugawa8651" creationdate="20181112T043425Z">
        <seg>Base.isapprox
Base.sin(::Number)
Base.cos(::Number)
Base.sincos(::Float64)
Base.tan(::Number)
Base.Math.sind
Base.Math.cosd
Base.Math.tand
Base.Math.sinpi
Base.Math.cospi
Base.sinh(::Number)
Base.cosh(::Number)
Base.tanh(::Number)
Base.asin(::Number)
Base.acos(::Number)
Base.atan(::Number)
Base.Math.asind
Base.Math.acosd
Base.Math.atand
Base.Math.sec(::Number)
Base.Math.csc(::Number)
Base.Math.cot(::Number)
Base.Math.secd
Base.Math.cscd
Base.Math.cotd
Base.Math.asec(::Number)
Base.Math.acsc(::Number)
Base.Math.acot(::Number)
Base.Math.asecd
Base.Math.acscd
Base.Math.acotd
Base.Math.sech(::Number)
Base.Math.csch(::Number)
Base.Math.coth(::Number)
Base.asinh(::Number)
Base.acosh(::Number)
Base.atanh(::Number)
Base.Math.asech(::Number)
Base.Math.acsch(::Number)
Base.Math.acoth(::Number)
Base.Math.sinc
Base.Math.cosc
Base.Math.deg2rad
Base.Math.rad2deg
Base.Math.hypot
Base.log(::Number)
Base.log(::Number, ::Number)
Base.log2
Base.log10
Base.log1p
Base.Math.frexp
Base.exp(::Float64)
Base.exp2
Base.exp10
Base.Math.ldexp
Base.Math.modf
Base.expm1
Base.round(::Type, ::Any)
Base.Rounding.RoundingMode
Base.Rounding.RoundNearest
Base.Rounding.RoundNearestTiesAway
Base.Rounding.RoundNearestTiesUp
Base.Rounding.RoundToZero
Base.Rounding.RoundFromZero
Base.Rounding.RoundUp
Base.Rounding.RoundDown
Base.round(::Complex{&lt;: AbstractFloat}, ::RoundingMode, ::RoundingMode)
Base.ceil
Base.floor
Base.trunc
Base.unsafe_trunc
Base.min
Base.max
Base.minmax
Base.Math.clamp
Base.Math.clamp!</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Base.isempty
Base.empty!</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T041622Z" creationid="hsugawa8651" creationdate="20181112T041622Z">
        <seg>Base.isempty
Base.empty!</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Base.isimmutable
Base.isabstracttype
Base.isprimitivetype
Base.isstructtype
Base.nameof(::DataType)
Base.fieldnames
Base.fieldname</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181110T041848Z" creationid="hsugawa8651" creationdate="20181110T041848Z">
        <seg>Base.isimmutable
Base.isabstracttype
Base.isprimitivetype
Base.isstructtype
Base.nameof(::DataType)
Base.fieldnames
Base.fieldname</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Base.issorted
Base.Sort.searchsorted
Base.Sort.searchsortedfirst
Base.Sort.searchsortedlast
Base.Sort.partialsort!</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T063955Z" creationid="hsugawa8651" creationdate="20181114T063955Z">
        <seg>Base.issorted
Base.Sort.searchsorted
Base.Sort.searchsortedfirst
Base.Sort.searchsortedlast
Base.Sort.partialsort!</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Base.issubset
Base.:⊈
Base.:⊊
Base.issetequal</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T041826Z" creationid="hsugawa8651" creationdate="20181112T041826Z">
        <seg>Base.issubset
Base.:⊈
Base.:⊊
Base.issetequal</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Base.iterate
Base.IteratorSize
Base.IteratorEltype</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T041553Z" creationid="hsugawa8651" creationdate="20181112T041553Z">
        <seg>Base.iterate
Base.IteratorSize
Base.IteratorEltype</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Base.keytype
Base.valtype</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T041804Z" creationid="hsugawa8651" creationdate="20181112T041804Z">
        <seg>Base.keytype
Base.valtype</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Base.length</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T041623Z" creationid="hsugawa8651" creationdate="20181112T041623Z">
        <seg>Base.length</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Base.mapreduce(::Any, ::Any, ::Any)
Base.mapfoldl(::Any, ::Any, ::Any)
Base.mapfoldr(::Any, ::Any, ::Any)
Base.first
Base.last
Base.step
Base.collect(::Any)
Base.collect(::Type, ::Any)
Base.filter
Base.filter!</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T041643Z" creationid="hsugawa8651" creationdate="20181112T041643Z">
        <seg>Base.mapreduce(::Any, ::Any, ::Any)
Base.mapfoldl(::Any, ::Any, ::Any)
Base.mapfoldr(::Any, ::Any, ::Any)
Base.first
Base.last
Base.step
Base.collect(::Any)
Base.collect(::Type, ::Any)
Base.filter
Base.filter!</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Base.minimum
Base.minimum!</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T041634Z" creationid="hsugawa8651" creationdate="20181112T041634Z">
        <seg>Base.minimum
Base.minimum!</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Base.nameof(::Module)
Base.parentmodule
Base.pathof(::Module)
Base.moduleroot
Base.@__MODULE__
Base.fullname
Base.names
Core.nfields
Base.isconst
Base.nameof(::Function)
Base.functionloc(::Any, ::Any)
Base.functionloc(::Method)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181110T042018Z" creationid="hsugawa8651" creationdate="20181110T042018Z">
        <seg>Base.nameof(::Module)
Base.parentmodule
Base.pathof(::Module)
Base.moduleroot
Base.@__MODULE__
Base.fullname
Base.names
Core.nfields
Base.isconst
Base.nameof(::Function)
Base.functionloc(::Any, ::Any)
Base.functionloc(::Method)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Base.ndims
Base.size
Base.axes(::Any)
Base.axes(::AbstractArray, ::Any)
Base.length(::AbstractArray)
Base.eachindex
Base.IndexStyle
Base.IndexLinear
Base.IndexCartesian
Base.conj!</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181110T033608Z" creationid="hsugawa8651" creationdate="20181110T033608Z">
        <seg>Base.ndims
Base.size
Base.axes(::Any)
Base.axes(::AbstractArray, ::Any)
Base.length(::AbstractArray)
Base.eachindex
Base.IndexStyle
Base.IndexLinear
Base.IndexCartesian
Base.conj!</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Base.one
Base.oneunit
Base.zero
Base.im
Base.MathConstants.pi
Base.MathConstants.ℯ
Base.MathConstants.catalan
Base.MathConstants.eulergamma
Base.MathConstants.golden
Base.Inf
Base.Inf32
Base.Inf16
Base.NaN
Base.NaN32
Base.NaN16
Base.issubnormal
Base.isfinite
Base.isinf
Base.isnan
Base.iszero
Base.isone
Base.nextfloat
Base.prevfloat
Base.isinteger
Base.isreal
Core.Float32(::Any)
Core.Float64(::Any)
Base.Rounding.rounding
Base.Rounding.setrounding(::Type, ::Any)
Base.Rounding.setrounding(::Function, ::Type, ::RoundingMode)
Base.Rounding.get_zero_subnormals
Base.Rounding.set_zero_subnormals</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T044716Z" creationid="hsugawa8651" creationdate="20181112T044716Z">
        <seg>Base.one
Base.oneunit
Base.zero
Base.im
Base.MathConstants.pi
Base.MathConstants.ℯ
Base.MathConstants.catalan
Base.MathConstants.eulergamma
Base.MathConstants.golden
Base.Inf
Base.Inf32
Base.Inf16
Base.NaN
Base.NaN32
Base.NaN16
Base.issubnormal
Base.isfinite
Base.isinf
Base.isnan
Base.iszero
Base.isone
Base.nextfloat
Base.prevfloat
Base.isinteger
Base.isreal
Core.Float32(::Any)
Core.Float64(::Any)
Base.Rounding.rounding
Base.Rounding.setrounding(::Type, ::Any)
Base.Rounding.setrounding(::Function, ::Type, ::RoundingMode)
Base.Rounding.get_zero_subnormals
Base.Rounding.set_zero_subnormals</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Base.pointer
Base.unsafe_wrap{T,N}(::Union{Type{Array},Type{Array{T}},Type{Array{T,N}}}, ::Ptr{T}, ::NTuple{N,Int})
Base.pointer_from_objref
Base.unsafe_pointer_to_objref
Base.disable_sigint
Base.reenable_sigint
Base.systemerror
Core.Ptr
Core.Ref
Base.Cchar
Base.Cuchar
Base.Cshort
Base.Cstring
Base.Cushort
Base.Cint
Base.Cuint
Base.Clong
Base.Culong
Base.Clonglong
Base.Culonglong
Base.Cintmax_t
Base.Cuintmax_t
Base.Csize_t
Base.Cssize_t
Base.Cptrdiff_t
Base.Cwchar_t
Base.Cwstring
Base.Cfloat
Base.Cdouble</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181110T042028Z" creationid="hsugawa8651" creationdate="20181110T042028Z">
        <seg>Base.pointer
Base.unsafe_wrap{T,N}(::Union{Type{Array},Type{Array{T}},Type{Array{T,N}}}, ::Ptr{T}, ::NTuple{N,Int})
Base.pointer_from_objref
Base.unsafe_pointer_to_objref
Base.disable_sigint
Base.reenable_sigint
Base.systemerror
Core.Ptr
Core.Ref
Base.Cchar
Base.Cuchar
Base.Cshort
Base.Cstring
Base.Cushort
Base.Cint
Base.Cuint
Base.Clong
Base.Culong
Base.Clonglong
Base.Culonglong
Base.Cintmax_t
Base.Cuintmax_t
Base.Csize_t
Base.Cssize_t
Base.Cptrdiff_t
Base.Cwchar_t
Base.Cwstring
Base.Cfloat
Base.Cdouble</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Base.pop!</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T041834Z" creationid="hsugawa8651" creationdate="20181112T041834Z">
        <seg>Base.pop!</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Base.pop!(::Any, ::Any, ::Any)
Base.keys
Base.values
Base.pairs
Base.merge
Base.merge!(::AbstractDict, ::AbstractDict...)
Base.merge!(::Function, ::AbstractDict, ::AbstractDict...)
Base.sizehint!</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T041802Z" creationid="hsugawa8651" creationdate="20181112T041802Z">
        <seg>Base.pop!(::Any, ::Any, ::Any)
Base.keys
Base.values
Base.pairs
Base.merge
Base.merge!(::AbstractDict, ::AbstractDict...)
Base.merge!(::Function, ::AbstractDict, ::AbstractDict...)
Base.sizehint!</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Base.popfirst!</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T041918Z" creationid="hsugawa8651" creationdate="20181112T041918Z">
        <seg>Base.popfirst!</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Base.prepend!</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T041924Z" creationid="hsugawa8651" creationdate="20181112T041924Z">
        <seg>Base.prepend!</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Base.prod
Base.prod!</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T041639Z" creationid="hsugawa8651" creationdate="20181112T041639Z">
        <seg>Base.prod
Base.prod!</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Base.propertynames
Core.getfield
Core.setfield!</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181110T041828Z" creationid="hsugawa8651" creationdate="20181110T041828Z">
        <seg>Base.propertynames
Core.getfield
Core.setfield!</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Base.push!</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T041833Z" creationid="hsugawa8651" creationdate="20181112T041833Z">
        <seg>Base.push!</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Base.pushfirst!</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T041917Z" creationid="hsugawa8651" creationdate="20181112T041917Z">
        <seg>Base.pushfirst!</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Base.readbytes!</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T043211Z" creationid="hsugawa8651" creationdate="20181112T043211Z">
        <seg>Base.readbytes!</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Base.replace(::Any, ::Pair...)
Base.replace(::Base.Callable, ::Any)
Base.replace!</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T041644Z" creationid="hsugawa8651" creationdate="20181112T041644Z">
        <seg>Base.replace(::Any, ::Pair...)
Base.replace(::Base.Callable, ::Any)
Base.replace!</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Base.resize!</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T041922Z" creationid="hsugawa8651" creationdate="20181112T041922Z">
        <seg>Base.resize!</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Base.reverse(::AbstractVector; kwargs...)
Base.reverseind
Base.reverse!</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181110T041634Z" creationid="hsugawa8651" creationdate="20181110T041634Z">
        <seg>Base.reverse(::AbstractVector;クワークス.) Base.レヴェルセイント ベース.リバース!</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Base.run
Base.devnull
Base.success
Base.process_running
Base.process_exited
Base.kill(::Base.Process, ::Integer)
Base.Sys.set_process_title
Base.Sys.get_process_title
Base.ignorestatus
Base.detach
Base.Cmd
Base.setenv
Base.withenv
Base.pipeline(::Any, ::Any, ::Any, ::Any...)
Base.pipeline(::Base.AbstractCmd)
Base.Libc.gethostname
Base.Libc.getpid
Base.Libc.time()
Base.time_ns
Base.@time
Base.@timev
Base.@timed
Base.@elapsed
Base.@allocated
Base.EnvDict
Base.ENV
Base.Sys.isunix
Base.Sys.isapple
Base.Sys.islinux
Base.Sys.isbsd
Base.Sys.iswindows
Base.Sys.windows_version
Base.@static</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181110T041940Z" creationid="hsugawa8651" creationdate="20181110T041940Z">
        <seg>Base.run
Base.devnull
Base.success
Base.process_running
Base.process_exited
Base.kill(::Base.Process, ::Integer)
Base.Sys.set_process_title
Base.Sys.get_process_title
Base.ignorestatus
Base.detach
Base.Cmd
Base.setenv
Base.withenv
Base.pipeline(::Any, ::Any, ::Any, ::Any...)
Base.pipeline(::Base.AbstractCmd)
Base.Libc.gethostname
Base.Libc.getpid
Base.Libc.time()
Base.time_ns
Base.@time
Base.@timev
Base.@timed
Base.@elapsed
Base.@allocated
Base.EnvDict
Base.ENV
Base.Sys.isunix
Base.Sys.isapple
Base.Sys.islinux
Base.Sys.isbsd
Base.Sys.iswindows
Base.Sys.windows_version
Base.@static</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Base.show(::Any)
Base.summary
Base.print
Base.println
Base.printstyled
Base.sprint
Base.showerror
Base.dump
Meta.@dump
Base.readline
Base.readuntil
Base.readlines
Base.eachline
Base.displaysize</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T043214Z" creationid="hsugawa8651" creationdate="20181112T043214Z">
        <seg>Base.show(::Any)
Base.summary
Base.print
Base.println
Base.printstyled
Base.sprint
Base.showerror
Base.dump
Meta.@dump
Base.readline
Base.readuntil
Base.readlines
Base.eachline
Base.displaysize</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Base.similar</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T022603Z" creationid="hsugawa8651" creationdate="20181116T022603Z">
        <seg>Base.similar</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Base.similar(A, ::Type{S}, inds)&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T001541Z" creationid="hsugawa8651" creationdate="20181120T001541Z">
        <seg>Base.similar(A, ::Type{S}, inds)&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Base.similar(T::Union{Type,Function}, inds)&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T001543Z" creationid="hsugawa8651" creationdate="20181120T001543Z">
        <seg>Base.similar(T::Union{Type,Function}, inds)&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Base.similar(bc::Broadcasted{DestStyle}, ::Type{ElType})</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T131307Z" creationid="hsugawa8651" creationdate="20181113T131307Z">
        <seg>Base.similar(bc::Broadcasted{DestStyle}, ::Type{ElType})</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Base.similar(bc::Broadcasted{DestStyle}, ::Type{ElType})&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T083529Z" creationid="hsugawa8651" creationdate="20181113T083529Z">
        <seg>Base.similar(bc::Broadcasted{DestStyle}, ::Type{ElType})&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Base.sizeof(::Type)
Base.isconcretetype
Base.isbits
Base.isbitstype
Core.fieldtype
Base.fieldtypes
Base.fieldcount
Base.fieldoffset
Base.datatype_alignment
Base.datatype_haspadding
Base.datatype_pointerfree</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181110T041856Z" creationid="hsugawa8651" creationdate="20181110T041856Z">
        <seg>Base.sizeof(::Type)
Base.isconcretetype
Base.isbits
Base.isbitstype
Core.fieldtype
Base.fieldtypes
Base.fieldcount
Base.fieldoffset
Base.datatype_alignment
Base.datatype_haspadding
Base.datatype_pointerfree</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Base.sort
Base.sortperm
Base.InsertionSort
Base.MergeSort
Base.QuickSort
Base.PartialQuickSort
Base.Sort.sortperm!</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T044931Z" creationid="hsugawa8651" creationdate="20181112T044931Z">
        <seg>Base.sort
Base.sortperm
Base.InsertionSort
Base.MergeSort
Base.QuickSort
Base.PartialQuickSort
Base.Sort.sortperm!</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Base.sort!</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T150321Z" creationid="hsugawa8651" creationdate="20181117T150321Z">
        <seg>Base.sort!</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Base.splice!</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T041921Z" creationid="hsugawa8651" creationdate="20181112T041921Z">
        <seg>Base.splice!</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Base.stdout
Base.stderr
Base.stdin
Base.open
Base.IOBuffer
Base.take!(::Base.GenericIOBuffer)
Base.fdio
Base.flush
Base.close
Base.write
Base.read
Base.read!</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T043210Z" creationid="hsugawa8651" creationdate="20181112T043210Z">
        <seg>Base.stdout
Base.stderr
Base.stdin
Base.open
Base.IOBuffer
Base.take!(::Base.GenericIOBuffer)
Base.fdio
Base.flush
Base.close
Base.write
Base.read
Base.read!</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Base.stride
Base.strides</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181110T033616Z" creationid="hsugawa8651" creationdate="20181110T033616Z">
        <seg>Base.stride
Base.strides</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Base.sum
Base.sum!</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T041638Z" creationid="hsugawa8651" creationdate="20181112T041638Z">
        <seg>Base.sum
Base.sum!</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Base.supertype
Core.:(&lt;:)
Base.:(&gt;:)
Base.typejoin
Base.typeintersect
Base.promote_type
Base.promote_rule
Base.isdispatchtuple</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181110T041843Z" creationid="hsugawa8651" creationdate="20181110T041843Z">
        <seg>Base.supertype
Core.:(&lt;:)
Base.:(&gt;:)
Base.typejoin
Base.typeintersect
Base.promote_type
Base.promote_rule
Base.isdispatchtuple</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Base.symdiff
Base.symdiff!</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T041824Z" creationid="hsugawa8651" creationdate="20181112T041824Z">
        <seg>Base.symdiff
Base.symdiff!</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Base.typemin
Base.typemax
Base.floatmin
Base.floatmax
Base.maxintfloat
Base.eps(::Type{&lt;:AbstractFloat})
Base.eps(::AbstractFloat)
Base.instances</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181110T041908Z" creationid="hsugawa8651" creationdate="20181110T041908Z">
        <seg>Base.typemin
Base.typemax
Base.floatmin
Base.floatmax
Base.maxintfloat
Base.eps(::Type{&lt;:AbstractFloat})
Base.eps(::AbstractFloat)
Base.instances</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Base.unsafe_convert(::Type{Ptr{T}}, A)&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T083438Z" creationid="hsugawa8651" creationdate="20181113T083438Z">
        <seg>Base.unsafe_convert(::Type{Ptr{T}}, A)&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Base.unsafe_copyto!{T}(::Ptr{T}, ::Ptr{T}, ::Any)
Base.unsafe_copyto!{T}(::Array{T}, ::Any, ::Array{T}, ::Any, ::Any)
Base.copyto!</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181110T042026Z" creationid="hsugawa8651" creationdate="20181110T042026Z">
        <seg>Base.unsafe_copyto!{T}(::Ptr{T}, ::Ptr{T}, ::Any)
Base.unsafe_copyto!{T}(::Array{T}, ::Any, ::Array{T}, ::Any, ::Any)
Base.copyto!</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Base.unsafe_read
Base.unsafe_write
Base.position
Base.seek
Base.seekstart
Base.seekend
Base.skip
Base.mark
Base.unmark
Base.reset
Base.ismarked
Base.eof
Base.isreadonly
Base.iswritable
Base.isreadable
Base.isopen
Base.Grisu.print_shortest
Base.fd
Base.redirect_stdout
Base.redirect_stdout(::Function, ::Any)
Base.redirect_stderr
Base.redirect_stderr(::Function, ::Any)
Base.redirect_stdin
Base.redirect_stdin(::Function, ::Any)
Base.readchomp
Base.truncate
Base.skipchars
Base.countlines
Base.PipeBuffer
Base.readavailable
Base.IOContext
Base.IOContext(::IO, ::Pair)
Base.IOContext(::IO, ::IOContext)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T043212Z" creationid="hsugawa8651" creationdate="20181112T043212Z">
        <seg>Base.unsafe_read
Base.unsafe_write
Base.position
Base.seek
Base.seekstart
Base.seekend
Base.skip
Base.mark
Base.unmark
Base.reset
Base.ismarked
Base.eof
Base.isreadonly
Base.iswritable
Base.isreadable
Base.isopen
Base.Grisu.print_shortest
Base.fd
Base.redirect_stdout
Base.redirect_stdout(::Function, ::Any)
Base.redirect_stderr
Base.redirect_stderr(::Function, ::Any)
Base.redirect_stdin
Base.redirect_stdin(::Function, ::Any)
Base.readchomp
Base.truncate
Base.skipchars
Base.countlines
Base.PipeBuffer
Base.readavailable
Base.IOContext
Base.IOContext(::IO, ::Pair)
Base.IOContext(::IO, ::IOContext)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Base.view
Base.@view
Base.@views
Base.parent
Base.parentindices
Base.selectdim
Base.reinterpret
Base.reshape
Base.dropdims
Base.vec</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T020235Z" creationid="hsugawa8651" creationdate="20181116T020235Z">
        <seg>Base.view
Base.@view
Base.@views
Base.parent
Base.parentindices
Base.selectdim
Base.reinterpret
Base.reshape
Base.dropdims
Base.vec</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Basic Functions</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T150346Z" creationid="hsugawa8651" creationdate="20181117T150346Z">
        <seg>基本関数</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Because
this is the only inner constructor for &lt;x15/&gt;OurRational&lt;x16/&gt;, we can be certain that &lt;x17/&gt;OurRational&lt;x18/&gt; objects are
always constructed in this normalized form.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T124129Z" creationid="hsugawa8651" creationdate="20181118T124129Z">
        <seg>なぜなら これは、&lt;x15/&gt;OurRational&lt;x16/&gt;の内部コンストラクタであり、&lt;x17/&gt;OurRational&lt;x18/&gt;オブジェクトがあることは確かです。 常にこの正規化された形式で作成されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Because &lt;x3/&gt;Float64&lt;x4/&gt; is a concrete
type and concrete types cannot be subclassed in Julia, such a definition can only be applied
to arguments that are exactly of type &lt;x5/&gt;Float64&lt;x6/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T012721Z" creationid="hsugawa8651" creationdate="20181120T012721Z">
        <seg>&lt;x3/&gt;Float64&lt;x4/&gt;は具象型で、具象型はJuliaでは、サブクラス化できないので、このような定義はちょうど型が&lt;x5/&gt;Float64&lt;x6/&gt;の引数のみに適用ができます。 </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Because C doesn't support multiple return values, often C functions will take pointers to data
that the function will modify.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T151825Z" creationid="hsugawa8651" creationdate="20181117T151825Z">
        <seg>Cは複数の戻り値をサポートしていないため、しばしばC関数はデータのポインタを取得します。 関数が変更されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Because Julia's compiler is different from the interpreters used
for languages like Python or R, you may find that Julia's performance
is unintuitive at first.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T183517Z" creationid="hsugawa8651" creationdate="20181118T183517Z">
        <seg>JuliaのコンパイラはPythonやRで使われるようなインタプリタとは異なるので、もしかしたら最初はその性能に気づかないかもしれません。 </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Because Julia's compiler is different from the interpreters used for languages like Python or R, you may find that Julia's performance is unintuitive at first.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T182341Z" creationid="hsugawa8651" creationdate="20181118T182341Z">
        <seg>JuliaのコンパイラはPythonやRで使われるようなインタプリタとは異なるので、もしかしたら最初はその性能に気づかないかもしれません。 </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Because Julia’s compiler is different from the interpreters used
for languages like Python or R, you may find that Julia’s performance
is unintuitive at first.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T081506Z" creationid="hsugawa8651" creationdate="20181118T081506Z">
        <seg>JuliaのコンパイラはPythonやRで使われるようなインタプリタとは異なるので、もしかしたら最初はその性能に気づかないかもしれません。 遅いと感じたら、何かを試す前に Performance Tips を参照することをお勧めします。 Juliaがどのように動作するかを理解すれば、C言語と同等の速さで動くコードを簡単に書くことができるでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Because all data types and
code in Julia are represented by Julia data structures, powerful &lt;x3/&gt;reflection&lt;x4/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T115144Z" creationid="hsugawa8651" creationdate="20181118T115144Z">
        <seg>すべてのデータ型と Juliaのコードは、Juliaのデータ構造で表され、強力な&lt;x3/&gt;リフレクション&lt;x4/&gt;で表されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Because of the lack of a central naming authority, a single project can quite possibly end up depending on different packages that have the same name.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T152837Z" creationid="hsugawa8651" creationdate="20181117T152837Z">
        <seg>中央の名前付け権限がないため、同じ名前を持つパッケージによっては、単一のプロジェクトが終了する可能性が非常に高くなります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Because of variable-length encodings, the number of characters in a string (given by &lt;x1/&gt;`length(s)`&lt;x2/&gt;)
is not always the same as the last index.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T081641Z" creationid="hsugawa8651" creationdate="20181120T081641Z">
        <seg>可変長インデックスなので、文字列内の文字数（&lt;x1/&gt;`length(s)`&lt;x2/&gt;により取得可能）は、 常に末尾のインデックスの数と同一というわけではありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Because the function generator is
run during inference, it must respect all of the limitations of that code.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T032221Z" creationid="hsugawa8651" creationdate="20181116T032221Z">
        <seg>関数ジェネレータは は、そのコードのすべての制限を尊重する必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Before we worry about
calling &lt;x23/&gt;qsort&lt;x24/&gt; and passing arguments, we need to write a comparison function that works for some
arbitrary objects (which define &lt;x25/&gt;&lt;&lt;x26/&gt;):</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T150530Z" creationid="hsugawa8651" creationdate="20181117T150530Z">
        <seg>心配する前に &lt;x23/&gt;qsort&lt;x24/&gt;を呼び出して引数を渡す必要があります。 任意のオブジェクト(&lt;x25/&gt;&lt;&lt;x26/&gt;を定義します):</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Behaves like a &lt;x1/&gt;Ptr{T}&lt;x2/&gt; that can manage its memory via the Julia GC.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T134453Z" creationid="hsugawa8651" creationdate="20181117T134453Z">
        <seg>Julia GCを介してメモリを管理することができる&lt;x1/&gt;Ptr{T}&lt;x2/&gt;のように動作します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>BigFloats and BigInts</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T044719Z" creationid="hsugawa8651" creationdate="20181112T044719Z">
        <seg>BigFloats and BigInts</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Binary (or unary) operators like &lt;x1/&gt;.+&lt;x2/&gt; are handled with the same mechanism:
they are equivalent to &lt;x3/&gt;broadcast&lt;x4/&gt; calls and are fused with other nested "dot" calls.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T105913Z" creationid="hsugawa8651" creationdate="20181112T105913Z">
        <seg>&lt;x1/&gt;.+&lt;x2/&gt;のようなバイナリ演算子(または単項演算子)は、同じメカニズムで処理されます。 これらは、&lt;x3/&gt;ブロードキャスト&lt;x4/&gt;コールと同等であり、他のネストされた"ドット"コールと融合されています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Binary and octal literals are also supported:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T032904Z" creationid="hsugawa8651" creationdate="20181109T225352Z">
        <seg>2進および8進リテラルについてもサポートされています。:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Binary arithmetic -- &lt;x1/&gt;-&lt;x2/&gt;, &lt;x3/&gt;+&lt;x4/&gt;, &lt;x5/&gt;*&lt;x6/&gt;, &lt;x7/&gt;/&lt;x8/&gt;, &lt;x9/&gt;\&lt;x10/&gt;, &lt;x11/&gt;^&lt;x12/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T161215Z" creationid="hsugawa8651" creationdate="20181114T161215Z">
        <seg>バイナリ算術-&lt;x1/&gt;-&lt;x2/&gt;,&lt;x3/&gt;+&lt;x4/&gt;,&lt;x5/&gt;*&lt;x6/&gt;,&lt;x7/&gt;/&lt;x8/&gt;,&lt;x9/&gt;&lt;x12/&gt;,&lt;x11/&gt;^&lt;x12/&gt;&lt;x12/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Binary, octal, and hexadecimal literals may be signed by a &lt;c0&gt;-&lt;/c0&gt; immediately preceding the unsigned literal.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T185604Z" creationid="hsugawa8651" creationdate="20181118T185604Z">
        <seg>2進数、8進数、および16進数のリテラルは、符号なしリテラルのすぐ前に&lt;c0&gt;-&lt;/c0&gt;をつけると負号がつきます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Binary, octal, and hexadecimal literals may be signed by a &lt;x1/&gt;-&lt;x2/&gt; immediately preceding the
unsigned literal.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T225514Z" creationid="hsugawa8651" creationdate="20181109T225514Z">
        <seg>バイナリ、8進数、および16進数のリテラルは 署名されていないリテラル。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>BitSet&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T134320Z" creationid="hsugawa8651" creationdate="20181117T134320Z">
        <seg>BitSet&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>BitVector&lt;x1/&gt; (a.k.a.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T043132Z" creationid="hsugawa8651" creationdate="20181112T043132Z">
        <seg>BitVector&lt;x1/&gt; (a.k.a.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Bitshifts</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T065718Z" creationid="hsugawa8651" creationdate="20181114T030823Z">
        <seg>ビットシフト</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Bitwise Operators</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T095132Z" creationid="hsugawa8651" creationdate="20181118T095132Z">
        <seg>ビット毎の演算</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Bobcat&lt;x1/&gt; can and does import both &lt;x2/&gt;Cobra&lt;x3/&gt; and &lt;x4/&gt;Dingo&lt;x5/&gt;, which both have project files with UUIDs and are declared as dependencies in &lt;x6/&gt;Bobcat&lt;x7/&gt;'s &lt;x8/&gt;[deps]&lt;x9/&gt; section.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T121342Z" creationid="hsugawa8651" creationdate="20181118T121342Z">
        <seg>ボブキャット&lt;x1/&gt;は、&lt;x2/&gt;Cobra&lt;x3/&gt;と&lt;x4/&gt;ディンゴ&lt;x5/&gt;の両方をインポートしてインポートすることができます。これらは両方ともUUIDを持つプロジェクトファイルを持ち、&lt;x6/&gt;ボブキャット&lt;x7/&gt;の&lt;x8/&gt;[deps]&lt;x9/&gt;セクションの依存関係として宣言されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Bobcat&lt;x1/&gt; cannot depend on &lt;x2/&gt;Aardvark&lt;x3/&gt; since &lt;x4/&gt;Aardvark&lt;x5/&gt; does not have a project file.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T121344Z" creationid="hsugawa8651" creationdate="20181118T121344Z">
        <seg>&lt;x4/&gt;ツチブタ&lt;x5/&gt;はプロジェクトファイルを持たないため、ボブキャット&lt;x1/&gt;は&lt;x2/&gt;ツチブタ&lt;x3/&gt;に依存することはできません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Boolean operations &lt;e0&gt;without&lt;/e0&gt; short-circuit evaluation can be done with the bitwise boolean operators introduced in &lt;a1&gt;Mathematical Operations and Elementary Functions&lt;/a1&gt;: &lt;c2&gt;&amp;&lt;/c2&gt; and &lt;c3&gt;|&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T140754Z" creationid="hsugawa8651" creationdate="20181119T140754Z">
        <seg>短絡評価&lt;e0&gt;ではない&lt;/e0&gt;ブール演算は、&lt;a1&gt;算術処理と基本的な関数&lt;/a1&gt;で紹介した、 &lt;c2&gt;&amp;&lt;/c2&gt; と &lt;c3&gt;|&lt;/c3&gt;の、ビット単位の論理演算子を使って行うことができます。 </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Boolean operations &lt;x1/&gt;without&lt;x2/&gt; short-circuit evaluation can be done with the bitwise boolean operators
introduced in &lt;x3/&gt;Mathematical Operations and Elementary Functions&lt;x4/&gt;: &lt;x5/&gt;&amp;&lt;x6/&gt; and &lt;x7/&gt;|&lt;x8/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T230550Z" creationid="hsugawa8651" creationdate="20181109T230550Z">
        <seg>&lt;x2/&gt;短絡評価なしのブール演算&lt;x1/&gt;は、ビット単位のブール演算子で実行できます。 &lt;x3/&gt;演算と基本関数&lt;x4/&gt;:&lt;x5/&gt;&amp;&lt;x6/&gt;&lt;x6/&gt;&lt;x8/&gt;と&lt;x6/&gt;&lt;x8/&gt;で導入されました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Both &lt;c9&gt;&amp;&amp;&lt;/c9&gt; and &lt;c10&gt;||&lt;/c10&gt; associate to the right, but &lt;c11&gt;&amp;&amp;&lt;/c11&gt; has higher precedence than &lt;c12&gt;||&lt;/c12&gt; does.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T140307Z" creationid="hsugawa8651" creationdate="20181119T140307Z">
        <seg>&lt;c9&gt;&amp;&amp;&lt;/c9&gt; と&lt;c10&gt;||&lt;/c10&gt;は共に、右から結合しますが、&lt;c11&gt;&amp;&amp;&lt;/c11&gt;は&lt;c12&gt;||&lt;/c12&gt;より、優先順位が高いです。 </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Both &lt;x19/&gt;&amp;&amp;&lt;x20/&gt; and &lt;x21/&gt;||&lt;x22/&gt; associate to the right, but &lt;x23/&gt;&amp;&amp;&lt;x24/&gt; has higher precedence than &lt;x25/&gt;||&lt;x26/&gt; does.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T230244Z" creationid="hsugawa8651" creationdate="20181109T230244Z">
        <seg>&lt;x19/&gt;&amp;&amp;&lt;x20/&gt;と&lt;X21/&gt;&lt;x22/&gt;の両方が右側に関連付けられますが、&lt;x23/&gt;&amp;&amp;&lt;x24/&gt;は&lt;x25/&gt;&lt;x26/&gt;よりも優先順位が高くなります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Both concatenation and string interpolation call &lt;x1/&gt;`string()`&lt;x2/&gt; to convert objects into string
form.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T082926Z" creationid="hsugawa8651" creationdate="20181120T082926Z">
        <seg>補間と文字列連結はいずれもオブジェクトを文字列形式に変換するために &lt;x1/&gt;`string()`&lt;x2/&gt;を呼び出します。 </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Both expressions are interpreted as function application: any expression that is not a numeric
literal, when immediately followed by a parenthetical, is interpreted as a function applied to
the values in parentheses (see &lt;x1/&gt;Functions&lt;x2/&gt; for more about functions).</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T040604Z" creationid="hsugawa8651" creationdate="20181112T111859Z">
        <seg>上記2つの式は関数として解釈されています。括弧を伴う式が直後に続く数値リテラルではない式は、 括弧内の値に適用される関数として解釈されます（詳細は &lt;x1/&gt;Functions&lt;x2/&gt;を参照ください）。 </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Both of these cases throw a &lt;a3&gt;&lt;c4&gt;DivideError&lt;/c4&gt;&lt;/a3&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T190107Z" creationid="hsugawa8651" creationdate="20181118T190107Z">
        <seg>これらの場合は両方とも、&lt;a3&gt;&lt;c4&gt;DivideError&lt;/c4&gt;&lt;/a3&gt;を throwします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Both of these cases throw a &lt;x5/&gt;`DivideError`&lt;x6/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T033424Z" creationid="hsugawa8651" creationdate="20181112T110529Z">
        <seg>どちらの結果も &lt;x5/&gt;`DivideError`&lt;x6/&gt;となります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Both these implementations, although different, do essentially the same thing: a runtime loop
over the dimensions of the array, collecting the offset in each dimension into the final index.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T032309Z" creationid="hsugawa8651" creationdate="20181116T032252Z">
        <seg>これらの実装は両方とも異なるが、基本的には、ランタイム・ループと同じものです。 配列の寸法を超えて、各次元のオフセットを最終インデックスに収集します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Both variables (&lt;x2/&gt;i&lt;x3/&gt; and &lt;x4/&gt;j&lt;x5/&gt;) are set to their current iteration values each time the inner loop runs.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T124538Z" creationid="hsugawa8651" creationdate="20181118T124538Z">
        <seg>両方の変数(&lt;x2/&gt;i&lt;x3/&gt;と&lt;x4/&gt;j&lt;x5/&gt;)は、内部ループが実行されるたびに、それぞれの電流反復値に設定されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Brief description</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T094355Z" creationid="hsugawa8651" creationdate="20181118T094355Z">
        <seg>簡単な説明</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Brief description&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T094059Z" creationid="hsugawa8651" creationdate="20181118T094059Z">
        <seg>簡単な説明&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Broadcast Styles</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T094634Z" creationid="hsugawa8651" creationdate="20181118T094634Z">
        <seg>ブロードキャストスタイル</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Broadcast and vectorization</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T020223Z" creationid="hsugawa8651" creationdate="20181116T020223Z">
        <seg>Broadcast and vectorization</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Broadcast calls this single answer a "style." Every broadcastable object
each has its own preferred style, and a promotion-like system is used to combine these
styles into a single answer — the "destination style".</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T094639Z" creationid="hsugawa8651" creationdate="20181118T094639Z">
        <seg>ブロードキャストコールは、この単一の応答を「スタイル」と呼びます。すべてのブロードキャスト可能なオブジェクト それぞれが独自の優先スタイルを持ち、システムのようなプロモーションを使ってこれらを結合します。 スタイルは1つの応答-「destination style」になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Broadcast must take all the varied
types of its arguments and collapse them down to just one output array and one
implementation.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T131110Z" creationid="hsugawa8651" creationdate="20181113T131110Z">
        <seg>ブロードキャストは様々な変化をもたらす 引数の種類と集約を1つの出力配列と1つの出力配列に集約します。 実装。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Broadcast.flatten&lt;x1/&gt; recomputes the potentially nested operation into a single
function and flat list of arguments.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T131722Z" creationid="hsugawa8651" creationdate="20181113T131722Z">
        <seg>broadcast.flatflating&lt;x1/&gt;は、ネストされたオペレーションを1つのファイルに再計算します。 引数の関数とフラット・リスト。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>BroadcastStyle(a::AbstractArrayStyle{Any}, ::DefaultArrayStyle) = a
BroadcastStyle(a::AbstractArrayStyle{N}, ::DefaultArrayStyle{N}) where N = a
BroadcastStyle(a::AbstractArrayStyle{M}, ::DefaultArrayStyle{N}) where {M,N} =
    typeof(a)(_max(Val(M),Val(N)))</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T131814Z" creationid="hsugawa8651" creationdate="20181113T131814Z">
        <seg>BroadcastStyle(a::AbstractArrayStyle{Any}, ::DefaultArrayStyle) = a
BroadcastStyle(a::AbstractArrayStyle{N}, ::DefaultArrayStyle{N}) where N = a
BroadcastStyle(a::AbstractArrayStyle{M}, ::DefaultArrayStyle{N}) where {M,N} =
    typeof(a)(_max(Val(M),Val(N)))</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Broadcasting</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T150447Z" creationid="hsugawa8651" creationdate="20181117T150447Z">
        <seg>放送</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Broadcasting behavior of &lt;x1/&gt;SrcType&lt;x2/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T164822Z" creationid="hsugawa8651" creationdate="20181118T164822Z">
        <seg>&lt;x1/&gt;SrcType&lt;x2/&gt;のブロードキャスト動作</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Broadcasting&lt;x1/&gt; is triggered by an explicit call to &lt;x2/&gt;broadcast&lt;x3/&gt; or &lt;x4/&gt;broadcast!&lt;x5/&gt;, or implicitly by
"dot" operations like &lt;x6/&gt;A .+ b&lt;x7/&gt; or &lt;x8/&gt;f.(x, y)&lt;x9/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T131014Z" creationid="hsugawa8651" creationdate="20181113T131014Z">
        <seg>ブロードキャスト&lt;x1/&gt;は、&lt;x2/&gt;ブロードキャスト&lt;x3/&gt;ブロードキャスト!&lt;x4/&gt;ブロードキャスト!&lt;x5/&gt;への明示的な呼び出しによってトリガされます。 &lt;x6/&gt;A.+b&lt;x7/&gt;または&lt;x8/&gt;f.(x, y)&lt;x9/&gt;のような「ドット」操作。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Built-in representations of such values are called numeric primitives, while representations of
integers and floating-point numbers as immediate values in code are known as numeric literals.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T032350Z" creationid="hsugawa8651" creationdate="20181109T225037Z">
        <seg>コード内の即値としての整数と浮動小数点値の表現は 数値リテラルとして知られている一方で、ビルトインのこれらの値の表現は数値プリミティブと呼ばれています。 </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Built-in representations of such values are called numeric primitives, while representations of integers and floating-point numbers as immediate values in code are known as numeric literals.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T184253Z" creationid="hsugawa8651" creationdate="20181118T184253Z">
        <seg>このような値の組み込み表現は、数値プリミティブと呼ばれます。コードの即値となる整数と浮動小数点数は表現は、数値リテラルと呼ばれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>But here is a thing you should pay attention to: suppose &lt;x1/&gt;x&lt;x2/&gt; is bound to an object of type &lt;x3/&gt;Array&lt;x4/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181110T025034Z" creationid="hsugawa8651" creationdate="20181110T025034Z">
        <seg>しかし、ここで注意すべき点は、&lt;x1/&gt;x&lt;x2/&gt;が&lt;x3/&gt;配列&lt;x4/&gt;型のオブジェクトにバインドされていると仮定することです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>But how does one construct the first instance when no instance exists to provide as a valid value
for its &lt;x1/&gt;obj&lt;x2/&gt; field?</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T155851Z" creationid="hsugawa8651" creationdate="20181117T155851Z">
        <seg>しかし、有効な値として提供するインスタンスが存在しない場合は、最初のインスタンスを構築する方法はどうすればよいのですか。 &lt;x1/&gt;obj&lt;x2/&gt;フィールドに対して。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>But neither you, nor any of your callers, nor the functions they call, or etc.
can call this new method definition!</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T021006Z" creationid="hsugawa8651" creationdate="20181120T021006Z">
        <seg>しかし、あなたも、呼ぶ関数からも、呼ばれる関数からも、この新しいメソッド定義を呼び出すことはできません！ [訳注:この文の前後は意味がとれませんでした。]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>But that approach requires you to decide in advance
which functions you want to vectorize.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T120112Z" creationid="hsugawa8651" creationdate="20181118T120112Z">
        <seg>しかしこのアプローチでは事前に決定する必要があります はベクトル化されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>But there's an exception: future calls to &lt;x1/&gt;newfun&lt;x2/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T021021Z" creationid="hsugawa8651" creationdate="20181120T021021Z">
        <seg>しかし、例外はあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>But, &lt;x2/&gt;g(x::T) where {T} = ccall(:notvalid, T, (T,), x)&lt;x3/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T151243Z" creationid="hsugawa8651" creationdate="20181117T151243Z">
        <seg>しかし、&lt;T2/&gt;g(x::T)は、{T}=ccall(:ノヴァリド、T、(T,)、x)&lt;x3/&gt;である。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>By
default, this is the identity function for all &lt;x7/&gt;AbstractArray&lt;x8/&gt;s and &lt;x9/&gt;Number&lt;x10/&gt;s — they already
support &lt;x11/&gt;axes&lt;x12/&gt; and indexing.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T131041Z" creationid="hsugawa8651" creationdate="20181113T131041Z">
        <seg>by デフォルトでは、すべての&lt;x7/&gt;AbstractArray&lt;x8/&gt;と&lt;x9/&gt;の番号&lt;x10/&gt;の識別関数です。 &lt;x11/&gt;軸のサポート&lt;x12/&gt;とインデックス作成をサポートします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>By convention, function names ending with an exclamation point (&lt;x1/&gt;!&lt;x2/&gt;) modify their arguments.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181110T041720Z" creationid="hsugawa8651" creationdate="20181110T041720Z">
        <seg>慣例によっては、感嘆符(&lt;x1/&gt;!&lt;x2/&gt;)で終わる関数名は、引数を変更します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>By default this includes:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T155509Z" creationid="hsugawa8651" creationdate="20181109T155509Z">
        <seg>デフォルトでは、次の内容が含まれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>By default, Fortran compilers &lt;x1/&gt;generate mangled
names&lt;x2/&gt; (for example,
converting function names to lowercase or uppercase, often appending an
underscore), and so to call a Fortran function via &lt;x3/&gt;`ccall`&lt;x4/&gt; you must pass
the mangled identifier corresponding to the rule followed by your Fortran
compiler.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T223808Z" creationid="hsugawa8651" creationdate="20181109T223808Z">
        <seg>デフォルトでは、Fortranコンパイラ&lt;x1/&gt;はmangledを生成します。 名前&lt;x2/&gt;(例: 関数名を小文字または大文字に変換し、通常は アンダースコア)は、Fortran関数を&lt;x3/&gt;`ccall`&lt;x4/&gt;経由で呼び出す必要があります。 ルールに従うルールに従って、ルールに対応するマクロ識別子を指定します。 コンパイラー。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>By default, Fortran compilers &lt;x1/&gt;generate mangled
names&lt;x2/&gt; (for example,
converting function names to lowercase or uppercase, often appending an
underscore), and so to call a Fortran function via &lt;x3/&gt;`ccall`&lt;x4/&gt; you must pass
the mangled identifier corresponding to the rule followed by your Fortran
compiler.  Also, when calling a Fortran function, all inputs must be passed as
pointers to allocated values on the heap or stack. This applies not only to
arrays and other mutable objects which are normally heap-allocated, but also to
scalar values such as integers and floats which are normally stack-allocated and
commonly passed in registers when using C or Julia calling conventions.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T133755Z" creationid="hsugawa8651" creationdate="20181117T133755Z">
        <seg>デフォルトでは、Fortranコンパイラ&lt;x1/&gt;はmangledを生成します。 名前&lt;x2/&gt;(例: 関数名を小文字または大文字に変換し、通常は アンダースコア)は、Fortran関数を&lt;x3/&gt;`ccall`&lt;x4/&gt;経由で呼び出す必要があります。 ルールに従うルールに従って、ルールに対応するマクロ識別子を指定します。 コンパイラー。また、Fortran関数を呼び出す場合は、すべての入力が必要です。 ヒープまたはスタック上の割り当てられた値へのポインタです。これは 通常はヒープ割り当てされた配列やその他のmutableオブジェクトですが 通常スタック割り当てされた整数や浮動小数点のようなスカラー値 一般的には、CまたはJuliaの呼び出し規約を使用するときにレジスタで渡されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>By default, Julia picks reasonable algorithms and sorts in standard ascending order:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T063711Z" creationid="hsugawa8651" creationdate="20181114T063711Z">
        <seg>デフォルトでは、Juliaは標準的な昇順で妥当なアルゴリズムとソートを選択します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>By definition, &lt;c0&gt;eps(1.0)&lt;/c0&gt; is the same as &lt;c1&gt;eps(Float64)&lt;/c1&gt; since &lt;c2&gt;1.0&lt;/c2&gt; is a 64-bit floating-point value.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T191339Z" creationid="hsugawa8651" creationdate="20181118T191339Z">
        <seg>定義により、&lt;c0&gt;eps(1.0)&lt;/c0&gt; は&lt;c1&gt;eps(Float64)&lt;/c1&gt;です。なぜなら、&lt;c2&gt;1.0&lt;/c2&gt; は、 64ビットの浮動小数点値です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>By definition, &lt;x1/&gt;eps(1.0)&lt;x2/&gt; is the same as &lt;x3/&gt;eps(Float64)&lt;x4/&gt; since &lt;x5/&gt;1.0&lt;x6/&gt; is
a 64-bit floating-point value.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T034706Z" creationid="hsugawa8651" creationdate="20181112T111220Z">
        <seg>定義上、 &lt;x5/&gt;1.0&lt;x6/&gt;は64ビットの浮動小数点値であるため、 &lt;x1/&gt;eps(1.0)&lt;x2/&gt;は &lt;x3/&gt;eps(Float64)&lt;x4/&gt;  と同一です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>By extending
the &lt;x5/&gt;`eltype`&lt;x6/&gt; method, we can give that information to Julia and help it make more specialized
code in the more complicated methods.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T094302Z" creationid="hsugawa8651" creationdate="20181118T094302Z">
        <seg>&lt;x5/&gt;`eltype`&lt;x6/&gt; の方法を拡張することにより、Julia に情報を提供し、より専門的なものにする手助けをすることができます。 より複雑なメソッドのコードです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>By extending a few specific methods to work for a custom type, objects of that type not only
receive those functionalities, but they are also able to be used in other methods that are written
to generically build upon those behaviors.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T112041Z" creationid="hsugawa8651" creationdate="20181112T112041Z">
        <seg>カスタムタイプで作業するためのいくつかの特定の方法を拡張することによって、そのタイプのオブジェクトは、以下のように表示されます。 これらの機能を受け取りますが、他の方法で書かれることもあります。 一般的に構築されています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>By pushing an environment containing these tools onto the load path, you immediately have access to them in top-level code without needing to add them to your project.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T121414Z" creationid="hsugawa8651" creationdate="20181118T121414Z">
        <seg>これらのツールを含む環境をロードパスにプッシュすることによって、それらをプロジェクトに追加する必要なしに、トップレベルコードですぐにアクセスすることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>By putting the &lt;x12/&gt;`@views`&lt;x13/&gt; macro in front of an expression or
block of code, any &lt;x14/&gt;array[...]&lt;x15/&gt; slice in that expression will be converted to
create a &lt;x16/&gt;SubArray&lt;x17/&gt; view instead.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T160443Z" creationid="hsugawa8651" creationdate="20181109T160443Z">
        <seg>&lt;x12/&gt;`@views'&lt;x13/&gt;マクロを式の前に置くか コードのブロック、任意の&lt;x14/&gt;配列[.]&lt;x15/&gt;スライスは、その式の中に変換されます。 代わりに&lt;x16/&gt;サブアレイを作成&lt;x17/&gt;ビューを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>By the &lt;a1&gt;IEEE 754 standard&lt;/a1&gt;, these floating-point values are the results of certain arithmetic operations:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T190814Z" creationid="hsugawa8651" creationdate="20181118T190814Z">
        <seg>&lt;x3/&gt;IEEE754規格の&lt;x4/&gt;では これらの浮動小数点値は、特定の算術演算の結果です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>By the &lt;x3/&gt;IEEE 754 standard&lt;x4/&gt;,
these floating-point values are the results of certain arithmetic operations:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T034109Z" creationid="hsugawa8651" creationdate="20181112T110847Z">
        <seg> &lt;x3/&gt;IEEE 754規格&lt;x4/&gt; では、これらの浮動小数点値は特定の演算処理の結果として取得されます。:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Bypassing default machinery&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T083554Z" creationid="hsugawa8651" creationdate="20181113T083554Z">
        <seg>デフォルトのマシンをバイパスする&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>C &lt;x1/&gt;MUST NOT&lt;x2/&gt; modify the memory returned via &lt;x3/&gt;Ref{T}&lt;x4/&gt; if &lt;x5/&gt;T&lt;x6/&gt; is an &lt;x7/&gt;isbits&lt;x8/&gt; type</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T151816Z" creationid="hsugawa8651" creationdate="20181117T151816Z">
        <seg>&lt;x1/&gt;は、&lt;x5/&gt;T&lt;x6/&gt;が&lt;x7/&gt;イスビトス&lt;x×&gt;&lt;x8/&gt;で返されるメモリを変更してはならない。&lt;x4/&gt;&lt;x6/&gt;は、&lt;x7/&gt;の場合である。&lt;x8/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>C Interface</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181110T042024Z" creationid="hsugawa8651" creationdate="20181110T042024Z">
        <seg>C Interface</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>C Standard Library</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T043418Z" creationid="hsugawa8651" creationdate="20181112T043418Z">
        <seg>C Standard Library</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>C name</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T150848Z" creationid="hsugawa8651" creationdate="20181117T150848Z">
        <seg>C名</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Call C functions directly (no wrappers or special APIs needed)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T082910Z" creationid="hsugawa8651" creationdate="20181118T082910Z">
        <seg>ラッパーや特別なAPIを必要としない、Cの関数の直接の呼び出し
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Callees must make explicit copies to ensure that they don't modify inputs that
they don't intend to change.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154219Z" creationid="hsugawa8651" creationdate="20181109T154219Z">
        <seg>呼び出し側は、入力を変更しないことを確実にするために、明示的なコピーを作成する必要があります。 変化するつもりはありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Calling C and Fortran Code</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T133658Z" creationid="hsugawa8651" creationdate="20181117T133658Z">
        <seg>CとFortranのコードを呼び出す</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Calling C and Fortran Code&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T234736Z" creationid="hsugawa8651" creationdate="20181119T234736Z">
        <seg>CとFortranのコードを呼び出す&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Calling Convention</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T152415Z" creationid="hsugawa8651" creationdate="20181117T152415Z">
        <seg>通話条約</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Calling any function that is defined after the body of the generated function.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T032235Z" creationid="hsugawa8651" creationdate="20181116T032235Z">
        <seg>生成された関数のボディの後に定義された関数を呼び出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Calls</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T130242Z" creationid="hsugawa8651" creationdate="20181117T134559Z">
        <seg>関数呼び出し</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Can I use &lt;x1/&gt;using&lt;x2/&gt; or &lt;x3/&gt;import&lt;x4/&gt; inside a function?</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181110T025127Z" creationid="hsugawa8651" creationdate="20181110T025127Z">
        <seg>関数の中で&lt;x2/&gt;または&lt;x3/&gt;インポート&lt;x4/&gt;を使用して、&lt;x1/&gt;を使用することはできますか?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Candidates:
  g(x, y::Float64) in Main at none:1
  g(x::Float64, y) in Main at none:1
Possible fix, define
  g(::Float64, ::Float64)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T054004Z" creationid="hsugawa8651" creationdate="20181116T054004Z">
        <seg>Candidates:
  g(x, y::Float64) in Main at none:1
  g(x::Float64, y) in Main at none:1
Possible fix, define
  g(::Float64, ::Float64)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Captured variables
can create performance challenges as discussed in &lt;x7/&gt;&lt;x8/&gt;&lt;x9/&gt;(@ref man-performance-tips).</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T121847Z" creationid="hsugawa8651" creationdate="20181118T120038Z">
        <seg>キャプチャされた変数 &lt;x7/&gt;&lt;x8/&gt;&lt;x9/&gt;(@ref man-performance-tipsで説明されているように、パフォーマンス・チャレンジを作成することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Captured variables can present performance challenges; see
&lt;x6/&gt;&lt;x7/&gt;&lt;x8/&gt;(@ref man-performance-tips).</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T121847Z" creationid="hsugawa8651" creationdate="20181114T160702Z">
        <seg>キャプチャされた変数はパフォーマンス上の問題を提示することがあります。 &lt;x6/&gt;&lt;x7/&gt;&lt;x8/&gt;(@ref man-performance-tips。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Cartesian indices</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T135012Z" creationid="hsugawa8651" creationdate="20181117T135012Z">
        <seg>デカルト指数</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Case Study: Rational</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T124055Z" creationid="hsugawa8651" creationdate="20181118T124055Z">
        <seg>ケーススタディ:合理的</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Category</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T164940Z" creationid="hsugawa8651" creationdate="20181118T164940Z">
        <seg>カテゴリ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Chained comparisons use the
&lt;x1/&gt;&amp;&amp;&lt;x2/&gt; operator for scalar comparisons, and the &lt;x3/&gt;`&amp;`&lt;x4/&gt; operator for elementwise comparisons,
which allows them to work on arrays.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T065156Z" creationid="hsugawa8651" creationdate="20181114T030720Z">
        <seg>連続した比較は、スカラー比較に&lt;x1/&gt;&amp;&amp;&lt;x2/&gt; 演算子を使用し、 要素単位（elementwiseの比較では配列処理を行う &lt;x3/&gt;`&amp;`&lt;x4/&gt;  演算子を使用します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Chaining comparisons</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T164915Z" creationid="hsugawa8651" creationdate="20181118T164915Z">
        <seg>連鎖比較</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Chaining comparisons is often quite convenient in numerical code.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T065125Z" creationid="hsugawa8651" creationdate="20181114T030717Z">
        <seg>連続した比較は、数値コードで便利です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Change something in "mynewcode.jl"
include("mynewcode.jl")              &lt;x3/&gt; reload the module
obj1 = MyModule.ObjConstructor(a, b) &lt;x4/&gt; old objects are no longer valid, must reconstruct
obj2 = MyModule.somefunction(obj1)   &lt;x5/&gt; this time it worked!</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181110T024757Z" creationid="hsugawa8651" creationdate="20181110T024757Z">
        <seg>Change something in "mynewcode.jl"
include("mynewcode.jl")              &lt;x3/&gt; reload the module
obj1 = MyModule.ObjConstructor(a, b) &lt;x4/&gt; old objects are no longer valid, must reconstruct
obj2 = MyModule.somefunction(obj1)   &lt;x5/&gt; this time it worked!</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Closest candidates are:
  newfun() at none:1 (method too new to be called from this world context.)
 in tryeval() at none:1
 ...

julia&gt; newfun()
1</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T054054Z" creationid="hsugawa8651" creationdate="20181116T054054Z">
        <seg>Closest candidates are:
  newfun() at none:1 (method too new to be called from this world context.)
 in tryeval() at none:1
 ...

julia&gt; newfun()
1</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Cobra&lt;x1/&gt; cannot depend on &lt;x2/&gt;Aardvark&lt;x3/&gt; or &lt;x4/&gt;Bobcat&lt;x5/&gt; since neither have real UUIDs.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T121349Z" creationid="hsugawa8651" creationdate="20181118T121349Z">
        <seg>Cobra&lt;x1/&gt;は、&lt;x2/&gt;ツチブタ&lt;x3/&gt;または&lt;x4/&gt;ボブキャット&lt;x5/&gt;に依存することはできません。どちらも実際のUUIDを持っていないためです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Code Loading</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T152653Z" creationid="hsugawa8651" creationdate="20181117T152653Z">
        <seg>コードの読み込み</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Code inclusion is quite straightforward: it simply parses and evaluates a source file in the context of the caller.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T152747Z" creationid="hsugawa8651" creationdate="20181117T152747Z">
        <seg>コードインクルージョンは非常に単純です。呼び出し元のコンテキストでソースファイルを解析し、評価するだけです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Code inclusion:&lt;x1/&gt; e.g. &lt;x2/&gt;include("source.jl")&lt;x3/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T152657Z" creationid="hsugawa8651" creationdate="20181117T152657Z">
        <seg>コードインクルージョン:&lt;x1/&gt;例えば&lt;x2/&gt;は("source.jl")&lt;x3/&gt;を含む。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Collections and Data Structures</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T150130Z" creationid="hsugawa8651" creationdate="20181117T150130Z">
        <seg>コレクションとデータ構造</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Combining dot operators with numeric literals can be ambiguous.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T132640Z" creationid="hsugawa8651" creationdate="20181113T132640Z">
        <seg>ドット演算子と数値リテラルを組み合わせることは、あいまいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Common Operations</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T094400Z" creationid="hsugawa8651" creationdate="20181120T094400Z">
        <seg>共通の演算</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Compare how these results differ:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T022654Z" creationid="hsugawa8651" creationdate="20181120T022654Z">
        <seg>これらの結果がどのように異なるかを比較します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Comparison -- &lt;x1/&gt;==&lt;x2/&gt;, &lt;x3/&gt;!=&lt;x4/&gt;, &lt;x5/&gt;≈&lt;x6/&gt; (&lt;x7/&gt;`isapprox`&lt;x8/&gt;), &lt;x9/&gt;≉&lt;x10/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T161218Z" creationid="hsugawa8651" creationdate="20181114T161218Z">
        <seg>比較-&lt;x1/&gt;==&lt;x2/&gt;,&lt;x3/&gt;!=&lt;x4/&gt;,&lt;x5/&gt;≒&lt;x6/&gt;(&lt;x7/&gt;'&lt;x6/&gt;(&lt;x7/&gt;'イサッポロス&lt;x8/&gt;)&lt;x9/&gt;≉&lt;x10/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Comparisons</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T165056Z" creationid="hsugawa8651" creationdate="20181118T165056Z">
        <seg>比較</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Complex and Rational Numbers&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T234439Z" creationid="hsugawa8651" creationdate="20181119T234439Z">
        <seg>複素数と有理数&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Complex blocks:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T120300Z" creationid="hsugawa8651" creationdate="20181118T120300Z">
        <seg>複雑なブロック:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>ComplexF32&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T134419Z" creationid="hsugawa8651" creationdate="20181117T134419Z">
        <seg>ComplexF32&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>ComplexF64&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T134428Z" creationid="hsugawa8651" creationdate="20181117T134428Z">
        <seg>ComplexF64&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>ComplexF64&lt;x1/&gt; (&lt;x2/&gt;isbits&lt;x3/&gt;)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T150720Z" creationid="hsugawa8651" creationdate="20181117T150720Z">
        <seg>ComplexF64&lt;x1/&gt; (&lt;x2/&gt;isbits&lt;x3/&gt;)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Complex{Float64}(x)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T021149Z" creationid="hsugawa8651" creationdate="20181116T021149Z">
        <seg>Complex{Float64}(x)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Composite types, aka &lt;x1/&gt;struct&lt;x2/&gt; in C or &lt;x3/&gt;TYPE&lt;x4/&gt; in Fortran90 (or &lt;x5/&gt;STRUCTURE&lt;x6/&gt; / &lt;x7/&gt;RECORD&lt;x8/&gt; in some variants
of F77), can be mirrored in Julia by creating a &lt;x9/&gt;struct&lt;x10/&gt; definition with the same
field layout.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T151135Z" creationid="hsugawa8651" creationdate="20181117T151135Z">
        <seg>Fortran90(或いは、いくつかの変形例においては、&lt;x1/&gt;構造体&lt;x2/&gt;in Cまたは&lt;x3/&gt;TYPE&lt;x6/&gt;&lt;x6/&gt;/&lt;x6/&gt;RECORD&lt;x8/&gt;(ある種の変数ではRECORD&lt;x8/&gt;) は、同じ名前で&lt;x9/&gt;構造体&lt;x10/&gt;定義を作成することによって、ジュリアにミラーリングすることができます。 フィールドのレイアウトです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Comprehension syntax is
similar to set construction notation in mathematics:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154804Z" creationid="hsugawa8651" creationdate="20181109T154804Z">
        <seg>理解の構文は次のとおりです。 数学で設定された建設表記法に似ています</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Comprehensions</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T150416Z" creationid="hsugawa8651" creationdate="20181117T150416Z">
        <seg>包含</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Comprehensions can also be written without the enclosing square brackets, producing an object
known as a generator.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154923Z" creationid="hsugawa8651" creationdate="20181109T154923Z">
        <seg>包含は、囲まれた角括弧なしで書くこともでき、オブジェクトを生成することができます。 ジェネレータと呼ばれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Comprehensions can also be written without the enclosing square brackets, producing an object
known as a generator. This object can be iterated to produce values on demand, instead of allocating
an array and storing them in advance (see &lt;x1/&gt;Iteration&lt;x2/&gt;). For example, the following expression
sums a series without allocating memory:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T134812Z" creationid="hsugawa8651" creationdate="20181117T134812Z">
        <seg>包含は、囲まれた角括弧なしで書くこともでき、オブジェクトを生成することができます。 ジェネレータと呼ばれます。このオブジェクトは、必要に応じて反復処理を行うことができます。必要に応じて値を割り当てることはできません。 配列とそれを事前に格納します(&lt;x1/&gt;Iteration&lt;x2/&gt;を参照)。たとえば、次の式を指定します。 は、メモリを割り当てずに連続した値を加算します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Comprehensions provide a general and powerful way to construct arrays.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T150418Z" creationid="hsugawa8651" creationdate="20181117T150418Z">
        <seg>内包は、配列を構築するための一般的で強力な方法です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Comprehensions provide a general and powerful way to construct arrays. Comprehension syntax is
similar to set construction notation in mathematics:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T134740Z" creationid="hsugawa8651" creationdate="20181117T134740Z">
        <seg>インクルージョンは、配列を構築するための一般的で強力な方法です。理解の構文は次のとおりです。 数学で設定された建設表記法に似ています</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Concatenation</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T134534Z" creationid="hsugawa8651" creationdate="20181117T134534Z">
        <seg>連結</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Concatenation syntax can similarly be prefixed with a type to specify the element type of the
result.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154707Z" creationid="hsugawa8651" creationdate="20181109T154707Z">
        <seg>連結構文には、同じように 結果。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Conceptually, a string is a &lt;x1/&gt;partial function&lt;x2/&gt; from indices to characters: for some index values,
no character value is returned, and instead an exception is thrown.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T080045Z" creationid="hsugawa8651" creationdate="20181120T080005Z">
        <seg>概念的には、文字列はインデックスから文字への部分的な関数&lt;x1/&gt;partial function&lt;x2/&gt;です。インデックス値によっては文字列は返されず、例外が出力されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Conclusion</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T121440Z" creationid="hsugawa8651" creationdate="20181118T121440Z">
        <seg>結論</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Concrete number types</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T044710Z" creationid="hsugawa8651" creationdate="20181112T044710Z">
        <seg>Concrete number types</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Concrete types should also typically provide a &lt;x16/&gt;`similar(A,T=eltype(A),dims=size(A))`&lt;x17/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T160350Z" creationid="hsugawa8651" creationdate="20181109T160350Z">
        <seg>具体的には、典型的には、&lt;x16/&gt;'類似の(A,T=エルテープ(A),dims=size(A))`&lt;x17/&gt;を提供する必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Conditional evaluation allows portions of code to be evaluated or not evaluated depending on the
value of a boolean expression.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T225833Z" creationid="hsugawa8651" creationdate="20181109T225833Z">
        <seg>条件付き評価は、コードの一部を評価することができます。 ブール式の値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Conditional evaluation allows portions of code to be evaluated or not evaluated depending on the value of a boolean expression.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T133843Z" creationid="hsugawa8651" creationdate="20181119T133843Z">
        <seg>条件付き評価では、コードの一部がブール式の値に応じて、評価されたりされなかったりします。 </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Consequently, specializing on &lt;x5/&gt;DestType&lt;x6/&gt; has lower precedence than
methods that specialize on &lt;x7/&gt;DestStyle&lt;x8/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T131705Z" creationid="hsugawa8651" creationdate="20181113T131705Z">
        <seg>したがって、&lt;x5/&gt;DestType&lt;x6/&gt;に特化することは、以下の優先順位よりも優先順位が低くなります。 &lt;x7/&gt;DestStyle&lt;x8/&gt;に特化した方法。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Consider the following example manifest file for &lt;x4/&gt;App&lt;x5/&gt;:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T015906Z" creationid="hsugawa8651" creationdate="20181116T015906Z">
        <seg>Consider the following example manifest file for &lt;x4/&gt;App&lt;x5/&gt;:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Consider the following example project file for the hypothetical application, &lt;x8/&gt;App&lt;x9/&gt;, as described earlier:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T121102Z" creationid="hsugawa8651" creationdate="20181118T121102Z">
        <seg>前述のように、仮想アプリケーション&lt;x8/&gt;App&lt;x9/&gt;については、次のプロジェクト・ファイルを考慮してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Consider the following recursive type declaration:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T155842Z" creationid="hsugawa8651" creationdate="20181117T155842Z">
        <seg>次の再帰タイプ宣言を考慮してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Consider these examples of this syntax:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154648Z" creationid="hsugawa8651" creationdate="20181109T154648Z">
        <seg>この構文の例を次に示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Consider this example:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T115447Z" creationid="hsugawa8651" creationdate="20181118T115447Z">
        <seg>次の例を考慮してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Considered alone, this may seem relatively trivial; &lt;x1/&gt;CartesianIndex&lt;x2/&gt; simply
gathers multiple integers together into one object that represents a single
multidimensional index.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T155644Z" creationid="hsugawa8651" creationdate="20181109T155644Z">
        <seg>単独で考慮すると、これは比較的簡単であるように思えるかもしれません。&lt;x1/&gt;CartesianIndex&lt;x2/&gt;は単純です。 複数の整数を1つのオブジェクトに集約して1つのオブジェクトを作成します。 多次元インデックス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Considered alone, this may seem relatively trivial; &lt;x1/&gt;CartesianIndex&lt;x2/&gt; simply
gathers multiple integers together into one object that represents a single
multidimensional index. When combined with other indexing forms and iterators
that yield &lt;x3/&gt;CartesianIndex&lt;x4/&gt;es, however, this can produce very elegant
and efficient code. See &lt;x5/&gt;Iteration&lt;x6/&gt; below, and for some more advanced
examples, see &lt;x7/&gt;this blog post on multidimensional algorithms and
iteration&lt;x8/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T135021Z" creationid="hsugawa8651" creationdate="20181117T135021Z">
        <seg>単独で考慮すると、これは比較的簡単であるように思えるかもしれません。&lt;x1/&gt;CartesianIndex&lt;x2/&gt;は単純です。 複数の整数を1つのオブジェクトに集約して1つのオブジェクトを作成します。 多次元インデックス。他のインデックス作成フォームおよびイテレータと組み合わせて使用します。 しかし、それは&lt;x3/&gt;CartesianIndex&lt;x4/&gt;の収量をもたらすが、これは非常にエレガントなものである。 そして、効率的なコードがあります。&lt;x5/&gt;Iteration&lt;x6/&gt;&lt;x6/&gt;を参照してください。 例を参照してください。このブログ記事は、多次元アルゴリズムに関するこのブログ記事を参照してください。 繰り返し&lt;x8/&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Constructing infinite rational values is acceptable:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T123643Z" creationid="hsugawa8651" creationdate="20181118T123643Z">
        <seg>無限有理値の構築は許容されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Constructing strings using concatenation can become a bit cumbersome, however.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T082721Z" creationid="hsugawa8651" creationdate="20181120T082721Z">
        <seg>しかしながら、連結を使って文字列を構成するのは少々扱いにくくなってしまうかもしれません。 </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Construction and Initialization</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T150402Z" creationid="hsugawa8651" creationdate="20181117T150402Z">
        <seg>建設と初期化</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Constructors and Types</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T150137Z" creationid="hsugawa8651" creationdate="20181117T150137Z">
        <seg>コンストラクタとタイプ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Constructors exist to create these types from primitive numerical types, and &lt;x1/&gt;`parse()`&lt;x2/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T035848Z" creationid="hsugawa8651" creationdate="20181119T235715Z">
        <seg>コンストラクタは数値プリミティブ型からこれらの型を生成し、&lt;x1/&gt;`parse()`&lt;x2/&gt;は AbstractStringから これらの型を生成する際に使用できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Constructors exist to create these types from primitive numerical types, and &lt;x1/&gt;`parse`&lt;x2/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T111546Z" creationid="hsugawa8651" creationdate="20181112T111546Z">
        <seg>コンストラクタはプリミティブな数値型からこれらのタイプを作成するために存在します。&lt;x1/&gt;`parse'&lt;x2/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Control Flow</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T124318Z" creationid="hsugawa8651" creationdate="20181118T124318Z">
        <seg>Control Flow</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Control Flow&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T234527Z" creationid="hsugawa8651" creationdate="20181119T234527Z">
        <seg>制御フロー&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Control flow</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T165113Z" creationid="hsugawa8651" creationdate="20181118T165113Z">
        <seg>制御フロー</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Control whether inlining is permitted, including overriding &lt;c0&gt;@inline&lt;/c0&gt; declarations</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T183207Z" creationid="hsugawa8651" creationdate="20181118T183207Z">
        <seg>&lt;c0&gt;@inline&lt;/c0&gt;宣言の上書きを含め、インライン化が許可されているかどうかを制御する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Control whether inlining is permitted, including overriding &lt;x1/&gt;@inline&lt;x2/&gt; declarations</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T224750Z" creationid="hsugawa8651" creationdate="20181109T224750Z">
        <seg>&lt;x1/&gt;@inline&lt;x2/&gt;宣言の上書きを含め、インライン化が許可されているかどうかを制御する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Conversion from rational to floating-point respects the following identity for any integral values
of &lt;x1/&gt;a&lt;x2/&gt; and &lt;x3/&gt;b&lt;x4/&gt;, with the exception of the case &lt;x5/&gt;a == 0&lt;x6/&gt; and &lt;x7/&gt;b == 0&lt;x8/&gt;:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T123557Z" creationid="hsugawa8651" creationdate="20181118T123557Z">
        <seg>有理から浮動小数点への変換は、すべての積分値について次の識別を反映します。 &lt;x1/&gt;a&lt;x2/&gt;と&lt;x3/&gt;b&lt;x4/&gt;は例外であり、&lt;x×&gt;a==0&lt;x6/&gt;、&lt;x7/&gt;b==0&lt;x8/&gt;の例外を除く。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Convert &lt;x1/&gt;x&lt;x2/&gt; to an object that has &lt;x3/&gt;axes&lt;x4/&gt; and supports indexing</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T083558Z" creationid="hsugawa8651" creationdate="20181113T083558Z">
        <seg>&lt;x1/&gt;x&lt;x2/&gt;を&lt;x3/&gt;軸を持つオブジェクトに変換して、インデックスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Converting
to a &lt;x2/&gt;Cstring&lt;x3/&gt; as part of the &lt;x4/&gt;`ccall`&lt;x5/&gt; checks for contained NUL bytes and could therefore
throw a conversion error.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T150522Z" creationid="hsugawa8651" creationdate="20181117T150522Z">
        <seg>変換する &lt;x4/&gt;Cstring&lt;x3/&gt;は、含まれるNULバイトを&lt;x4/&gt;'ccall&lt;x5/&gt;チェックの一部として&lt;x2/&gt;にします。したがって 変換エラーをスローします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Converting a linear index to multiple indexing subscripts is typically very expensive, so this
provides a traits-based mechanism to enable efficient generic code for all array types.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T022812Z" creationid="hsugawa8651" creationdate="20181113T022812Z">
        <seg>リニアインデックスを複数のインデックス添字に変換することは、一般的に非常に高価です。したがって、次のようになります。 は、すべての配列タイプに対して効率的な汎用コードを有効にするための属性ベースのメカニズムを提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Core operations typically have dozens
of methods:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T014211Z" creationid="hsugawa8651" creationdate="20181120T014211Z">
        <seg>中心となる演算には通常数十種類のメソッドがあります:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Core.:(===)
Core.isa
Base.isequal
Base.isless
Base.ifelse
Core.typeassert
Core.typeof
Core.tuple
Base.ntuple
Base.objectid
Base.hash
Base.finalizer
Base.finalize
Base.copy
Base.deepcopy
Base.getproperty
Base.setproperty!</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181110T041822Z" creationid="hsugawa8651" creationdate="20181110T041822Z">
        <seg>Core.:(===)
Core.isa
Base.isequal
Base.isless
Base.ifelse
Core.typeassert
Core.typeof
Core.tuple
Base.ntuple
Base.objectid
Base.hash
Base.finalizer
Base.finalize
Base.copy
Base.deepcopy
Base.getproperty
Base.setproperty!</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Core.AbstractArray
Base.AbstractVector
Base.AbstractMatrix
Base.AbstractVecOrMat
Core.Array
Core.Array(::UndefInitializer, ::Any)
Core.Array(::Nothing, ::Any)
Core.Array(::Missing, ::Any)
Core.UndefInitializer
Core.undef
Base.Vector
Base.Vector(::UndefInitializer, ::Any)
Base.Vector(::Nothing, ::Any)
Base.Vector(::Missing, ::Any)
Base.Matrix
Base.Matrix(::UndefInitializer, ::Any, ::Any)
Base.Matrix(::Nothing, ::Any, ::Any)
Base.Matrix(::Missing, ::Any, ::Any)
Base.VecOrMat
Core.DenseArray
Base.DenseVector
Base.DenseMatrix
Base.DenseVecOrMat
Base.StridedArray
Base.StridedVector
Base.StridedMatrix
Base.StridedVecOrMat
Base.getindex(::Type, ::Any...)
Base.zeros
Base.ones
Base.BitArray
Base.BitArray(::UndefInitializer, ::Integer...)
Base.BitArray(::Any)
Base.trues
Base.falses
Base.fill
Base.fill!</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T020217Z" creationid="hsugawa8651" creationdate="20181116T020217Z">
        <seg>Core.AbstractArray
Base.AbstractVector
Base.AbstractMatrix
Base.AbstractVecOrMat
Core.Array
Core.Array(::UndefInitializer, ::Any)
Core.Array(::Nothing, ::Any)
Core.Array(::Missing, ::Any)
Core.UndefInitializer
Core.undef
Base.Vector
Base.Vector(::UndefInitializer, ::Any)
Base.Vector(::Nothing, ::Any)
Base.Vector(::Missing, ::Any)
Base.Matrix
Base.Matrix(::UndefInitializer, ::Any, ::Any)
Base.Matrix(::Nothing, ::Any, ::Any)
Base.Matrix(::Missing, ::Any, ::Any)
Base.VecOrMat
Core.DenseArray
Base.DenseVector
Base.DenseMatrix
Base.DenseVecOrMat
Base.StridedArray
Base.StridedVector
Base.StridedMatrix
Base.StridedVecOrMat
Base.getindex(::Type, ::Any...)
Base.zeros
Base.ones
Base.BitArray
Base.BitArray(::UndefInitializer, ::Integer...)
Base.BitArray(::Any)
Base.trues
Base.falses
Base.fill
Base.fill!</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Core.AbstractChar
Core.Char
Base.codepoint
Base.length(::AbstractString)
Base.sizeof(::AbstractString)
Base.:*(::Union{AbstractChar, AbstractString}, ::Union{AbstractChar, AbstractString}...)
Base.:^(::AbstractString, ::Integer)
Base.string
Base.repeat(::AbstractString, ::Integer)
Base.repeat(::AbstractChar, ::Integer)
Base.repr(::Any)
Core.String(::AbstractString)
Base.SubString
Base.transcode
Base.unsafe_string
Base.ncodeunits(::AbstractString)
Base.codeunit
Base.codeunits
Base.ascii
Base.@r_str
Base.SubstitutionString
Base.@s_str
Base.@raw_str
Base.Docs.@html_str
Base.Docs.@text_str
Base.isvalid(::Any)
Base.isvalid(::Any, ::Any)
Base.isvalid(::AbstractString, ::Integer)
Base.match
Base.eachmatch
Base.isless(::AbstractString, ::AbstractString)
Base.:(==)(::AbstractString, ::AbstractString)
Base.cmp(::AbstractString, ::AbstractString)
Base.lpad
Base.rpad
Base.findfirst(::AbstractString, ::AbstractString)
Base.findnext(::AbstractString, ::AbstractString, ::Integer)
Base.findlast(::AbstractString, ::AbstractString)
Base.findprev(::AbstractString, ::AbstractString, ::Integer)
Base.occursin
Base.reverse(::Union{String,SubString{String}})
Base.replace(s::AbstractString, ::Pair)
Base.split
Base.rsplit
Base.strip
Base.lstrip
Base.rstrip
Base.startswith
Base.endswith
Base.first(::AbstractString, ::Integer)
Base.last(::AbstractString, ::Integer)
Base.uppercase
Base.lowercase
Base.titlecase
Base.uppercasefirst
Base.lowercasefirst
Base.join
Base.chop
Base.chomp
Base.thisind
Base.nextind
Base.prevind
Base.textwidth
Base.isascii
Base.iscntrl
Base.isdigit
Base.isletter
Base.islowercase
Base.isnumeric
Base.isprint
Base.ispunct
Base.isspace
Base.isuppercase
Base.isxdigit
Core.Symbol
Base.escape_string
Base.unescape_string</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T064309Z" creationid="hsugawa8651" creationdate="20181114T064309Z">
        <seg>Core.AbstractChar
Core.Char
Base.codepoint
Base.length(::AbstractString)
Base.sizeof(::AbstractString)
Base.:*(::Union{AbstractChar, AbstractString}, ::Union{AbstractChar, AbstractString}...)
Base.:^(::AbstractString, ::Integer)
Base.string
Base.repeat(::AbstractString, ::Integer)
Base.repeat(::AbstractChar, ::Integer)
Base.repr(::Any)
Core.String(::AbstractString)
Base.SubString
Base.transcode
Base.unsafe_string
Base.ncodeunits(::AbstractString)
Base.codeunit
Base.codeunits
Base.ascii
Base.@r_str
Base.SubstitutionString
Base.@s_str
Base.@raw_str
Base.Docs.@html_str
Base.Docs.@text_str
Base.isvalid(::Any)
Base.isvalid(::Any, ::Any)
Base.isvalid(::AbstractString, ::Integer)
Base.match
Base.eachmatch
Base.isless(::AbstractString, ::AbstractString)
Base.:(==)(::AbstractString, ::AbstractString)
Base.cmp(::AbstractString, ::AbstractString)
Base.lpad
Base.rpad
Base.findfirst(::AbstractString, ::AbstractString)
Base.findnext(::AbstractString, ::AbstractString, ::Integer)
Base.findlast(::AbstractString, ::AbstractString)
Base.findprev(::AbstractString, ::AbstractString, ::Integer)
Base.occursin
Base.reverse(::Union{String,SubString{String}})
Base.replace(s::AbstractString, ::Pair)
Base.split
Base.rsplit
Base.strip
Base.lstrip
Base.rstrip
Base.startswith
Base.endswith
Base.first(::AbstractString, ::Integer)
Base.last(::AbstractString, ::Integer)
Base.uppercase
Base.lowercase
Base.titlecase
Base.uppercasefirst
Base.lowercasefirst
Base.join
Base.chop
Base.chomp
Base.thisind
Base.nextind
Base.prevind
Base.textwidth
Base.isascii
Base.iscntrl
Base.isdigit
Base.isletter
Base.islowercase
Base.isnumeric
Base.isprint
Base.ispunct
Base.isspace
Base.isuppercase
Base.isxdigit
Core.Symbol
Base.escape_string
Base.unescape_string</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Core.Any
Core.Union
Union{}
Core.UnionAll
Core.Tuple
Core.NamedTuple
Base.Val
Core.Vararg
Core.Nothing
Base.isnothing
Base.Some
Base.something
Base.Enums.@enum</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181110T041916Z" creationid="hsugawa8651" creationdate="20181110T041916Z">
        <seg>Core.Any
Core.Union
Union{}
Core.UnionAll
Core.Tuple
Core.NamedTuple
Base.Val
Core.Vararg
Core.Nothing
Base.isnothing
Base.Some
Base.something
Base.Enums.@enum</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Core.Float16
Core.Float32
Core.Float64
Base.BigFloat
Core.Bool
Core.Int8
Core.UInt8
Core.Int16
Core.UInt16
Core.Int32
Core.UInt32
Core.Int64
Core.UInt64
Core.Int128
Core.UInt128
Base.BigInt
Base.Complex
Base.Rational
Base.Irrational</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T044711Z" creationid="hsugawa8651" creationdate="20181112T044711Z">
        <seg>Core.Float16
Core.Float32
Core.Float64
Base.BigFloat
Core.Bool
Core.Int8
Core.UInt8
Core.Int16
Core.UInt16
Core.Int32
Core.UInt32
Core.Int64
Core.UInt64
Core.Int128
Core.UInt128
Base.BigInt
Base.Complex
Base.Rational
Base.Irrational</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Core.Function
Base.hasmethod
Core.applicable
Core.invoke
Base.invokelatest
new
Base.:(|&gt;)
Base.:(∘)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181110T041920Z" creationid="hsugawa8651" creationdate="20181110T041920Z">
        <seg>Core.Function
Base.hasmethod
Core.applicable
Core.invoke
Base.invokelatest
new
Base.:(|&gt;)
Base.:(∘)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Core.Intrinsics.llvmcall</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181110T042030Z" creationid="hsugawa8651" creationdate="20181110T042030Z">
        <seg>Core.Intrinsics.llvmcall</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Core.Number
Core.Real
Core.AbstractFloat
Core.Integer
Core.Signed
Core.Unsigned
Base.AbstractIrrational</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T044709Z" creationid="hsugawa8651" creationdate="20181112T044709Z">
        <seg>Core.Number
Core.Real
Core.AbstractFloat
Core.Integer
Core.Signed
Core.Unsigned
Base.AbstractIrrational</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Core.Task
Base.current_task
Base.istaskdone
Base.istaskstarted
Base.yield
Base.yieldto
Base.task_local_storage(::Any)
Base.task_local_storage(::Any, ::Any)
Base.task_local_storage(::Function, ::Any, ::Any)
Base.Condition
Base.notify
Base.schedule
Base.@task
Base.sleep
Base.Channel
Base.put!(::Channel, ::Any)
Base.take!(::Channel)
Base.isready(::Channel)
Base.fetch(::Channel)
Base.close(::Channel)
Base.bind(c::Channel, task::Task)
Base.asyncmap
Base.asyncmap!</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T044739Z" creationid="hsugawa8651" creationdate="20181112T044739Z">
        <seg>Core.Task
Base.current_task
Base.istaskdone
Base.istaskstarted
Base.yield
Base.yieldto
Base.task_local_storage(::Any)
Base.task_local_storage(::Any, ::Any)
Base.task_local_storage(::Function, ::Any, ::Any)
Base.Condition
Base.notify
Base.schedule
Base.@task
Base.sleep
Base.Channel
Base.put!(::Channel, ::Any)
Base.take!(::Channel)
Base.isready(::Channel)
Base.fetch(::Channel)
Base.close(::Channel)
Base.bind(c::Channel, task::Task)
Base.asyncmap
Base.asyncmap!</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Core.eval
Base.MainInclude.eval
Base.@eval
Base.evalfile
Base.esc
Base.@inbounds
Base.@boundscheck
Base.@inline
Base.@noinline
Base.@nospecialize
Base.@specialize
Base.gensym
Base.@gensym
Base.@goto
Base.@label
Base.@simd
Base.@polly
Base.@generated
Base.@pure</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181110T041926Z" creationid="hsugawa8651" creationdate="20181110T041926Z">
        <seg>Core.eval
Base.MainInclude.eval
Base.@eval
Base.evalfile
Base.esc
Base.@inbounds
Base.@boundscheck
Base.@inline
Base.@noinline
Base.@nospecialize
Base.@specialize
Base.gensym
Base.@gensym
Base.@goto
Base.@label
Base.@simd
Base.@polly
Base.@generated
Base.@pure</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Core.isdefined
Base.@isdefined
Base.convert
Base.promote
Base.oftype
Base.widen
Base.identity</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181110T041832Z" creationid="hsugawa8651" creationdate="20181110T041832Z">
        <seg>Core.isdefined
Base.@isdefined
Base.convert
Base.promote
Base.oftype
Base.widen
Base.identity</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Core.nothing
Base.PROGRAM_FILE
Base.ARGS
Base.C_NULL
Base.VERSION
Base.LOAD_PATH
Base.Sys.BINDIR
Base.Sys.CPU_THREADS
Base.Sys.WORD_SIZE
Base.Sys.KERNEL
Base.Sys.ARCH
Base.Sys.MACHINE</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T043137Z" creationid="hsugawa8651" creationdate="20181112T043137Z">
        <seg>Core.nothing
Base.PROGRAM_FILE
Base.ARGS
Base.C_NULL
Base.VERSION
Base.LOAD_PATH
Base.Sys.BINDIR
Base.Sys.CPU_THREADS
Base.Sys.WORD_SIZE
Base.Sys.KERNEL
Base.Sys.ARCH
Base.Sys.MACHINE</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Count bytes allocated by each source line</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T224805Z" creationid="hsugawa8651" creationdate="20181109T224805Z">
        <seg>各ソース行によって割り当てられたカウントバイト数</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Count executions of source lines</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T224758Z" creationid="hsugawa8651" creationdate="20181109T224758Z">
        <seg>ソース行の実行数のカウント</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creating C-Compatible Julia Function Pointers</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T133847Z" creationid="hsugawa8651" creationdate="20181117T133847Z">
        <seg>C互換性のあるJulia関数ポインタの作成</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creation of a variable named &lt;x7/&gt;where&lt;x8/&gt;, &lt;x9/&gt;in&lt;x10/&gt; or &lt;x11/&gt;isa&lt;x12/&gt; is allowed though.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181110T041808Z" creationid="hsugawa8651" creationdate="20181110T041808Z">
        <seg>&lt;x8/&gt;は&lt;x8/&gt;、&lt;x10/&gt;は&lt;x10/&gt;isa&lt;x12/&gt;では&lt;x12/&gt;であるが、&lt;x12/&gt;は&lt;x12/&gt;&lt;x12/&gt;である。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Cshort&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T150910Z" creationid="hsugawa8651" creationdate="20181117T150910Z">
        <seg>Cshort&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Cstring&lt;x1/&gt; type here: as the array is uninitialized, it could contain NUL bytes.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T150520Z" creationid="hsugawa8651" creationdate="20181117T150520Z">
        <seg>ここではCstring&lt;x1/&gt;タイプです:配列は初期化されていないので、NULバイトを含むことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Cstring&lt;x1/&gt; type here: as the array is uninitialized, it could contain NUL bytes. Converting
to a &lt;x2/&gt;Cstring&lt;x3/&gt; as part of the &lt;x4/&gt;`ccall`&lt;x5/&gt; checks for contained NUL bytes and could therefore
throw a conversion error.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T133845Z" creationid="hsugawa8651" creationdate="20181117T133845Z">
        <seg>Cstring&lt;x1/&gt;タイプ:配列は初期化されていないため、NULバイトを含むことができます。変換 &lt;x4/&gt;Cstring&lt;x3/&gt;は、含まれるNULバイトを&lt;x4/&gt;'ccall&lt;x5/&gt;チェックの一部として&lt;x2/&gt;にします。したがって 変換エラーをスローします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Cuchar&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T150900Z" creationid="hsugawa8651" creationdate="20181117T150900Z">
        <seg>Cuchar&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Currently, only the platform-default C calling convention is supported.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T153954Z" creationid="hsugawa8651" creationdate="20181109T153954Z">
        <seg>現在、プラットフォームのデフォルトのC呼び出し規約のみがサポートされています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Currently, only the platform-default C calling convention is supported. This means that
&lt;x1/&gt;@cfunction&lt;x2/&gt;-generated pointers cannot be used in calls where WINAPI expects &lt;x3/&gt;stdcall&lt;x4/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T133912Z" creationid="hsugawa8651" creationdate="20181117T133912Z">
        <seg>現在、プラットフォームのデフォルトのC呼び出し規則のみがサポートされています。これは、次のことを意味します。 &lt;x1/&gt;@cfunction&lt;x2/&gt;-生成されたポインタは、WINAPIが&lt;x3/&gt;stdcall&lt;x4/&gt;を想定している呼び出しでは使用できません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Currently, this is only supported for primitive types or other pointer-free (&lt;x5/&gt;isbits&lt;x6/&gt;) immutable struct types.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T152601Z" creationid="hsugawa8651" creationdate="20181117T152601Z">
        <seg>現在では、これはプリミティブ型または他のポインタフリー(&lt;x5/&gt;イスビトス&lt;x6/&gt;)の不変構造型タイプでのみサポートされています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Custom implementation of &lt;x1/&gt;broadcast!&lt;x2/&gt;, specializing on &lt;x3/&gt;DestStyle&lt;x4/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T083617Z" creationid="hsugawa8651" creationdate="20181113T083617Z">
        <seg>&lt;x1/&gt;ブロードキャストのカスタム実装!&lt;x2/&gt;DestStyle&lt;x4/&gt;を専門にしています。&lt;x/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Custom implementation of &lt;x1/&gt;broadcast!&lt;x2/&gt;, specializing on &lt;x3/&gt;DestType&lt;x4/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T083625Z" creationid="hsugawa8651" creationdate="20181113T083625Z">
        <seg>&lt;x1/&gt;ブロードキャストのカスタム実装!&lt;x2/&gt;DestType&lt;x4/&gt;を専門にしています。&lt;x3/&gt;&lt;x/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Custom implementation of &lt;x1/&gt;broadcast&lt;x2/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T083607Z" creationid="hsugawa8651" creationdate="20181113T083607Z">
        <seg>&lt;x1/&gt;ブロードキャストのカスタム実装&lt;x2/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Custom types can similarly specialize
&lt;x21/&gt;Base.broadcastable&lt;x22/&gt; to define their shape, but they should follow the convention that
&lt;x23/&gt;collect(Base.broadcastable(x)) == collect(x)&lt;x24/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T131100Z" creationid="hsugawa8651" creationdate="20181113T131100Z">
        <seg>カスタム・タイプも同様に特殊化できます。 &lt;X21/&gt;Base.broadcastable&lt;x22/&gt;のシェイプを定義するには、次の規則に従う必要があります。 &lt;x23/&gt;collect(Base.broadcastable(x))==collect(x)&lt;x24/&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Cvoid&lt;x1/&gt; (this will return the singleton instance &lt;x2/&gt;nothing::Cvoid&lt;x3/&gt;)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T151800Z" creationid="hsugawa8651" creationdate="20181117T151800Z">
        <seg>Cvoid&lt;x1/&gt;(これはシングルトンインスタンス&lt;x2/&gt;なし:Cvoid&lt;x3/&gt;を返します)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Data Formats</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T044712Z" creationid="hsugawa8651" creationdate="20181112T044712Z">
        <seg>Data Formats</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Date and DateTime&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T234717Z" creationid="hsugawa8651" creationdate="20181119T234717Z">
        <seg>日付と日時&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Declaration of the indices of &lt;x1/&gt;x&lt;x2/&gt; for broadcasting purposes (defaults to &lt;x3/&gt;`axes(x)`&lt;x4/&gt;)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T001223Z" creationid="hsugawa8651" creationdate="20181120T001223Z">
        <seg>&lt;x1/&gt;x&lt;x2/&gt;のインデックスを&lt;x3/&gt;`axes(x)`&lt;x4/&gt;に従って宣言する。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Declaration of the indices of &lt;x1/&gt;x&lt;x2/&gt;, as per &lt;x3/&gt;`axes(x)`&lt;x4/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T083541Z" creationid="hsugawa8651" creationdate="20181113T083541Z">
        <seg>&lt;x3/&gt;x&lt;x2/&gt;の指数を&lt;x3/&gt;の軸(x)&lt;x4/&gt;に従って宣言する。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Default definition&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T094057Z" creationid="hsugawa8651" creationdate="20181118T094057Z">
        <seg>デフォルト定義&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>DefaultArrayStyle&lt;x1/&gt; "loses" to any other
&lt;x2/&gt;AbstractArrayStyle&lt;x3/&gt; that has been defined because of the following methods:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T131811Z" creationid="hsugawa8651" creationdate="20181113T131811Z">
        <seg>DefaultArrayStyle&lt;x1/&gt;"は他のすべてに"失われます" &lt;x2/&gt;AbstractArrayStyle&lt;x3/&gt;は、以下の方法により定義されている。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>DefaultArrayStyle&lt;x1/&gt; types.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T131826Z" creationid="hsugawa8651" creationdate="20181113T131826Z">
        <seg>DefaultArrayStyle&lt;x1/&gt; types.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Define a function &lt;x1/&gt;f(x)&lt;x2/&gt;, which initially has one method:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T022521Z" creationid="hsugawa8651" creationdate="20181120T022521Z">
        <seg>最初は1つのメソッドを持つ関数f(x)を定義します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Define these
two functions for custom types to override how they are stored in a hash table.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T041724Z" creationid="hsugawa8651" creationdate="20181112T041724Z">
        <seg>これらを定義する ハッシュテーブルに格納される方法を上書きするカスタムタイプ用の2つの関数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Defining &lt;x6/&gt;similar&lt;x7/&gt;, &lt;x8/&gt;getindex&lt;x9/&gt; and
&lt;x10/&gt;setindex!&lt;x11/&gt; for &lt;x12/&gt;SparseArray&lt;x13/&gt; also makes it possible to &lt;x14/&gt;`copy`&lt;x15/&gt; the array:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T083320Z" creationid="hsugawa8651" creationdate="20181113T083320Z">
        <seg>&lt;x6/&gt;類似の&lt;x7/&gt;を定義し、&lt;x8/&gt;getindex&lt;x9/&gt;を定義します。 &lt;x12/&gt;setindex!&lt;x12/&gt;&lt;x12/&gt;SparseArray&lt;x13/&gt;は、&lt;x14/&gt;'コピー&lt;x15/&gt;を可能にします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>DenseArray&lt;x1/&gt; is an abstract subtype of &lt;x2/&gt;AbstractArray&lt;x3/&gt; intended to include all arrays where
elements are stored contiguously in column-major order (see additional notes in
&lt;x4/&gt;&lt;x5/&gt;&lt;x6/&gt;(@ref man-performance-tips)).</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T121847Z" creationid="hsugawa8651" creationdate="20181109T160418Z">
        <seg>DenseArray&lt;x1/&gt;は、すべての配列を含むことを意図した&lt;x2/&gt;AbstractArray&lt;x3/&gt;の抽象サブタイプである。 要素は列主順序で連続的に格納されます(追加の注記を参照してください)。 &lt;x4/&gt;&lt;x5/&gt;&lt;x6/&gt;(@ref man-performance-tips)。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>DenseArray&lt;x1/&gt; is an abstract subtype of &lt;x2/&gt;AbstractArray&lt;x3/&gt; intended to include all arrays where
elements are stored contiguously in column-major order (see additional notes in
&lt;x4/&gt;&lt;x5/&gt;&lt;x6/&gt;(@ref man-performance-tips)). The &lt;x7/&gt;`Array`&lt;x8/&gt; type is a specific instance
of &lt;x9/&gt;DenseArray&lt;x10/&gt;;  &lt;x11/&gt;`Vector`&lt;x12/&gt; and &lt;x13/&gt;`Matrix`&lt;x14/&gt; are aliases for the 1-d and 2-d cases.
Very few operations are implemented specifically for &lt;x15/&gt;Array&lt;x16/&gt; beyond those that are required
for all &lt;x17/&gt;AbstractArray&lt;x18/&gt;s; much of the array library is implemented in a generic
manner that allows all custom arrays to behave similarly.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T135326Z" creationid="hsugawa8651" creationdate="20181117T135326Z">
        <seg>DenseArray&lt;x1/&gt;は、すべての配列を含むことを意図した&lt;x2/&gt;AbstractArray&lt;x3/&gt;の抽象サブタイプである。 要素は列主順序で連続的に格納されます(追加の注記を参照してください)。 &lt;x4/&gt;&lt;x5/&gt;&lt;x6/&gt;(@ref man performance tips).&lt;x7/&gt;'Array`&lt;x8/&gt;typeは特定のインスタンスです。 &lt;x9/&gt;DenseArray&lt;x10/&gt;;&lt;x11/&gt;'Vector'&lt;x12/&gt;および&lt;x13/&gt;'Matrix'&lt;x14/&gt;は、1-dおよび2-dケースのエイリアスです。 &lt;x15/&gt;アレイ&lt;x16/&gt;に対しては、必要な動作を超えて実装されているオペレーションはほとんどありません。 すべての&lt;x17/&gt;AbstractArray&lt;x18/&gt;;アレイライブラリの多くは一般的に実装されています。 すべてのカスタム・アレイが同じように動作するようにする方法です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Depending on your needs, you can either ignore these complexities
entirely and just pretend that only ASCII characters exist, or you can write code that can handle
any of the characters or encodings that one may encounter when handling non-ASCII text.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T075640Z" creationid="hsugawa8651" creationdate="20181120T075640Z">
        <seg>あなたの必要に応じて、これらの複雑な問題を気にせずASCII文字だけを使用したり、非ASCIIテキストを扱う際に 見かける様々な文字やエンコードを使用したコードを書くことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Dequeues</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T041832Z" creationid="hsugawa8651" creationdate="20181112T041832Z">
        <seg>Dequeues</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Description</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T095053Z" creationid="hsugawa8651" creationdate="20181112T110803Z">
        <seg>説明</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Designed for parallelism and distributed computation</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T082802Z" creationid="hsugawa8651" creationdate="20181118T082653Z">
        <seg>並列コンピューティング・分散コンピューティングを意図した設計
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Despite their implementation
differences, these operations all fall under the general concept of "addition".</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T005848Z" creationid="hsugawa8651" creationdate="20181120T005834Z">
        <seg>実装が違っていても、これらの操作はすべて、一般的な概念の「足し算」に当てはまります。.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Dict("A"=&gt;1, "B"=&gt;2)&lt;x1/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T041733Z" creationid="hsugawa8651" creationdate="20181112T041733Z">
        <seg>Dict("A"=&gt;1, "B"=&gt;2)&lt;x1/&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Dictionaries</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T041713Z" creationid="hsugawa8651" creationdate="20181112T041713Z">
        <seg>Dictionaries</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Dictionaries may also be created with generators.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T041748Z" creationid="hsugawa8651" creationdate="20181112T041748Z">
        <seg>辞書はジェネレータで作成することもできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Different entities may use the same name to refer to unrelated packages.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T122953Z" creationid="hsugawa8651" creationdate="20181118T122953Z">
        <seg>異なるエンティティは、無関係パッケージを参照するために同じ名前を使用することがある。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Dingo&lt;x1/&gt; cannot import anything because it has a project file without a &lt;x2/&gt;[deps]&lt;x3/&gt; section.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T121355Z" creationid="hsugawa8651" creationdate="20181118T121355Z">
        <seg>ディンゴ&lt;x1/&gt;は、&lt;x2/&gt;[deps]&lt;x3/&gt;セクション以外のプロジェクトファイルを持っているため、何もインポートできません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Direct comparison of the numerator and denominator is generally not necessary, since the standard
arithmetic and comparison operations are defined for rational values:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T123628Z" creationid="hsugawa8651" creationdate="20181118T123628Z">
        <seg>分子と分母の直接比較は、一般的には必要ではないので、一般的には必要ではない。 算術演算と比較演算は、有理値に対して定義されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Direct construction of &lt;x1/&gt;Expr&lt;x2/&gt; objects with value arguments is powerful, but &lt;x3/&gt;Expr&lt;x4/&gt; constructors
can be tedious compared to "normal" Julia syntax.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T115408Z" creationid="hsugawa8651" creationdate="20181118T115408Z">
        <seg>値引数を持つ&lt;x1/&gt;Expr&lt;x2/&gt;オブジェクトの直接構築は強力ですが、&lt;x3/&gt;Expr&lt;x4/&gt;コンストラクタは強力です。 は、「通常の」ジュリア構文と比較して、退屈である可能性があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Disallow or enable unsafe floating point optimizations (overrides @fastmath declaration)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T183222Z" creationid="hsugawa8651" creationdate="20181109T224756Z">
        <seg>安全でない浮動小数点の最適化を許可または有効にします@fastmath宣言を無効にします)。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Display version information</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T224555Z" creationid="hsugawa8651" creationdate="20181109T224555Z">
        <seg>バージョン情報を表示する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Division errors</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T120333Z" creationid="hsugawa8651" creationdate="20181118T120333Z">
        <seg>除算エラー</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Division functions</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T071414Z" creationid="hsugawa8651" creationdate="20181118T095820Z">
        <seg>除算関数</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Do not try to free an
object received from a C library with &lt;x1/&gt;`Libc.free`&lt;x2/&gt; in Julia, as this may result in the &lt;x3/&gt;free&lt;x4/&gt; function
being called via the wrong &lt;x5/&gt;libc&lt;x6/&gt; library and cause Julia to crash.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T151431Z" creationid="hsugawa8651" creationdate="20181117T151431Z">
        <seg>次の操作を実行しないでください。 は、&lt;x/&gt;Libc.free&lt;x2/&gt;&lt;x2/&gt;を含むCライブラリから受信されたオブジェクトで、&lt;x3/&gt;フリー&lt;x4/&gt;関数を生成する可能性がある 間違った&lt;x5/&gt;libc&lt;x6/&gt;ライブラリを介して呼び出され、ジュリアがクラッシュすることがあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Do not use `end`&lt;x4/&gt;&lt;x5/&gt;in indexing expressions that may contain either `CartesianIndex` or arrays thereof.&lt;x6/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T155720Z" creationid="hsugawa8651" creationdate="20181109T155720Z">
        <seg>「CartesianIndex」またはその配列が含まれる可能性のある表現のインデックス作成には「end」&lt;x4/&gt;&lt;x5/&gt;を使用しないでください。&lt;x6/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Do not use this for functions that return no value
(&lt;x11/&gt;void&lt;x12/&gt;) but do return, use &lt;x13/&gt;Cvoid&lt;x14/&gt; instead.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T151026Z" creationid="hsugawa8651" creationdate="20181117T151026Z">
        <seg>値を返さない関数にはこれを使用しない (&lt;x11/&gt;void&lt;x12/&gt;)しかし、リターンする場合は、&lt;x13/&gt;Cvoid&lt;x14/&gt;を使用してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Documentation&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T234618Z" creationid="hsugawa8651" creationdate="20181119T234618Z">
        <seg>ドキュメントの作成&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Download and install Julia by
following the instructions at
&lt;a0&gt;http://julialang.org/downloads/&lt;/a0&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T083732Z" creationid="hsugawa8651" creationdate="20181118T083732Z">
        <seg>&lt;a0&gt;http://julialang.org/downloads/&lt;/a0&gt; にある手順に従い、Juliaをダウンロードしてインストールしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Download and install Julia by following the instructions at &lt;a0&gt;https://julialang.org/downloads/&lt;/a0&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T173403Z" creationid="hsugawa8651" creationdate="20181118T173403Z">
        <seg>&lt;a0&gt;http://julialang.org/downloads/&lt;/a0&gt; にある手順に従い、Juliaをダウンロードしてインストールしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Download and install Julia by following the instructions at &lt;x1/&gt;https://julialang.org/downloads/&lt;x2/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T224249Z" creationid="hsugawa8651" creationdate="20181109T224249Z">
        <seg>&lt;x1/&gt;https://julialang.org/downloads/&lt;x2/&gt;の指示に従って、Juliaをダウンロードしてインストールします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Each kind of environment defines these three maps differently, as detailed in the following sections.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T121035Z" creationid="hsugawa8651" creationdate="20181118T121035Z">
        <seg>各環境では、次のセクションで詳細に説明されているように、これら3つのマップを異なる方法で定義しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Each machine definition
takes the form &lt;x10/&gt;[count*][user@]host[:port] [bind_addr[:port]]&lt;x11/&gt; .</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T233748Z" creationid="hsugawa8651" creationdate="20181119T233748Z">
        <seg>各マシンの定義は &lt;x10/&gt;[count*][user@]host[:port] [bind_addr[:port]]&lt;x11/&gt;という形式で書かれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Each machine definition
takes the form &lt;x10/&gt;[count*][user@]host[:port] [bind_addr[:port]]&lt;x11/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T092436Z" creationid="hsugawa8651" creationdate="20181109T224423Z">
        <seg>各マシンの定義は &lt;x10/&gt;[count*][user@]host[:port] [bind_addr[:port]]&lt;x11/&gt;という形式で書かれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Each machine definition takes the form
&lt;c18&gt;&lt;s19&gt;[count*][user@]host[:port]&lt;/s19&gt; &lt;s20&gt;[bind_addr[:port]]&lt;/s20&gt;&lt;/c18&gt; .</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T085311Z" creationid="hsugawa8651" creationdate="20181118T084939Z">
        <seg>各マシンの定義は &lt;c18&gt;&lt;s19&gt;[count*][user@]host[:port]&lt;/s19&gt; &lt;s20&gt;[bind_addr[:port]]&lt;/s20&gt;&lt;/c18&gt; という形式で書かれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Each machine definition takes the form &lt;c8&gt;[count*][user@]host[:port] [bind_addr[:port]]&lt;/c8&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T173906Z" creationid="hsugawa8651" creationdate="20181118T173906Z">
        <seg>各マシンの定義は &lt;c8&gt;[count*][user@]host[:port] [bind_addr[:port]]&lt;/c8&gt;という形式で書かれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Each method of a generated function has its own view of defined functions:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T015729Z" creationid="hsugawa8651" creationdate="20181116T015729Z">
        <seg>Each method of a generated function has its own view of defined functions:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>EachLine&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T041611Z" creationid="hsugawa8651" creationdate="20181112T041611Z">
        <seg>EachLine&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Efficient support for
&lt;a0&gt;Unicode&lt;/a0&gt;, including but not
limited to &lt;a1&gt;UTF-8&lt;/a1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T083006Z" creationid="hsugawa8651" creationdate="20181118T082900Z">
        <seg>&lt;a0&gt;Unicode&lt;/a0&gt; の効率的なサポート。 &lt;a1&gt;UTF-8&lt;/a1&gt; も含みますが、これに限定しません
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Efficient support for &lt;a0&gt;Unicode&lt;/a0&gt;, including but not limited to &lt;a1&gt;UTF-8&lt;/a1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T182744Z" creationid="hsugawa8651" creationdate="20181118T182744Z">
        <seg>&lt;a0&gt;Unicode&lt;/a0&gt; の効率的なサポート。 &lt;a1&gt;UTF-8&lt;/a1&gt; も含みますが、これに限定しません
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Either &lt;x1/&gt;EltypeUnknown()&lt;x2/&gt; or &lt;x3/&gt;HasEltype()&lt;x4/&gt; as appropriate</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T112153Z" creationid="hsugawa8651" creationdate="20181112T112153Z">
        <seg>&lt;x1/&gt;EltypeUnknown()&lt;x2/&gt;または&lt;x3/&gt;HasEltype()&lt;x4/&gt;のいずれか適切な場合</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Elegant and extensible conversions and promotions for numeric and
other types</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T082846Z" creationid="hsugawa8651" creationdate="20181118T082846Z">
        <seg>数値型他の型の、エレガントで拡張性のある変換やプロモーション [2]
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Elegant and extensible conversions and promotions for numeric and other types</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T182737Z" creationid="hsugawa8651" creationdate="20181118T182737Z">
        <seg>数値型他の型の、エレガントで拡張性のある変換やプロモーション </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Element type &lt;c6&gt;T&lt;/c6&gt; must be able to hold these values, i.e. &lt;c7&gt;Nothing &lt;: T&lt;/c7&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131256Z" creationid="hsugawa8651" creationdate="20181119T131226Z">
        <seg>要素型&lt;c6&gt;T&lt;/c6&gt;は、これらの値を保持できなければなりません。つまり、&lt;:t7&gt;Nothing&lt;:T&lt;/c7&gt;です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Elementary Functions</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T164916Z" creationid="hsugawa8651" creationdate="20181118T164916Z">
        <seg>基本関数</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>EltypeUnknown()&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T112342Z" creationid="hsugawa8651" creationdate="20181112T112342Z">
        <seg>EltypeUnknown()&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Embedding Julia&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T234811Z" creationid="hsugawa8651" creationdate="20181119T234811Z">
        <seg>埋め込みJulia&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Emit bounds checks always or never (ignoring declarations)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T224752Z" creationid="hsugawa8651" creationdate="20181109T224752Z">
        <seg>放出の境界チェックは常に行われる(宣言を無視する)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Empty arrays like &lt;x1/&gt;[]&lt;x2/&gt;, which select no elements</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T155524Z" creationid="hsugawa8651" creationdate="20181109T155524Z">
        <seg>&lt;x1/&gt;[]&lt;x2/&gt;のような空の配列で、要素は選択されません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Empty ranges of the form &lt;x1/&gt;n:n-1&lt;x2/&gt; are sometimes used to indicate the inter-index location between
&lt;x3/&gt;n-1&lt;x4/&gt; and &lt;x5/&gt;n&lt;x6/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T155316Z" creationid="hsugawa8651" creationdate="20181109T155316Z">
        <seg>&lt;x1/&gt;n:n-1&lt;x2/&gt;という形式の空の範囲は、場合によっては、インデックス間の位置を示すために使用される。 &lt;x3/&gt;n-1&lt;x4/&gt;および&lt;x5/&gt;n&lt;x6/&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Empty ranges of the form &lt;x1/&gt;n:n-1&lt;x2/&gt; are sometimes used to indicate the inter-index location between
&lt;x3/&gt;n-1&lt;x4/&gt; and &lt;x5/&gt;n&lt;x6/&gt;. For example, the &lt;x7/&gt;`searchsorted`&lt;x8/&gt; function uses this convention to indicate
the insertion point of a value not found in a sorted array:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T134844Z" creationid="hsugawa8651" creationdate="20181117T134844Z">
        <seg>&lt;x1/&gt;n:n-1&lt;x2/&gt;という形式の空の範囲は、場合によっては、インデックス間の位置を示すために使用される。 &lt;x3/&gt;n-1&lt;x4/&gt;と&lt;x5/&gt;n&lt;x6/&gt;。たとえば、&lt;x7/&gt;'セアルチゾルタド'&lt;x8/&gt;はこの表記法を使用します。 ソートされた配列に存在しない値の挿入点です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Enable / Set the level of debug info generation (default level is 1 if unspecified or 2 if used without a level)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T224747Z" creationid="hsugawa8651" creationdate="20181109T224747Z">
        <seg>デバッグ情報の生成レベルを有効/設定します(デフォルトレベルは、指定されていない場合は1、レベルなしでは2を指定します)。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Enable or disable Julia's default signal handlers</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T224649Z" creationid="hsugawa8651" creationdate="20181109T224649Z">
        <seg>ジュリアのデフォルトシグナルハンドラを有効または無効にする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Enable or disable color text</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T224727Z" creationid="hsugawa8651" creationdate="20181109T224727Z">
        <seg>カラーテキストを有効または無効にする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Enable or disable incremental precompilation of modules</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T224655Z" creationid="hsugawa8651" creationdate="20181109T224655Z">
        <seg>モジュールのインクリメンタル事前コンパイルを有効または無効にする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Enable or disable method overwrite warnings</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T224735Z" creationid="hsugawa8651" creationdate="20181109T224735Z">
        <seg>メソッドの上書き警告を有効または無効にする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Enable or disable startup banner</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T224725Z" creationid="hsugawa8651" creationdate="20181109T224725Z">
        <seg>起動バナーを有効または無効にする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Enable or disable syntax and method deprecation warnings (&lt;c0&gt;error&lt;/c0&gt; turns warnings into errors)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T183114Z" creationid="hsugawa8651" creationdate="20181118T183114Z">
        <seg>構文およびメソッドの非推奨警告を有効または無効にします((&lt;c0&gt;error&lt;/c0&gt;は警告をエラーに変換します)。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Enable or disable syntax and method deprecation warnings (&lt;x1/&gt;error&lt;x2/&gt; turns warnings into errors)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T224733Z" creationid="hsugawa8651" creationdate="20181109T224733Z">
        <seg>構文およびメソッドの非推奨警告を有効または無効にします(&lt;x1/&gt;エラー&lt;x2/&gt;は警告をエラーに変換します)。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Ensuring that all arguments support broadcast</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T131024Z" creationid="hsugawa8651" creationdate="20181113T131024Z">
        <seg>すべての引数がブロードキャストをサポートすることを確認する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Environment Variables&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T234752Z" creationid="hsugawa8651" creationdate="20181119T234752Z">
        <seg>環境変数&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Environment stacks</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T121404Z" creationid="hsugawa8651" creationdate="20181118T121404Z">
        <seg>環境スタック</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Environments</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T152911Z" creationid="hsugawa8651" creationdate="20181117T152911Z">
        <seg>環境</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Errors</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T150120Z" creationid="hsugawa8651" creationdate="20181117T150120Z">
        <seg>Errors</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Essentials</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181110T041641Z" creationid="hsugawa8651" creationdate="20181110T041641Z">
        <seg>Essentials</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Evaluate &lt;x1/&gt;&lt;x2/&gt;&lt;x3/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T224659Z" creationid="hsugawa8651" creationdate="20181109T224659Z">
        <seg>&lt;x1/&gt;&lt;x2/&gt;&lt;x3/&gt;を評価します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Evaluate &lt;x1/&gt;&lt;x2/&gt;&lt;x3/&gt; and display the result</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T031719Z" creationid="hsugawa8651" creationdate="20181109T224702Z">
        <seg>Evaluate &lt;x1/&gt;&lt;x2/&gt;&lt;x3/&gt; and display the result</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Evaluating this expression yields an interpolated &lt;x5/&gt;3&lt;x6/&gt;:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T115630Z" creationid="hsugawa8651" creationdate="20181118T115630Z">
        <seg>この式を評価すると、補間された&lt;x5/&gt;3&lt;x6/&gt;が得られます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Even beyond
mathematical operations, however, multiple dispatch ends up being a powerful and convenient paradigm
for structuring and organizing programs.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T012031Z" creationid="hsugawa8651" creationdate="20181120T012031Z">
        <seg>しかし、数学的な操作以外でも、多重ディスパッチは、プログラムの構築し組織化する強力で便利なパラダイムです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Events</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181110T042013Z" creationid="hsugawa8651" creationdate="20181110T042013Z">
        <seg>Events</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Every &lt;x1/&gt;&lt;x2/&gt;&lt;x3/&gt;(@ref modules) has its own &lt;x4/&gt;`eval`&lt;x5/&gt; function that evaluates expressions in its global
scope.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T165246Z" creationid="hsugawa8651" creationdate="20181118T165246Z">
        <seg>&lt;x1/&gt;&lt;x2/&gt;&lt;x3/&gt;(@refモジュール)はすべて、そのグローバルな表現を評価する独自の&lt;x4/&gt;`eval'&lt;x5/&gt;関数を持っています。 範囲。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Every C type also has a corresponding Julia type with the same name, prefixed by C.
This can help for writing portable code (and remembering that an &lt;x1/&gt;int&lt;x2/&gt; in C is not the same as
an &lt;x3/&gt;Int&lt;x4/&gt; in Julia).</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T150838Z" creationid="hsugawa8651" creationdate="20181117T150838Z">
        <seg>すべてのC型は同じ名前を冠した同じ名前を持つ、対応するジュリア型を持っています。 これは、移植可能なコードを書くのに役立ちます(そして、Cでは&lt;x1/&gt;int&lt;x2/&gt;が同じではないことを思い出してください)。 &lt;x3/&gt;のInt&lt;x4/&gt;Int&lt;x4/&gt;int&lt;x4/&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Every Julia program starts life as a string:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T115150Z" creationid="hsugawa8651" creationdate="20181118T115150Z">
        <seg>すべてのジュリアプログラムは文字列として始まります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Every binary arithmetic and bitwise operator also has an updating version that assigns the result
of the operation back into its left operand.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T063812Z" creationid="hsugawa8651" creationdate="20181113T132351Z">
        <seg>全ての二項演算子とビット単位の演算子には、被演算子の処理の結果を代入できる更新機能があります。 </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Everyday programming requires no
direct usage of tasks, but certain problems can be solved much more easily by using tasks.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T225751Z" creationid="hsugawa8651" creationdate="20181109T225751Z">
        <seg>日常的なプログラミングでは タスクを直接使用することはできますが、タスクを使用することによって、特定の問題をより容易に解決することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Everyday programming requires no direct usage of tasks, but certain problems can be solved much more easily by using tasks.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T133413Z" creationid="hsugawa8651" creationdate="20181119T133413Z">
        <seg>日常的なプログラムには、タスクを直接使う必要はないかもしれませんが、ある種の問題は、タスクを使うとはるかに簡単に解くことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Exactly corresponds to the &lt;x1/&gt;complex double&lt;x2/&gt; type in C (or &lt;x3/&gt;COMPLEX*16&lt;x4/&gt; in Fortran).</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T134434Z" creationid="hsugawa8651" creationdate="20181117T134434Z">
        <seg>厳密には、Cの&lt;x1/&gt;複合体二重&lt;x2/&gt;型(Fortranの場合は&lt;x3/&gt;COMPLEX*16&lt;x4/&gt;)に対応する。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Exactly corresponds to the &lt;x1/&gt;complex float&lt;x2/&gt; type in C (or &lt;x3/&gt;COMPLEX*8&lt;x4/&gt; in Fortran).</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T134426Z" creationid="hsugawa8651" creationdate="20181117T134426Z">
        <seg>厳密には、Cの&lt;x1/&gt;複合float&lt;x2/&gt;タイプ(Fortranの場合は&lt;x3/&gt;COMPLEX*8&lt;x4/&gt;)に対応しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Exactly corresponds to the &lt;x1/&gt;double&lt;x2/&gt; type in C (or &lt;x3/&gt;REAL*8&lt;x4/&gt; in Fortran).</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T134416Z" creationid="hsugawa8651" creationdate="20181117T134416Z">
        <seg>厳密には、Cの&lt;x1/&gt;double&lt;x2/&gt;型(Fortranの場合は&lt;x3/&gt;REAL*8&lt;x4/&gt;)に対応しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Exactly corresponds to the &lt;x1/&gt;float&lt;x2/&gt; type in C (or &lt;x3/&gt;REAL*4&lt;x4/&gt; in Fortran).</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T134412Z" creationid="hsugawa8651" creationdate="20181117T134412Z">
        <seg>厳密には、Cの&lt;x1/&gt;float&lt;x2/&gt;タイプ(Fortranの場合は&lt;x3/&gt;REAL*4&lt;x4/&gt;)に対応します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Exactly corresponds to the &lt;x1/&gt;signed&lt;x2/&gt; type annotation in C (or any &lt;x3/&gt;INTEGER&lt;x4/&gt; type in Fortran).</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T150815Z" creationid="hsugawa8651" creationdate="20181117T150815Z">
        <seg>厳密には、C(またはFortranでは任意の&lt;x3/&gt;INTEGER&lt;x4/&gt;タイプ)の&lt;x1/&gt;署名された&lt;x2/&gt;型の注釈に対応しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Exactly corresponds to the &lt;x1/&gt;signed&lt;x2/&gt; type annotation in C (or any &lt;x3/&gt;INTEGER&lt;x4/&gt; type in Fortran).
Any Julia type that is not a subtype of &lt;x5/&gt;`Signed`&lt;x6/&gt; is assumed to be unsigned.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T134446Z" creationid="hsugawa8651" creationdate="20181117T134446Z">
        <seg>厳密には、C(またはFortranでは任意の&lt;x3/&gt;INTEGER&lt;x4/&gt;タイプ)の&lt;x1/&gt;署名された&lt;x2/&gt;型の注釈に対応しています。 &lt;x5/&gt;'署名された&lt;x6/&gt;のサブタイプではないジュリア型は、符号なしであると仮定されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Example</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T150617Z" creationid="hsugawa8651" creationdate="20181117T150617Z">
        <seg>例</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Example:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T134832Z" creationid="hsugawa8651" creationdate="20181117T134832Z">
        <seg>例:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Examples:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T164632Z" creationid="hsugawa8651" creationdate="20181118T164632Z">
        <seg>Examples:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Exception Handling</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T000445Z" creationid="hsugawa8651" creationdate="20181120T000445Z">
        <seg>例外処理</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Exception Handling&lt;x1/&gt;: &lt;x2/&gt;try&lt;x3/&gt;-&lt;x4/&gt;catch&lt;x5/&gt;, &lt;x6/&gt;`error()`&lt;x7/&gt; and &lt;x8/&gt;`throw()`&lt;x9/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T000147Z" creationid="hsugawa8651" creationdate="20181120T000147Z">
        <seg>例外処理&lt;x1/&gt;:&lt;x2/&gt;try&lt;x3/&gt;-&lt;x4/&gt;catch&lt;x5/&gt;&lt;x6/&gt;`error()`&lt;x7/&gt;と&lt;x8/&gt;`throw()`&lt;x9/&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Exception Handling&lt;x1/&gt;: &lt;x2/&gt;try&lt;x3/&gt;-&lt;x4/&gt;catch&lt;x5/&gt;, &lt;x6/&gt;`error`&lt;x7/&gt; and &lt;x8/&gt;`throw`&lt;x9/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T225735Z" creationid="hsugawa8651" creationdate="20181109T225735Z">
        <seg>例外処理&lt;x1/&gt;:&lt;x2/&gt;try&lt;x3/&gt;-&lt;x4/&gt;catch&lt;x5/&gt;&lt;x6/&gt;'エラー'&lt;x7/&gt;'&lt;x7/&gt;'&lt;x9/&gt;"&lt;x9/&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Exception&lt;x1/&gt;s are thrown when an unexpected condition has occurred.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T124558Z" creationid="hsugawa8651" creationdate="20181118T124558Z">
        <seg>例外&lt;x1/&gt;は、予期しない条件が発生したときにスローされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Exceptions can be created explicitly with &lt;x1/&gt;`throw`&lt;x2/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T124625Z" creationid="hsugawa8651" creationdate="20181118T124625Z">
        <seg>例外は、&lt;x1/&gt;`throw'&lt;x2/&gt;で明示的に作成することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Existing code then seamlessly applies to the new data
types.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T082518Z" creationid="hsugawa8651" creationdate="20181118T082441Z">
        <seg>こうすることで、既存のコードをシームレスに新たなデータ型対応させることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Existing code then seamlessly applies to the new data types.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T182629Z" creationid="hsugawa8651" creationdate="20181118T182629Z">
        <seg>こうすることで、既存のコードをシームレスに新たなデータ型対応させることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Explicitly,
this means that:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T230231Z" creationid="hsugawa8651" creationdate="20181109T230231Z">
        <seg>明示的に つまり、次のようになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Explicitly, this means that:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T135844Z" creationid="hsugawa8651" creationdate="20181119T135844Z">
        <seg>つまり、</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Exponentiation</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T095558Z" creationid="hsugawa8651" creationdate="20181118T095558Z">
        <seg>累乗</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Expr&lt;x1/&gt; objects contain two parts:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T115208Z" creationid="hsugawa8651" creationdate="20181118T115208Z">
        <seg>expr&lt;x1/&gt;オブジェクトには、次の2つのパーツが含まれています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Expr&lt;x1/&gt; objects may also be nested:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T115249Z" creationid="hsugawa8651" creationdate="20181118T115249Z">
        <seg>Expr&lt;x1/&gt;オブジェクトはネストされている場合もあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Expr&lt;x1/&gt;, which may look very familiar to users of Lisp.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T115258Z" creationid="hsugawa8651" creationdate="20181118T115258Z">
        <seg>Expr&lt;x1/&gt;。Lispのユーザには非常に馴染みのあるものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Expression</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T134547Z" creationid="hsugawa8651" creationdate="20181117T134547Z">
        <seg>式</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Expression interpolation allows convenient, readable programmatic
construction of complex Julia expressions.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T115427Z" creationid="hsugawa8651" creationdate="20181118T115427Z">
        <seg>表現の補間により、便利で読み取り可能なプログラムが可能になります。 複雑なジュリア表現の構築。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Expressions and evaluation</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T115329Z" creationid="hsugawa8651" creationdate="20181118T115326Z">
        <seg>式と評価</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Expressions may also be constructed directly in &lt;x1/&gt;prefix notation&lt;x2/&gt;:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T115234Z" creationid="hsugawa8651" creationdate="20181118T115225Z">
        <seg>式は、&lt;x1/&gt;プレフィックス表記&lt;x2/&gt;で直接構築することもできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Expressions passed to &lt;x6/&gt;`eval`&lt;x7/&gt; are not limited to returning values -- they can
also have side-effects that alter the state of the enclosing module's environment:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T165249Z" creationid="hsugawa8651" creationdate="20181118T165249Z">
        <seg>&lt;x6/&gt;`eval`&lt;x7/&gt;に渡される式は、値を返すことに限定されるわけではありません--それらは値を返すことができます。 また、エンディングモジュールの環境の状態を変更する副作用もあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Expressions provided by the parser generally only have symbols, other expressions, and literal
values as their args, whereas expressions constructed by Julia code can have arbitrary run-time
values without literal forms as args.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T115351Z" creationid="hsugawa8651" creationdate="20181118T115351Z">
        <seg>パーサーによって提供される式には、一般的にはシンボル、その他の表現、およびリテラルがあります。 値はargsとして、Juliaコードで構築された式は任意のランタイムを持つことができます。 引数としてリテラル・フォームを使用しない値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Expressions starting with &lt;x1/&gt;0x&lt;x2/&gt; are always hexadecimal literals.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T040809Z" creationid="hsugawa8651" creationdate="20181112T111941Z">
        <seg>&lt;x1/&gt;0x&lt;x2/&gt; で始まる式は、常に16進リテラルとして解釈されます。

</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Expressions starting with a numeric literal followed by &lt;x1/&gt;e&lt;x2/&gt; or &lt;x3/&gt;E&lt;x4/&gt; are always floating-point literals.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T040804Z" creationid="hsugawa8651" creationdate="20181112T111944Z">
        <seg>&lt;x1/&gt;e&lt;x2/&gt; または &lt;x3/&gt;E&lt;x4/&gt;が続く数値リテラルで始まる式は、浮動小数点リテラルとして解釈されます。


</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Expressions starting with a numeric literal followed by &lt;x1/&gt;f&lt;x2/&gt; are always 32-bit floating-point literals.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T111947Z" creationid="hsugawa8651" creationdate="20181112T111947Z">
        <seg>数値リテラルで始まり、&lt;x x/&gt;f&lt;x2/&gt;が続く式は常に32ビット浮動小数点リテラルです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Extended documentation for mathematical symbols &amp; functions is &lt;x1/&gt;&lt;x2/&gt;&lt;x3/&gt;(@ref math-ops).</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T063434Z" creationid="hsugawa8651" creationdate="20181114T063434Z">
        <seg>数学的シンボルと関数の拡張ドキュメントは&lt;x1/&gt;&lt;x2/&gt;&lt;x3/&gt;(@ref math ops)です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Federated package management and precise software reproducibility are difficult but worthy goals in a package system.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T121442Z" creationid="hsugawa8651" creationdate="20181118T121442Z">
        <seg>連合パッケージ管理と正確なソフトウェア再現性は難しいが、パッケージ・システムでは価値のある目標である。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Federation of packages</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T152820Z" creationid="hsugawa8651" creationdate="20181117T152820Z">
        <seg>パッケージの連合</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Filesystem</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T043206Z" creationid="hsugawa8651" creationdate="20181112T043206Z">
        <seg>Filesystem</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Finally, let's take a look at some more complex examples where this rule comes into play.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T021303Z" creationid="hsugawa8651" creationdate="20181120T021303Z">
        <seg>最後に、このルールが適用されるより複雑な例を、いくつか見てみましょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Finally, one should define a function
&lt;x25/&gt;display(d::D, x)&lt;x26/&gt; that queries &lt;x27/&gt;`showable(mime, x)`&lt;x28/&gt; for the &lt;x29/&gt;mime&lt;x30/&gt; types supported by &lt;x31/&gt;D&lt;x32/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T063325Z" creationid="hsugawa8651" creationdate="20181114T063325Z">
        <seg>最後に、関数を定義する必要があります。 &lt;x25/&gt;display(d::D, x)&lt;x26/&gt;'&lt;x31/&gt;'showable(mime、x)`&lt;x31/&gt;D&lt;x32/&gt;D&lt;x32/&gt;でサポートされている&lt;x29/&gt;mime&lt;x30/&gt;の種類については、&lt;x27/&gt;を参照してください。x28</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Finally, the maximum efficiency is typically achieved when the output array of a vectorized operation
is &lt;x1/&gt;pre-allocated&lt;x2/&gt;, so that repeated calls do not allocate new arrays over and over again for
the results (see &lt;x3/&gt;Pre-allocating outputs&lt;x4/&gt;).</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T120149Z" creationid="hsugawa8651" creationdate="20181118T120149Z">
        <seg>最後に、最大効率は、ベクトル化された演算の出力アレイの場合に、典型的に達成される。 は&lt;x1/&gt;事前割り当て&lt;x2/&gt;であるため、繰り返し呼び出しは、新しいアレイを繰り返し割り当てないようにします。 結果(&lt;x3/&gt;事前割り当ての事前割り当て&lt;x/&gt;)を参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Finally, you can use &lt;x1/&gt;`ccall`&lt;x2/&gt; to actually generate a call to the library function.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T223825Z" creationid="hsugawa8651" creationdate="20181109T223825Z">
        <seg>最後に、&lt;x1/&gt;`ccall'&lt;x2/&gt;を使ってライブラリ関数への呼び出しを実際に生成することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Finally, you can use &lt;x1/&gt;`ccall`&lt;x2/&gt; to actually generate a call to the library function. Arguments
to &lt;x3/&gt;`ccall`&lt;x4/&gt; are as follows:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T133759Z" creationid="hsugawa8651" creationdate="20181117T133759Z">
        <seg>最後に、&lt;x1/&gt;`ccall'&lt;x2/&gt;を使ってライブラリ関数への呼び出しを実際に生成することができます。引数は引数を指定します。 &lt;x3/&gt;'ccall'&lt;x4/&gt;は次のようになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Finally,&lt;x1/&gt;where&lt;x2/&gt; is parsed as an infix operator for writing parametric method
and type definitions.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181110T041802Z" creationid="hsugawa8651" creationdate="20181110T041802Z">
        <seg>最後に&lt;x1/&gt;は、&lt;x2/&gt;がパラメトリックメソッドを記述するためのインフィックス演算子として構文解析される。 定義します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Finite numbers are ordered in the usual manner.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T064215Z" creationid="hsugawa8651" creationdate="20181114T030459Z">
        <seg>有限数は標準的な方法で順序付けされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>First"
 "2.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T161329Z" creationid="hsugawa8651" creationdate="20181114T161329Z">
        <seg>First"
 "2.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>First, a review of some relevant Julia type terminology:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T134309Z" creationid="hsugawa8651" creationdate="20181117T134309Z">
        <seg>まず、いくつかの関連するJulia型用語のレビューを行います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>First, if the opening &lt;x3/&gt;"""&lt;x4/&gt; is followed by a
newline, the newline is stripped from the resulting string.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T083114Z" creationid="hsugawa8651" creationdate="20181120T083114Z">
        <seg>まず、始めの &lt;x3/&gt;"""&lt;x4/&gt; の後ろに改行が続いた場合、結果の文字列から改行は取り除かれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Float16&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T110758Z" creationid="hsugawa8651" creationdate="20181112T110758Z">
        <seg>Float16&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Float32&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T110800Z" creationid="hsugawa8651" creationdate="20181112T110800Z">
        <seg>Float32&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Float32[ 0.25*x[i-1] + 0.5*x[i] + 0.25*x[i+1] for i=2:length(x)-1 ]</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154902Z" creationid="hsugawa8651" creationdate="20181109T154902Z">
        <seg>Float32[ 0.25*x[i-1] + 0.5*x[i] + 0.25*x[i+1] for i=2:length(x)-1 ]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Float64&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T110801Z" creationid="hsugawa8651" creationdate="20181112T110801Z">
        <seg>Float64&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Floating-Point Numbers</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T120338Z" creationid="hsugawa8651" creationdate="20181118T120338Z">
        <seg>浮動小数点数</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Floating-point arithmetic entails many subtleties which can be surprising to users who are unfamiliar
with the low-level implementation details.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T035040Z" creationid="hsugawa8651" creationdate="20181112T111346Z">
        <seg>浮動小数点数演算は、あまり経験のないユーザには難しいかもしれませんが、多くの応用的な知識が必要です。 </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Floating-point arithmetic entails many subtleties which can be surprising to users who are unfamiliar with the low-level implementation details.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T191526Z" creationid="hsugawa8651" creationdate="20181118T191526Z">
        <seg>浮動小数点演算は、慣れ親しみのあるユーザに驚くほどの繊細さを必要とします。 低レベルの実装の詳細です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Floating-point numbers
are compared according to the &lt;x1/&gt;IEEE 754 standard&lt;x2/&gt;:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T064153Z" creationid="hsugawa8651" creationdate="20181114T030457Z">
        <seg> 浮動小数点数は &lt;x1/&gt;&gt;IEEE 754規格&lt;x2/&gt; に準拠して比較されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Floating-point numbers have &lt;a0&gt;two zeros&lt;/a0&gt;, positive zero and negative zero.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T190648Z" creationid="hsugawa8651" creationdate="20181118T190648Z">
        <seg>浮動小数点数は&lt;a0&gt;2つのゼロ &lt;/a0&gt;を持ちます。すなわち、正のゼロと、負のゼロです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Floating-point numbers have &lt;x1/&gt;two zeros&lt;x2/&gt;, positive zero
and negative zero.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T033841Z" creationid="hsugawa8651" creationdate="20181112T110744Z">
        <seg>浮動小数点数には &lt;x1/&gt;2つの0&lt;x2/&gt; （正の0と負の0）があります。 </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Floating-point types:&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T120321Z" creationid="hsugawa8651" creationdate="20181118T120321Z">
        <seg>Floating-point types:&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Floating-point zero</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T120344Z" creationid="hsugawa8651" creationdate="20181118T120344Z">
        <seg>浮動小数点0</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Following the outer constructor definitions, we defined a number of methods for the &lt;x1/&gt;⊘&lt;x2/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T124146Z" creationid="hsugawa8651" creationdate="20181118T124146Z">
        <seg>外部コンストラクタ定義に従って、&lt;x1/&gt;θ&lt;x2/&gt;のためにいくつかの方法を定義しました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For
&lt;x5/&gt;`BigFloat`&lt;x6/&gt; the &lt;x7/&gt;GNU MPFR library&lt;x8/&gt; is used,
and for &lt;x9/&gt;`BigInt`&lt;x10/&gt; the &lt;x11/&gt;&lt;x12/&gt;&lt;x13/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T032207Z" creationid="hsugawa8651" creationdate="20181114T032207Z">
        <seg>その他 &lt;x5/&gt;'BigFloat'&lt;x6/&gt;&lt;x7/&gt;GNU MPFRライブラリ&lt;x8/&gt;は使用されます。 そして&lt;x9/&gt;'BigInt'&lt;x10/&gt;&lt;x11/&gt;&lt;x12/&gt;&lt;x13/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For
example:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T083236Z" creationid="hsugawa8651" creationdate="20181120T083236Z">
        <seg>例えば:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For
further discussion of UTF-8 encoding issues, see the section below on &lt;x7/&gt;&lt;x8/&gt;&lt;x9/&gt;(@ref man-byte-array-literals).</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T082014Z" creationid="hsugawa8651" creationdate="20181120T082014Z">
        <seg>UTF-8に関するさらなる議論については、以下の&lt;x7/&gt;&lt;x8/&gt;&lt;x9/&gt;(@ref man-byte-array-literals)バイト配列リテラル のセクションを参照してください。 </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For &lt;x1/&gt;AbstractArray&lt;x2/&gt; types, defining a &lt;x3/&gt;BroadcastStyle&lt;x4/&gt; supersedes the fallback choice,
&lt;x5/&gt;`Broadcast.DefaultArrayStyle`&lt;x6/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T131802Z" creationid="hsugawa8651" creationdate="20181113T131802Z">
        <seg>&lt;x1/&gt;AbstractArray&lt;x2/&gt;タイプでは、&lt;x3/&gt;BroadcastStyleを定義することによって、フォールバック選択が優先されます。 &lt;x5/&gt;`ブロードキャスト.DefaultArrayStyle'&lt;x6/&gt;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For &lt;x1/&gt;AbstractArrays&lt;x2/&gt; that only support a certain dimensionality, create a subtype of &lt;x3/&gt;Broadcast.AbstractArrayStyle{N}&lt;x4/&gt; (see below).</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T131244Z" creationid="hsugawa8651" creationdate="20181113T131244Z">
        <seg>特定の次元のみをサポートする&lt;x1/&gt;AbstractArrays&lt;x2/&gt;では、&lt;x3/&gt;ブロードキャストのサブタイプを作成します。AbstractArrayStyle{N}&lt;x4/&gt;(以下を参照)。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For &lt;x1/&gt;every&lt;x2/&gt; binary operation like &lt;x3/&gt;^&lt;x4/&gt;, there is a corresponding
"dot" operation &lt;x5/&gt;.^&lt;x6/&gt; that is &lt;x7/&gt;automatically&lt;x8/&gt; defined
to perform &lt;x9/&gt;^&lt;x10/&gt; element-by-element on arrays.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T132457Z" creationid="hsugawa8651" creationdate="20181113T132457Z">
        <seg>&lt;x3/&gt;^&lt;x4/&gt;のように&lt;x1/&gt;のバイナリ演算に対しては、対応するものが存在する。 「ドット」操作&lt;x5/&gt;.^&lt;x6/&gt;は自動的に&lt;x8/&gt;定義され、&lt;x8/&gt;は自動的に&lt;x8/&gt;定義されます 配列上で&lt;x9/&gt;^&lt;x10/&gt;エレメント単位で実行することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For C code accepting
pointers, &lt;x5/&gt;`Ref{T}`&lt;x6/&gt; should generally be used for the types of input arguments, allowing the use
of pointers to memory managed by either Julia or C through the implicit call to &lt;x7/&gt;`Base.cconvert`&lt;x8/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T151443Z" creationid="hsugawa8651" creationdate="20181117T151443Z">
        <seg>Cコードを受け入れるには ポインタ、&lt;x5/&gt;'Ref{T}は、一般的に入力引数のタイプに使用されるべきであり、使用されることができる。 は、&lt;x7/&gt;'Base.チコンベルト'&lt;x8/&gt;への暗黙的な呼び出しを介して、JuliaまたはCによって管理されるメモリへのポインタを示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For a brief but lucid presentation of how floating-point numbers are represented, see John D.
Cook's &lt;x1/&gt;article&lt;x2/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T035316Z" creationid="hsugawa8651" creationdate="20181112T111455Z">
        <seg>浮動小数点数の表現に関するの簡潔かつ明快な説明は、John D. Cookの&lt;x1/&gt;紹介記事&lt;x2/&gt;を参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For a complete example, let's say you have created a type, &lt;x1/&gt;ArrayAndChar&lt;x2/&gt;, that stores an
array and a single character:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T131352Z" creationid="hsugawa8651" creationdate="20181113T131352Z">
        <seg>完全な例では、&lt;x1/&gt;ArrayAndChar&lt;x2/&gt;というタイプを作成し、それを保存するとします。 配列と単一文字:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For a complete list of &lt;x1/&gt;every&lt;x2/&gt; Julia operator's precedence, see the top of this file:
&lt;x3/&gt;`src/julia-parser.scm`&lt;x4/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T030950Z" creationid="hsugawa8651" creationdate="20181114T030950Z">
        <seg>&lt;x2/&gt;ジュリア演算子の優先順位の&lt;x1/&gt;の完全なリストについては、このファイルの一番上を参照してください。 &lt;x3/&gt;`src/julia parser.scm'&lt;x4/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For a handful of other types (including but not limited to
types themselves, functions, special singletons like &lt;x13/&gt;`missing`&lt;x14/&gt; and &lt;x15/&gt;`nothing`&lt;x16/&gt;, and dates),
&lt;x17/&gt;Base.broadcastable&lt;x18/&gt; returns the argument wrapped in a &lt;x19/&gt;Ref&lt;x20/&gt; to act as a 0-dimensional
"scalar" for the purposes of broadcasting.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T131053Z" creationid="hsugawa8651" creationdate="20181113T131053Z">
        <seg>その他の種類(これに限定されるものではないが タイプ自身、関数、&lt;x13/&gt;'missing"&lt;x14/&gt;、&lt;x15/&gt;`nothing"&lt;x15/&gt;のような特別な単一トン、そして日付)などです。 &lt;x17/&gt;Base.broadcastable&lt;x18/&gt;は、&lt;x19/&gt;Ref&lt;x20/&gt;でラップされた引数を返し、0次元として動作します。 ブロードキャストのための「スカラー」。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For a more general way to make all such calls work sensibly, see &lt;x1/&gt;&lt;x2/&gt;&lt;x3/&gt;(@ref conversion-and-promotion).</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T124028Z" creationid="hsugawa8651" creationdate="20181118T124028Z">
        <seg>このような呼び出しをすべて適切に動作させるための一般的な方法は、&lt;x1/&gt;&lt;x2/&gt;&lt;x3/&gt;(@ref変換とプロモーション)を参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For an excellent, in-depth discussion of floating-point numbers and issues of numerical accuracy
encountered when computing with them, see David Goldberg's paper &lt;x1/&gt;What Every Computer Scientist Should Know About Floating-Point Arithmetic&lt;x2/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T035356Z" creationid="hsugawa8651" creationdate="20181112T111503Z">
        <seg>浮動小数点数に関する高度かつ詳細な議論および演算時の数値の精度の問題については、David Goldbergの論文 &lt;x1/&gt;What Every Computer Scientist Should Know About Floating-PointArithmetic&lt;x2/&gt;を参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For an overview of why functions like &lt;x1/&gt;`hypot()`&lt;x2/&gt;, &lt;x3/&gt;`expm1()`&lt;x4/&gt;, and &lt;x5/&gt;`log1p()`&lt;x6/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T074415Z" creationid="hsugawa8651" creationdate="20181120T074415Z">
        <seg>&lt;x1/&gt;`hypot()`&lt;x2/&gt;, &lt;x3/&gt;`expm1()`&lt;x4/&gt; および&lt;x5/&gt;`log1p()`&lt;x6/&gt; などの関数が必要かつ有用な理由については、 </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For an overview of why functions like &lt;x1/&gt;`hypot`&lt;x2/&gt;, &lt;x3/&gt;`expm1`&lt;x4/&gt;, and &lt;x5/&gt;`log1p`&lt;x6/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T100105Z" creationid="hsugawa8651" creationdate="20181118T100105Z">
        <seg>なぜなら、&lt;x1/&gt;'のような関数が、なぜ&lt;x1/&gt;"&lt;x2/&gt;"、&lt;x3/&gt;"、&lt;x3/&gt;、&lt;x5/&gt;"log1p"&lt;x6/&gt;のようなものであるのかの概要である。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For direct C++ interfacing, see the &lt;x1/&gt;Cxx&lt;x2/&gt; package.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T152645Z" creationid="hsugawa8651" creationdate="20181117T152645Z">
        <seg>直接的なC++インターフェイスの場合は、&lt;x1/&gt;Cxx&lt;x2/&gt;パッケージを参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For even more extensive documentation of the history of, rationale for, and issues with floating-point
numbers, as well as discussion of many other topics in numerical computing, see the &lt;x1/&gt;collected writings&lt;x2/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T035516Z" creationid="hsugawa8651" creationdate="20181112T111506Z">
        <seg>より広範囲な歴史や合理性、浮動小数点数の問題に関する文献、およびその他の数値計算に関する議論については、「浮動小数点の父」として知られる William Kahanの&lt;x1/&gt;論文&lt;x2/&gt;を参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example (from
&lt;x11/&gt;base/libc.jl&lt;x12/&gt;) we see the same &lt;x13/&gt;gethostname&lt;x14/&gt;&lt;x15/&gt;`ccall`&lt;x16/&gt; as above, but with the correct
signature for Windows:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T152434Z" creationid="hsugawa8651" creationdate="20181117T152434Z">
        <seg>たとえば &lt;x11/&gt;ベース/libc.jl&lt;x12/&gt;は上記と同じように&lt;x13/&gt;gethostname&lt;x15/&gt;`ccall'&lt;x16/&gt;のように見えますが、正しいものは正しいものです。 Windowsのシグニチャ:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example &lt;x18/&gt;sin&lt;x19/&gt; can be applied to all elements in the vector &lt;x20/&gt;A&lt;x21/&gt;, like so:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T120102Z" creationid="hsugawa8651" creationdate="20181118T120102Z">
        <seg>たとえば、&lt;x18/&gt;sin&lt;x19/&gt;は、&lt;x20/&gt;A&lt;X21/&gt;のベクトル&lt;x20/&gt;のすべての要素に適用できます。これは、次のようになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example &lt;x9/&gt;2^3x&lt;x10/&gt; is parsed as &lt;x11/&gt;2^(3x)&lt;x12/&gt;, and &lt;x13/&gt;2x^3&lt;x14/&gt; is parsed as &lt;x15/&gt;2*(x^3)&lt;x16/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T093824Z" creationid="hsugawa8651" creationdate="20181118T093824Z">
        <seg>例えば&lt;x9/&gt;2^3x&lt;x10/&gt;は&lt;x11/&gt;2^(3x)&lt;x12/&gt;と解析され、&lt;x13/&gt;2x^3&lt;x14/&gt;は&lt;x15/&gt;2*(x^3)&lt;x16/&gt;と構文解析される。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example,</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154603Z" creationid="hsugawa8651" creationdate="20181109T154603Z">
        <seg>たとえば</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example,
&lt;x1/&gt;size(A) == size(B) || throw(DimensionMismatch("size of A not equal to size of B"))&lt;x2/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T124704Z" creationid="hsugawa8651" creationdate="20181118T124704Z">
        <seg>たとえば &lt;x1/&gt;サイズ(A)==サイズ(B)スロー(Bのサイズに等しくないDimensionMismatch("サイズはBの大きさに等しくない"))&lt;x2/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example,
&lt;x11/&gt;[1,2,3] ^ 3&lt;x12/&gt; is not defined, since there is no standard
mathematical meaning to "cubing" a (non-square) array, but
&lt;x13/&gt;[1,2,3] .^ 3&lt;x14/&gt; is defined as computing the elementwise
(or "vectorized") result &lt;x15/&gt;[1^3, 2^3, 3^3]&lt;x16/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T132451Z" creationid="hsugawa8651" creationdate="20181113T132451Z">
        <seg>たとえば &lt;x11/&gt;[1,2,3]^3&lt;x12/&gt;は定義されていません。これは、標準がないためです。 (非正方形の)配列を"cubing"するための数学的意味はあるが &lt;x13/&gt;[1,2,3].^3&lt;x14/&gt;は、要素を計算するために定義されています。 (または"ベクトル化された")結果&lt;x15/&gt;[1^3 2^3 3^3]&lt;x16/&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example,
&lt;x6/&gt;sin.(cos.(X))&lt;x7/&gt; is equivalent to &lt;x8/&gt;broadcast(x -&gt; sin(cos(x)), X)&lt;x9/&gt;, similar to &lt;x10/&gt;[sin(cos(x)) for x in X]&lt;x11/&gt;:
there is only a single loop over &lt;x12/&gt;X&lt;x13/&gt;, and a single array is allocated for the result.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T120137Z" creationid="hsugawa8651" creationdate="20181118T120137Z">
        <seg>たとえば &lt;x6/&gt;sin.(cos.(X))&lt;x7/&gt;は、&lt;x8/&gt;ブロードキャスト(x-&gt;sin(cos(x))、X)&lt;x9/&gt;(X)&lt;x9/&gt;(x)&lt;x9/&gt;(x)に相当します。 &lt;x12/&gt;X&lt;x13/&gt;には1つのループしか存在せず、結果に対して単一の配列が割り当てられます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example,
the following program, when compiled with &lt;x5/&gt;julia -O3&lt;x6/&gt; generates two SIMD addition instructions
(&lt;x7/&gt;addps&lt;x8/&gt;) on x86 systems:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T063653Z" creationid="hsugawa8651" creationdate="20181114T063653Z">
        <seg>たとえば &lt;x5/&gt;julia-O3&lt;x6/&gt;でコンパイルされると、次のプログラムは2つのSIMD付加命令を生成します。 x86システム上での(&lt;x7/&gt;アデプス&lt;x8/&gt;)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, &lt;c0&gt;1&lt;/c0&gt; is an integer literal, while &lt;c1&gt;1.0&lt;/c1&gt; is a floating-point literal; their binary in-memory representations as objects are numeric primitives.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T184442Z" creationid="hsugawa8651" creationdate="20181118T184442Z">
        <seg>たとえば、&lt;c0&gt;1&lt;/c0&gt;は整数リテラルであり、&lt;c1&gt;1.0&lt;/c1&gt;は浮動小数点リテラルです。それらのオブジェクトの、2進数メモリー内表現が、数値プリミティブです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, &lt;x1/&gt;1&lt;x2/&gt; is an integer literal, while &lt;x3/&gt;1.0&lt;x4/&gt; is a floating-point literal; their binary
in-memory representations as objects are numeric primitives.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T032420Z" creationid="hsugawa8651" creationdate="20181109T225041Z">
        <seg>例えば、 &lt;x1/&gt;1&lt;x2/&gt; は整数リテラルですが、&lt;x3/&gt;1.0&lt;x4/&gt; は浮動小数点リテラルです。これらのオブジェクトとしての インメモリ表現が数値プリミティブです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, &lt;x1/&gt;Dict(i =&gt; f(i) for i = 1:10)&lt;x2/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T041750Z" creationid="hsugawa8651" creationdate="20181112T041750Z">
        <seg>例えば、&lt;x1/&gt;Dict(i=&gt;f(i=&gt;f(i)for i=1:10)&lt;x2/&gt;)。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, &lt;x1/&gt;`sqrt`&lt;x2/&gt; behaves differently
when applied to &lt;x3/&gt;-1&lt;x4/&gt; versus &lt;x5/&gt;-1 + 0im&lt;x6/&gt; even though &lt;x7/&gt;-1 == -1 + 0im&lt;x8/&gt;:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T123415Z" creationid="hsugawa8651" creationdate="20181118T123415Z">
        <seg>例えば、&lt;x1/&gt;`sqqrt'&lt;x2/&gt;は異なった振る舞いをします &lt;x3/&gt;-1&lt;x4/&gt;対&lt;x5/&gt;-1+0im&lt;x6/&gt;は、&lt;x7/&gt;-1==-1+0im&lt;x6/&gt;に適用されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, &lt;x1/&gt;f(x::T) where {T} = ccall(:valid, Ptr{T}, (Ptr{T},), x)&lt;x2/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T151238Z" creationid="hsugawa8651" creationdate="20181117T151238Z">
        <seg>例えば、&lt;x1/&gt;f(x::T)は、{T}=ccall(:valid,Ptr{T},(Ptr{T},),x)&lt;x2/&gt;である。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, &lt;x1/&gt;sum(p[i] - q[i] for i=1:n)&lt;x2/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T160647Z" creationid="hsugawa8651" creationdate="20181114T160647Z">
        <seg>For example, &lt;x1/&gt;sum(p[i] - q[i] for i=1:n)&lt;x2/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, &lt;x11/&gt;Any[x, y, z]&lt;x12/&gt; constructs a heterogeneous array that can contain any values.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154704Z" creationid="hsugawa8651" creationdate="20181109T154704Z">
        <seg>たとえば、&lt;x11/&gt;任意の[x,y,z]&lt;x12/&gt;は、任意の値を含むことができる異機種間配列を構成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, &lt;x11/&gt;X .= sin.(Y)&lt;x12/&gt; is equivalent to &lt;x13/&gt;broadcast!(sin, X, Y)&lt;x14/&gt;,
overwriting &lt;x15/&gt;X&lt;x16/&gt; with &lt;x17/&gt;sin.(Y)&lt;x18/&gt; in-place.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T120155Z" creationid="hsugawa8651" creationdate="20181118T120155Z">
        <seg>たとえば、&lt;x11/&gt;X.=sin.(Y)&lt;x12/&gt;は、&lt;x13/&gt;ブロードキャスト!(sin,X,Y)&lt;x14/&gt;に相当します。 &lt;x17/&gt;X&lt;x16/&gt;を&lt;x17/&gt;sinで上書きします。(Y)&lt;x18/&gt;インプレースで上書きします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, &lt;x2/&gt;`SparseMatrixCSC`&lt;x3/&gt; from the &lt;x4/&gt;SparseArrays&lt;x5/&gt; standard
library module, only supports two dimensions, so it just defines
&lt;x6/&gt;getindex(A::SparseMatrixCSC, i::Int, j::Int)&lt;x7/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T083154Z" creationid="hsugawa8651" creationdate="20181113T083154Z">
        <seg>例えば、&lt;x4/&gt;SparseArrays&lt;x5/&gt;の&lt;x4/&gt;は、&lt;x4/&gt;の&lt;x/&gt;から&lt;x/&gt;の範囲である。SparseMatrixCSC ライブラリモジュールは、2つの次元のみをサポートしているため &lt;x6/&gt;getindex(A::SparseMatrixCSC,i::Int,j::Int)&lt;x7/&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, &lt;x3/&gt;`sind(x)`&lt;x4/&gt; computes the sine of &lt;x5/&gt;x&lt;x6/&gt; where &lt;x7/&gt;x&lt;x8/&gt; is specified in degrees.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T074709Z" creationid="hsugawa8651" creationdate="20181118T100127Z">
        <seg>例えば、&lt;x3/&gt;`sind(x)`&lt;x4/&gt; は、角度で指定された &lt;x7/&gt;x&lt;x8/&gt;  の正弦を計算します。 </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, &lt;x5/&gt;0 .&lt; A .&lt; 1&lt;x6/&gt; gives a boolean array whose entries
are true where the corresponding elements of &lt;x7/&gt;A&lt;x8/&gt; are between 0 and 1.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T065217Z" creationid="hsugawa8651" creationdate="20181114T030724Z">
        <seg>例えば、 &lt;x5/&gt;0 .&lt; A .&lt; 1&lt;x6/&gt; は、 &lt;x7/&gt;A&lt;x8/&gt;に 対応する要素が0と1の間に存在し、エントリが真であるブール値配列を返します。。。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, &lt;x5/&gt;round(Int,x)&lt;x6/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T070924Z" creationid="hsugawa8651" creationdate="20181114T031052Z">
        <seg>例えば、&lt;x5/&gt;round(Int,x)&lt;x6/&gt;は</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, &lt;x6/&gt;Dict{String,Int32}("A"=&gt;1, "B"=&gt;2)&lt;x7/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T041747Z" creationid="hsugawa8651" creationdate="20181112T041747Z">
        <seg>たとえば、&lt;x6/&gt;Dict{String,Int32}("A"=&gt;1, "B"=&gt;2)&lt;x7/&gt;を指定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, Fortran subroutines of the form</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T151053Z" creationid="hsugawa8651" creationdate="20181117T151053Z">
        <seg>たとえば、Fortranのサブルーチンは</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, a customized
square root function can be written to automatically call either the real or complex square root
method on demand using &lt;x5/&gt;Exception&lt;x6/&gt;s :</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T124748Z" creationid="hsugawa8651" creationdate="20181118T124748Z">
        <seg>たとえば、カスタマイズされた 平方根関数は、実数または複素数の平方根を自動的に呼び出すように書くことができます。 &lt;x5/&gt;例外&lt;x6/&gt;を使用した要求の方法&lt;x5/&gt;:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, a function defined only
for nonnegative numbers could be written to &lt;x3/&gt;`throw`&lt;x4/&gt; a &lt;x5/&gt;`DomainError`&lt;x6/&gt; if the argument
is negative:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T124627Z" creationid="hsugawa8651" creationdate="20181118T124627Z">
        <seg>たとえば、定義された関数は 負の数が指定された場合、負の数は&lt;x3/&gt;'throw'&lt;x4/&gt;a&lt;x5/&gt;'DomainError&lt;x6/&gt;に書き込まれます。 は否定的です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, a module that can display
PNG images in a window can register this capability with Julia, so that calling &lt;x1/&gt;`display(x)`&lt;x2/&gt; on
types with PNG representations will automatically display the image using the module's window.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T043307Z" creationid="hsugawa8651" creationdate="20181112T043307Z">
        <seg>たとえば、次のようなモジュールを表示することができます。 ウィンドウ内のPNGイメージは、この機能をJuliaに登録することができます。したがって、&lt;x1/&gt;`display(x)`&lt;x2/&gt;を呼び出すことができます。 PNG表示を持つタイプは、モジュールのウィンドウを使用してイメージを自動的に表示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, a recursive factorial routine could be defined like this:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T140643Z" creationid="hsugawa8651" creationdate="20181109T230444Z">
        <seg>たとえば、再帰的な階乗ルーチンは次のように定義できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, a tuple representing an &lt;x1/&gt;__m128&lt;x2/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T151308Z" creationid="hsugawa8651" creationdate="20181117T151308Z">
        <seg>例えば、&lt;x1/&gt;__m128&lt;x2/&gt;を表すタプルは</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, elements might be computed on request
rather than stored.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T160316Z" creationid="hsugawa8651" creationdate="20181109T160316Z">
        <seg>たとえば、要求に基づいて要素を計算することができます。 保存するのではなく。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, for &lt;x4/&gt;CUDA&lt;x5/&gt;, we need to be able to read the thread index:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T152451Z" creationid="hsugawa8651" creationdate="20181117T152451Z">
        <seg>たとえば、&lt;x4/&gt;CUDA&lt;x5/&gt;の場合は、スレッド・インデックスを読み取る必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, if &lt;x1/&gt;A&lt;x2/&gt; is a gigabyte-sized array that you no longer need, you can free the memory
with &lt;x3/&gt;A = nothing&lt;x4/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181110T024646Z" creationid="hsugawa8651" creationdate="20181110T024646Z">
        <seg>たとえば、&lt;x1/&gt;A&lt;x2/&gt;が必要なくなったギガバイトサイズのアレイである場合は、メモリを解放することができます。 &lt;x3/&gt;A=何もありません&lt;x4/&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, if a C library declared a proper string type and returned a pointer to it:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T151213Z" creationid="hsugawa8651" creationdate="20181117T151213Z">
        <seg>たとえば、Cライブラリが適切な文字列型を宣言し、そのポインタへのポインタを返した場合、次のようになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, if you compute &lt;x13/&gt;2 .* A.^2 .+ sin.(A)&lt;x14/&gt; (or
equivalently &lt;x15/&gt;@.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T132550Z" creationid="hsugawa8651" creationdate="20181113T132550Z">
        <seg>たとえば、&lt;x13/&gt;2.*A.^2.+sin.(A)&lt;x14/&gt;(または 等価的に&lt;x15/&gt;@。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, if you define &lt;x1/&gt;⊗(A,B) = kron(A,B)&lt;x2/&gt; to give a convenient
infix syntax &lt;x3/&gt;A ⊗ B&lt;x4/&gt; for Kronecker products (&lt;x5/&gt;`kron`&lt;x6/&gt;), then
&lt;x7/&gt;[A,B] .⊗ [C,D]&lt;x8/&gt; will compute &lt;x9/&gt;[A⊗C, B⊗D]&lt;x10/&gt; with no additional coding.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T132636Z" creationid="hsugawa8651" creationdate="20181113T132636Z">
        <seg>たとえば、&lt;x1/&gt;(A,B)=kon(A,B)&lt;x2/&gt;を定義して便利な値を指定するとします。 infix syntax&lt;x3/&gt;A∩B&lt;x4/&gt;Kronecker製品の場合(&lt;x5/&gt;kon'&lt;x6/&gt;)、次に &lt;x7/&gt;[A,B].0.23[C,D]&lt;x8/&gt;は、追加符号化なしで&lt;x9/&gt;[AúC]&lt;x10/&gt;を計算する。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, if you have &lt;x7/&gt;f(x,y) = 3x + 4y&lt;x8/&gt;, then &lt;x9/&gt;f.(pi,A)&lt;x10/&gt; will return
a new array consisting of &lt;x11/&gt;f(pi,a)&lt;x12/&gt; for each &lt;x13/&gt;a&lt;x14/&gt; in &lt;x15/&gt;A&lt;x16/&gt;, and &lt;x17/&gt;f.(vector1,vector2)&lt;x18/&gt; will return
a new vector consisting of &lt;x19/&gt;f(vector1[i],vector2[i])&lt;x20/&gt; for each index &lt;x21/&gt;i&lt;x22/&gt; (throwing an exception
if the vectors have different length).</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T120119Z" creationid="hsugawa8651" creationdate="20181118T120119Z">
        <seg>たとえば、&lt;x7/&gt;f(x,y)=3x+4y&lt;x8/&gt;の場合、&lt;x9/&gt;f.(pi,A)&lt;x10/&gt;は返されます。 &lt;x15/&gt;a&lt;x16/&gt;の&lt;x13/&gt;a&lt;x14/&gt;の&lt;x11/&gt;f(pi,a)&lt;x12/&gt;で構成される新しい配列であり、&lt;x17/&gt;f.(vector1,vector2)&lt;x18/&gt;は &lt;x19/&gt;f(vector1[i],vector2[i])&lt;x20/&gt;for each index&lt;X21/&gt;i&lt;x22/&gt;(例外をスローする)で構成される新しいベクトル ベクトルの長さが異なる場合。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, it enables
accessing the diagonal elements from the first "page" of &lt;x5/&gt;A&lt;x6/&gt; from above:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T155653Z" creationid="hsugawa8651" creationdate="20181109T155653Z">
        <seg>たとえば 上からの&lt;x5/&gt;A&lt;x6/&gt;の最初の「ページ」からの対角線要素へのアクセス</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, it is not clear whether &lt;x1/&gt;1.+x&lt;x2/&gt; means &lt;x3/&gt;1.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T132644Z" creationid="hsugawa8651" creationdate="20181113T132644Z">
        <seg>例えば、&lt;x1/&gt;1.+x&lt;x2/&gt;が&lt;x3/&gt;1を意味するかどうかは明らかではない。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, let's say you want to add a constructor method for
&lt;x1/&gt;Foo&lt;x2/&gt; objects that takes only one argument and uses the given value for both the &lt;x3/&gt;bar&lt;x4/&gt; and &lt;x5/&gt;baz&lt;x6/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T155710Z" creationid="hsugawa8651" creationdate="20181117T155710Z">
        <seg>たとえば、次のようにコンストラクタメソッドを追加するとします。 &lt;x1/&gt;Foo&lt;x2/&gt;オブジェクトは1つの引数をとり、&lt;x3/&gt;bar&lt;x4/&gt;と&lt;x5/&gt;baz&lt;x6/&gt;の両方で指定された値を使用します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, say we define a type that stores a vector along with an accurate representation of
its sum:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T124242Z" creationid="hsugawa8651" creationdate="20181118T124242Z">
        <seg>例えば、正確な表現とともにベクトルを格納するタイプを定義するとします。 その合計:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, suppose one wants to declare a type that holds a pair of real numbers, subject to
the constraint that the first number is not greater than the second one.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T155741Z" creationid="hsugawa8651" creationdate="20181117T155741Z">
        <seg>たとえば、実数のペアを保持するタイプを宣言する場合は、次のように指定します。 最初の数値が2番目の数値より大きい制約がないことを示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, the &lt;a0&gt;&lt;c1&gt;sqrt()&lt;/c1&gt;&lt;/a0&gt; function throws a &lt;a2&gt;&lt;c3&gt;DomainError&lt;/c3&gt;&lt;/a2&gt; if applied to a negative real value:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T143348Z" creationid="hsugawa8651" creationdate="20181119T143348Z">
        <seg>たとえば、負の実数値に &lt;a0&gt;&lt;c1&gt;sqrt()&lt;/c1&gt;&lt;/a0&gt; 関数を適用すると、&lt;a2&gt;&lt;c3&gt;DomainError&lt;/c3&gt;&lt;/a2&gt; が投げられます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, the &lt;x1/&gt;LegacyStrings.jl&lt;x2/&gt; package
implements &lt;x3/&gt;UTF16String&lt;x4/&gt; and &lt;x5/&gt;UTF32String&lt;x6/&gt; types.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T081939Z" creationid="hsugawa8651" creationdate="20181120T081939Z">
        <seg>例えば、&lt;x1/&gt;LegacyStrings.jl&lt;x2/&gt; パッケージは  &lt;x3/&gt;UTF16String&lt;x4/&gt; および &lt;x5/&gt;UTF32String&lt;x6/&gt;型を実装しています。 </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, the &lt;x1/&gt;`sqrt`&lt;x2/&gt; function throws a &lt;x3/&gt;`DomainError`&lt;x4/&gt; if applied to a negative
real value:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T124610Z" creationid="hsugawa8651" creationdate="20181118T124610Z">
        <seg>例えば、&lt;x1/&gt;"sqqrt"&lt;x2/&gt;関数は、負に印加された場合、&lt;x/&gt;"DomainError&lt;x4/&gt;をスローする。 実価値:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, the &lt;x7/&gt;`searchsorted`&lt;x8/&gt; function uses this convention to indicate
the insertion point of a value not found in a sorted array:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T155312Z" creationid="hsugawa8651" creationdate="20181109T155312Z">
        <seg>たとえば、&lt;x7/&gt;'のセアルチゾルタド&lt;x8/&gt;関数は、この規則を使用して ソートされた配列に存在しない値の挿入点です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, the code above will not
work on hosts without AVX support.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T151336Z" creationid="hsugawa8651" creationdate="20181117T151336Z">
        <seg>たとえば、上記のコードは AVXサポートのないホストでの作業を行います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, the following call:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T150602Z" creationid="hsugawa8651" creationdate="20181117T150602Z">
        <seg>たとえば、次の呼び出しを行います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, the following code generates a function call where the number of arguments is
determined programmatically:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T115438Z" creationid="hsugawa8651" creationdate="20181118T115438Z">
        <seg>たとえば、次のコードは、引数の数が指定された関数呼び出しを生成します。 プログラムで決定されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, the following definition supports the negation of ranges:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T131622Z" creationid="hsugawa8651" creationdate="20181113T131622Z">
        <seg>たとえば、次の定義は範囲の否定をサポートしています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, the following expression
sums a series without allocating memory:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154929Z" creationid="hsugawa8651" creationdate="20181109T154929Z">
        <seg>たとえば、次の式を指定します。 は、メモリを割り当てずに連続した値を加算します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, the result of &lt;x5/&gt;A[2, I, 3]&lt;x6/&gt; is an
array with size &lt;x7/&gt;size(I)&lt;x8/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T160817Z" creationid="hsugawa8651" creationdate="20181114T160817Z">
        <seg>たとえば、&lt;x5/&gt;A[2,I,3]&lt;x6/&gt;の結果は size&lt;x7/&gt;サイズ(I)&lt;x8/&gt;の配列。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, the sparse array code has the following definitions:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T131841Z" creationid="hsugawa8651" creationdate="20181113T131841Z">
        <seg>たとえば、疎な配列コードには次の定義があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, the variable name &lt;c0&gt;δ&lt;/c0&gt; can be entered by typing &lt;c1&gt;\delta&lt;/c1&gt;-&lt;e2&gt;tab&lt;/e2&gt;, or even &lt;c3&gt;α̂₂&lt;/c3&gt; by &lt;c4&gt;\alpha&lt;/c4&gt;-&lt;e5&gt;tab&lt;/e5&gt;-&lt;c6&gt;\hat&lt;/c6&gt;- &lt;e7&gt;tab&lt;/e7&gt;-&lt;c8&gt;\_2&lt;/c8&gt;-&lt;e9&gt;tab&lt;/e9&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T032829Z" creationid="hsugawa8651" creationdate="20181119T032829Z">
        <seg>例えば、 変数名 &lt;c0&gt;δ&lt;/c0&gt; は、&lt;c1&gt;\delta&lt;/c1&gt;-&lt;e2&gt;tab&lt;/e2&gt; とすることで入力できます。 また、&lt;c3&gt; α̂₂&lt;/c3&gt; は、&lt;c4&gt;\alpha&lt;/c4&gt;-&lt;e5&gt;tab&lt;/e5&gt;-&lt;c6&gt;\hat&lt;/c6&gt;-&lt;e7&gt;tab&lt;/e7&gt;-&lt;c8&gt;\_2&lt;/c8&gt;-&lt;e9&gt;tab&lt;/e9&gt; とすることで入力できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, there's a formula to compute the sum of squares, so
we can override the generic iterative version with a more performant solution:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T112738Z" creationid="hsugawa8651" creationdate="20181112T112738Z">
        <seg>たとえば、2乗の合計を計算するための数式があります。 汎用的な反復バージョンをより効率的なソリューションでオーバーライドすることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, this definition:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T023053Z" creationid="hsugawa8651" creationdate="20181120T022934Z">
        <seg>例として、この定義を見てみましょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, this is used to convert an &lt;x4/&gt;Array&lt;x5/&gt; of objects (e.g. strings) to an array of pointers.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T150606Z" creationid="hsugawa8651" creationdate="20181117T150606Z">
        <seg>たとえば、これは、オブジェクトの&lt;x4/&gt;配列&lt;x5/&gt;をポインタの配列に変換するために使用されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, to call the &lt;x4/&gt;getenv&lt;x5/&gt; function to get a pointer to
the value of an environment variable, one makes a call like this:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T224039Z" creationid="hsugawa8651" creationdate="20181109T224039Z">
        <seg>たとえば、&lt;x4/&gt;getenv&lt;x5/&gt;関数を呼び出してポインタを取得するには、次のように指定します。 環境変数の値は、次のような呼び出しを行います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, to just print the
arguments given to a script, you could do this:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T092013Z" creationid="hsugawa8651" creationdate="20181109T224341Z">
        <seg>例えば以下のようにすることで、スクリプトに渡された引数を単純に出力することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, to just print the arguments given to a
script, you could do this:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T084523Z" creationid="hsugawa8651" creationdate="20181118T084523Z">
        <seg>例えば以下のようにすることで、スクリプトに渡された引数を単純に出力することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, to just print the arguments given to a script, you could do this:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T173620Z" creationid="hsugawa8651" creationdate="20181118T173620Z">
        <seg>例えば以下のようにすることで、スクリプトに渡された引数を単純に出力することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, to match C prototypes of the form:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T153924Z" creationid="hsugawa8651" creationdate="20181109T153924Z">
        <seg>たとえば、フォームのCプロトタイプに一致させるには、次のようにします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, we could have requested
the result in single precision by writing:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154859Z" creationid="hsugawa8651" creationdate="20181109T154859Z">
        <seg>例えば 以下のように記述することによって、単精度での結果が得られます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, when &lt;x5/&gt;T&lt;x6/&gt; is &lt;x7/&gt;`Int32`&lt;x8/&gt;, we would like &lt;x9/&gt;S&lt;x10/&gt; to
be &lt;x11/&gt;`Int64`&lt;x12/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T124252Z" creationid="hsugawa8651" creationdate="20181118T124252Z">
        <seg>例えば、&lt;x5/&gt;T&lt;x6/&gt;が&lt;x7/&gt;"Int32"&lt;x8/&gt;である場合には、&lt;x9/&gt;S&lt;x10/&gt;であることが望ましい。 &lt;x11/&gt;`Int64/&gt;であること。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, writing &lt;x3/&gt;x += 3&lt;x4/&gt; is equivalent to
writing &lt;x5/&gt;x = x + 3&lt;x6/&gt;:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T063911Z" creationid="hsugawa8651" creationdate="20181113T132344Z">
        <seg>例えば、 &lt;x3/&gt;x += 3&lt;x4/&gt;  と記載することで&lt;x5/&gt;x = x + 3&lt;x6/&gt; と書くのと等価です。:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, you might look up the function via &lt;x1/&gt;dlsym&lt;x2/&gt;,
then cache it in a shared reference for that session.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T152330Z" creationid="hsugawa8651" creationdate="20181117T152330Z">
        <seg>たとえば、&lt;x1/&gt;dlsym&lt;x2/&gt;を使用して関数を検索することができます。 そのセッションの共有参照にキャッシュされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T022813Z" creationid="hsugawa8651" creationdate="20181110T025044Z">
        <seg>例えば：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For fun, try inserting a &lt;x9/&gt;println("mycompare($a, $b)")&lt;x10/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T150543Z" creationid="hsugawa8651" creationdate="20181117T150543Z">
        <seg>楽しみには、&lt;x9/&gt;println("ミコンパレ($a, $b)")&lt;x10/&gt;を挿入してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For further discussion of how these non-finite floating-point values are ordered with respect
to each other and other floats, see &lt;x1/&gt;Numeric Comparisons&lt;x2/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T034052Z" creationid="hsugawa8651" creationdate="20181112T110845Z">
        <seg>どのように非有限浮動小数点値がお互いに、およびその他の浮動値に対して順序付けられているかについては、 &lt;x1/&gt;Numeric Comparisons&lt;x2/&gt;.を参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For further discussion of how these non-finite floating-point values are ordered with respect to each other and other floats, see &lt;a0&gt;Numeric Comparisons&lt;/a0&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T190801Z" creationid="hsugawa8651" creationdate="20181118T190801Z">
        <seg>これらの非有限浮動小数点値がどのように並べられるかについてのさらなる議論については、次の通りである。 お互いや他のフロートについては、&lt;a0&gt;Numeric Comparisons&lt;/a0&gt;を参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For instance, consider this C routine that uses AVX intrinsics:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T151313Z" creationid="hsugawa8651" creationdate="20181117T151313Z">
        <seg>たとえば、AVX組み込み関数を使用するCルーチンは次のようになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For instance, we would generally write &lt;x1/&gt;-x + 2&lt;x2/&gt; to reflect that first &lt;x3/&gt;x&lt;x4/&gt; gets negated,
and then &lt;x5/&gt;2&lt;x6/&gt; is added to that result.)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T063607Z" creationid="hsugawa8651" creationdate="20181113T132223Z">
        <seg>例えば、通常 &lt;x1/&gt;-x + 2&lt;x2/&gt; と記載しますが、これは最初に &lt;x3/&gt;x&lt;x4/&gt; を負の数にし、その後 &lt;x5/&gt;2&lt;x6/&gt; をその結果に足します。）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For instance, when developing C code for use with Julia, one may need to compile,
call the C code from Julia, then close the library, make an edit, recompile,
and load in the new changes.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T152355Z" creationid="hsugawa8651" creationdate="20181117T152355Z">
        <seg>たとえば、Juliaと共に使用するCコードを作成する場合は、コンパイルする必要があります。 Cコードをジュリアから呼び出して、ライブラリを閉じ、編集を行い、再コンパイルします。 新しい変更にロードされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For large scale numerical problems, speed
always has been, continues to be, and probably always will be crucial:
the amount of data being processed has easily kept pace with Moore's Law
over the past decades.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T183920Z" creationid="hsugawa8651" creationdate="20181118T183920Z">
        <seg>大規模数値計算問題では計算速度はこれまでもこれからも、常に重大な問題です。 処理されるデータ量は過去数十年にわたってムーアの法則にしたがって増え続けています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For large scale numerical problems, speed
always has been, continues to be, and probably always will be crucial:
the amount of data being processed has easily kept pace with Moore’s Law
over the past decades.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T082547Z" creationid="hsugawa8651" creationdate="20181118T082547Z">
        <seg>大規模数値計算問題では計算速度はこれまでもこれからも、常に重大な問題です。 処理されるデータ量は過去数十年にわたってムーアの法則にしたがって増え続けています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For large scale numerical problems, speed always has been, continues to be, and probably always will be crucial: the amount of data being processed has easily kept pace with Moore's Law over the past decades.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T182652Z" creationid="hsugawa8651" creationdate="20181118T182652Z">
        <seg>大規模数値計算問題では計算速度はこれまでもこれからも、常に重大な問題です。 処理されるデータ量は過去数十年にわたってムーアの法則にしたがって増え続けています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For many types, forming new objects by binding their field values together is all that is ever
needed to create instances.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T155640Z" creationid="hsugawa8651" creationdate="20181117T155640Z">
        <seg>多くのタイプでは、フィールド値を結合することで新しいオブジェクトを作成することは、すべてのタイプであり インスタンスを作成する必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For more details on defining custom
&lt;x16/&gt;AbstractArray&lt;x17/&gt; implementations, see the &lt;x18/&gt;&lt;x19/&gt;&lt;x20/&gt;(@ref man-interface-array).</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T160400Z" creationid="hsugawa8651" creationdate="20181109T160400Z">
        <seg>カスタム定義の詳細については &lt;x16/&gt;AbstractArray&lt;x17/&gt;実装を参照してください。&lt;x18/&gt;&lt;x19/&gt;&lt;x20/&gt;(@ref man interface array)を参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For more details on how to pass callbacks to C libraries, see this &lt;x1/&gt;blog post&lt;x2/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T152640Z" creationid="hsugawa8651" creationdate="20181117T152640Z">
        <seg>Cライブラリへのコールバックを渡す方法の詳細については、この&lt;x1/&gt;ブログ記事&lt;x2/&gt;を参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For more details, see &lt;x3/&gt;&lt;x4/&gt;&lt;x5/&gt;(@ref writing-binary-broadcasting-rules).</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T131253Z" creationid="hsugawa8651" creationdate="20181113T131253Z">
        <seg>詳細は、&lt;x3/&gt;&lt;x4/&gt;&lt;x5/&gt;(@ref writing binary broadcasting rules)を参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For more information, please see the &lt;x1/&gt;LLVM Language Reference&lt;x2/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T152445Z" creationid="hsugawa8651" creationdate="20181117T152445Z">
        <seg>詳細については、「&lt;x1/&gt;LLVM言語リファレンス&lt;x2/&gt;」を参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For more information, see
&lt;x8/&gt;&lt;x9/&gt;&lt;x10/&gt;(@ref man-custom-indices).</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T083421Z" creationid="hsugawa8651" creationdate="20181113T083421Z">
        <seg>詳細については、を参照してください。 &lt;x8/&gt;&lt;x9/&gt;&lt;x10/&gt;(@ref manカスタムインデックス)。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For most computational purposes, arrays should contain
objects of a more specific type, such as &lt;x3/&gt;`Float64`&lt;x4/&gt; or &lt;x5/&gt;`Int32`&lt;x6/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T064325Z" creationid="hsugawa8651" creationdate="20181109T154148Z">
        <seg>ほとんどの計算目的では、アレイは &lt;x3/&gt;`Float64'&lt;x4/&gt;または&lt;x5/&gt;`Int32/&gt;のようなより特定のタイプのオブジェクト。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For non-numeric values, and for fewer or more than two arguments, the function &lt;x1/&gt;f&lt;x2/&gt; remains undefined,
and applying it will still result in a &lt;x3/&gt;`MethodError`&lt;x4/&gt;:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T013906Z" creationid="hsugawa8651" creationdate="20181120T013906Z">
        <seg>数値以外の値や2つ以上の引数の場合、関数fは未定義のままであり、そのまま適用すると次のようにMethodErrorがおこります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For other types, &lt;x1/&gt;isequal()&lt;x2/&gt; defaults to calling &lt;x3/&gt;`==()`&lt;x4/&gt;, so if you want to define
equality for your own types then you only need to add a &lt;x5/&gt;`==()`&lt;x6/&gt; method.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T064753Z" creationid="hsugawa8651" creationdate="20181120T064753Z">
        <seg>その他の型については、 &lt;x1/&gt;isequal()&lt;x2/&gt;  はデフォルトで &lt;x3/&gt;`==()`&lt;x4/&gt;を呼び出すため、 使用している型の等式を定義したい場合は、&lt;x5/&gt;`==()`&lt;x6/&gt; メソッドを追加することで定義することができます。 </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For other types, &lt;x1/&gt;isequal&lt;x2/&gt; defaults to calling &lt;x3/&gt;`==`&lt;x4/&gt;, so if you want to define
equality for your own types then you only need to add a &lt;x5/&gt;`==`&lt;x6/&gt; method.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T030654Z" creationid="hsugawa8651" creationdate="20181114T030654Z">
        <seg>他のタイプについては、&lt;x1/&gt;等価&lt;x2/&gt;はデフォルトで&lt;x3/&gt;==`&lt;x4/&gt;を呼び出しますので、もしあなたがそれを定義する場合には 独自のタイプに対しては、&lt;x5/&gt;'==`&lt;x6/&gt;のメソッドを追加する必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For reasons that will
become clear very shortly, additional constructor methods declared as normal methods like this
are called &lt;x1/&gt;outer&lt;x2/&gt; constructor methods.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T155727Z" creationid="hsugawa8651" creationdate="20181117T155727Z">
        <seg>理由は 次のようなコンストラクタメソッドは、ごく短時間で明確になります。 は、&lt;x1/&gt;外部&lt;x2/&gt;コンストラクタ・メソッドと呼ばれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For some types, the machinery to "fuse" operations across nested levels of broadcasting
is not available or could be done more efficiently incrementally.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T131558Z" creationid="hsugawa8651" creationdate="20181113T131558Z">
        <seg>ある種のタイプでは、ネストされた放送レベルでの動作を「融合」するための機械が必要です。 は使用できないか、より効率的に段階的に実行される可能性があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For specializing broadcast on custom types, see</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T150018Z" creationid="hsugawa8651" creationdate="20181117T150018Z">
        <seg>カスタム・タイプでのブロードキャストの特殊化については</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For the &lt;x1/&gt;Squares&lt;x2/&gt; iterable above, we can easily compute the &lt;x3/&gt;i&lt;x4/&gt;th element of the sequence by squaring
it.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T113043Z" creationid="hsugawa8651" creationdate="20181112T113043Z">
        <seg>上記の&lt;x1/&gt;の2乗&lt;x2/&gt;iterable上では、シーケンスの&lt;x3/&gt;i&lt;x4/&gt;番目の要素を2乗することによって簡単に計算することができます。 そうです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For the sake of clarity,
let's try a two-way version first:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T230122Z" creationid="hsugawa8651" creationdate="20181109T230122Z">
        <seg>わかりやすくするために まず2ウェイのバージョンを試してみましょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For the sake of clarity, let's try a two-way version first:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T135356Z" creationid="hsugawa8651" creationdate="20181119T135356Z">
        <seg>わかりやすい二分岐版をまずみてみましょう：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For these problems, one needs &lt;x1/&gt;inner&lt;x2/&gt; constructor methods.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T155734Z" creationid="hsugawa8651" creationdate="20181117T155734Z">
        <seg>これらの問題に対しては、&lt;x1/&gt;内部の&lt;x2/&gt;コンストラクタのメソッドが必要です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For this reason, &lt;x4/&gt;eval&lt;x5/&gt; is typically only used to form top-level definitions, for example
when wrapping libraries that contain many similar functions.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T152313Z" creationid="hsugawa8651" creationdate="20181117T152313Z">
        <seg>このため、&lt;x4/&gt;eval&lt;x5/&gt;は通常、最上位レベルの定義を形成するためにのみ使用されます。たとえば、次のようになります。 は、多くの類似する関数を含むライブラリをラップするときに使用されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For tools to create C++
bindings, see the &lt;x3/&gt;CxxWrap&lt;x4/&gt; package.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T152647Z" creationid="hsugawa8651" creationdate="20181117T152647Z">
        <seg>C++を作成するためのツールについて バインディングは、&lt;x3/&gt;CxxWrap&lt;x4/&gt;パッケージを参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For translating a C argument list to Julia:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T151502Z" creationid="hsugawa8651" creationdate="20181117T151502Z">
        <seg>C引数リストをJuliaに変換するには、次の手順に従います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For translating a C return type to Julia:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T151754Z" creationid="hsugawa8651" creationdate="20181117T151754Z">
        <seg>Cリターン・タイプをジュリアに変換するには:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Fortran name</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T150849Z" creationid="hsugawa8651" creationdate="20181117T150849Z">
        <seg>Fortran名</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Fortunately, modern language design and compiler techniques
make it possible to mostly eliminate the performance trade-off and
provide a single environment productive enough for prototyping and
efficient enough for deploying performance-intensive applications.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T081421Z" creationid="hsugawa8651" creationdate="20181118T081421Z">
        <seg> 幸い、最近の言語設計やコンパイラの進歩によって、性能の低下を避けつつ、「生産的なプロトタイピング」と「高性能なアプリケーションの効率的なデプロイ」の両方をひとつの環境で提供することが可能になりました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Fortunately, modern language design and compiler techniques make it possible to mostly eliminate the performance trade-off and provide a single environment productive enough for prototyping and efficient enough for deploying performance-intensive applications.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T182312Z" creationid="hsugawa8651" creationdate="20181118T182312Z">
        <seg> 幸い、最近の言語設計やコンパイラの進歩によって、性能の低下を避けつつ、「生産的なプロトタイピング」と「高性能なアプリケーションの効率的なデプロイ」の両方をひとつの環境で提供することが可能になりました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Fortunately, most Julia users can remain oblivious to the technical details of code loading and simply use the built-in package manager to add a package &lt;x1/&gt;X&lt;x2/&gt; to the appropriate project and manifest files and then write &lt;x3/&gt;import X&lt;x4/&gt; to load &lt;x5/&gt;X&lt;x6/&gt; without a further thought.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T121446Z" creationid="hsugawa8651" creationdate="20181118T121446Z">
        <seg>幸いなことに、ほとんどのJuliaユーザーは、コード読み込みの技術的な詳細を忘れ、組み込みパッケージ・マネージャーを使用して、適切なプロジェクトやマニフェスト・ファイルにパッケージ&lt;x x/&gt;x2/&gt;を追加して、&lt;x5/&gt;x&lt;x6/&gt;をロード&lt;x5/&gt;X&lt;x6/&gt;に読み込むことはできません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Fortunately, the above awkward idiom is unnecessary
for iterating through the characters in a string, since you can just use the string as an iterable
object, no exception handling required:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T081856Z" creationid="hsugawa8651" creationdate="20181120T081856Z">
        <seg>幸運なことに反復可能なオブジェクトとして文字列を使うことができ、それにより例外処理が不要になるため、 上の例のような冗長的な記述は不要です。:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Fortunately, there is an easy solution: call the function using &lt;x1/&gt;`Base.invokelatest`&lt;x2/&gt;:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T021242Z" creationid="hsugawa8651" creationdate="20181120T021242Z">
        <seg>幸いにも、簡単な解決策があって、Base.invokelatestを使って関数を呼び出せば、いいのです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Fractions</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T065704Z" creationid="hsugawa8651" creationdate="20181114T030828Z">
        <seg>分数</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Free and open source (&lt;a0&gt;MIT
licensed&lt;/a0&gt;)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T082628Z" creationid="hsugawa8651" creationdate="20181118T082628Z">
        <seg>フリーかつオープンソース（ MITライセンス ）
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Free and open source (&lt;a0&gt;MIT licensed&lt;/a0&gt;)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T182703Z" creationid="hsugawa8651" creationdate="20181118T182703Z">
        <seg>フリーかつオープンソース（ MITライセンス ）
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>From these definitions, one obtains the following behavior:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T131454Z" creationid="hsugawa8651" creationdate="20181113T131454Z">
        <seg>これらの定義から、次の動作が得られます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>From within the function, you cannot "unbind" &lt;x2/&gt;x&lt;x3/&gt; from this Array,
but you can change its content.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181110T025041Z" creationid="hsugawa8651" creationdate="20181110T025041Z">
        <seg>この機能の中からは、この配列から&lt;x2/&gt;x&lt;x3/&gt;の"バインド解除"はできません。 コンテンツを変更することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Fully implemented by:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T041624Z" creationid="hsugawa8651" creationdate="20181112T041624Z">
        <seg>Fully implemented by:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Function</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T134537Z" creationid="hsugawa8651" creationdate="20181117T134537Z">
        <seg>関数</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Function arguments themselves act as
new variable &lt;x1/&gt;bindings&lt;x2/&gt; (new locations that can refer to values), but the values they refer to
are identical to the passed values.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T125411Z" creationid="hsugawa8651" creationdate="20181110T025708Z">
        <seg>関数の引数は、新しい変数を &lt;x1/&gt;束縛&lt;x2/&gt; (新しい値を参照)したように振る舞いますが、参照先は渡された値と同一です。 </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Function parameters can also be used to constrain the number of arguments that may be supplied
to a "varargs" function (&lt;x1/&gt;Varargs Functions&lt;x2/&gt;).</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T022730Z" creationid="hsugawa8651" creationdate="20181120T022723Z">
        <seg>関数のパラメータは、 "varargs"関数(可変引数関数)が受け取る引数の数を制限するためにも使用できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Functions are grouped by topic below.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T150046Z" creationid="hsugawa8651" creationdate="20181110T041654Z">
        <seg>関数は以下のトピックでグループ化されています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Functions in Julia are &lt;x1/&gt;first-class objects&lt;x2/&gt;:
they can be assigned to variables, and called using the standard function call syntax from the
variable they have been assigned to.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T130437Z" creationid="hsugawa8651" creationdate="20181120T130437Z">
        <seg>Julia　において、関数は、 &lt;x1/&gt;第一級オブジェクト&lt;x2/&gt;です: 関数は、変数に代入したり、代入した変数から標準的な構文で呼び出したりできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Functions on &lt;x1/&gt;Expr&lt;x2/&gt;essions</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T165318Z" creationid="hsugawa8651" creationdate="20181118T165318Z">
        <seg>&lt;x1/&gt;Expr&lt;x2/&gt;essions上の関数</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Functions that write to their arguments have names that end in &lt;c0&gt;!&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T034021Z" creationid="hsugawa8651" creationdate="20181119T033810Z">
        <seg>引数に書き込む関数は、名前の末尾を&lt;c0&gt;!&lt;/c0&gt;とします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Functions&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T000711Z" creationid="hsugawa8651" creationdate="20181120T000711Z">
        <seg>関数&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Further Reading</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T120209Z" creationid="hsugawa8651" creationdate="20181118T120209Z">
        <seg>さらに読む</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Furthermore, "dotted" updating operators like &lt;x1/&gt;a .+= b&lt;x2/&gt; (or &lt;x3/&gt;@.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T132626Z" creationid="hsugawa8651" creationdate="20181113T132626Z">
        <seg>さらに、「ドット」の更新演算子は、&lt;x1/&gt;a.+=b&lt;x2/&gt;(または&lt;x3/&gt;@)のようなものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Garbage Collection Safety</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T152223Z" creationid="hsugawa8651" creationdate="20181117T152223Z">
        <seg>ゴミ回収の安全</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>General Collections</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T041620Z" creationid="hsugawa8651" creationdate="20181112T041620Z">
        <seg>General Collections</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>General I/O</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T043209Z" creationid="hsugawa8651" creationdate="20181112T043209Z">
        <seg>General I/O</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>General Number Functions and Constants</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T044715Z" creationid="hsugawa8651" creationdate="20181112T044715Z">
        <seg>General Number Functions and Constants</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Generated functions can achieve high efficiency at run time, but come with a compile time cost:
a new function body must be generated for every combination of concrete argument types.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T032341Z" creationid="hsugawa8651" creationdate="20181116T032341Z">
        <seg>生成された関数は、実行時に高い効率を実現できますが、コンパイル時にはコストがかかります。 具体的な引数型の組合せごとに、新しい関数本体を生成する必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Generated values can be filtered using the &lt;x1/&gt;if&lt;x2/&gt; keyword:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T155050Z" creationid="hsugawa8651" creationdate="20181109T155050Z">
        <seg>生成された値は、&lt;x2/&gt;キーワードの場合は&lt;x1/&gt;を使用してフィルタできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Generator Expressions</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T150431Z" creationid="hsugawa8651" creationdate="20181117T150431Z">
        <seg>ジェネレータの式</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Generators are implemented via inner functions.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T150438Z" creationid="hsugawa8651" creationdate="20181117T150438Z">
        <seg>ジェネレータは内部関数によって実装されています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Generators are implemented via inner functions. Just like
inner functions used elsewhere in the language, variables from the enclosing scope can be
"captured" in the inner function.  For example, &lt;x1/&gt;sum(p[i] - q[i] for i=1:n)&lt;x2/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T134820Z" creationid="hsugawa8651" creationdate="20181117T134820Z">
        <seg>ジェネレータは内部機能によって実装されています。 言語で他の場所で使用される内部関数、囲みスコープからの変数は、次のようになります。 "捕獲された"内部関数では、例えば&lt;x1/&gt;sum(p[i]-q[i]for i=1:n)&lt;x2/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Getting Started</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T032029Z" creationid="hsugawa8651" creationdate="20181120T032029Z">
        <seg>Juliaをはじめる</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Getting Started&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T234345Z" creationid="hsugawa8651" creationdate="20181119T234345Z">
        <seg>はじめよう&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Given a &lt;x1/&gt;Ptr{T}&lt;x2/&gt;, the contents of type &lt;x3/&gt;T&lt;x4/&gt; can generally be copied from the referenced memory
into a Julia object using &lt;x5/&gt;unsafe_load(ptr, [index])&lt;x6/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T152527Z" creationid="hsugawa8651" creationdate="20181117T152527Z">
        <seg>&lt;x1/&gt;Ptr{T}&lt;x2/&gt;を与えられると、タイプ&lt;x3/&gt;T&lt;x4/&gt;の内容は、一般的に参照されたメモリからコピーされる。 &lt;x5/&gt;unsafe_load(ptr,[index])&lt;x6/&gt;を使用してジュリアオブジェクトに変換します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Given a dictionary &lt;x1/&gt;D&lt;x2/&gt;, the syntax &lt;x3/&gt;D[x]&lt;x4/&gt; returns the value of key &lt;x5/&gt;x&lt;x6/&gt; (if it exists) or throws
an error, and &lt;x7/&gt;D[x] = y&lt;x8/&gt; stores the key-value pair &lt;x9/&gt;x =&gt; y&lt;x10/&gt; in &lt;x11/&gt;D&lt;x12/&gt; (replacing any existing value
for the key &lt;x13/&gt;x&lt;x14/&gt;).</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T041754Z" creationid="hsugawa8651" creationdate="20181112T041754Z">
        <seg>辞書&lt;x1/&gt;D&lt;x2/&gt;を与えられると、構文&lt;x3/&gt;D[x]&lt;x4/&gt;は、キー&lt;x5/&gt;x&lt;x6/&gt;(存在する場合)の値を返すか、あるいはスローします。 エラーと&lt;x7/&gt;D[x]=y&lt;x8/&gt;は、&lt;x11/&gt;D&lt;x12/&gt;(既存の値を置き換える)の&lt;x9/&gt;x=&gt;y&lt;x10/&gt;のキー値ペアを格納します。 &lt;x13/&gt;x&lt;x14/&gt;x14/&gt;)。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Given an expression object, one can cause Julia to evaluate (execute) it at global scope using
&lt;x1/&gt;`eval`&lt;x2/&gt;:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T165244Z" creationid="hsugawa8651" creationdate="20181118T165244Z">
        <seg>エクスプレッションオブジェクトを指定すると、次のようにして、グローバルスコープでJuliaを評価(実行)することができます。 &lt;x1/&gt;`eval'&lt;x2/&gt;:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Given this &lt;x1/&gt;roots&lt;x2/&gt; map, in &lt;x3/&gt;App&lt;x4/&gt;'s code the statement &lt;x5/&gt;import Priv&lt;x6/&gt; will cause Julia to look up &lt;x7/&gt;roots[:Priv]&lt;x8/&gt;, which yields &lt;x9/&gt;ba13f791-ae1d-465a-978b-69c3ad90f72b&lt;x10/&gt;, the UUID of the &lt;x11/&gt;Priv&lt;x12/&gt; package that is to be loaded in that context.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T121108Z" creationid="hsugawa8651" creationdate="20181118T121108Z">
        <seg>&lt;x1/&gt;のroot&lt;x2/&gt;マップを指定すると、&lt;x3/&gt;のApp&lt;x4/&gt;のコードでは、&lt;x5/&gt;import Priv&lt;x6/&gt;は、&lt;x7/&gt;のルート[:Priv]&lt;x8/&gt;を検索します。&lt;x7/&gt;は、そのコンテキスト内にロードされる&lt;x11/&gt;Priv&lt;x12/&gt;パッケージの&lt;x9/&gt;ba13f791-ae1d-465a-978b-69c3ad90f72b&lt;x10/&gt;を生成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Given this dependency &lt;x1/&gt;graph&lt;x2/&gt;, when Julia sees &lt;x3/&gt;import Priv&lt;x4/&gt; in the &lt;x5/&gt;Pub&lt;x6/&gt; package—which has UUID &lt;x7/&gt;c07ecb7d-0dc9-4db7-8803-fadaaeaf08e1&lt;x8/&gt;—it looks up:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T121135Z" creationid="hsugawa8651" creationdate="20181118T121135Z">
        <seg>この依存性&lt;x1/&gt;グラフ&lt;x2/&gt;を指定すると、&lt;x5/&gt;Pub&lt;x6/&gt;の&lt;x6/&gt;Pub&lt;x6/&gt;パッケージで&lt;x3/&gt;のインポートPriv&lt;x4/&gt;を確認すると、次のようになります。&lt;x8/&gt;c07ecb7d-0dc9-4db7-8803-fadaaeaf08e1</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Global variables exported by native libraries can be accessed by name using the &lt;x1/&gt;`cglobal`&lt;x2/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T152508Z" creationid="hsugawa8651" creationdate="20181117T152508Z">
        <seg>ネイティブライブラリによってエクスポートされたグローバル変数は、&lt;x1/&gt;`cglobal`&lt;x2/&gt;を使用して名前によってアクセスできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Good performance, approaching that of statically-compiled languages
like C</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T082137Z" creationid="hsugawa8651" creationdate="20181118T082137Z">
        <seg>Cのような静的コンパイル言語に迫る性能を実現します</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Good performance, approaching that of statically-compiled languages like C</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T182543Z" creationid="hsugawa8651" creationdate="20181118T182543Z">
        <seg>Cのような静的コンパイル言語に迫る性能を実現します</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Half-precision floating-point numbers are also supported (&lt;a0&gt;&lt;c1&gt;Float16&lt;/c1&gt;&lt;/a0&gt;), but they are implemented in software and use &lt;a2&gt;&lt;c3&gt;Float32&lt;/c3&gt;&lt;/a2&gt; for calculations.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T190510Z" creationid="hsugawa8651" creationdate="20181118T190510Z">
        <seg>半精度浮動小数点数もサポートされている(&lt;a0&gt;&lt;c1&gt;Float16&lt;/c1&gt;&lt;/a0&gt;)が、これらの浮動小数点数は次のようになります。 ソフトウェアで実装され、&lt;a2&gt;&lt;c3&gt;Float32&lt;/c3&gt;&lt;/a2&gt; を使用して計算に使用されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Half-precision floating-point numbers are also supported (&lt;x1/&gt;`Float16`&lt;x2/&gt;), but they are
implemented in software and use &lt;x3/&gt;`Float32`&lt;x4/&gt; for calculations.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T033735Z" creationid="hsugawa8651" creationdate="20181118T093705Z">
        <seg>半制度浮動小数点数もサポートされていますが（(&lt;x1/&gt;`Float16`&lt;x2/&gt; ）、保存形式のみとして使用が可能です。 計算時には、それらは &lt;x3/&gt;`Float32`&lt;x4/&gt;  に変換されます。:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Handling Operating System Variation</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T234006Z" creationid="hsugawa8651" creationdate="20181118T120249Z">
        <seg>オペレーティング・システムの違いを扱う</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Handling Operating System Variation&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T234743Z" creationid="hsugawa8651" creationdate="20181119T234743Z">
        <seg>オペレーティング・システムの違いを扱う&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>HasEltype()&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T112145Z" creationid="hsugawa8651" creationdate="20181112T112145Z">
        <seg>HasEltype()&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>HasLength()&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T112122Z" creationid="hsugawa8651" creationdate="20181112T112122Z">
        <seg>HasLength()&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>HasShape{N}()&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T164653Z" creationid="hsugawa8651" creationdate="20181118T164653Z">
        <seg>HasShape{N}()&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Hence, expressions starting with a numeric literal
followed by &lt;x9/&gt;F&lt;x10/&gt; are interpreted as the numerical literal multiplied by a variable, which means that, for
example, &lt;x11/&gt;1.5F22&lt;x12/&gt; is equal to &lt;x13/&gt;1.5 * F22&lt;x14/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T111954Z" creationid="hsugawa8651" creationdate="20181112T111954Z">
        <seg>したがって、数値リテラルで始まる式 続いて&lt;x9/&gt;F&lt;x10/&gt;は、数値的リテラル乗算された数値を変数で乗算したものと解釈されます。これは 例:&lt;x11/&gt;1F22&lt;x12/&gt;は、&lt;x13/&gt;1.5*F22&lt;x14/&gt;と等しくなります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Here are some examples to demonstrate which type of arrays are strided and which are not:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T083514Z" creationid="hsugawa8651" creationdate="20181113T083514Z">
        <seg>ここでは、どのタイプのアレイがストローブされていて、どのタイプがストライドされていないかを示す例をいくつか示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Here are some examples with bitwise operators:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T063750Z" creationid="hsugawa8651" creationdate="20181113T132327Z">
        <seg>以下はビット単位演算子の例です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Here are some simple examples using arithmetic operators:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T063521Z" creationid="hsugawa8651" creationdate="20181113T132210Z">
        <seg>以下は算術演算の例です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Here are some simple examples:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T030450Z" creationid="hsugawa8651" creationdate="20181114T030450Z">
        <seg>簡単な例を次に示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Here are some situations
where syntactic conflicts arise:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T040656Z" creationid="hsugawa8651" creationdate="20181112T111920Z">
        <seg>以下は構文の競合が発生する状況の例です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Here is a corresponding &lt;x1/&gt;roots&lt;x2/&gt; structure, represented as a dictionary:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T121326Z" creationid="hsugawa8651" creationdate="20181118T121326Z">
        <seg>辞書として表される、対応する&lt;x1/&gt;根&lt;x2/&gt;構造を次に示す。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Here is a representation of the &lt;x1/&gt;paths&lt;x2/&gt; map for the &lt;x3/&gt;App&lt;x4/&gt; project environment:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T121243Z" creationid="hsugawa8651" creationdate="20181118T121243Z">
        <seg>&lt;x3/&gt;アプリケーション&lt;x4/&gt;プロジェクト環境の&lt;x1/&gt;パス&lt;x2/&gt;マップの表現を次に示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Here is a second example wrapping the corresponding destructor:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T152058Z" creationid="hsugawa8651" creationdate="20181117T152058Z">
        <seg>次に、対応するデストラクタをラップする2番目の例を示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Here is a simple example of a C wrapper that returns a &lt;x1/&gt;Ptr&lt;x2/&gt; type:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T151909Z" creationid="hsugawa8651" creationdate="20181117T151909Z">
        <seg>ここでは、&lt;x1/&gt;Ptr&lt;x2/&gt;型を返すCラッパーの簡単な例を次に示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Here is a simple example:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T165256Z" creationid="hsugawa8651" creationdate="20181118T165256Z">
        <seg>簡単な例を次に示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Here is a simple, motivating example:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T165329Z" creationid="hsugawa8651" creationdate="20181118T165329Z">
        <seg>簡単な動機付けの例を次に示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Here is a slightly more complex example that discovers the local machine's hostname:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T133838Z" creationid="hsugawa8651" creationdate="20181117T133838Z">
        <seg>ここでは、ローカルマシンのホスト名を検出するもう少し複雑な例を示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Here is a third example passing Julia arrays:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T152146Z" creationid="hsugawa8651" creationdate="20181117T152146Z">
        <seg>次に、Julia配列を渡す3番目の例を示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Here is an example of a &lt;c2&gt;while&lt;/c2&gt; loop:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T141117Z" creationid="hsugawa8651" creationdate="20181119T141117Z">
        <seg>&lt;c2&gt;while&lt;/c2&gt;ループの例を次に示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Here is an extraordinarily simple macro:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T001248Z" creationid="hsugawa8651" creationdate="20181120T001248Z">
        <seg>簡単な例を次に示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Here is example of the short form used to quote an arithmetic expression:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T115343Z" creationid="hsugawa8651" creationdate="20181118T115343Z">
        <seg>算術式の引用に使用される短い形式の例を次に示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Here is how &lt;x5/&gt;Char&lt;x6/&gt; values are
input and shown:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T080203Z" creationid="hsugawa8651" creationdate="20181120T080203Z">
        <seg>har 値の入力と表示方法は以下の通りです。:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Here is the anatomy of the &lt;c0&gt;if&lt;/c0&gt;-&lt;c1&gt;elseif&lt;/c1&gt;-&lt;c2&gt;else&lt;/c2&gt; conditional syntax:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T133925Z" creationid="hsugawa8651" creationdate="20181119T133925Z">
        <seg>ここで、 &lt;c0&gt;if&lt;/c0&gt;-&lt;c1&gt;elseif&lt;/c1&gt;-&lt;c2&gt;else&lt;/c2&gt;型の条件分岐構文を解剖してみましょう</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Here is the anatomy of the &lt;x1/&gt;if&lt;x2/&gt;-&lt;x3/&gt;elseif&lt;x4/&gt;-&lt;x5/&gt;else&lt;x6/&gt; conditional syntax:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T225837Z" creationid="hsugawa8651" creationdate="20181109T225837Z">
        <seg>&lt;x2/&gt;-&lt;x3/&gt;elseif&lt;x4/&gt;-&lt;x5/&gt;else&lt;x6/&gt;条件付き構文:&lt;x6/&gt;の場合の解剖学的構造は以下の通りである。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Here is the corresponding &lt;x1/&gt;graph&lt;x2/&gt; structure, represented as a dictionary:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T121327Z" creationid="hsugawa8651" creationdate="20181118T121327Z">
        <seg>辞書として表される対応する&lt;x1/&gt;グラフ&lt;x2/&gt;構造を次に示す。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Here it is in action:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T133954Z" creationid="hsugawa8651" creationdate="20181109T225850Z">
        <seg>例を挙げると、</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Here the &lt;c0&gt;1:5&lt;/c0&gt; is a &lt;c1&gt;Range&lt;/c1&gt; object, representing the sequence of numbers 1, 2, 3, 4, 5.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T141719Z" creationid="hsugawa8651" creationdate="20181119T141541Z">
        <seg>この&lt;c0&gt;1:5&lt;/c0&gt;は、&lt;c1&gt;Range&lt;/c1&gt;オブジェクトで、1,2,3,4,5の数列をあらわしています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Here the &lt;x1/&gt;1:5&lt;x2/&gt; is a &lt;x3/&gt;Range&lt;x4/&gt; object, representing the sequence of numbers 1, 2, 3, 4, 5.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T000204Z" creationid="hsugawa8651" creationdate="20181120T000204Z">
        <seg>ここで、&lt;x1/&gt;1:5&lt;x2/&gt;は、番号1 2 3 4 5のシーケンスを表す範囲オブジェクトである。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Here the &lt;x1/&gt;1:5&lt;x2/&gt; is a range object, representing the sequence of numbers 1, 2, 3, 4, 5.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T124428Z" creationid="hsugawa8651" creationdate="20181118T124428Z">
        <seg>ここで、&lt;x1/&gt;1:5&lt;x2/&gt;は、番号1 2 3 4 5のシーケンスを表す範囲オブジェクトである。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Here the call &lt;x1/&gt;g(2.0, 3.0)&lt;x2/&gt; could be handled by either the &lt;x3/&gt;g(Float64, Any)&lt;x4/&gt; or the &lt;x5/&gt;g(Any, Float64)&lt;x6/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T014337Z" creationid="hsugawa8651" creationdate="20181120T014337Z">
        <seg>ここでの関数呼び出しg(2.0, 3.0)は、g(Float64, Any)とg(Any, Float64) のメソッドによって処理可能ですが、どちらがより特化しているかは決められません。 このような場合、Juliaは勝手にメソッドを選択せずに、MethodErrorを発生させます。 共通する場合に特化したメソッドを指定することで、メソッドの曖昧さをなくすことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Here the zero-argument constructor method calls the single-argument constructor method, which
in turn calls the automatically provided two-argument constructor method.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T155724Z" creationid="hsugawa8651" creationdate="20181117T155724Z">
        <seg>ここでは、0つの引数コンストラクタメソッドは、単一引数コンストラクタメソッドを呼び出します。 は自動的に提供された2引数コンストラクタメソッドを呼び出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Here we created a function &lt;x1/&gt;change_array!&lt;x2/&gt;, that assigns &lt;x3/&gt;5&lt;x4/&gt; to the first element of the passed
array (bound to &lt;x5/&gt;x&lt;x6/&gt; at the call site, and bound to &lt;x7/&gt;A&lt;x8/&gt; within the function).</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181110T025123Z" creationid="hsugawa8651" creationdate="20181110T025123Z">
        <seg>ここでは、渡された第1の要素に&lt;x3/&gt;5&lt;x4/&gt;を割り当てる関数&lt;x1/&gt;change_array!&lt;x2/&gt;を作成しました。 array(&lt;x5/&gt;x&lt;x6/&gt;at the call site,and bound to the function in the function内で&lt;x7/&gt;A&lt;x8/&gt;にバインドされます)。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Here's an example illustrating
the display on a nested &lt;x2/&gt;Expr&lt;x3/&gt;:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T115301Z" creationid="hsugawa8651" creationdate="20181118T115301Z">
        <seg>次に例を示します ネストされた&lt;x2/&gt;Expr&lt;x3/&gt;上の表示</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Here's an example of a &lt;c2&gt;begin&lt;/c2&gt; block:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T133627Z" creationid="hsugawa8651" creationdate="20181119T133527Z">
        <seg>&lt;c2&gt;begin&gt;¥&lt;/c2&gt;ブロックの例を次に示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Here's an example of a &lt;x5/&gt;begin&lt;x6/&gt; block:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T225802Z" creationid="hsugawa8651" creationdate="20181109T225802Z">
        <seg>&lt;x5/&gt;begin&lt;x6/&gt;ブロックの例を次に示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Here's an example where the method type parameter &lt;x1/&gt;T&lt;x2/&gt; is used as the type parameter to the parametric
type &lt;x3/&gt;Vector{T}&lt;x4/&gt; in the method signature:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T020122Z" creationid="hsugawa8651" creationdate="20181120T020122Z">
        <seg>メソッドの型パラメータTが、メソッドのシグネチャのパラメトリック型に対する型パラメータVector{T}として使用される例を次に示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Here, &lt;x1/&gt;(2, 3)&lt;x2/&gt; is a &lt;x3/&gt;`Tuple`&lt;x4/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154539Z" creationid="hsugawa8651" creationdate="20181109T154539Z">
        <seg>ここで、&lt;x1/&gt;(2, 3)&lt;x2/&gt;は、&lt;x3/&gt;「タプル」&lt;x4/&gt;である。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Here, for example, is another attempt
at defining the &lt;x3/&gt;SelfReferential&lt;x4/&gt; type, this time using a zero-argument inner constructor returning instances
having &lt;x5/&gt;obj&lt;x6/&gt; fields pointing to themselves:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T155902Z" creationid="hsugawa8651" creationdate="20181117T155902Z">
        <seg>ここでは、別の試みを行います。 &lt;x3/&gt;SelfReferential&lt;x4/&gt;タイプを定義する際には、0つの引数内部コンストラクタを使用してインスタンスを返します。 &lt;x5/&gt;obj&lt;x6/&gt;フィールドが自分自身を指していることを示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Here, the evaluation of an expression object causes a value to be assigned to the global variable
&lt;x1/&gt;x&lt;x2/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T165251Z" creationid="hsugawa8651" creationdate="20181118T165251Z">
        <seg>ここで、エクスプレッションオブジェクトの評価によって、グローバル変数に値が割り当てられます。 &lt;x1/&gt;x&lt;x2/&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Here, the input &lt;x1/&gt;p&lt;x2/&gt; is declared to be of type &lt;x3/&gt;Ref{gsl_permutation}&lt;x4/&gt;, meaning that the memory
that &lt;x5/&gt;p&lt;x6/&gt; points to may be managed by Julia or by C. A pointer to memory allocated by C should
be of type &lt;x7/&gt;Ptr{gsl_permutation}&lt;x8/&gt;, but it is convertible using &lt;x9/&gt;`Base.cconvert`&lt;x10/&gt; and therefore
can be used in the same (covariant) context of the input argument to a &lt;x11/&gt;`ccall`&lt;x12/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T152108Z" creationid="hsugawa8651" creationdate="20181117T152108Z">
        <seg>ここで、入力&lt;x1/&gt;p&lt;x2/&gt;は、タイプ&lt;x3/&gt;Ref{gsl_mutation}&lt;x4/&gt;であることを宣言され、メモリは、メモリを意味する。 &lt;x5/&gt;p&lt;x6/&gt;は、ジュリアまたはC.Aポインタによって割り当てられたメモリへのC.Aポインタによって管理されることがあります。 &lt;x7/&gt;Ptr{gsl mutation}&lt;x8/&gt;であるが、&lt;x9/&gt;'Base.チコンベルト'&lt;x10/&gt;を用いて変換することができ、したがって は、&lt;x11/&gt;`ccall'&lt;x12/&gt;への入力引数の同じ(共変)コンテキストで使用することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Hexadecimal floating-point literals are also valid, but only as &lt;a0&gt;&lt;c1&gt;Float64&lt;/c1&gt;&lt;/a0&gt; values, with &lt;c2&gt;p&lt;/c2&gt; preceding the base-2 exponent:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T190437Z" creationid="hsugawa8651" creationdate="20181118T190437Z">
        <seg>16進数浮動小数点リテラルは有効であるが、&lt;x1/&gt;'Float64&lt;x2/&gt;の値としてのみ有効である。 &lt;x3/&gt;p&lt;x4/&gt;は、ベース2指数の前にあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Hexadecimal floating-point literals are also valid, but only as &lt;x1/&gt;`Float64`&lt;x2/&gt; values,
with &lt;x3/&gt;p&lt;x4/&gt; preceding the base-2 exponent:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T110630Z" creationid="hsugawa8651" creationdate="20181112T110630Z">
        <seg>16進数浮動小数点リテラルは有効であるが、&lt;x1/&gt;'Float64&lt;x2/&gt;の値としてのみ有効である。 &lt;x3/&gt;p&lt;x4/&gt;は、ベース2指数の前にあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Hexadecimal floating-point literals are also valid, but only as &lt;x1/&gt;`Float64`&lt;x2/&gt; values:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T033707Z" creationid="hsugawa8651" creationdate="20181119T235239Z">
        <seg>16進数の浮動小数点リテラルも有効ですが、 &lt;x1/&gt;`Float64`&lt;x2/&gt; 値としてのみ使用が可能です。:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>How can I modify the declaration of a type in my session?</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181110T024709Z" creationid="hsugawa8651" creationdate="20181110T024709Z">
        <seg>セッション内のタイプの宣言を変更するにはどうすればよいですか。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>How do I catch CTRL-C in a script?</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181110T024903Z" creationid="hsugawa8651" creationdate="20181110T024903Z">
        <seg>スクリプトでCTRL-Cを取得するにはどうすればよいですか。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>How do I check if the current file is being run as the main script?</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181110T024829Z" creationid="hsugawa8651" creationdate="20181110T024829Z">
        <seg>メインスクリプトとして現在のファイルが実行されているかどうかを確認するにはどうすればよいですか。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>How do I pass options to &lt;x1/&gt;julia&lt;x2/&gt; using &lt;x3/&gt;&lt;x4/&gt;!/usr/bin/env&lt;x5/&gt;?</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181110T024917Z" creationid="hsugawa8651" creationdate="20181110T024917Z">
        <seg>&lt;x3/&gt;&lt;x4/&gt;!/usr/bin/env&lt;x5/&gt;?を使用して、&lt;x1/&gt;ジュリア&lt;x2/&gt;にオプションを渡す方法を教えてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>How this distinction works is determined by environments, as explained in the following sections.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T152910Z" creationid="hsugawa8651" creationdate="20181117T152910Z">
        <seg>この区別の仕組みは、次のセクションで説明するように、環境によって決まります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>However,
even for immutable structs it will not cause any harm for called functions to attempt such modifications
(that is, writing through the passed pointers).</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T151856Z" creationid="hsugawa8651" creationdate="20181117T151856Z">
        <seg>しかし 不変構造体でさえ、呼び出された関数がこのような修正を試みることを妨げることはないでしょう。 (つまり、渡されたポインタを通して書くこと)。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>However, all the information we need for the loop is embedded in the type information of the arguments.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T032307Z" creationid="hsugawa8651" creationdate="20181116T032307Z">
        <seg>しかし、ループに必要なすべての情報は、引数の型情報に埋め込まれています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>However, any concrete &lt;x3/&gt;AbstractArray{T,N}&lt;x4/&gt; type should generally implement
at least &lt;x5/&gt;`size(A)`&lt;x6/&gt; (returning an &lt;x7/&gt;Int&lt;x8/&gt; tuple), &lt;x9/&gt;`getindex(A,i)`&lt;x10/&gt; and &lt;x11/&gt;&lt;x12/&gt;&lt;x13/&gt;(@ref getindex);
mutable arrays should also implement &lt;x14/&gt;`setindex!`&lt;x15/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T160320Z" creationid="hsugawa8651" creationdate="20181109T160320Z">
        <seg>しかし、具体的な&lt;x3/&gt;AbstractArray{T,N}&lt;x4/&gt;型は、一般的には実装されるべきである。 &lt;x5/&gt;'size(A)'&lt;x6/&gt;(return an&lt;x7/&gt;Int&lt;x8/&gt;タプルを返す)&lt;x9/&gt;`getindex(A,i)`&lt;x10/&gt;&lt;x13/&gt;&lt;x13/&gt;&lt;x13/&gt;&lt;x13/&gt;(@ref getindex); mutable配列は、&lt;x14/&gt;`setindex!`&lt;x15/&gt;を実装する必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>However, doing this will also be very slow and leak memory, so you should usually avoid this and instead keep reading.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T152317Z" creationid="hsugawa8651" creationdate="20181117T152317Z">
        <seg>しかし、これは非常に低速でリークメモリもあるので、通常はこれを避けてから、読み続けてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>However, for efficiency, Julia's package loading code does not actually create them.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T121040Z" creationid="hsugawa8651" creationdate="20181118T121040Z">
        <seg>しかし、効率を上げるために、Juliaのパッケージロードコードは実際には作成されません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>However, future calls to &lt;x1/&gt;tryeval&lt;x2/&gt; will continue to see the definition of &lt;x3/&gt;newfun&lt;x4/&gt; as it was
&lt;x5/&gt;at the previous statement at the REPL&lt;x6/&gt;, and thus before that call to &lt;x7/&gt;tryeval&lt;x8/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T021048Z" creationid="hsugawa8651" creationdate="20181120T021048Z">
        <seg>しかし、tryevalへの今後の呼び出しが、参照し続けるnewfunの定義は、次回tryevalを呼び出すまではREPLで前回行ったものです。前回のtryevalの呼び出しも同様だったのです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>However, if needed you can specialize on any or all of these arguments.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T131338Z" creationid="hsugawa8651" creationdate="20181113T131338Z">
        <seg>ただし、必要に応じて、これらの引数のいずれかまたはすべてを専門にすることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>However, in some cases more functionality is required when
creating composite objects.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T155642Z" creationid="hsugawa8651" creationdate="20181117T155642Z">
        <seg>ただし、場合によっては、次のような機能が必要になります。 合成オブジェクトを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>However, in some cases one would rather not provide inner constructors, so
that specific type parameters cannot be requested manually.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T124239Z" creationid="hsugawa8651" creationdate="20181118T124239Z">
        <seg>しかし、場合によっては、内部コンストラクタを提供しなくてもよい場合があります。 特定のタイプパラメータを手動で要求することはできません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>However, in some situations it is necessary to quote code &lt;x3/&gt;without&lt;x4/&gt; performing interpolation.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T165224Z" creationid="hsugawa8651" creationdate="20181118T165224Z">
        <seg>しかし、状況によっては、&lt;x4/&gt;を実行せずに、コード&lt;x3/&gt;を引用符で括る必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>However, it is possible
to use computed values as function names by staging through &lt;x3/&gt;`eval`&lt;x4/&gt; as follows:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T152302Z" creationid="hsugawa8651" creationdate="20181117T152302Z">
        <seg>しかし、それは可能である。 次のように&lt;x3/&gt;'eval'&lt;x4/&gt;を通してステージングすることによって関数名として計算された値を使用することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>However, not all object fields are
references.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T123754Z" creationid="hsugawa8651" creationdate="20181118T123754Z">
        <seg>ただし、すべてのオブジェクト・フィールドが 参照。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>However, numeric literal coefficients parse similarly to unary operators when
combined with exponentiation.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T111803Z" creationid="hsugawa8651" creationdate="20181112T111803Z">
        <seg>しかし、数値リテラル係数は、次のように単項演算子と同じように解析されます。 指数関数と組み合わせます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>However, other similar calls still don't work:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T124023Z" creationid="hsugawa8651" creationdate="20181118T124023Z">
        <seg>しかし、その他の類似したコールはまだ機能していない。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>However, since the automatic vectorization cannot be relied upon, future use will mostly be via
libraries that use &lt;x1/&gt;llvmcall&lt;x2/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T063702Z" creationid="hsugawa8651" creationdate="20181114T063702Z">
        <seg>However, since the automatic vectorization cannot be relied upon, future use will mostly be via
libraries that use &lt;x1/&gt;llvmcall&lt;x2/&gt;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>However, the fallback methods for &lt;x26/&gt;+(a, b, c, d...)&lt;x27/&gt; and &lt;x28/&gt;*(a, b, c, d...)&lt;x29/&gt; both default to left-associative evaluation.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T030947Z" creationid="hsugawa8651" creationdate="20181114T030947Z">
        <seg>ただし、&lt;x26/&gt;+(a, b, c, d...)&lt;x27/&gt;および&lt;x28/&gt;*(a, b, c, d...)&lt;x29/&gt;両方のフォールバック方法は、デフォルトでは左連想評価に使用されています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>However, the manner in which this rounding is done can be
changed if required according to the rounding modes presented in the &lt;x1/&gt;IEEE 754
standard&lt;x2/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T093746Z" creationid="hsugawa8651" creationdate="20181118T093746Z">
        <seg>しかし、この丸めが行われる方法は &lt;x1/&gt;IEEE754で提示された丸めモードに従って必要に応じて変更された 標準的な&lt;x2/&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>However, the manner in which this rounding is done can be changed if required according to the rounding modes presented in the &lt;a0&gt;IEEE 754 standard&lt;/a0&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T191501Z" creationid="hsugawa8651" creationdate="20181118T191501Z">
        <seg>しかし、この丸めが行われる方法は &lt;x1/&gt;IEEE754で提示された丸めモードに従って必要に応じて変更された 標準的な&lt;x2/&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>However, the order of evaluations in a chained
comparison is undefined.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T065334Z" creationid="hsugawa8651" creationdate="20181114T030738Z">
        <seg>しかし、連続した比較の処理順は 定義されていません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>However, the outer &lt;x1/&gt;quote&lt;x2/&gt; expression is able to interpolate values inside the &lt;x3/&gt;$&lt;x4/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T115455Z" creationid="hsugawa8651" creationdate="20181118T115455Z">
        <seg>しかし、外側の&lt;x1/&gt;引用符&lt;x2/&gt;の式は、&lt;x3/&gt;$&lt;x4/&gt;の範囲内での値を補間することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>However, the signatures of method
definitions can be annotated to indicate the types of arguments in addition to their number, and
more than a single method definition may be provided.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T005956Z" creationid="hsugawa8651" creationdate="20181120T005956Z">
        <seg>しかし、メソッド定義のシグネチャに、型注釈をつけると、引数の型と数を指定でき、複数のメソッド定義を与えることができます。 </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>However, these subtleties are described in detail in
most books on scientific computation, and also in the following references:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T035049Z" creationid="hsugawa8651" creationdate="20181112T111444Z">
        <seg>しかし、応用的な知識は科学技術計算に関する書籍や以下参考に詳細が記載されています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>However, these subtleties are described in detail in most books on scientific computation, and also in the following references:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T191530Z" creationid="hsugawa8651" creationdate="20181118T191530Z">
        <seg>しかし、これらの微妙な点については、以下で詳細に説明します。 科学的計算に関する本や、以下の参考文献にもある。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>However, this is &lt;x1/&gt;not&lt;x2/&gt; recommended.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T123445Z" creationid="hsugawa8651" creationdate="20181118T123445Z">
        <seg>しかし、これは推奨されない&lt;x1/&gt;&lt;x2/&gt;である。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>However, this is obviously not recommended to avoid potential confusion.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T033435Z" creationid="hsugawa8651" creationdate="20181119T033435Z">
        <seg>しかし、これは混乱を避ける目的で、推奨されていません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>However, this need not always be the case.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T023220Z" creationid="hsugawa8651" creationdate="20181120T023220Z">
        <seg>しかし、必ずこうする必要はなく、</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>However, type promotion between the primitive types above and &lt;x1/&gt;`BigInt`&lt;x2/&gt;/&lt;x3/&gt;`BigFloat`&lt;x4/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T035937Z" creationid="hsugawa8651" creationdate="20181118T120409Z">
        <seg>しかし、上記のプリミティブ型と&lt;x1/&gt;`BigInt`&lt;x2/&gt; または &lt;x3/&gt;`BigFloat`&lt;x4/&gt; 間の型変換は、自動では行われず、 明示的に指定する必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>However, when depending
on this behavior, make sure all possible code paths define a value for the variable.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T225955Z" creationid="hsugawa8651" creationdate="20181109T225955Z">
        <seg>ただし この動作では、可能なすべてのコード・パスが変数の値を定義していることを確認してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>However, when depending on this behavior, make sure all possible code paths define a value for the variable.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T134601Z" creationid="hsugawa8651" creationdate="20181119T134601Z">
        <seg>ただし、こういった使い方をする場合は、とりうるすべての分岐で、変数の値が定義されていることを確認してください。 </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>However, which implementation is used depends on compiler implementation details, so it
is essential for the two implementations to behave identically.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T032421Z" creationid="hsugawa8651" creationdate="20181116T032421Z">
        <seg>しかし、どの実装が使用されるのかは、コンパイラの実装の詳細に依存します。 2つの実装が同じように動作するためには必須です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>However, while the type layout must be known statically to compute the intended C ABI,
the static parameters of the function are considered to be part of this static environment.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T151232Z" creationid="hsugawa8651" creationdate="20181117T151232Z">
        <seg>しかし、意図されたC ABIを計算するためには、タイプレイアウトは静的に認識される必要があります。 関数の静的パラメータは、この静的環境の一部であると見なされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>However, you can create variables with names:
&lt;x7/&gt;abstract&lt;x8/&gt;, &lt;x9/&gt;mutable&lt;x10/&gt;, &lt;x11/&gt;primitive&lt;x12/&gt; and &lt;x13/&gt;type&lt;x14/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181110T041759Z" creationid="hsugawa8651" creationdate="20181110T041759Z">
        <seg>ただし、名前を使用して変数を作成することはできます。 &lt;x7/&gt;抽象&lt;x8/&gt;,&lt;x9/&gt;mutable&lt;x10/&gt;,&lt;x11/&gt;プリミティブ&lt;x12/&gt;,&lt;x13/&gt;&lt;x14/&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>I passed an argument &lt;x1/&gt;x&lt;x2/&gt; to a function, modified it inside that function, but on the outside, the variable &lt;x3/&gt;x&lt;x4/&gt; is still unchanged.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181110T024952Z" creationid="hsugawa8651" creationdate="20181110T024952Z">
        <seg>関数に対して引数&lt;x1/&gt;x2/&gt;を渡したが、その関数内で修正されたが、外側では変数&lt;x3/&gt;x&lt;x4/&gt;は変更されないままであった。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>I/O and Network</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T043208Z" creationid="hsugawa8651" creationdate="20181112T043208Z">
        <seg>I/O and Network</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>INTEGER*2&lt;x1/&gt;, &lt;x2/&gt;LOGICAL*2&lt;x3/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T150909Z" creationid="hsugawa8651" creationdate="20181117T150909Z">
        <seg>INTEGER*2&lt;x1/&gt;, &lt;x2/&gt;LOGICAL*2&lt;x3/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If &lt;x1/&gt;A&lt;x2/&gt; is an &lt;x3/&gt;AbstractArray{T,0}&lt;x4/&gt;, this should return an empty tuple.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T094601Z" creationid="hsugawa8651" creationdate="20181118T094601Z">
        <seg>&lt;x1/&gt;A&lt;x2/&gt;が&lt;x3/&gt;AbstractArray{T,0}&lt;x4/&gt;である場合、この値は空のタプルを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If &lt;x1/&gt;I_1&lt;x2/&gt; is changed to a two-dimensional matrix, then &lt;x3/&gt;X&lt;x4/&gt; becomes an &lt;x5/&gt;n+1&lt;x6/&gt;-dimensional array of
shape &lt;x7/&gt;(size(I_1, 1), size(I_1, 2), length(I_2), ..., length(I_n))&lt;x8/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T160908Z" creationid="hsugawa8651" creationdate="20181114T160908Z">
        <seg>&lt;x1/&gt;I_1&lt;x2/&gt;が2次元マトリクスに変化すると、&lt;x3/&gt;X&lt;x4/&gt;は&lt;x5/&gt;n+1&lt;x6/&gt;次元配列となる。 形状&lt;x7/&gt;(サイズ(I_1 1)、サイズ(I_1 2)、長さ(I_2)、.…、長さ(I_n))&lt;x8/&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If &lt;x1/&gt;I_1&lt;x2/&gt; is changed to a two-dimensional matrix, then &lt;x3/&gt;X&lt;x4/&gt; becomes an &lt;x5/&gt;n+1&lt;x6/&gt;-dimensional array of
shape &lt;x7/&gt;(size(I_1, 1), size(I_1, 2), length(I_2), ..., length(I_n))&lt;x8/&gt;. The matrix adds a dimension.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T134835Z" creationid="hsugawa8651" creationdate="20181117T134835Z">
        <seg>&lt;x1/&gt;I_1&lt;x2/&gt;が2次元マトリクスに変化すると、&lt;x3/&gt;X&lt;x4/&gt;は&lt;x5/&gt;n+1&lt;x6/&gt;次元配列となる。 形状&lt;x7/&gt;(サイズ(I_1 1)、サイズ(I_1 2)、長さ(I_2)、…、長さ(I_n))&lt;x8/&gt;。マトリックスは次元を追加します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If &lt;x1/&gt;T&lt;x2/&gt; is &lt;x3/&gt;Any&lt;x4/&gt;, then the memory is assumed to contain a reference to a Julia object (a &lt;x5/&gt;jl_value_t*&lt;x6/&gt;),
the result will be a reference to this object, and the object will not be copied.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T152538Z" creationid="hsugawa8651" creationdate="20181117T152538Z">
        <seg>&lt;x1/&gt;T&lt;x2/&gt;が&lt;x3/&gt;であれば、メモリはジュリアオブジェクトへの参照を含むものと仮定します(&lt;x5/&gt;jl_value_t*&lt;x6/&gt;)。 結果はこのオブジェクトへの参照になり、オブジェクトはコピーされません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If &lt;x1/&gt;T&lt;x2/&gt; is a floating-point type, the result is the nearest representable value, which could be
positive or negative infinity.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T070157Z" creationid="hsugawa8651" creationdate="20181114T031034Z">
        <seg>&lt;x1/&gt;T&lt;x2/&gt;が浮動小数点型の場合、変換の結果は最も近い表現可能な、正または負の無限大にもなり得る値になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If &lt;x1/&gt;T&lt;x2/&gt; is an integer type, an &lt;x3/&gt;InexactError&lt;x4/&gt; is raised if &lt;x5/&gt;x&lt;x6/&gt; is not representable by &lt;x7/&gt;T&lt;x8/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T070313Z" creationid="hsugawa8651" creationdate="20181114T031036Z">
        <seg>&lt;x1/&gt;T&lt;x2/&gt;T が整数型の場合、 &lt;x5/&gt;x&lt;x6/&gt; が &lt;x7/&gt;/&gt;T&lt;x8/&gt;で表現できない際は&lt;x3/&gt;InexactError&lt;x4/&gt;が発生します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If &lt;x1/&gt;X/Project.toml&lt;x2/&gt; does not exist, then &lt;x3/&gt;uuid&lt;x4/&gt; is the all-zero &lt;x5/&gt;nil UUID&lt;x6/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T121314Z" creationid="hsugawa8651" creationdate="20181118T121314Z">
        <seg>&lt;x1/&gt;X/Project.トミル&lt;x2/&gt;が存在しない場合、&lt;x3/&gt;uuid&lt;x4/&gt;はすべてゼロ&lt;x5/&gt;nil UUID&lt;x6/&gt;である。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If &lt;x1/&gt;X/Project.toml&lt;x2/&gt; exists and but does &lt;x3/&gt;not&lt;x4/&gt; have a top-level UUID entry, &lt;x5/&gt;uuid&lt;x6/&gt; is a dummy UUID generated by hashing the canonical path of &lt;x7/&gt;X/Project.toml&lt;x8/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T121311Z" creationid="hsugawa8651" creationdate="20181118T121311Z">
        <seg>&lt;x1/&gt;X/Project.トミル&lt;x2/&gt;が存在していても&lt;x3/&gt;がトップレベルUUIDエントリを持たない場合、&lt;x5/&gt;uuid&lt;x6/&gt;は、&lt;x7/&gt;X/Project.Menu&lt;x8/&gt;の正規パスをハッシュすることによって生成されるダミーUUIDである。トミル。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If &lt;x1/&gt;X/Project.toml&lt;x2/&gt; exists and has a &lt;x3/&gt;uuid&lt;x4/&gt; entry, then &lt;x5/&gt;uuid&lt;x6/&gt; is that value.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T121309Z" creationid="hsugawa8651" creationdate="20181118T121309Z">
        <seg>&lt;x1/&gt;X/Project.トミル&lt;x2/&gt;が存在し、&lt;x3/&gt;uuid&lt;x4/&gt;エントリが存在する場合は、&lt;x5/&gt;uuid&lt;x6/&gt;はその値です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If &lt;x1/&gt;X&lt;x2/&gt; is an array, it must have the same number of elements as the product of the lengths of
the indices: &lt;x3/&gt;prod(length(I_1), length(I_2), ..., length(I_n))&lt;x4/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T155408Z" creationid="hsugawa8651" creationdate="20181109T155408Z">
        <seg>&lt;x1/&gt;X&lt;x2/&gt;が配列である場合、それは長さの積と同じ数の要素を持つ必要があります。 インデックス:&lt;x3/&gt;prod(長さ(I_1),長さ(I_2),…,長さ(I_n))&lt;x4/&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If &lt;x1/&gt;X&lt;x2/&gt; is an array, it must have the same number of elements as the product of the lengths of
the indices: &lt;x3/&gt;prod(length(I_1), length(I_2), ..., length(I_n))&lt;x4/&gt;. The value in location &lt;x5/&gt;I_1[i_1], I_2[i_2], ..., I_n[i_n]&lt;x6/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T134924Z" creationid="hsugawa8651" creationdate="20181117T134924Z">
        <seg>&lt;x1/&gt;X&lt;x2/&gt;が配列である場合、それは長さの積と同じ数の要素を持つ必要があります。 インデックス:&lt;x3/&gt;prod(長さI_1)、長さ(I_2)、…、長さ(I_n)&lt;x4/&gt;。位置&lt;x5/&gt;I_1[i_1]の値、I_2[i_2]、.…、I_n[i_n]&lt;x6/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If &lt;x1/&gt;a&lt;x2/&gt; is an instance of &lt;x3/&gt;SelfReferential&lt;x4/&gt;, then a second instance can be created by the call:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T155847Z" creationid="hsugawa8651" creationdate="20181117T155847Z">
        <seg>&lt;x1/&gt;a&lt;x2/&gt;が&lt;x3/&gt;SelfReferential&lt;x4/&gt;のインスタンスである場合は、次のように呼び出しによって2番目のインスタンスを作成することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If &lt;x1/&gt;fussy_sqrt&lt;x2/&gt; is called with a negative value from another function, instead of trying to continue
execution of the calling function, it returns immediately, displaying the error message in the
interactive session:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T124729Z" creationid="hsugawa8651" creationdate="20181118T124729Z">
        <seg>もし&lt;x1/&gt;fusy_sqrt&lt;x2/&gt;が別の関数から負の値を持って呼び出された場合、それは継続される代わりに 呼び出し関数の実行で、ただちにエラー・メッセージが表示されます。 対話型セッション:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If &lt;x10/&gt;include("source.jl")&lt;x11/&gt; is called multiple times, &lt;x12/&gt;source.jl&lt;x13/&gt; is evaluated multiple times.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T152704Z" creationid="hsugawa8651" creationdate="20181117T152704Z">
        <seg>&lt;x10/&gt;が("source.jl")を含む場合、&lt;x11/&gt;は複数回呼び出されます。&lt;x12/&gt;source.jl&lt;x13/&gt;は複数回評価されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If &lt;x2/&gt;X&lt;x3/&gt; is a subdirectory of a package directory and &lt;x4/&gt;X/src/X.jl&lt;x5/&gt; exists, then the package &lt;x6/&gt;X&lt;x7/&gt; is available in the package directory environment and &lt;x8/&gt;X/src/X.jl&lt;x9/&gt; is the source file by which it is loaded.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T152928Z" creationid="hsugawa8651" creationdate="20181117T152928Z">
        <seg>&lt;x2/&gt;X&lt;x3/&gt;がパッケージディレクトリのサブディレクトリであり、&lt;x4/&gt;X/src/X.jl&lt;x5/&gt;が存在する場合、パッケージ&lt;x6/&gt;X&lt;x7/&gt;は、パッケージディレクトリ環境で使用可能であり、&lt;x8/&gt;X/src/X.jl&lt;x9/&gt;は、それがロードされるソースファイルである。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If &lt;x4/&gt;X&lt;x5/&gt; is not an array, its value
is written to all referenced locations of &lt;x6/&gt;A&lt;x7/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T155420Z" creationid="hsugawa8651" creationdate="20181109T155420Z">
        <seg>&lt;x4/&gt;X&lt;x5/&gt;が配列でない場合は、その値は は、&lt;x6/&gt;A&lt;x7/&gt;の参照されたすべての場所に書き込まれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If &lt;x8/&gt;Ptr{Cdouble}&lt;x9/&gt; were used instead, the &lt;x10/&gt;`ccall`&lt;x11/&gt; may still work, but Julia's garbage
collector would not be aware that the memory declared for &lt;x12/&gt;result_array&lt;x13/&gt; is being used by the
external C function.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T152217Z" creationid="hsugawa8651" creationdate="20181117T152217Z">
        <seg>もし&lt;x8/&gt;Ptr{Cdouble}&lt;x9/&gt;が代わりに使われたとしたら、&lt;x10/&gt;`ccall'&lt;x11/&gt;は依然として動作しますが、ジュリアのゴミはまだ動作していません。 コレクタは、&lt;x12/&gt;result_array&lt;x13/&gt;のために宣言されたメモリが使用されていないことを認識しません。 外部C関数です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If a C/C++ routine has an argument or return value that is a native SIMD type, the corresponding
Julia type is a homogeneous tuple of &lt;x1/&gt;VecElement&lt;x2/&gt; that naturally maps to the SIMD type.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T151252Z" creationid="hsugawa8651" creationdate="20181117T151252Z">
        <seg>C/C++ルーチンに、ネイティブSIMD型の引数または戻り値がある場合は、対応する Julia型は、自然にSIMD型にマッピングされる&lt;x1/&gt;VecElement&lt;x2/&gt;の同種のタプルである。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If a function argument name is written as a tuple (e.g. &lt;x1/&gt;(x, y)&lt;x2/&gt;) instead of just
a symbol, then an assignment &lt;x3/&gt;(x, y) = argument&lt;x4/&gt; will be inserted for you:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T101540Z" creationid="hsugawa8651" creationdate="20181112T101540Z">
        <seg>関数引数の名前がタプル(例えば&lt;x1/&gt;(x, y)&lt;x2/&gt;)ではなく、タプルとして記述されている場合 次に、割り当て&lt;x3/&gt;(x, y)=引数&lt;x4/&gt;が挿入されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If a number doesn't have an exact floating-point representation, it must be rounded to an
appropriate representable value.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T093739Z" creationid="hsugawa8651" creationdate="20181118T093739Z">
        <seg>数値が正確な浮動小数点表現を持たない場合は、次のように丸めます。 適切な表現可能な値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If a number doesn't have an exact floating-point representation, it must be rounded to an appropriate
representable value, however, if wanted, the manner in which this rounding is done can be changed
according to the rounding modes presented in the &lt;x1/&gt;IEEE 754 standard&lt;x2/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T034814Z" creationid="hsugawa8651" creationdate="20181119T235652Z">
        <seg>値が割り切れる浮動小数点数ではない場合、適切な表現可能な値に繰り上げる必要があります。 しかし、必要な場合は、どのように繰り上げするかは&lt;x1/&gt; IEEE 754規格&lt;x2/&gt; の 端数処理モードに準拠して変更が可能です。。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If a number doesn't have an exact floating-point representation, it must be rounded to an appropriate representable value.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T191458Z" creationid="hsugawa8651" creationdate="20181118T191458Z">
        <seg>数値が正確な浮動小数点表現を持たない場合は、次のように丸めます。 適切な表現可能な値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If a package subdirectory has a project file, then the &lt;x1/&gt;graph&lt;x2/&gt; entry for its UUID is the &lt;x3/&gt;[deps]&lt;x4/&gt; map of the project file, which is considered to be empty if the section is absent.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T121321Z" creationid="hsugawa8651" creationdate="20181118T121321Z">
        <seg>パッケージサブディレクトリがプロジェクトファイルを持っている場合、そのUUIDの&lt;x1/&gt;グラフ&lt;x2/&gt;エントリはプロジェクトファイルの&lt;x3/&gt;[deps]&lt;x4/&gt;マップであり、セクションが存在しない場合は空であると見なされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If a package subdirectory has no project file, then it is omitted from &lt;x1/&gt;graph&lt;x2/&gt; and import statements in its code are treated as top-level, the same as the main project and REPL.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T121319Z" creationid="hsugawa8651" creationdate="20181118T121319Z">
        <seg>パッケージサブディレクトリにプロジェクトファイルがない場合は、&lt;x1/&gt;グラフ&lt;x2/&gt;からは省略され、コード内のインポートステートメントは最上位のプロジェクトと同じように扱われ、REPLと同じように扱われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If a pointer conversion method &lt;x19/&gt;`Base.unsafe_convert(Ptr{T}, A)`&lt;x20/&gt; is
provided, the memory layout must correspond in the same way to these strides.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T160506Z" creationid="hsugawa8651" creationdate="20181109T160506Z">
        <seg>ポインタ変換方法&lt;x19/&gt;`Base.unsafe_convert(Ptr{T},A)`&lt;x20/&gt;がある場合 この場合、メモリレイアウトは、これらの進歩と同じ方法で対応する必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If a type is defined as a subtype of &lt;x1/&gt;AbstractArray&lt;x2/&gt;, it inherits a very large set of rich behaviors
including iteration and multidimensional indexing built on top of single-element access.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T022653Z" creationid="hsugawa8651" creationdate="20181113T022653Z">
        <seg>もしタイプが&lt;x1/&gt;AbstractArray&lt;x2/&gt;のサブタイプとして定義されるなら、それは非常に大きな一連の豊かな振る舞いを継承する。 単一要素アクセスの上に構築された反復と多次元索引付けを含む。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If all
arguments have a common &lt;x3/&gt;&lt;x4/&gt;&lt;x5/&gt;(@ref conversion-and-promotion) then they get
converted to that type using &lt;x6/&gt;`convert`&lt;x7/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T120717Z" creationid="hsugawa8651" creationdate="20181109T154521Z">
        <seg>すべて 引数には共通の&lt;x3/&gt;&lt;x4/&gt;&lt;x5/&gt;(@ref conversion-and-promotion)があります。 &lt;x6/&gt;'convert`&lt;x7/&gt;を使用して、そのタイプに変換されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If all indices are vectors, for example, then the shape of &lt;x1/&gt;X&lt;x2/&gt; would be &lt;x3/&gt;(length(I_1), length(I_2), ..., length(I_n))&lt;x4/&gt;,
with location &lt;x5/&gt;(i_1, i_2, ..., i_n)&lt;x6/&gt; of &lt;x7/&gt;X&lt;x8/&gt; containing the value &lt;x9/&gt;A[I_1[i_1], I_2[i_2], ..., I_n[i_n]]&lt;x10/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T155134Z" creationid="hsugawa8651" creationdate="20181109T155134Z">
        <seg>例えば、すべてのインデックスがベクトルである場合、&lt;x1/&gt;X&lt;x2/&gt;の形状は&lt;x3/&gt;(長さI_1)、長さ(I_2)、…、長さ(I_n)&lt;x4/&gt;である。 位置&lt;x5/&gt;(i_1,i_2,.…i_n)&lt;x7/&gt;X&lt;x8/&gt;の値&lt;x9/&gt;A[I_1[i_1],I_2[i_2],.…,I_n[i_n]]&lt;x10/&gt;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If all the indices are scalars, then the result &lt;x1/&gt;X&lt;x2/&gt; is a single element from the array &lt;x3/&gt;A&lt;x4/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T155128Z" creationid="hsugawa8651" creationdate="20181109T155128Z">
        <seg>すべての指標がスカラーである場合、結果&lt;x1/&gt;X&lt;x2/&gt;は、配列&lt;x3/&gt;A&lt;x4/&gt;からの単一要素である。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If all the indices are scalars, then the result &lt;x1/&gt;X&lt;x2/&gt; is a single element from the array &lt;x3/&gt;A&lt;x4/&gt;. Otherwise,
&lt;x5/&gt;X&lt;x6/&gt; is an array with the same number of dimensions as the sum of the dimensionalities of all the
indices.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T134829Z" creationid="hsugawa8651" creationdate="20181117T134829Z">
        <seg>すべてのインデックスがスカラーである場合、結果&lt;x1/&gt;X&lt;x2/&gt;は、配列&lt;x3/&gt;A&lt;x4/&gt;からの単一要素である。それ以外の場合は &lt;x5/&gt;x&lt;x6/&gt;は、すべての次元の次元性の合計と同じ数の次元を持つ配列です。 索引。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If an array of eltype &lt;x1/&gt;Ptr{T}&lt;x2/&gt; is passed as a &lt;x3/&gt;Ptr{Ptr{T}}&lt;x4/&gt; argument, &lt;x5/&gt;`Base.cconvert`&lt;x6/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T140903Z" creationid="hsugawa8651" creationdate="20181117T140903Z">
        <seg>エルテープ&lt;x1/&gt;Ptr{T}&lt;x2/&gt;の配列が&lt;x3/&gt;Ptr{Ptr{T}}&lt;x4/&gt;引数として渡された場合、&lt;x5/&gt;'Base.チコンベルト'&lt;x6/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If an expression is entered into an interactive
session with a trailing semicolon, its value is not shown.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T091458Z" creationid="hsugawa8651" creationdate="20181109T224315Z">
        <seg>式の後ろにセミコロンをつけて入力すると、値は表示されません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If an expression is entered into an interactive session
with a trailing semicolon, its value is not shown.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T083934Z" creationid="hsugawa8651" creationdate="20181118T083934Z">
        <seg>式の後ろにセミコロンをつけて入力すると、値は表示されません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If an expression is entered into an interactive session with a trailing semicolon, its value is not shown.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T173447Z" creationid="hsugawa8651" creationdate="20181118T173447Z">
        <seg>式の後ろにセミコロンをつけて入力すると、値は表示されません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If any inner constructor method is defined, no default constructor method is provided: it is presumed
that you have supplied yourself with all the inner constructors you need.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T155806Z" creationid="hsugawa8651" creationdate="20181117T155806Z">
        <seg>内部コンストラクタメソッドが定義されている場合は、デフォルトのコンストラクタメソッドは提供されません。これは 必要なすべてのインナー・コンストラクターを自分で提供しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If applying these rules doesn't find a loadable path, the package should be considered not installed and the system should raise an error or prompt the user to install the appropriate package version.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T121206Z" creationid="hsugawa8651" creationdate="20181118T121206Z">
        <seg>これらのルールを適用してもロード可能なパスが見つからない場合、パッケージはインストールされていないと見なされ、システムはエラーまたはプロンプトを表示して、適切なパッケージバージョンをインストールするようユーザーに指示する必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If instead you want to specialize on the destination type &lt;x1/&gt;DestType&lt;x2/&gt; without specializing
on &lt;x3/&gt;DestStyle&lt;x4/&gt;, then you should define a method with the following signature:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T131655Z" creationid="hsugawa8651" creationdate="20181113T131655Z">
        <seg>その代わりに、宛先タイプ&lt;x1/&gt;DestType&lt;x2/&gt;に特化する必要はありません。 &lt;x3/&gt;DestStyle&lt;x4/&gt;では、次のシグニチャを使用してメソッドを定義する必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If memory usage is your concern, you can always replace objects with ones that consume less memory.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181110T024641Z" creationid="hsugawa8651" creationdate="20181110T024641Z">
        <seg>メモリ使用量が問題になる場合は、常にメモリを消費するオブジェクトを使用してオブジェクトを置き換えることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If needed, the sorting algorithm can be chosen:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T150316Z" creationid="hsugawa8651" creationdate="20181117T150316Z">
        <seg>必要に応じて、ソート・アルゴリズムを選択できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If one of the arguments is a 64-bit
float but the other one is not, then the &lt;x7/&gt;f(Float64,Float64)&lt;x8/&gt; method cannot be called and
the more general &lt;x9/&gt;f(Number,Number)&lt;x10/&gt; method must be used:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T013644Z" creationid="hsugawa8651" creationdate="20181120T013644Z">
        <seg>引数の1つが64ビット浮動小数点数で、もう1つがそうでない場合、この&lt;x7/&gt;f(Float64,Float64)&lt;x8/&gt;メソッドは呼び出すことができず、より一般的な&lt;x9/&gt;f(Number,Number)&lt;x10/&gt; メソッドを使用する必要があります。:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If proper finalization of &lt;x13/&gt;a&lt;x14/&gt; depends on &lt;x15/&gt;b&lt;x16/&gt; being valid,
it must be handled in other ways.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T152255Z" creationid="hsugawa8651" creationdate="20181117T152255Z">
        <seg>&lt;x13/&gt;a&lt;x14/&gt;の適切なファイナライズは、&lt;x15/&gt;b&lt;x16/&gt;が有効であることによって異なります。 他の方法で処理する必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If side effects are required, the short-circuit &lt;x3/&gt;&amp;&amp;&lt;x4/&gt; operator
should be used explicitly (see &lt;x5/&gt;Short-Circuit Evaluation&lt;x6/&gt;).</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T065419Z" creationid="hsugawa8651" creationdate="20181114T030751Z">
        <seg> 副次効果が必要な場合は、短絡 &lt;x3/&gt;&amp;&amp;&lt;x4/&gt;  演算子を明示的に使用する必要があります。（ 短絡評価 &lt;x5/&gt;Short-Circuit Evaluation&lt;x6/&gt;参照）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If such code encounters
non-ASCII text, it will gracefully fail with a clear error message, rather than silently introducing
corrupt results.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T075532Z" creationid="hsugawa8651" creationdate="20181120T075532Z">
        <seg> JuliaはASCII以外のテキストが検出された場合、エラーをただ出力するのではなく、明確なエラーメッセージを出力して処理を終了します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the
&lt;x4/&gt;own&lt;x5/&gt; parameter is omitted or false, the caller must ensure the buffer remains in existence until
all access is complete.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T152611Z" creationid="hsugawa8651" creationdate="20181117T152611Z">
        <seg>の &lt;x4/&gt;独自の&lt;x5/&gt;パラメータは省略されるか、またはfalseであるため、呼び出し側はバッファが存在しないことを確認する必要があります。 すべてのアクセスが完了しました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the &lt;x7/&gt;Ptr&lt;x8/&gt; itself is actually a &lt;x9/&gt;jl_value_t*&lt;x10/&gt;, it can be converted
back to a Julia object reference by &lt;x11/&gt;`unsafe_pointer_to_objref(ptr)`&lt;x12/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T152546Z" creationid="hsugawa8651" creationdate="20181117T152546Z">
        <seg>&lt;x7/&gt;Ptr&lt;x8/&gt;自身が実際に&lt;x9/&gt;jl_value_t*&lt;x10/&gt;である場合、それは変換されることができる。 &lt;x11/&gt;`unsafe_pointer_to_objref(ptr)`&lt;x12/&gt;でJuliaオブジェクト参照に戻ります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the C wrapper never expects the user to pass pointers to memory managed by Julia, then using
&lt;x1/&gt;p::Ptr{gsl_permutation}&lt;x2/&gt; for the method signature of the wrapper and similarly in the &lt;x3/&gt;`ccall`&lt;x4/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T152144Z" creationid="hsugawa8651" creationdate="20181117T152144Z">
        <seg>Cラッパーが、ユーザーがジュリアによって管理されたメモリーへのポインタを渡すことを予期しない場合は &lt;x1/&gt;p::Ptr{gsl mutations}&lt;x2/&gt;ラッパーの方が、同様に&lt;x3/&gt;の"ccall"&lt;x4/&gt;においても同様である。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the condition expression &lt;c0&gt;x &lt; y&lt;/c0&gt; is &lt;c1&gt;true&lt;/c1&gt;, then the corresponding block is evaluated; otherwise the condition expression &lt;c2&gt;x &gt; y&lt;/c2&gt; is evaluated, and if it is &lt;c3&gt;true&lt;/c3&gt;, the corresponding block is evaluated; if neither expression is true, the &lt;c4&gt;else&lt;/c4&gt; block is evaluated.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T134103Z" creationid="hsugawa8651" creationdate="20181119T133948Z">
        <seg>条件式&lt;c0&gt;x &lt; y&lt;/c0&gt;が&lt;c1&gt;真&lt;/c1&gt;の時は、対応するブロックが評価され、さもなければ、条件式&lt;c2&gt;x &gt; y&lt;/c2&gt;が評価され、これが&lt;c3&gt;真&lt;/c3&gt;の場合は、対応するブロックが評価されます。いずれの式も真でない場合、&lt;c4&gt;else&lt;/c4&gt;ブロックが評価されます。 </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the condition expression &lt;x1/&gt;x &lt; y&lt;x2/&gt; is &lt;x3/&gt;true&lt;x4/&gt;, then the corresponding block is evaluated; otherwise
the condition expression &lt;x5/&gt;x &gt; y&lt;x6/&gt; is evaluated, and if it is &lt;x7/&gt;true&lt;x8/&gt;, the corresponding block is
evaluated; if neither expression is true, the &lt;x9/&gt;else&lt;x10/&gt; block is evaluated.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T124335Z" creationid="hsugawa8651" creationdate="20181118T124335Z">
        <seg>条件式&lt;x1/&gt;x&lt;y&lt;x2/&gt;が&lt;x3/&gt;真&lt;x4/&gt;である場合には、対応するブロックは評価され、それ以外の場合は、対応するブロックが評価される 条件式&lt;x5/&gt;x&gt;y&lt;x6/&gt;が評価され、もしそれが&lt;x7/&gt;真&lt;x8/&gt;であれば、対応するブロックは 評価されます。どちらの式もtrueでない場合は、&lt;x9/&gt;else&lt;x10/&gt;ブロックが評価されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the condition expression is &lt;c4&gt;false&lt;/c4&gt; when the &lt;c5&gt;while&lt;/c5&gt; loop is first reached, the body is never evaluated.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T141322Z" creationid="hsugawa8651" creationdate="20181119T141322Z">
        <seg>条件式の評価が&lt;c4&gt;偽&lt;/c4&gt;に初めてなると、その後、本体は決して評価されません。
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the condition expression is &lt;x9/&gt;false&lt;x10/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T124421Z" creationid="hsugawa8651" creationdate="20181118T124421Z">
        <seg>条件式が&lt;x9/&gt;false&lt;x10/&gt;である場合</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the expression &lt;c0&gt;x &lt; y&lt;/c0&gt; is true, the entire ternary operator expression evaluates to the string &lt;c1&gt;"less than"&lt;/c1&gt; and otherwise it evaluates to the string &lt;c2&gt;"not less than"&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T135454Z" creationid="hsugawa8651" creationdate="20181119T135454Z">
        <seg>式&lt;c0&gt;x &lt; y&lt;/c0&gt;が真の場合、三項演算子の式全体は、文字列 &lt;c1&gt;"less than"&lt;/c1&gt; に評価され、偽の場合は文字列 &lt;c2&gt;"not less than"&lt;/c2&gt; に評価されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the expression &lt;x1/&gt;x &lt; y&lt;x2/&gt; is true, the entire ternary operator expression evaluates to the string
&lt;x3/&gt;"less than"&lt;x4/&gt; and otherwise it evaluates to the string &lt;x5/&gt;"not less than"&lt;x6/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T230135Z" creationid="hsugawa8651" creationdate="20181109T230135Z">
        <seg>式&lt;x1/&gt;x&lt;y&lt;x2/&gt;がtrueの場合、三元演算子の式全体が文字列に対して評価されます。 &lt;x3/&gt;"より小さい"&lt;x4/&gt;"であり、それ以外の場合は、文字列&lt;x5/&gt;"は&lt;x6/&gt;以上であると評価される。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the left-hand side is an array-indexing expression,
e.g. &lt;x19/&gt;X[2:end] .= sin.(Y)&lt;x20/&gt;, then it translates to &lt;x21/&gt;broadcast!&lt;x22/&gt; on a &lt;x23/&gt;view&lt;x24/&gt;, e.g.
&lt;x25/&gt;broadcast!(sin, view(X, 2:lastindex(X)), Y)&lt;x26/&gt;,
so that the left-hand side is updated in-place.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T120159Z" creationid="hsugawa8651" creationdate="20181118T120159Z">
        <seg>左側が配列インデックス式である場合は たとえば&lt;x19/&gt;X[2:end].=sin.(Y)&lt;x20/&gt;、次のように&lt;x23/&gt;ビュー&lt;x24/&gt;で&lt;X21/&gt;ブロードキャスト!&lt;x22/&gt;に変換されます。 &lt;x25/&gt;ブロードキャスト!(sin,view(X,2:lastindex(X)),Y)&lt;x26/&gt; 左側がインプレイス更新されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the manifest stanza matching &lt;x1/&gt;uuid&lt;x2/&gt; has a &lt;x3/&gt;path&lt;x4/&gt; entry, use that path relative to the manifest file.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T121159Z" creationid="hsugawa8651" creationdate="20181118T121159Z">
        <seg>&lt;x1/&gt;uuid&lt;x2/&gt;と一致するマニフェスト・スタンザが&lt;x3/&gt;パス&lt;x4/&gt;のパスを持つ場合は、マニフェスト・ファイルに対してそのパスを使用します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the memory is already owned by Julia, or is an &lt;x1/&gt;isbits&lt;x2/&gt; type, and is known to be non-null:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T151809Z" creationid="hsugawa8651" creationdate="20181117T151809Z">
        <seg>メモリが既にJuliaによって所有されている場合、または&lt;x1/&gt;イスビトス&lt;x2/&gt;タイプであり、非NULLであることが知られている場合は、次のように指定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the memory is owned by C:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T151818Z" creationid="hsugawa8651" creationdate="20181117T151818Z">
        <seg>メモリがC:に所有されている場合</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the numerator and denominator of a rational have common factors, they are reduced to lowest
terms such that the denominator is non-negative:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T123510Z" creationid="hsugawa8651" creationdate="20181118T123510Z">
        <seg>有理の分子と分母が共通の因子をもつ場合には、それらは最小に減少する 分母が負でないことを示す用語。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the patchwork is well designed, even though the implementations of the methods may be quite
different, the outward behavior of the function will appear seamless and consistent.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T010039Z" creationid="hsugawa8651" creationdate="20181120T010039Z">
        <seg>パッチワークがうまく設計されていれば、メソッドの実装がかなり異なっていても、外側からは関数の動作は継ぎ目なく一貫しているように見えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the pointer of interest is a plain-data array (primitive type or immutable struct), the function &lt;x1/&gt;`unsafe_wrap(Array, ptr,dims, own = false)`&lt;x2/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T152606Z" creationid="hsugawa8651" creationdate="20181117T152606Z">
        <seg>関心のあるポインタがプレーン・データ・アレイ(プリミティブ・タイプまたは不変構造体)である場合、関数&lt;x1/&gt;'unsafe_wrap(Array,ptr,dims,own=false)`&lt;x2/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the same &lt;x8/&gt;X&lt;x9/&gt; package is imported multiple times in the same Julia session, it is only loaded the first time—on subsequent imports, the importing module gets a reference to the same module.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T152740Z" creationid="hsugawa8651" creationdate="20181117T152740Z">
        <seg>同じ&lt;x8/&gt;x9/&gt;パッケージが同じジュリアセッションに複数回インポートされた場合は、最初にインポートされたときにのみ読み込まれます。インポートモジュールは、同じモジュールへの参照を取得します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the type &lt;x5/&gt;T&lt;x6/&gt; is
omitted it will default to &lt;x7/&gt;`Float64`&lt;x8/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154346Z" creationid="hsugawa8651" creationdate="20181109T154346Z">
        <seg>&lt;x5/&gt;T&lt;x6/&gt;の場合 省略すると、デフォルトでは&lt;x7/&gt;"Float64&lt;x8/&gt;になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the type were declared &lt;x1/&gt;mutable&lt;x2/&gt;, you could reach in and directly change the field values to
violate this invariant.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T155755Z" creationid="hsugawa8651" creationdate="20181117T155755Z">
        <seg>タイプが宣言されている場合は、&lt;x1/&gt;mutable&lt;x2/&gt;の値を入力すると、フィールド値を入力して、フィールド値を直接変更することができます。 この不変に違反します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the variable &lt;c6&gt;i&lt;/c6&gt; has not been introduced in an other scope, in the &lt;c7&gt;for&lt;/c7&gt; loop form, it is visible only inside of the &lt;c8&gt;for&lt;/c8&gt; loop, and not afterwards.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T141837Z" creationid="hsugawa8651" creationdate="20181119T141640Z">
        <seg>&lt;c7&gt;for&lt;/c7&gt;ループ方式の時は、変数&lt;c6&gt;i&lt;/c6&gt;が、他のスコープにとりこまれていない場合、変数は &lt;c8&gt;for&lt;/c8&gt;ループの内部でのみ見えて、その後ろでは見えません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the variable &lt;x6/&gt;i&lt;x7/&gt; has not been introduced in an other
scope, in the &lt;x8/&gt;for&lt;x9/&gt; loop form, it is visible only inside of the &lt;x10/&gt;for&lt;x11/&gt; loop, and not afterwards.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T000408Z" creationid="hsugawa8651" creationdate="20181120T000408Z">
        <seg>&lt;x8/&gt;for&lt;x9/&gt;ループ方式の時は、変数&lt;x6/&gt;i&lt;x7/&gt;が、他のスコープにとりこまれていない場合、変数は &lt;x10/&gt;for&lt;x11/&gt;ループの内部でのみ見えて、その後ろでは見えません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the variable &lt;x6/&gt;i&lt;x7/&gt; has not been introduced in another
scope, in the &lt;x8/&gt;for&lt;x9/&gt; loop form, it is visible only inside of the &lt;x10/&gt;for&lt;x11/&gt; loop, and not
outside/afterwards.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T231159Z" creationid="hsugawa8651" creationdate="20181109T231159Z">
        <seg>変数&lt;x6/&gt;i&lt;x7/&gt;が別の変数に導入されていない場合 &lt;x8/&gt;ループ形式の&lt;x8/&gt;では、&lt;x10/&gt;ループの場合は&lt;x10/&gt;の内部でのみ可視となります。 その後になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If there is no manifest file, &lt;x2/&gt;graph&lt;x3/&gt; is empty.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T121114Z" creationid="hsugawa8651" creationdate="20181118T121114Z">
        <seg>マニフェストファイルが存在しない場合、&lt;x2/&gt;グラフ&lt;x3/&gt;は空である。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If there is only a single parameter, the enclosing curly braces (in &lt;x5/&gt;where {T}&lt;x6/&gt;) can be omitted,
but are often preferred for clarity.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T020810Z" creationid="hsugawa8651" creationdate="20181120T020810Z">
        <seg>パラメータが1つしかない場合は、中括弧（where {T}）を省略することができますが、わかりやくするために、よく好んでつけられます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If this example were rewritten to use a &lt;x1/&gt;for&lt;x2/&gt; keyword for each variable, then the output would
be different: the second and fourth values would contain &lt;x3/&gt;0&lt;x4/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T124545Z" creationid="hsugawa8651" creationdate="20181118T124545Z">
        <seg>この例が、各変数ごとに&lt;x2/&gt;キーワードに対して&lt;x1/&gt;を使用するように書き直された場合、出力は次のようになります。 異なる値:2番目と4番目の値は&lt;x3/&gt;0&lt;x4/&gt;を含むことになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you are defining an array type that allows non-traditional indexing (indices that start at
something other than 1), you should specialize &lt;x1/&gt;`axes`&lt;x2/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T094526Z" creationid="hsugawa8651" creationdate="20181118T094526Z">
        <seg>非伝統的なインデックスを作成するための配列タイプを定義する場合は 1以外のものは、&lt;x1/&gt;'の軸を特殊化してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you call it in an interactive session without assigning the return value anywhere, you will
see the tuple returned:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T101352Z" creationid="hsugawa8651" creationdate="20181112T101352Z">
        <seg>これを対話型セッションで呼び出しても、戻り値はどこにも割り当てられない場合は 戻されたタプルを参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you define
your own equality function, you should probably define a corresponding &lt;x7/&gt;`hash()`&lt;x8/&gt; method
to ensure that &lt;x9/&gt;isequal(x,y)&lt;x10/&gt; implies &lt;x11/&gt;hash(x) == hash(y)&lt;x12/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T065031Z" creationid="hsugawa8651" creationdate="20181120T065031Z">
        <seg>もし等値関数を定義したい場合は、&lt;x7/&gt;`hash()`&lt;x8/&gt; メソッドを定義して、する&lt;x9/&gt;isequal(x,y)&lt;x10/&gt;が &lt;x11/&gt;hash(x) == hash(y)&lt;x12/&gt;を表すように保証することをお勧めします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you define
your own equality function, you should probably define a corresponding &lt;x7/&gt;`hash`&lt;x8/&gt; method
to ensure that &lt;x9/&gt;isequal(x,y)&lt;x10/&gt; implies &lt;x11/&gt;hash(x) == hash(y)&lt;x12/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T030708Z" creationid="hsugawa8651" creationdate="20181114T030708Z">
        <seg>定義する場合 独自の等価性関数は、おそらく対応する&lt;x7/&gt;'ハッシュ''&lt;x8/&gt;メソッドを定義する必要があります。 &lt;x9/&gt;isequal(x,y)&lt;x10/&gt;が&lt;x11/&gt;ハッシュ(x)==hash(y)&lt;x12/&gt;を意味することを保証する。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you define a fourth method that is more specialized for integers:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T023225Z" creationid="hsugawa8651" creationdate="20181120T023225Z">
        <seg>整数に特化した4番目のメソッドを定義した場合は、次のようになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you define a function expecting
a string argument, you should declare the type as &lt;x5/&gt;AbstractString&lt;x6/&gt; in order to accept any string
type.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T075842Z" creationid="hsugawa8651" creationdate="20181120T075816Z">
        <seg>文字列の引数を扱う関数を定義する場合は、任意の文字列型を使用するために &lt;x5/&gt;AbstractString&lt;x6/&gt; を型として宣言する必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you don't
specify this trait, the default value &lt;x5/&gt;IndexCartesian()&lt;x6/&gt; is used.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T155920Z" creationid="hsugawa8651" creationdate="20181109T155920Z">
        <seg>もしあなたが この特性を指定します。デフォルト値&lt;x5/&gt;IndexCartesian()&lt;x6/&gt;は使用されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you find that something is slow, we highly
recommend reading through the :ref:`man-performance-tips`
section before trying anything else.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T183539Z" creationid="hsugawa8651" creationdate="20181118T183539Z">
        <seg>JuliaのコンパイラはPythonやRで使われるようなインタプリタとは異なるので、もしかしたら最初はその性能に気づかないかもしれません。 遅いと感じたら、何かを試す前に  :ref:`man-performance-tips` を参照することをお勧めします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you find that something is slow, we highly
recommend reading through the &lt;a0&gt;&lt;s1&gt;Performance Tips&lt;/s1&gt;&lt;/a0&gt;
section before trying anything else.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T081550Z" creationid="hsugawa8651" creationdate="20181118T081550Z">
        <seg>JuliaのコンパイラはPythonやRで使われるようなインタプリタとは異なるので、もしかしたら最初はその性能に気づかないかもしれません。 遅いと感じたら、何かを試す前に &lt;s1&gt;Performance Tips &lt;/s1&gt;を参照することをお勧めします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you find that something is slow, we highly recommend reading through the &lt;a0&gt;Performance Tips&lt;/a0&gt; section before trying anything else.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T182406Z" creationid="hsugawa8651" creationdate="20181118T182406Z">
        <seg>遅いと感じたら、何かを試す前に&lt;a0&gt;Performance Tips&lt;/a0&gt;を参照することをお勧めします。 Juliaがどのように動作するかを理解すれば、C言語と同等の速さで動くコードを簡単に書くことができるでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you have code that you want executed whenever Julia is run, you can
put it in &lt;c0&gt;&lt;s1&gt;~/.juliarc.jl&lt;/s1&gt;&lt;/c0&gt;:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T085054Z" creationid="hsugawa8651" creationdate="20181118T085054Z">
        <seg>Juliaの起動時に毎回実行したいコードがあれば、 &lt;c0&gt;&lt;s1&gt;~/.juliarc.jl&lt;/s1&gt;&lt;/c0&gt; に書いておくことができます。

</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you have code that you want executed whenever Julia is run, you can put it in
&lt;x1/&gt;&lt;x2/&gt;/.julia/config/startup.jl&lt;x3/&gt;:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T092649Z" creationid="hsugawa8651" creationdate="20181109T224453Z">
        <seg>Juliaの起動時に毎回実行したいコードがあれば、 &lt;x1/&gt;&lt;x2/&gt;/.julia/config/startup.jl&lt;x3/&gt; に書いておくことができます。

</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you have code that you want executed whenever Julia is run, you can put it in &lt;c0&gt;~/.julia/config/startup.jl&lt;/c0&gt;:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T174046Z" creationid="hsugawa8651" creationdate="20181118T174046Z">
        <seg>Juliaの起動時に毎回実行したいコードがあれば、 &lt;c0&gt;/.julia/config/startup.jl&lt;/c0&gt; に書いておくことができます。

</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you have code that you want executed whenever Julia is run, you can put it in &lt;x1/&gt;&lt;x2/&gt;/.juliarc.jl&lt;x3/&gt;:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T233842Z" creationid="hsugawa8651" creationdate="20181119T233842Z">
        <seg>Juliaの起動時に毎回実行したいコードがあれば、 &lt;x1/&gt;&lt;x2/&gt;~/.juliarc.jl&lt;x3/&gt; に書いておくことができます。

</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you index into
a string at such an invalid byte index, an error is thrown:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T081530Z" creationid="hsugawa8651" creationdate="20181120T081530Z">
        <seg>このような無効なバイトインデックスで文字列にインデックスを付けた場合、例外が投げられます。:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you iterate through the indices 1 through &lt;x3/&gt;`endof(s)`&lt;x4/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T081719Z" creationid="hsugawa8651" creationdate="20181120T081719Z">
        <seg>インデックス1から &lt;x3/&gt;`endof(s)`&lt;x4/&gt;まで繰り返し処理を行い、</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you iterate through the indices 1 through &lt;x3/&gt;`lastindex(s)`&lt;x4/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T100635Z" creationid="hsugawa8651" creationdate="20181120T100635Z">
        <seg>インデックス1から &lt;x3/&gt;`lastindex(s)`&lt;x4/&gt;まで繰り返し処理を行い、</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you just want to install and use packages, simply use Julia's built-in package manager to add packages to your environment and write &lt;x1/&gt;import X&lt;x2/&gt; or &lt;x3/&gt;using X&lt;x4/&gt; in your code to load packages that you've added.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T152754Z" creationid="hsugawa8651" creationdate="20181117T152754Z">
        <seg>パッケージをインストールして使用する場合は、Juliaの組み込みパッケージ・マネージャーを使用して、パッケージを環境に追加し、X&lt;x4/&gt;を使用してx2/&gt;を記述するか、X&lt;x4/&gt;を使用して、追加したパッケージをロードしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you try this at
the REPL, you get the error:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181110T024718Z" creationid="hsugawa8651" creationdate="20181110T024718Z">
        <seg>これを REPLはエラーを受け取ります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you want
to import a module but only use its symbols inside a specific function or set of functions, you
have two options:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181110T025135Z" creationid="hsugawa8651" creationdate="20181110T025135Z">
        <seg>必要な場合 モジュールをインポートするために、特定の関数または関数のセット内のシンボルのみを使用するには、次のようにします。 には次の2つのオプションがあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you want to check that each converted value
is a valid code point, use the &lt;x3/&gt;`isvalid()`&lt;x4/&gt; function:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T080354Z" creationid="hsugawa8651" creationdate="20181120T080354Z">
        <seg>もし変換された値が有効なコードポイントであるか確認したい場合は、&lt;x3/&gt;`isvalid()`&lt;x4/&gt;関数を使用してください。:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you want to check that each converted value
is a valid code point, use the &lt;x3/&gt;`isvalid`&lt;x4/&gt; function:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T095929Z" creationid="hsugawa8651" creationdate="20181120T095929Z">
        <seg>もし変換された値が有効なコードポイントであるか確認したい場合は、&lt;x3/&gt;`isvalid()`&lt;x4/&gt;関数を使用してください。:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you want to extract a character from a string, you index into it:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T080808Z" creationid="hsugawa8651" creationdate="20181120T080808Z">
        <seg>文字列から文字を抽出する場合はその文字列にインデックスを添える必要があります。:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you want your Julia process to have access only to the packages in one project or package directory, make it the only entry in &lt;x5/&gt;LOAD_PATH&lt;x6/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T121411Z" creationid="hsugawa8651" creationdate="20181118T121411Z">
        <seg>Juliaプロセスを1つのプロジェクトまたはパッケージディレクトリのパッケージにのみアクセスできるようにする場合は、&lt;x6/&gt;LOAD_PATH&lt;x6/&gt;&lt;x6/&gt;のLOAD_PATH&lt;x6/&gt;のエントリだけを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you wish to specialize on a particular style &lt;x1/&gt;DestStyle&lt;x2/&gt;, define a method for</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T131644Z" creationid="hsugawa8651" creationdate="20181113T131644Z">
        <seg>特定のスタイル&lt;x1/&gt;DestStyle&lt;x2/&gt;に特化する場合は、次の方法を定義します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you write a custom &lt;x1/&gt;`AbstractArray`&lt;x2/&gt; type, you can specify that it has fast linear indexing using</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T155906Z" creationid="hsugawa8651" creationdate="20181109T155906Z">
        <seg>カスタム&lt;x1/&gt;`AbstractArray'&lt;x2/&gt;タイプを書く場合は、次のようにして、高速な線形インデックスを作成することを指定できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If your array type does have fixed dimensionality requirements, then you should
subtype &lt;x1/&gt;AbstractArrayStyle&lt;x2/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T131830Z" creationid="hsugawa8651" creationdate="20181113T131830Z">
        <seg>配列タイプに固定次元要件がある場合は、次の操作を行います。 サブタイプ&lt;x1/&gt;AbstractArrayStyle&lt;x2/&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If, on the other hand, Julia was loading the &lt;x1/&gt;other&lt;x2/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T121213Z" creationid="hsugawa8651" creationdate="20181118T121213Z">
        <seg>一方、Juliaが&lt;x1/&gt;他の&lt;x2/&gt;をロードしていた場合</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Implementation</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T150459Z" creationid="hsugawa8651" creationdate="20181117T150459Z">
        <seg>実装</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Important optional methods&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T094055Z" creationid="hsugawa8651" creationdate="20181118T094055Z">
        <seg>重要なオプションのメソッド&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In
this case the name is resolved within the current process.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T223759Z" creationid="hsugawa8651" creationdate="20181109T223759Z">
        <seg>の この場合、名前は現在のプロセス内で解決されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In Julia code wrapping calls to external C routines, ordinary (non-pointer) data should be declared
to be of type &lt;x1/&gt;T&lt;x2/&gt; inside the &lt;x3/&gt;`ccall`&lt;x4/&gt;, as they are passed by value.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T151439Z" creationid="hsugawa8651" creationdate="20181117T151439Z">
        <seg>外部Cルーチンへの呼び出しをラップするJuliaコードでは、通常の(ポインタ以外の)データを宣言する必要があります。 &lt;x3/&gt;の中で&lt;x1/&gt;T&lt;x2/&gt;であり、それらは値を通過して渡される。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In Julia code wrapping calls to external Fortran routines, all input arguments
should be declared as of type &lt;x1/&gt;Ref{T}&lt;x2/&gt;, as Fortran passes all variables by
pointers to memory locations.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T151452Z" creationid="hsugawa8651" creationdate="20181117T151452Z">
        <seg>外部Fortranルーチンへの呼び出しをラップするJuliaコードでは、すべての入力引数が は、Fortranがすべての変数を通過するので、&lt;x1/&gt;Ref{T}&lt;x2/&gt;の形式で宣言する必要があります。 メモリ位置へのポインタ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In Julia these are very different things.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T081321Z" creationid="hsugawa8651" creationdate="20181120T081321Z">
        <seg> Juliaでは Char 型と String 型はとても異なったものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In Julia, a function is an object that maps a tuple of argument values to a return value.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T125000Z" creationid="hsugawa8651" creationdate="20181110T025448Z">
        <seg>Juliaでは、関数は引数値のタプルを戻り値に写像するオブジェクトです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In Julia, all arguments to functions are &lt;x1/&gt;passed by
sharing&lt;x2/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154159Z" creationid="hsugawa8651" creationdate="20181109T154159Z">
        <seg>Juliaでは、関数に対するすべての引数は、&lt;x1/&gt;に渡されます。 共有&lt;x2/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In Julia, exceeding the maximum representable value of a given type results in a wraparound behavior:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T033143Z" creationid="hsugawa8651" creationdate="20181109T225601Z">
        <seg>Juliaでは、指定された型の表現可能な最大値を超えた場合、ワードラップが発生します。:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In Julia, most operators are just functions with support for special syntax.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T125956Z" creationid="hsugawa8651" creationdate="20181120T102056Z">
        <seg>Juliaでは、ほとんどの演算子は、特殊な構文をとっていても、単なる関数です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In Julia, the binding of a variable &lt;x1/&gt;x&lt;x2/&gt; cannot be changed by passing &lt;x3/&gt;x&lt;x4/&gt; as an argument to a function.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181110T025027Z" creationid="hsugawa8651" creationdate="20181110T025027Z">
        <seg>Juliaでは、変数&lt;x1/&gt;x&lt;x2/&gt;の結合は、関数の引数として&lt;x3/&gt;x&lt;x4/&gt;を渡すことで変更することはできない。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In Julia, type objects also serve as constructor functions: they create new instances of themselves
when applied to an argument tuple as a function.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T155624Z" creationid="hsugawa8651" creationdate="20181117T155624Z">
        <seg>ジュリアでは、オブジェクトもコンストラクタ関数として機能します。これらは、自分自身の新しいインスタンスを作成するためのものです。 関数として引数タプルに適用されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In Julia, types are
themselves run-time objects, and can also be used to convey information
to the compiler.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T082257Z" creationid="hsugawa8651" creationdate="20181118T082257Z">
        <seg>Juliaでは、型そのものが実行時オブジェクトとなり、同時にコンパイラに対して情報を伝えるために利用できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In Julia, types are themselves run-time objects, and can also be used to convey information to the compiler.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T182606Z" creationid="hsugawa8651" creationdate="20181118T182606Z">
        <seg>Juliaでは、型そのものが実行時オブジェクトとなり、同時にコンパイラに対して情報を伝えるために利用できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In Julia, vectorized functions are
&lt;x7/&gt;not&lt;x8/&gt; required for performance, and indeed it is often beneficial to write your own loops (see
&lt;x9/&gt;&lt;x10/&gt;&lt;x11/&gt;(@ref man-performance-tips)), but they can still be convenient.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T121847Z" creationid="hsugawa8651" creationdate="20181118T120057Z">
        <seg>ジュリアではベクトル化された関数は &lt;x7/&gt;はパフォーマンスに必要な&lt;x8/&gt;ではありません。実際には、独自のループを作成することが有益です( &lt;x9/&gt;&lt;x10/&gt;&lt;x11/&gt;(@ref man-performance-tipsはありますが、それでも便利です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In Julia, we can access the parts independently to make a copy of that string:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T151216Z" creationid="hsugawa8651" creationdate="20181117T151216Z">
        <seg>Juliaでは、その文字列のコピーを作成するために、パーツに独立してアクセスすることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In UTF-8, ASCII characters -- i.e. those with code points less than
0x80 (128) -- are encoded as they are in ASCII, using a single byte, while code points 0x80 and
above are encoded using multiple bytes -- up to four per character.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T081512Z" creationid="hsugawa8651" creationdate="20181120T081512Z">
        <seg>UTF-8では、ASCII、つまり0x80(128)以下のコードポイントの文字は 1バイトでASCIIとしてエンコードされ、0x80以上のコードポイントは、1文字あたり最大4バイトのマルチバイトでエンコードされます。 </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In a Unix-like
environment, a reliable way to pass options to &lt;x6/&gt;julia&lt;x7/&gt; in an
executable script would be to start the script as a &lt;x8/&gt;bash&lt;x9/&gt; script and
use &lt;x10/&gt;exec&lt;x11/&gt; to replace the process to &lt;x12/&gt;julia&lt;x13/&gt;:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181110T024926Z" creationid="hsugawa8651" creationdate="20181110T024926Z">
        <seg>Unixライクな 環境、信頼できる方法で&lt;x6/&gt;julia&lt;x7/&gt;にオプションを渡すことができます。 実行可能スクリプトは、スクリプトを&lt;x8/&gt;bash&lt;x9/&gt;スクリプトとして起動します。 &lt;x10/&gt;exec&lt;x11/&gt;を使用して、プロセスを&lt;x12/&gt;ジュリア&lt;x13/&gt;に置き換えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In addition
to these Unicode escape forms, all of &lt;x5/&gt;C's traditional escaped input forms&lt;x6/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T080655Z" creationid="hsugawa8651" creationdate="20181120T080655Z">
        <seg>これらのUnicodeエスケープ方式に加えて、 C言語のエスケープ形式 &lt;x5/&gt;C's traditional escaped input forms&lt;x6/&gt;（訳注:ウィキペディア英語版）を用いた入力も可能です。:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In addition to all the iterable and indexable methods from above, these types can also interact
with each other and use most of the methods defined in Julia Base for &lt;x1/&gt;AbstractArrays&lt;x2/&gt;:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T094522Z" creationid="hsugawa8651" creationdate="20181118T094522Z">
        <seg>これらのタイプは、上記のすべてのiterableメソッドとindexableメソッドに加えて、相互作用することもできます。 &lt;x1/&gt;AbstractArrays&lt;x2/&gt;のために、Julia Baseで定義されたほとんどのメソッドをお互いに使用します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In addition to the above, some
advantages of Julia over comparable systems include:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T082616Z" creationid="hsugawa8651" creationdate="20181118T082616Z">
        <seg>これに加え、Juliaは以下のような長所を持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In addition to the above, some advantages of Julia over comparable systems include:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T182658Z" creationid="hsugawa8651" creationdate="20181118T182658Z">
        <seg>これに加え、Juliaは以下のような長所を持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In addition to this manual, there are various other resources that may
help new users get started with Julia:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T175802Z" creationid="hsugawa8651" creationdate="20181118T085632Z">
        <seg>新しいユーザを支援するための有用な学習リソースのリストは、Julia Webサイトの&lt;x1/&gt;学習&lt;x2/&gt;ページに掲載されています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In addition to this manual, there are various other resources that may help new users get started
with Julia:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T233937Z" creationid="hsugawa8651" creationdate="20181119T233937Z">
        <seg>新しいユーザを支援するための有用な学習リソースのリストは、Julia Webサイトの&lt;x1/&gt;学習&lt;x2/&gt;ページに掲載されています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In all cases the ambiguity is resolved in favor of interpretation as numeric literals:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T111937Z" creationid="hsugawa8651" creationdate="20181112T111937Z">
        <seg>すべての場合に、あいまいさは数値リテラルとして解釈されるために解決されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In any indexing expression, the keyword &lt;x1/&gt;end&lt;x2/&gt; can be used as a shorthand for the last index (computed
by &lt;x3/&gt;`endof(str)`&lt;x4/&gt;).</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T081115Z" creationid="hsugawa8651" creationdate="20181120T081115Z">
        <seg>どのインデックス表現でも、キーワード &lt;x1/&gt;end&lt;x2/&gt; は（&lt;x3/&gt;`endof(str)`&lt;x4/&gt;) で求められる）インデックスの末尾の省略形として使うことができます。 </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In applications where overflow is possible, explicit checking for wraparound produced
by overflow is essential; otherwise, the &lt;x3/&gt;`BigInt`&lt;x4/&gt; type in &lt;x5/&gt;Arbitrary Precision Arithmetic&lt;x6/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T033318Z" creationid="hsugawa8651" creationdate="20181112T110524Z">
        <seg> オーバーフローを許容するアプリケーションでは、オーバーフローにより発生したワードラップの明示的なチェックは不可欠です。 チェックが難しい場合は、任意精度計算&lt;x5/&gt;Arbitrary Precision Arithmetic&lt;x6/&gt; の  &lt;x3/&gt;`BigInt`&lt;x4/&gt;型を使用することをお勧めします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In both cases, we resolve the ambiguity in favor of interpretation as a numeric literals:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T040731Z" creationid="hsugawa8651" creationdate="20181120T000910Z">
        <seg>上記両ケースでは、優先的に数値リテラルとして解釈されるようにすることで、あいまいさを回避しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In combination, these goals lead to a more complex package loading mechanism than most dynamic languages have, but it also yields scalability and reproducibility that is more commonly associated with static languages.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T121444Z" creationid="hsugawa8651" creationdate="20181118T121444Z">
        <seg>これらの目標は、多くの動的言語に比べて、より複雑なパッケージロードメカニズムにつながりますが、静的言語により一般的に関連するスケーラビリティーと再現性も得られます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In conjunction with other control flow, however, &lt;x11/&gt;return&lt;x12/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T125816Z" creationid="hsugawa8651" creationdate="20181110T025752Z">
        <seg>けれども、実行順序を制御する場合、&lt;x11/&gt;return&lt;x12/&gt;は役に立ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In contrast with &lt;x1/&gt;for i = 1:length(A)&lt;x2/&gt;, iterating with &lt;x3/&gt;`eachindex`&lt;x4/&gt; provides an efficient way to
iterate over any array type.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T155900Z" creationid="hsugawa8651" creationdate="20181109T155900Z">
        <seg>i=1:長さ(A)&lt;x2/&gt;の&lt;x1/&gt;とは対照的に、&lt;x3/&gt;'の反復は、効率的な方法である。&lt;x3/&gt;"エアチンデス"&lt;x4/&gt;である 任意の配列タイプに対して繰り返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In contrast, pointers returned by the C function called should be declared to be of output type
&lt;x9/&gt;`Ptr{T}`&lt;x10/&gt;, reflecting that the memory pointed to is managed by C only.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T151446Z" creationid="hsugawa8651" creationdate="20181117T151446Z">
        <seg>これとは対照的に、呼び出されるC関数によって返されるポインタは、出力型であることが宣言されるべきです。 &lt;x9/&gt;`Ptr{T}&lt;x10/&gt;は、メモリがCによって管理されていることを示しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In contrast, preprocessor "macro" systems, like that of C and C++, perform textual manipulation
and substitution before any actual parsing or interpretation occurs.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T115141Z" creationid="hsugawa8651" creationdate="20181118T115141Z">
        <seg>これとは対照的に、プリプロセッサ「マクロ」システムは、CおよびC++のシステムと同様に、テキスト操作を実行します。 実際の構文解析または解釈の前に置換する必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In fact, &lt;x11/&gt;f.(args...)&lt;x12/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T161317Z" creationid="hsugawa8651" creationdate="20181114T161317Z">
        <seg>実際には、&lt;x11/&gt;f.(args.)&lt;x12/&gt;です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In fact, &lt;x3/&gt;`macroexpand`&lt;x4/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T001404Z" creationid="hsugawa8651" creationdate="20181120T001341Z">
        <seg>実際には、&lt;x3/&gt;`macroexpand`&lt;x4/&gt;です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In fact, &lt;x7/&gt;Point{T}&lt;x8/&gt; is a distinct constructor function for each type &lt;x9/&gt;T&lt;x10/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T123905Z" creationid="hsugawa8651" creationdate="20181118T123905Z">
        <seg>実際、&lt;x7/&gt;ポイント{T}&lt;x8/&gt;は、それぞれのタイプ&lt;x9/&gt;T&lt;x10/&gt;に対して個別のコンストラクタ関数である。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In fact, the &lt;x15/&gt;Pub&lt;x16/&gt; package has started to use it.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T152856Z" creationid="hsugawa8651" creationdate="20181117T152856Z">
        <seg>実際には、&lt;x15/&gt;Pub&lt;x16/&gt;パッケージが使用されるようになりました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In general, a broadcast operation is represented by a lazy &lt;x1/&gt;Broadcasted&lt;x2/&gt; container that holds onto
the function to be applied alongside its arguments.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T131512Z" creationid="hsugawa8651" creationdate="20181113T131512Z">
        <seg>一般的に、ブロードキャスト動作は 引数と共に適用される関数です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In general, the &lt;c0&gt;for&lt;/c0&gt; loop construct can iterate over any container.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T142014Z" creationid="hsugawa8651" creationdate="20181119T141958Z">
        <seg>一般に、&lt;c0&gt;for&lt;/c0&gt;ループはどのコンテナに対しても反復処理が可能です。 </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In general, the &lt;x1/&gt;for&lt;x2/&gt; loop construct can iterate over any container.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T124436Z" creationid="hsugawa8651" creationdate="20181118T124436Z">
        <seg>一般的に、&lt;x2/&gt;ループ構成の&lt;x1/&gt;は、任意のコンテナにわたって反復することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In general, unlike many other technical computing languages, Julia does not expect programs to
be written in a vectorized style for performance.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154152Z" creationid="hsugawa8651" creationdate="20181109T154152Z">
        <seg>一般的に、多くの他の技術計算言語とは異なり、Juliaはプログラムを期待していない。 パフォーマンスを向上させるためにベクトル化されたスタイルで記述する必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In mathematics, &lt;x1/&gt;+&lt;x2/&gt; usually denotes a &lt;x3/&gt;commutative&lt;x4/&gt; operation, where the order of the operands does
not matter.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T082229Z" creationid="hsugawa8651" creationdate="20181120T082229Z">
        <seg>数学では、&lt;x1/&gt;+&lt;x2/&gt; はしばしば &lt;x3/&gt;commutative&lt;x4/&gt; 可換 演算（被演算子の順番が関係ない演算）を表します。 </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In more complex cases, resolving method ambiguities involves a certain
element of design; this topic is explored further &lt;x1/&gt;&lt;x2/&gt;&lt;x3/&gt;(@ref man-method-design-ambiguities).</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T014407Z" creationid="hsugawa8651" creationdate="20181120T014407Z">
        <seg>より複雑なケースでは、メソッドの曖昧さを解決するには一定の設計要素が必要になります。この話題は[below]（@ ref man-method-design-ambiguities）をさらに詳しく解説しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In order to compute trigonometric functions with degrees instead of radians, suffix the function
with &lt;x1/&gt;d&lt;x2/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T074644Z" creationid="hsugawa8651" creationdate="20181118T100125Z">
        <seg>ラジアンではなく角度で三角関数を計算するためには、 &lt;x1/&gt;d&lt;x2/&gt; を関数の末尾に付与してください。 </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In order to control the
type explicitly, a type can be prepended to the comprehension.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154854Z" creationid="hsugawa8651" creationdate="20181109T154854Z">
        <seg>制御を行うには 明示的にタイプを認識することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In order to define a new display backend, one should first create a subtype &lt;x1/&gt;D&lt;x2/&gt; of the abstract
class &lt;x3/&gt;AbstractDisplay&lt;x4/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T063320Z" creationid="hsugawa8651" creationdate="20181114T063320Z">
        <seg>新しい表示バックエンドを定義するには、まず抽象のサブタイプ&lt;x1/&gt;D&lt;x2/&gt;を作成する必要があります。 クラス&lt;x3/&gt;AbstractDisplay&lt;x4/&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In order to implement such a &lt;x1/&gt;copy&lt;x2/&gt; or &lt;x3/&gt;copyto!&lt;x4/&gt;, method, of course, you must
work with the &lt;x5/&gt;Broadcasted&lt;x6/&gt; wrapper to compute each element.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T131713Z" creationid="hsugawa8651" creationdate="20181113T131713Z">
        <seg>このような&lt;x1/&gt;コピー&lt;x2/&gt;または&lt;x3/&gt;コピーを実装するには、もちろん、メソッドを使用する必要があります。 &lt;x5/&gt;ブロードキャストされた&lt;x6/&gt;ラッパーを使用して、各要素を計算します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In order to pass this function to C, we obtain its address using the macro &lt;x1/&gt;@cfunction&lt;x2/&gt;:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T133256Z" creationid="hsugawa8651" creationdate="20181117T133256Z">
        <seg>この関数をCに渡すためには、マクロ&lt;x1/&gt;@cfunction&lt;x2/&gt;:を使ってアドレスを取得します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In order to support indexing with ranges or vectors of &lt;x9/&gt;Int&lt;x10/&gt;s, separate methods must be written:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T113139Z" creationid="hsugawa8651" creationdate="20181112T113139Z">
        <seg>&lt;x9/&gt;Int&lt;x10/&gt;の範囲またはベクトルを用いたインデックス作成をサポートするためには、別の方法を記述する必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In other
words, while developing you might use a workflow something like this:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181110T024745Z" creationid="hsugawa8651" creationdate="20181110T024745Z">
        <seg>その他 開発中にワークフローを使用することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In other circumstances, it is handy to be able to stop an iteration and move on to the next one
immediately.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T124517Z" creationid="hsugawa8651" creationdate="20181118T124517Z">
        <seg>他の状況では、反復を停止して次のイテレーションに移動することは便利です。 のようになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In other circumstances, it is handy to be able to stop an iteration and move on to the next one immediately.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T142414Z" creationid="hsugawa8651" creationdate="20181119T142414Z">
        <seg>他の状況では、繰り返しを停止してすぐに次回に移ることができれば便利なことがあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In other words, if the path to our example project directory is &lt;x2/&gt;/home/me/animals&lt;x3/&gt; then the &lt;x4/&gt;paths&lt;x5/&gt; map could be represented by this dictionary:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T121359Z" creationid="hsugawa8651" creationdate="20181118T121359Z">
        <seg>言い換えれば、サンプルプロジェクトディレクトリへのパスが&lt;x2/&gt;/home/me/animals&lt;x3/&gt;であれば、&lt;x4/&gt;のパスはこの辞書によって表現されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In other words, if we have &lt;x7/&gt;stack = [env₁, env₂, …]&lt;x8/&gt; then we have:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T121418Z" creationid="hsugawa8651" creationdate="20181118T121418Z">
        <seg>つまり、&lt;x7/&gt;スタック=[env1,env2,…]&lt;x8/&gt;の場合は、次のようになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In other words, the &lt;x5/&gt;$&lt;x6/&gt; expression "belongs to" the inner quote expression, and
so its argument is only evaluated when the inner quote expression is:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T115452Z" creationid="hsugawa8651" creationdate="20181118T115452Z">
        <seg>つまり、&lt;x5/&gt;$&lt;x6/&gt;式は内部引用符式に属していて その引数は、内部引用符式が次のような場合にのみ評価されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In other words, the binary representation is truncated
to fit.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T070440Z" creationid="hsugawa8651" creationdate="20181114T031042Z">
        <seg>言い換えれば、バイナリ表現は値に収まるように切り捨てられます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In other words, the representable floating-point
numbers are densest in the real number line near zero, and grow sparser exponentially as one moves
farther away from zero.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T034627Z" creationid="hsugawa8651" creationdate="20181112T111224Z">
        <seg>い換えれば、浮動小数点数は実数線上で0に近い場合に最も高密度になり、 0から離れるにつれてまばらになっていきます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In other words, the representable floating-point numbers are densest in the real number line near zero, and grow sparser exponentially as one moves farther away from zero.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T191159Z" creationid="hsugawa8651" creationdate="20181118T191159Z">
        <seg>言い換えれば、表現可能浮動小数点 数は0近くの実数線で最も密集しており、指数関数的に成長するにつれて指数関数的に成長する 0から遠く離れています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In particular, nested dot calls like &lt;x2/&gt;f.(g.(x))&lt;x3/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T132604Z" creationid="hsugawa8651" creationdate="20181113T132604Z">
        <seg>特に、&lt;x2/&gt;f.(g.(x))&lt;x3/&gt;のようなネストされたドットコール</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In particular, this means that &lt;x17/&gt;import X&lt;x18/&gt; can refer to different packages depending on &lt;x19/&gt;context&lt;x20/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T121016Z" creationid="hsugawa8651" creationdate="20181118T121016Z">
        <seg>特に、&lt;x17/&gt;インポートX&lt;x18/&gt;は、&lt;x19/&gt;コンテキスト&lt;x20/&gt;に応じて異なるパッケージを参照することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In particular, you can write C-style string code to process ASCII strings,
and they will work as expected, both in terms of performance and semantics.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T075521Z" creationid="hsugawa8651" creationdate="20181120T075521Z">
        <seg>特に、ASCIIの文字列を処理するためにC言語スタイルに文字列コードを書くことができ、パフォーマンスと乞うっ文的な意味の両面で期待通りの動作をします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In particular, you'll need to set up a two-layered
system: the C callback should only &lt;x1/&gt;schedule&lt;x2/&gt; (via Julia's event loop) the execution of your "real"
callback.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T152626Z" creationid="hsugawa8651" creationdate="20181117T152626Z">
        <seg>特に、2層を設定する必要があります。 システム:Cコールバックは、&lt;x1/&gt;スケジュール&lt;x2/&gt;(ジュリアのイベントループ経由)を実行して、"実"を実行することができます。 コールバック。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In practice, especially when providing reusable functionality, one generally wraps &lt;x1/&gt;`ccall`&lt;x2/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T224109Z" creationid="hsugawa8651" creationdate="20181109T224109Z">
        <seg>実際には、特に再利用可能な機能を提供する場合には、一般的には&lt;x1/&gt;"ccall"&lt;x2/&gt;"をラップします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In realistic usage
there is more code to be evaluated after the &lt;x5/&gt;continue&lt;x6/&gt;, and often there are multiple points from
which one calls &lt;x7/&gt;continue&lt;x8/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T124527Z" creationid="hsugawa8651" creationdate="20181118T124527Z">
        <seg>現実的な使い方で &lt;x5/&gt;continue&lt;x6/&gt;以降に評価されるコードが多くあり、多くの場合、以下のような複数のポイントが存在します。 これは&lt;x8/&gt;を続けて&lt;x8/&gt;を続けます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In realistic usage there is more code to be evaluated after the &lt;c2&gt;continue&lt;/c2&gt;, and often there are multiple points from which one calls &lt;c3&gt;continue&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T142942Z" creationid="hsugawa8651" creationdate="20181119T142602Z">
        <seg>現実的な使用では、&lt;c2&gt;continue&lt;/c2&gt;の後に評価されるべきコードが多くあり、そしてしばしば、一つは&lt;c3&gt;continue&lt;/c3&gt;を呼び出す複数の点がある。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In some cases it might be convenient not to have to define &lt;x1/&gt;MyStyle&lt;x2/&gt;, in which case you can
leverage one of the general broadcast wrappers:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T131138Z" creationid="hsugawa8651" creationdate="20181113T131138Z">
        <seg>場合によっては、&lt;x1/&gt;MyStyle&lt;x2/&gt;を定義しなくてもよい場合があります。この場合は、次のような操作を行います。 一般的なブロードキャストラッパーの一つを活用する。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In some cases, types will want
to additionally specialize those extra behaviors when they know a more efficient algorithm can
be used in their specific case.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T112852Z" creationid="hsugawa8651" creationdate="20181112T112852Z">
        <seg>場合によっては、タイプが必要になることがあります。 さらに効率的なアルゴリズムを知っているときにそれらの余分な行動を追加的に専門化すること 特定の場合に使用されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In some contexts, operators can be used just like variables; for example &lt;c1&gt;(+)&lt;/c1&gt; refers to the addition function, and &lt;c2&gt;(+) = f&lt;/c2&gt; will reassign it.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T033156Z" creationid="hsugawa8651" creationdate="20181119T033059Z">
        <seg>ある文脈では、 演算子は変数のように使用することができます。例えば、 &lt;c1&gt;(+)&lt;/c1&gt;は足し算を意味し、 &lt;c2&gt;(+) = f&lt;/c2&gt;は 再代入を行います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In static languages, on the other hand, while one can – and usually must – annotate types for the compiler, types exist only at compile time and cannot be manipulated or expressed at run time.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T182603Z" creationid="hsugawa8651" creationdate="20181118T182603Z">
        <seg> 一方静的言語においては、コンパイラのために型注釈をつけることができます（ほぼ必須でしょう）が、型の情報はコンパイル時にのみ存在し、実行時には操作したり取得したりすることができません。 </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In static languages, on the other hand, while one can — and usually
must — annotate types for the compiler, types exist only at compile time
and cannot be manipulated or expressed at run time.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T082250Z" creationid="hsugawa8651" creationdate="20181118T082250Z">
        <seg> 一方静的言語においては、コンパイラのために型注釈をつけることができます（ほぼ必須でしょう）が、型の情報はコンパイル時にのみ存在し、実行時には操作したり取得したりすることができません。 </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In such cases, it may be best for the exceptional condition to either terminate the
program while printing a diagnostic error message, or if the programmer has provided code to handle
such exceptional circumstances then allow that code to take the appropriate action.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T124553Z" creationid="hsugawa8651" creationdate="20181118T124553Z">
        <seg>このような場合、例外的な条件は、次のいずれかの方法で終了することが最善の条件になります。 診断エラー・メッセージの印刷中、またはプログラマがコードを処理するためのコードを提供している場合はプログラム このような例外的な状況は、そのコードが適切なアクションをとることを可能にします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In such cases, it may be best for the exceptional condition to either terminate the program, printing a diagnostic error message, or if the programmer has provided code to handle such exceptional circumstances, allow that code to take the appropriate action.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T143142Z" creationid="hsugawa8651" creationdate="20181119T143142Z">
        <seg> そんな例外的な状況に対する最善の策は、プログラムを終了させることかもしれないし、状況を報告するエラーメッセージを出力することかもしれません。また、プログラマが例外的な状況に対応するコードを用意している場合は、そのコードに適切な処置をとらせることかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In such cases, the result is always 1-d.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T155056Z" creationid="hsugawa8651" creationdate="20181109T155056Z">
        <seg>この場合、結果は常に1-dになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In such cases, you may
need or want to evaluate &lt;x1/&gt;x .* (x .+ 1)&lt;x2/&gt; as if it had been
written &lt;x3/&gt;broadcast(*, x, broadcast(+, x, 1))&lt;x4/&gt;, where the inner operation is evaluated before
tackling the outer operation.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T131603Z" creationid="hsugawa8651" creationdate="20181113T131603Z">
        <seg>このような場合は &lt;x1/&gt;x.*(x .+ 1)&lt;x2/&gt;を必要とするか、または評価する必要があるかを判断します。 &lt;x3/&gt;ブロードキャスト(*,x,ブロードキャスト(+, x, 1))&lt;x4/&gt;で、インナー操作は事前に評価されます。 外部操作に取り組んでいます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In such situations, it is generally clear from the context that the term
is used to mean "constructor method" rather than "constructor function", especially as it is often
used in the sense of singling out a particular method of the constructor from all of the others.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T155702Z" creationid="hsugawa8651" creationdate="20181117T155702Z">
        <seg>このような状況では、一般的には、この用語は は、「コンストラクタ関数」ではなく「コンストラクタメソッド」を意味するために使用されます。特に コンストラクタの特定のメソッドを、他のすべてのコンストラクタから削除するという意味で使用されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In technical-computing languages, it is common to have "vectorized" versions of functions, which
simply apply a given function &lt;x1/&gt;f(x)&lt;x2/&gt; to each element of an array &lt;x3/&gt;A&lt;x4/&gt; to yield a new array via
&lt;x5/&gt;f(A)&lt;x6/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T120053Z" creationid="hsugawa8651" creationdate="20181118T120053Z">
        <seg>技術計算言語では、関数の「ベクトル化」バージョンが一般的であることが一般的です。 単純に与えられた関数&lt;x1/&gt;f(x)&lt;x2/&gt;を配列&lt;x3/&gt;A&lt;x4/&gt;の各要素に適用して、新しい配列を生成する。 &lt;x5/&gt;f(A)&lt;x6/&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the Julia REPL and several other Julia editing environments, you can type many Unicode math symbols by typing the backslashed LaTeX symbol name followed by tab.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T032540Z" creationid="hsugawa8651" creationdate="20181119T032540Z">
        <seg>REPLおよび他のJuliaの編集環境では、バックスラッシュを伴うLaTex記号とタブを 入力することで、Unicode数学記号を入力することが可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the REPL, included paths are interpreted relative to the current working directory, &lt;x18/&gt;pwd()&lt;x19/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T122935Z" creationid="hsugawa8651" creationdate="20181118T122935Z">
        <seg>REPLでは、含まれるパスは、現在のワーキングディレクトリ&lt;x18/&gt;pwd()&lt;x19/&gt;に相対的に解釈されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the absence of a type declaration with &lt;x1/&gt;::&lt;x2/&gt;, the type of a method parameter is &lt;x3/&gt;Any&lt;x4/&gt; by default,
meaning that it is unconstrained since all values in Julia are instances of the abstract type
&lt;x5/&gt;Any&lt;x6/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T014114Z" creationid="hsugawa8651" creationdate="20181120T014114Z">
        <seg>::による型宣言がない場合、メソッドのパラメータの型はデフォルトではAnyであり、Juliaのすべての値が抽象型Anyのインスタンスであるため、制約がないことを意味しています 。 </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the assignment form, the body of the function must be a single expression, although it can
be a compound expression (see &lt;x1/&gt;&lt;x2/&gt;&lt;x3/&gt;(@ref man-compound-expressions)).</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T125215Z" creationid="hsugawa8651" creationdate="20181110T025518Z">
        <seg>代入方式では、関数の本体は単一の式でなければなりませんが、その式は複合式(  &lt;x1/&gt;&lt;x2/&gt;&lt;x3/&gt;(@ref man-compound-expressions)を参照)でもかまいません。 </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the case of leading zeros, the size is determined by the minimal needed size for a
literal, which has the same length but leading digit &lt;x3/&gt;1&lt;x4/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T225440Z" creationid="hsugawa8651" creationdate="20181109T225440Z">
        <seg>先行ゼロの場合、サイズは、必要最小限のサイズで決定されます。 リテラルは同じ長さですが、先頭桁はx3/&gt;1&lt;x4/&gt;です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the case of leading zeros, the size is determined by the minimal needed size for a literal, which has the same length but leading digit &lt;c1&gt;1&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T185326Z" creationid="hsugawa8651" creationdate="20181118T185326Z">
        <seg>先行ゼロの場合、サイズは、必要最小限のサイズで決定されます。 リテラルは同じ長さですが、先頭桁はx3/&gt;1&lt;x4/&gt;です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the context of an expression, symbols are used to indicate access to variables; when an expression
is evaluated, a symbol is replaced with the value bound to that symbol in the appropriate &lt;x1/&gt;&lt;x2/&gt;&lt;x3/&gt;(@ref scope-of-variables).</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T115322Z" creationid="hsugawa8651" creationdate="20181118T115322Z">
        <seg>式のコンテキストでは、シンボルは変数へのアクセスを示すために使用されます。式の場合は、次のようになります。 は評価され、シンボルは該当する&lt;x1/&gt;&lt;x2/&gt;&lt;x3/&gt;(変数の@ref scope of variables)内のそのシンボルにバインドされた値に置き換えられます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the context of function definitions, the &lt;x1/&gt;...&lt;x2/&gt; operator is used to combine many different arguments
into a single argument.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181110T025236Z" creationid="hsugawa8651" creationdate="20181110T025236Z">
        <seg>関数定義のコンテキストでは、&lt;x1/&gt;.…&lt;x2/&gt;演算子は、多くの異なる引数を結合するために使用されます。 単一の引数に。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the example above, the code between &lt;x1/&gt;&lt;x2/&gt;=&lt;x3/&gt; and &lt;x4/&gt;=&lt;x5/&gt;&lt;x6/&gt; is run as a &lt;x7/&gt;bash&lt;x8/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181110T024937Z" creationid="hsugawa8651" creationdate="20181110T024937Z">
        <seg>上記の例では、&lt;x1/&gt;&lt;x2/&gt;=&lt;x3/&gt;と&lt;x4/&gt;=&lt;x5/&gt;&lt;x6/&gt;の間のコードは、&lt;x7/&gt;bash&lt;x8/&gt;のように実行されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the example above, we see that the "current world" (in which the method &lt;x1/&gt;newfun()&lt;x2/&gt; exists),
is one greater than the task-local "runtime world" that was fixed when the execution of &lt;x3/&gt;tryeval&lt;x4/&gt; started.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T021229Z" creationid="hsugawa8651" creationdate="20181120T021229Z">
        <seg>上記の例では、メソッドnewfun()が存在する「現在の世界」が、tryeval開始時に設定されたタスクローカルの「実行時の世界」よりも１つ大きいことがわかります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the example function, &lt;x1/&gt;f&lt;x2/&gt;, from
the previous section this is the value of the expression &lt;x3/&gt;x + y&lt;x4/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T125547Z" creationid="hsugawa8651" creationdate="20181110T025728Z">
        <seg>例えば、前節に出てきた &lt;x1/&gt;f&lt;x2/&gt;という関数の戻り値は 、式&lt;x3/&gt;x + y&lt;x4/&gt;.の値です。 </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the example manifest file above, to find the path of the first &lt;x1/&gt;Priv&lt;x2/&gt; package—the one with UUID &lt;x3/&gt;ba13f791-ae1d-465a-978b-69c3ad90f72b&lt;x4/&gt;—Julia looks for its stanza in the manifest file, sees that it has a &lt;x5/&gt;path&lt;x6/&gt; entry, looks at &lt;x7/&gt;deps/Priv&lt;x8/&gt; relative to the &lt;x9/&gt;App&lt;x10/&gt; project directory—let's suppose the &lt;x11/&gt;App&lt;x12/&gt; code lives in &lt;x13/&gt;/home/me/projects/App&lt;x14/&gt;—sees that &lt;x15/&gt;/home/me/projects/App/deps/Priv&lt;x16/&gt; exists and therefore loads &lt;x17/&gt;Priv&lt;x18/&gt; from there.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T121211Z" creationid="hsugawa8651" creationdate="20181118T121211Z">
        <seg>上記のサンプル・マニフェスト・ファイルでは、最初の&lt;x1/&gt;Priv&lt;x2/&gt;パッケージのパスを検索するには、UUID&lt;x3/&gt;ba13f791-ae1d-465a-978b-69c3ad90f72b&lt;x4/&gt;-Juliaは、マニフェスト・ファイル内のスタンザを検索します。&lt;x7/&gt;パス&lt;x6/&gt;は、&lt;x13/&gt;アプリケーション&lt;x12/&gt;&lt;x13/&gt;&lt;x13/&gt;/home/me/projects/App&lt;x14/&gt;/home/me/projects/App/deps/Priv&lt;x18/&gt;は、&lt;x15/&gt;/home/me/projects/App/deps/Priv&lt;x18/&gt;は、&lt;x13/&gt;/home/me/projects/App/deps/Priv&lt;x18/&gt;であることを示しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the expression &lt;c0&gt;a &amp;&amp; b&lt;/c0&gt;, the subexpression &lt;c1&gt;b&lt;/c1&gt; is only evaluated if &lt;c2&gt;a&lt;/c2&gt; evaluates to &lt;c3&gt;true&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T135913Z" creationid="hsugawa8651" creationdate="20181119T135804Z">
        <seg>&lt;c0&gt;a &amp;&amp; b&lt;/c0&gt;という式で、&lt;c1&gt;b&lt;/c1&gt;が評価されるのは、&lt;c2&gt;a&lt;/c2&gt;の評価が&lt;c3&gt;真&lt;/c3&gt;のときのみです。

</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the expression &lt;c0&gt;a || b&lt;/c0&gt;, the subexpression &lt;c1&gt;b&lt;/c1&gt; is only evaluated if &lt;c2&gt;a&lt;/c2&gt; evaluates to &lt;c3&gt;false&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T135939Z" creationid="hsugawa8651" creationdate="20181119T135810Z">
        <seg>&lt;c0&gt;a || b&lt;/c0&gt;という式で、&lt;c1&gt;b&lt;/c1&gt;が評価されるのは、&lt;c2&gt;a&lt;/c2&gt;の評価が&lt;c3&gt;偽&lt;/c3&gt;の時のみです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the expression &lt;x1/&gt;A[I_1, I_2, ..., I_n]&lt;x2/&gt;, each &lt;x3/&gt;I_k&lt;x4/&gt; may be a scalar index, an
array of scalar indices, or an object that represents an array of scalar
indices and can be converted to such by &lt;x5/&gt;`to_indices`&lt;x6/&gt;:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T155503Z" creationid="hsugawa8651" creationdate="20181109T155503Z">
        <seg>式&lt;x1/&gt;A[I_1,I_2,…I_n]&lt;x2/&gt;では、各&lt;x3/&gt;I_k&lt;x4/&gt;はスカラーインデックスであってもよいし スカラの配列、またはスカラーの配列を表すオブジェクト インデックスは、&lt;x5/&gt;から&lt;x6/&gt;までに変換することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the expression &lt;x1/&gt;a &amp;&amp; b&lt;x2/&gt;, the subexpression &lt;x3/&gt;b&lt;x4/&gt; is only evaluated if &lt;x5/&gt;a&lt;x6/&gt; evaluates to &lt;x7/&gt;true&lt;x8/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T230234Z" creationid="hsugawa8651" creationdate="20181109T230234Z">
        <seg>&lt;x1/&gt;a&amp;b&lt;x2/&gt;では、サブ式&lt;x3/&gt;b&lt;x4/&gt;は、&lt;x5/&gt;a&lt;x6/&gt;が&lt;x7/&gt;真&lt;x8/&gt;と評価された場合にのみ評価される。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the expression &lt;x1/&gt;a || b&lt;x2/&gt;, the subexpression &lt;x3/&gt;b&lt;x4/&gt; is only evaluated if &lt;x5/&gt;a&lt;x6/&gt; evaluates to &lt;x7/&gt;false&lt;x8/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T230237Z" creationid="hsugawa8651" creationdate="20181109T230237Z">
        <seg>&lt;x1/&gt;a b&lt;x2/&gt;の式において、サブ式&lt;x/&gt;b&lt;x4/&gt;は、&lt;x5/&gt;a&lt;x6/&gt;が&lt;x7/&gt;false&lt;x8/&gt;と評価された場合にのみ評価される。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the following example, the method type parameter
&lt;x3/&gt;T&lt;x4/&gt; is used as the return value:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T020149Z" creationid="hsugawa8651" creationdate="20181120T020149Z">
        <seg>次の例では、メソッドの型パラメータ Tが戻り値として使用されています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the following list of
such functions, calls with a &lt;x1/&gt;dims...&lt;x2/&gt; argument can either take a single tuple of dimension sizes
or a series of dimension sizes passed as a variable number of arguments.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154340Z" creationid="hsugawa8651" creationdate="20181109T154340Z">
        <seg>以下の一覧 そのような関数は、&lt;x1/&gt;ディムスを持つ関数です。&lt;x2/&gt;引数を指定すると、1組の寸法サイズをとることができます。 または、変数の数として渡される一連の次元サイズを指定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the future,
however, it may do so, yielding even greater performance gains.)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T160601Z" creationid="hsugawa8651" creationdate="20181109T160601Z">
        <seg>将来は しかし、それによってパフォーマンスが向上する可能性があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the most general case,
an array may contain objects of type &lt;x1/&gt;`Any`&lt;x2/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154143Z" creationid="hsugawa8651" creationdate="20181109T154143Z">
        <seg>最も一般的なケースでは 配列は、&lt;x1/&gt;'のタイプのオブジェクトを含むことができます。&lt;x/&gt;&lt;x2/&gt;&lt;x/&gt;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the previous example, the
&lt;x1/&gt;println&lt;x2/&gt; call is shared by all three branches: the only real choice is which literal string to
print.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T230106Z" creationid="hsugawa8651" creationdate="20181109T230106Z">
        <seg>前の例では &lt;x1/&gt;println&lt;x2/&gt;コールは3つのブランチすべてで共有されます。唯一の実際の選択は、次のいずれかです。 印刷。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the previous example, the &lt;c0&gt;println&lt;/c0&gt; call is shared by all three branches: the only real choice is which literal string to print.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T135337Z" creationid="hsugawa8651" creationdate="20181119T135337Z">
        <seg> 前述の例では&lt;c0&gt;println&lt;/c0&gt;を呼び出すのは3つの分岐すべてで共通しています。 実質的な分岐は、出力される文字列リテラルです。 
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the second
construct, &lt;x1/&gt;i&lt;x2/&gt; will be an &lt;x3/&gt;Int&lt;x4/&gt; if &lt;x5/&gt;A&lt;x6/&gt; is an array type with fast linear indexing; otherwise,
it will be a &lt;x7/&gt;CartesianIndex&lt;x8/&gt;:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T155838Z" creationid="hsugawa8651" creationdate="20181109T155838Z">
        <seg>2番目の 構成,&lt;x1/&gt;i&lt;x2/&gt;は&lt;x5/&gt;Int&lt;x6/&gt;であり,&lt;x5/&gt;A&lt;x6/&gt;が高速線形インデックスを用いたアレイ型である場合は,それ以外の値である。 &lt;x7/&gt;CartesianIndex&lt;x8/&gt;になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In these cases, the alternative
(but fully equivalent) keyword &lt;x3/&gt;in&lt;x4/&gt; or &lt;x5/&gt;∈&lt;x6/&gt; is typically used instead of &lt;x7/&gt;=&lt;x8/&gt;, since it makes
the code read more clearly:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T124439Z" creationid="hsugawa8651" creationdate="20181118T124439Z">
        <seg>これらの場合には (ただし、&lt;x4/&gt;&lt;x8/&gt;&lt;x6/&gt;)のキーワード&lt;x3/&gt;は、&lt;x x/&gt;=&lt;x8/&gt;&lt;x8/&gt;の代わりに一般的に使用されます。 コードはより明確に読まれます</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In these cases, the alternative (but fully equivalent) keyword &lt;c1&gt;in&lt;/c1&gt; or &lt;c2&gt;∈&lt;/c2&gt; is typically used instead of &lt;c3&gt;=&lt;/c3&gt;, since it makes the code read more clearly:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T142059Z" creationid="hsugawa8651" creationdate="20181119T142006Z">
        <seg>これらのケースでは、&lt;c3&gt;=&lt;/c3&gt;の代わりに、完全に同等なキーワードの&lt;c1&gt;in&lt;/c1&gt;や&lt;c2&gt;∈&lt;/c2&gt;が広く使われます。というのも、コードがよりわかりやすくなるからです。.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In these situations, the anonymous function construct allows easy creation of a single-use function
object without needing a name:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T130706Z" creationid="hsugawa8651" creationdate="20181120T130706Z">
        <seg> そんな時、無名関数を使えば、使い捨ての関数オブジェクトを名前もつけずに簡単に作成できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In this
case, the expression must evaluate to a &lt;x3/&gt;Ptr&lt;x4/&gt;, which will be used as the address of the native
function to call.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T152325Z" creationid="hsugawa8651" creationdate="20181117T152325Z">
        <seg>この 例:式は、ネイティブのアドレスとして使用される&lt;x3/&gt;Ptr&lt;x4/&gt;に評価される必要があります。 関数が呼び出されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In this case the final (empty) line before the closing &lt;x1/&gt;"""&lt;x2/&gt; sets the indentation level.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T083554Z" creationid="hsugawa8651" creationdate="20181120T083554Z">
        <seg>この場合、閉じる """ の前の最後の（空の）行はインデントレベルを定義します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In this case the result is &lt;x5/&gt;5&lt;x6/&gt;,
because &lt;x7/&gt;f(1,2)&lt;x8/&gt; invokes the first method of &lt;x9/&gt;f&lt;x10/&gt; above.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T023212Z" creationid="hsugawa8651" creationdate="20181120T023212Z">
        <seg>この場合、結果は5で、f(1,2)は最初のfメソッドを呼び出すからです。 </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In this case there will be no hidden arguments, at the cost of some
language features (e.g. only &lt;x11/&gt;character(len=1)&lt;x12/&gt; will be permitted to pass strings).</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T151123Z" creationid="hsugawa8651" creationdate="20181117T151123Z">
        <seg>この場合は、隠れた引数はありません。 言語機能(例えば、&lt;x11/&gt;文字(len=1)&lt;x12/&gt;は文字列を渡すことが許されます)。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In this case, the character &lt;x1/&gt;∀&lt;x2/&gt; is a three-byte character, so the indices 2 and 3 are invalid
and the next character's index is 4; this next valid index can be computed by &lt;x3/&gt;`nextind(s,1)`&lt;x4/&gt;,
and the next index after that by &lt;x5/&gt;nextind(s,4)&lt;x6/&gt; and so on.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T081616Z" creationid="hsugawa8651" creationdate="20181120T081616Z">
        <seg>この場合、&lt;x1/&gt;∀&lt;x2/&gt;  は3バイト文字であるため、インデックス2と3は無効であり、次の有効なインデックスは4になります。 また、この場合、次の有効なインデックスは&lt;x3/&gt;`nextind(s,1)`&lt;x4/&gt;,で求めることができ、その次の有効なインデックスは &lt;x5/&gt;nextind(s,4)&lt;x6/&gt; で計算でき、 その次は...と求めることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In this example it is accomplished by defining &lt;x1/&gt;Base.similar{T}(A::SparseArray, ::Type{T}, dims::Dims)&lt;x2/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T083257Z" creationid="hsugawa8651" creationdate="20181113T083257Z">
        <seg>この例では、&lt;x1/&gt;のような{T}(A::SparseArray,::Type{T},dims::Dims)&lt;x2/&gt;を定義することによって達成される。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In this example, observe that the new definition for &lt;x1/&gt;newfun&lt;x2/&gt; has been created,
but can't be immediately called.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T020936Z" creationid="hsugawa8651" creationdate="20181120T020936Z">
        <seg>この例では、newfunの新しい定義は作成されましたが、すぐには呼び出せないことに注意してください。 </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In this example, the compiler will replace all
instances of &lt;x5/&gt;@sayhello&lt;x6/&gt; with:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T101432Z" creationid="hsugawa8651" creationdate="20181120T101336Z">
        <seg>この例では、&lt;x5/&gt;@sayhello&lt;x6/&gt;のインスタンスの全てを</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In this example, the tuple &lt;x1/&gt;(1,2,3)&lt;x2/&gt; is interpolated as an expression into a conditional test:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T115422Z" creationid="hsugawa8651" creationdate="20181118T115422Z">
        <seg>この例では、タプル&lt;x1/&gt;(1,2,3)&lt;x2/&gt;は条件付きテストへの式として補間されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In this example, the value of variable &lt;x1/&gt;a&lt;x2/&gt; is interpolated:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T115415Z" creationid="hsugawa8651" creationdate="20181118T115415Z">
        <seg>この例では、変数&lt;x1/&gt;a&lt;x2/&gt;の値が補間されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In this specific example, &lt;x1/&gt;+&lt;x2/&gt; and &lt;x3/&gt;a&lt;x4/&gt; are symbols, &lt;x5/&gt;*(b,c)&lt;x6/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T115359Z" creationid="hsugawa8651" creationdate="20181118T115359Z">
        <seg>この具体的な例では、&lt;x1/&gt;+&lt;x2/&gt;と&lt;x3/&gt;a&lt;x4/&gt;は、記号であり、&lt;x5/&gt;*(b,c)&lt;x6/&gt;である。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In this style of definition, the code generation feature is essentially an optional
optimization.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T032415Z" creationid="hsugawa8651" creationdate="20181116T032415Z">
        <seg>この定義の定義では、コード生成機能は基本的にオプションです。 最適化。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In-place broadcasting can be supported by defining the appropriate &lt;x1/&gt;copyto!(dest, bc::Broadcasted)&lt;x2/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T131637Z" creationid="hsugawa8651" creationdate="20181113T131637Z">
        <seg>インプレースブロードキャストは、適切な&lt;x1/&gt;copyto!(dest,bc::Broadcast)&lt;x2/&gt;を定義することでサポートできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Including this file should create a module named &lt;x15/&gt;X&lt;x16/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T121031Z" creationid="hsugawa8651" creationdate="20181118T121031Z">
        <seg>このファイルを含めて、&lt;x15/&gt;X&lt;x16/&gt;という名前のモジュールを作成する必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Inclusion allows you to split a single program across multiple source files.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T152659Z" creationid="hsugawa8651" creationdate="20181117T152659Z">
        <seg>インクルージョンを使用すると、複数のソースファイルにわたって単一のプログラムを分割できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Incomplete Initialization</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T155836Z" creationid="hsugawa8651" creationdate="20181117T155836Z">
        <seg>不完全な初期化</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Inconsistencies
can cause code that works correctly on one system to fail or produce indeterminate results on
a different system.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T150551Z" creationid="hsugawa8651" creationdate="20181117T150551Z">
        <seg>不整合 は、1つのシステム上で正しく動作するコードを生成することができます。 別のシステムです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Increasing the
index of dimension &lt;x9/&gt;k&lt;x10/&gt; by &lt;x11/&gt;1&lt;x12/&gt; should increase the index &lt;x13/&gt;i&lt;x14/&gt; of &lt;x15/&gt;`getindex(A,i)`&lt;x16/&gt; by
&lt;x17/&gt;`stride(A,k)`&lt;x18/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T160502Z" creationid="hsugawa8651" creationdate="20181109T160502Z">
        <seg>増加 &lt;x11/&gt;1&lt;x12/&gt;&lt;x12/&gt;の寸法&lt;x9/&gt;k&lt;x10/&gt;は、&lt;x15/&gt;'getindex(A,i)'&lt;x15/&gt;のインデックス&lt;x13/&gt;i&lt;x14/&gt;を増加させます。 &lt;x17/&gt;`stride(A,k)`&lt;x18/&gt;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Indeed, any new method definition won't be visible to the current runtime environment,
including Tasks and Threads (and any previously defined &lt;x1/&gt;@generated&lt;x2/&gt; functions).</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T020909Z" creationid="hsugawa8651" creationdate="20181120T020909Z">
        <seg>実際、新しいメソッド定義は、タスクおよびスレッド（およびそれ以前に定義された@generated関数）を含め、現在の実行時環境ではまったく見えません。 </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>IndexCartesian()&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T113313Z" creationid="hsugawa8651" creationdate="20181112T113313Z">
        <seg>IndexCartesian()&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>IndexStyle(::Type)&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T113308Z" creationid="hsugawa8651" creationdate="20181112T113308Z">
        <seg>IndexStyle(::Type)&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Indexable Collections</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T041646Z" creationid="hsugawa8651" creationdate="20181112T041646Z">
        <seg>Indexable Collections</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Indexed assignment
syntax without the &lt;x6/&gt;end&lt;x7/&gt; keyword is equivalent to a call to
&lt;x8/&gt;`setindex!`&lt;x9/&gt;:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T155447Z" creationid="hsugawa8651" creationdate="20181109T155447Z">
        <seg>インデックス付きの割り当て &lt;x6/&gt;end&lt;x7/&gt;キーワードがない構文は、次のような呼び出しに相当します。 &lt;x8/&gt;`setindex!`&lt;x9/&gt;:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Indexing</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T164702Z" creationid="hsugawa8651" creationdate="20181118T164702Z">
        <seg>インデックス</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Indexing and assignment</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T150029Z" creationid="hsugawa8651" creationdate="20181117T150029Z">
        <seg>インデックス作成と割り当て</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Indexing by a boolean vector &lt;x3/&gt;B&lt;x4/&gt; is effectively the same as indexing by the
vector of integers that is returned by &lt;x5/&gt;`findall(B)`&lt;x6/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T155758Z" creationid="hsugawa8651" creationdate="20181109T155758Z">
        <seg>ブール型ベクトル&lt;x3/&gt;B&lt;x4/&gt;によるインデックス作成は、実効的には、以下のようにして行われる。 &lt;x5/&gt;`findall(B)`&lt;x6/&gt;によって返される整数のベクトル。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Indexing syntax without the &lt;x3/&gt;end&lt;x4/&gt; keyword is equivalent to a call to &lt;x5/&gt;`getindex`&lt;x6/&gt;:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T155245Z" creationid="hsugawa8651" creationdate="20181109T155245Z">
        <seg>&lt;x3/&gt;end&lt;x4/&gt;キーワードなしのインデックス構文は、&lt;x5/&gt;`getindex'&lt;x6/&gt;への呼び出しと同じです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Indexing with
anything other than an &lt;x5/&gt;Int&lt;x6/&gt; will throw a &lt;x7/&gt;`MethodError`&lt;x8/&gt; saying that there was no matching method.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T113131Z" creationid="hsugawa8651" creationdate="20181112T113131Z">
        <seg>インデックス作成 &lt;x5/&gt;Int&lt;x6/&gt;以外の何かは、一致する方法がないことを示す&lt;x7/&gt;'MethodError'&lt;x8/&gt;をスローします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Inf16&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T110804Z" creationid="hsugawa8651" creationdate="20181112T110804Z">
        <seg>Inf16&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Inf32&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T110805Z" creationid="hsugawa8651" creationdate="20181112T110805Z">
        <seg>Inf32&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Inf&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T110806Z" creationid="hsugawa8651" creationdate="20181112T110806Z">
        <seg>Inf&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Inf&lt;x1/&gt; is equal to itself and greater than everything else except &lt;x2/&gt;NaN&lt;x3/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T064304Z" creationid="hsugawa8651" creationdate="20181114T030503Z">
        <seg>Inf&lt;x1/&gt; はそれ自体と等しく、 &lt;x2/&gt;NaN&lt;x3/&gt; を除く全てよりも大きいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Inference on the generated function may be run at &lt;x1/&gt;any&lt;x2/&gt; time, including while your code is attempting
to observe or mutate this state.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T032230Z" creationid="hsugawa8651" creationdate="20181116T032230Z">
        <seg>生成された関数の推論は、コードが試行されている間も、&lt;x x/&gt;&lt;x x2/&gt;時間で実行されることがあります。 この状態を観察または突然変異させます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Inner Constructor Methods</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T155731Z" creationid="hsugawa8651" creationdate="20181117T155731Z">
        <seg>内部コンストラクタのメソッド</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>InsertionSort&lt;x1/&gt; is an O(n^2) stable sorting algorithm.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T064050Z" creationid="hsugawa8651" creationdate="20181114T064050Z">
        <seg>InsertionSort&lt;x1/&gt;は、O(n^2)安定ソートアルゴリズムである。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Inside the &lt;x5/&gt;then&lt;x6/&gt; part of the &lt;x7/&gt;if @generated&lt;x8/&gt; block, code has the same semantics as other
generated functions: argument names refer to types, and the code should return an expression.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T032402Z" creationid="hsugawa8651" creationdate="20181116T032402Z">
        <seg>&lt;x8/&gt;の&lt;x5/&gt;の中で、@生成された&lt;x8/&gt;ブロックの場合、コードは他のものと同じ意味を持つ。 生成された関数:引数名は型を参照し、コードは式を返す必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Instead
of mutating objects as they are iterated over, Julia iterators may keep track
of the iteration state externally from the object.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T112355Z" creationid="hsugawa8651" creationdate="20181112T112355Z">
        <seg>代わりに 反復されるときにオブジェクトをミューテートすることで、ジュリア反復子は追跡することができる オブジェクトからの繰り返し状態の繰り返し状態です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Instead define a convert method and pass the variables directly to the &lt;x5/&gt;`ccall`&lt;x6/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T152230Z" creationid="hsugawa8651" creationdate="20181117T152230Z">
        <seg>代わりに変換メソッドを定義して、変数を直接&lt;x5/&gt;`ccall'&lt;x6/&gt;に渡します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Instead of &lt;c1&gt;if &lt;cond&gt; &lt;statement&gt; end&lt;/c1&gt;, one can write &lt;c2&gt;&lt;cond&gt; &amp;&amp; &lt;statement&gt;&lt;/c2&gt; (which could be read as: &lt;cond&gt; &lt;e3&gt;and then&lt;/e3&gt; &lt;statement&gt;).</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T140510Z" creationid="hsugawa8651" creationdate="20181119T140510Z">
        <seg>&lt;c1&gt;if &lt;条件式&gt; &lt;実行文&gt; end&lt;/c1&gt;の代わりに、&lt;c2&gt; &lt;条件式&gt; &amp;&amp; &lt;実行文&gt;&lt;/c2&gt;と書けます （&amp;&amp;は、&lt;e3&gt;"の時は"&lt;/e3&gt; と読み下せます)。
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Instead of &lt;x3/&gt;if &lt;x4/&gt; &lt;x5/&gt; end&lt;x6/&gt;, one can write &lt;x7/&gt;&lt;x8/&gt; &amp;&amp; &lt;x9/&gt;&lt;x10/&gt; (which could be
read as: &lt;x11/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T230354Z" creationid="hsugawa8651" creationdate="20181109T230354Z">
        <seg>&lt;x4/&gt;&lt;x5/&gt;end&lt;x6/&gt;ではなく、&lt;x7/&gt;&lt;x8/&gt;&amp;&amp;&lt;x9/&gt;&lt;x10/&gt;(これは以下のようなものがあります)&lt;x x/&gt;&lt;x10/&gt;( read as:&lt;x11/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Instead of defining all these behaviors
ourselves, we can officially define it as a subtype of an &lt;x6/&gt;`AbstractArray`&lt;x7/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T113207Z" creationid="hsugawa8651" creationdate="20181112T113207Z">
        <seg>これらすべての行動を定義する代わりに 私たちは、公式には、&lt;x6/&gt;'AbstractArray'&lt;x7/&gt;のサブタイプとして定義することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Instead of directly sorting an array, you can compute a permutation of the array's indices that
puts the array into sorted order:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T150312Z" creationid="hsugawa8651" creationdate="20181117T150312Z">
        <seg>配列を直接ソートする代わりに、配列のインデックスの置換を計算することができます。 配列をソートされた順序に配置します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Instead, declare an &lt;x3/&gt;isbits&lt;x4/&gt; struct type and use that instead.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T151144Z" creationid="hsugawa8651" creationdate="20181117T151144Z">
        <seg>代わりに、&lt;x3/&gt;イスビトス&lt;x4/&gt;構造体を宣言し、代わりにそれを使用します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Instead, it queries them through internal APIs and lazily computes only as much of each structure as it needs to load a given package.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T121045Z" creationid="hsugawa8651" creationdate="20181118T121045Z">
        <seg>その代わりに、内部APIを介してクエリーを実行し、特定のパッケージをロードする必要がある場合と同じように、各構造体のほとんどを計算することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Instead, packages are identified by &lt;x1/&gt;universally unique identifiers&lt;x2/&gt; (UUIDs) which are assigned to them before they are registered.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T152842Z" creationid="hsugawa8651" creationdate="20181117T152842Z">
        <seg>その代わりに、パッケージは、登録される前に割り当てられた&lt;x1/&gt;ユニバーサル一意識別子&lt;x2/&gt;(UUID)によって識別されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Instead, the multiplication must be explicitly written out:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T123440Z" creationid="hsugawa8651" creationdate="20181118T123440Z">
        <seg>その代わりに、乗算は明示的に書き出される必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Instead, use the more efficient &lt;x3/&gt;`complex`&lt;x4/&gt; function to construct
a complex value directly from its real and imaginary parts:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T123448Z" creationid="hsugawa8651" creationdate="20181118T123448Z">
        <seg>代わりに、より効率的な&lt;x3/&gt;'コンプレックス'&lt;x4/&gt;関数を使用して構築する 実部と虚部から直接的に複雑な値が得られます</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Int(round(x))&lt;x1/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T070935Z" creationid="hsugawa8651" creationdate="20181114T031053Z">
        <seg>Int(round(x)) &lt;x1/&gt;の短縮系です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Int16&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T150913Z" creationid="hsugawa8651" creationdate="20181117T150913Z">
        <seg>Int16&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Int&lt;x1/&gt; indices.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T083104Z" creationid="hsugawa8651" creationdate="20181113T083104Z">
        <seg>Int&lt;x1/&gt; indices.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Int&lt;x1/&gt;, &lt;x2/&gt;Float64&lt;x3/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T150659Z" creationid="hsugawa8651" creationdate="20181117T150659Z">
        <seg>Int&lt;x1/&gt;, &lt;x2/&gt;Float64&lt;x3/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Integer division (the &lt;c0&gt;div&lt;/c0&gt; function) has two exceptional cases: dividing by zero, and dividing the lowest negative number (&lt;a1&gt;&lt;c2&gt;typemin&lt;/c2&gt;&lt;/a1&gt;) by -1.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T190033Z" creationid="hsugawa8651" creationdate="20181118T190033Z">
        <seg>整数除算(&lt;c0&gt;div&lt;/c0&gt; 関数)は2つの例外的なケースを持っています:　0で除した場合。最も低い負の数(&lt;a1&gt;&lt;c2&gt;typemin&lt;/c2&gt;&lt;/a1&gt;)を-1でで除した場合。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Integer division (the &lt;x1/&gt;div&lt;x2/&gt; function) has two exceptional cases: dividing by zero, and dividing
the lowest negative number (&lt;x3/&gt;`typemin()`&lt;x4/&gt;) by -1.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T033400Z" creationid="hsugawa8651" creationdate="20181119T235209Z">
        <seg>整数の除算（ &lt;x1/&gt;div&lt;x2/&gt;関数）には、0で割る、最小の負の数（ &lt;x3/&gt;`typemin()`&lt;x4/&gt;)）を−1で割るの2つの 例外的ケースがあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Integer division (the &lt;x1/&gt;div&lt;x2/&gt; function) has two exceptional cases: dividing by zero, and dividing
the lowest negative number (&lt;x3/&gt;`typemin`&lt;x4/&gt;) by -1.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T110528Z" creationid="hsugawa8651" creationdate="20181112T110528Z">
        <seg>整数除算(&lt;x1/&gt;div&lt;x2/&gt;関数)は2つの例外的なケースを持っています:0で除算して除算します。 -1で最も低い負の数(&lt;x3/&gt;`テーパミン'&lt;x4/&gt;)。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Integer types:&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T120312Z" creationid="hsugawa8651" creationdate="20181118T120312Z">
        <seg>整数型:&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Integer value N launches N additional local worker processes; &lt;c0&gt;auto&lt;/c0&gt; launches as many workers as the number of local CPU threads (logical cores)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T174356Z" creationid="hsugawa8651" creationdate="20181118T174356Z">
        <seg>整数値Nは、N個のローカル・ワーカー・プロセスを起動します。&lt;c0&gt;auto&lt;/c0&gt;は、ローカルCPUスレッド(論理コア)の数と同じ数のワーカーを起動します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Integer value N launches N additional local worker processes; &lt;x1/&gt;auto&lt;x2/&gt; launches as many workers as the number of local CPU threads (logical cores)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T224711Z" creationid="hsugawa8651" creationdate="20181109T224711Z">
        <seg>整数値Nは、N個のローカル・ワーカー・プロセスを起動します。&lt;x1/&gt;自動&lt;x2/&gt;は、ローカルCPUスレッド(論理コア)の数と同じ数のワーカーを起動します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Integers</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T032607Z" creationid="hsugawa8651" creationdate="20181112T044717Z">
        <seg>整数</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Integers and Floating-Point Numbers</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T120309Z" creationid="hsugawa8651" creationdate="20181118T120309Z">
        <seg>整数と浮動小数点数</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Integers and Floating-Point Numbers&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T234408Z" creationid="hsugawa8651" creationdate="20181119T234408Z">
        <seg>整数と浮動小数点数&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Integers and floating-point values are the basic building blocks of arithmetic and computation.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T032400Z" creationid="hsugawa8651" creationdate="20181109T225032Z">
        <seg>整数と浮動小数点値は、演算処理の基本的要素です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Integers are compared in the standard manner -- by comparison of bits.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T064137Z" creationid="hsugawa8651" creationdate="20181114T030454Z">
        <seg>整数は標準的な方法（ビットの比較）により比較されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Interacting with the contents or methods of &lt;x1/&gt;Core.Compiler&lt;x2/&gt; in any way.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T032226Z" creationid="hsugawa8651" creationdate="20181116T032226Z">
        <seg>&lt;x1/&gt;コアの内容または方法との相互作用。コンパイラ&lt;x2/&gt;は任意の方法で動作します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Interactive mode; REPL runs and &lt;x1/&gt;isinteractive()&lt;x2/&gt; is true</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T224718Z" creationid="hsugawa8651" creationdate="20181109T224718Z">
        <seg>Interactiveモード;REPLは実行され、&lt;x1/&gt;イスインタラクティブ()&lt;x2/&gt;はtrueです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Interfaces</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T164640Z" creationid="hsugawa8651" creationdate="20181118T164640Z">
        <seg>インタフェース</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Interfaces&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T234554Z" creationid="hsugawa8651" creationdate="20181119T234554Z">
        <seg>インタフェース&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Internally, this code creates two implementations of the function: a generated one where
the first block in &lt;x1/&gt;if @generated&lt;x2/&gt; is used, and a normal one where the &lt;x3/&gt;else&lt;x4/&gt; block is used.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T032404Z" creationid="hsugawa8651" creationdate="20181116T032404Z">
        <seg>内部的には、このコードは次の2つの実装を作成します:a生成された関数: &lt;x1/&gt;の最初のブロックは、@generated&lt;x2/&gt;が使用され、かつ&lt;x/&gt;else&lt;x4/&gt;ブロックが使用される通常のブロックである。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Internals</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181110T042019Z" creationid="hsugawa8651" creationdate="20181110T042019Z">
        <seg>Internals</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Interpolating into an unquoted expression is not supported and will cause a compile-time error:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T115420Z" creationid="hsugawa8651" creationdate="20181118T115417Z">
        <seg>引用符で囲まれていない式への補間はサポートされておらず、コンパイル時エラーが発生します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Interpolation</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T115405Z" creationid="hsugawa8651" creationdate="20181118T115405Z">
        <seg>補間</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Interpolation is indicated by a prefix &lt;x7/&gt;$&lt;x8/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T115412Z" creationid="hsugawa8651" creationdate="20181118T115412Z">
        <seg>補間はプレフィックス&lt;x7/&gt;$&lt;x8/&gt;で示されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>IsInfinite()&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T112319Z" creationid="hsugawa8651" creationdate="20181112T112319Z">
        <seg>IsInfinite()&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It also allows comparing the methods available in two worlds just by comparing their ordinal value.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T021218Z" creationid="hsugawa8651" creationdate="20181120T021218Z">
        <seg>また、世代を比較するだけで、2つの世界で利用できるメソッドを比較することもできます。 </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It also indicates the file and line number where the methods were defined: because
these methods were defined at the REPL, we get the apparent line number &lt;x7/&gt;none:1&lt;x8/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T014059Z" creationid="hsugawa8651" creationdate="20181120T014059Z">
        <seg>また、メソッドが定義されたファイルと行番号も表示されます。 これらのメソッドはREPLで定義されているため、見かけの行番号none:1が表示されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It also makes writing exponential functions more elegant:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T040209Z" creationid="hsugawa8651" creationdate="20181112T111736Z">
        <seg>また、指数関数を簡潔に記載することが可能です。:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It also provides a single general
outer &lt;x4/&gt;Point&lt;x5/&gt; constructor that takes pairs of real arguments, which must be of the same type.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T123913Z" creationid="hsugawa8651" creationdate="20181118T123913Z">
        <seg>また、単一の一般的な 外部&lt;x4/&gt;ポイント&lt;x5/&gt;コンストラクタで、実際の引数のペアを指定します。このコンストラクタは、同じタイプである必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It can also be used directly in a &lt;x4/&gt;`for`&lt;x5/&gt; loop since the syntax:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T112437Z" creationid="hsugawa8651" creationdate="20181112T112437Z">
        <seg>構文は、構文が次のように指定されているため、&lt;x x/&gt;ループでは直接&lt;x4/&gt;で使用することもできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It can even be combined with a &lt;x8/&gt;:&lt;x9/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T155706Z" creationid="hsugawa8651" creationdate="20181109T155706Z">
        <seg>また、&lt;x8/&gt;:&lt;x9/&gt;と組み合わせることもできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It does this by creating and manipulating project files that describe what your project depends on, and manifest files that snapshot exact versions of your project's complete dependency graph.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T152830Z" creationid="hsugawa8651" creationdate="20181117T152830Z">
        <seg>これはプロジェクトファイルを記述するプロジェクトファイルを作成して操作することによって、プロジェクトの完全な依存関係グラフの正確なバージョンをスナップショットで表示するファイルを作成することによって実現されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It gets its name from being the only operator
in most languages taking three operands:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T230049Z" creationid="hsugawa8651" creationdate="20181109T230049Z">
        <seg>その名前が唯一の演算子となります。 ほとんどの言語で3つのオペランドを使用しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It gets its name from being the only operator in most languages taking three operands:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T134954Z" creationid="hsugawa8651" creationdate="20181119T134954Z">
        <seg>「三項演算子」の名前は、多くの他の言語では、3つの被演算子をとる唯一の演算子であることに由来します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It has a special compilation rule: a homogeneous tuple of &lt;x1/&gt;VecElement{T}&lt;x2/&gt; maps to an LLVM &lt;x3/&gt;vector&lt;x4/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T063645Z" creationid="hsugawa8651" creationdate="20181114T063645Z">
        <seg>それは特別なコンパイル規則をもち、&lt;x1/&gt;VecElement{T}&lt;x2/&gt;マップの同種タプルをLLVM&lt;x3/&gt;ベクトル&lt;x4/&gt;にマッピングする。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It has access to a special locally existent function called &lt;x1/&gt;`new`&lt;x2/&gt; that creates objects of the
block's type.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T155739Z" creationid="hsugawa8651" creationdate="20181117T155739Z">
        <seg>それは、オブジェクトを作成する&lt;x1/&gt;'新しい&lt;x2/&gt;という特別なローカルに存在する機能にアクセスすることができます。 ブロックのタイプ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It is
multi-paradigm, combining features of imperative, functional, and
object-oriented programming.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T081817Z" creationid="hsugawa8651" creationdate="20181118T081641Z">
        <seg>Juliaは命令型プログラミング・関数型プログラミング・オブジェクト指向プログラミングの機能を組み合わせたマルチパラダイム言語です。 </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It is also often useful to allow iteration over a collection in &lt;x1/&gt;reverse order&lt;x2/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T112857Z" creationid="hsugawa8651" creationdate="20181112T112857Z">
        <seg>また、&lt;x1/&gt;逆順&lt;x2/&gt;でのコレクションでの反復を可能にすることも、しばしば有用である。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It is common for
the same conceptual function or operation to be implemented quite differently for different types
of arguments: adding two integers is very different from adding two floating-point numbers, both
of which are distinct from adding an integer to a floating-point number.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T005843Z" creationid="hsugawa8651" creationdate="20181120T005809Z">
        <seg>概念的には等しい関数や演算が、引数の型によって実装がまったく異なる、ということはよくあります。 2つの整数を足すことと、2つの浮動小数点数を足すことは、全く異なるし、整数に浮動小数点数を足すこととも異なります。 </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It is considered unsafe because
converting an object to a native pointer can hide the object from the garbage collector, causing
it to be freed prematurely.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T150611Z" creationid="hsugawa8651" creationdate="20181117T150611Z">
        <seg>それは安全ではないと考えられている。 オブジェクトをネイティブ・ポインタに変換すると、ガーベッジ・コレクターからオブジェクトを非表示にすることができます。 早期に解放することです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It is critical to exactly match the declared C type with its declaration in Julia.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T150549Z" creationid="hsugawa8651" creationdate="20181117T150549Z">
        <seg>宣言されたCタイプと、Juliaで宣言された宣言を正確に一致させることが重要です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It is critical to exactly match the declared C type with its declaration in Julia. Inconsistencies
can cause code that works correctly on one system to fail or produce indeterminate results on
a different system.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T134217Z" creationid="hsugawa8651" creationdate="20181117T134217Z">
        <seg>宣言されたCタイプと、Juliaの宣言を正確に一致させることが重要です。 は、1つのシステム上で正しく動作するコードを生成することができます。 別のシステムです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It is declared inside the block of a type declaration, rather than outside of it like normal methods.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T155737Z" creationid="hsugawa8651" creationdate="20181117T155737Z">
        <seg>それは、通常のメソッドのような外部ではなく、型宣言のブロック内で宣言されています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It is defined by-value, and is stored without a type-tag.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T150732Z" creationid="hsugawa8651" creationdate="20181117T150732Z">
        <seg>これは値によって定義され、タイプタグなしで保存されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It is defined by-value, and may be stored with a type-tag.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T150717Z" creationid="hsugawa8651" creationdate="20181117T150717Z">
        <seg>それは値によって定義され、タイプタグとともに格納されることがある。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It is efficient for very small &lt;x2/&gt;n&lt;x3/&gt;, and
is used internally by &lt;x4/&gt;QuickSort&lt;x5/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T064045Z" creationid="hsugawa8651" creationdate="20181114T064045Z">
        <seg>非常に小さい&lt;x2/&gt;n&lt;x3/&gt;に対しては効率的である。 は、&lt;x4/&gt;QuickSort&lt;x5/&gt;によって内部的に使用されています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It is generally more efficient to use boolean arrays as
indices directly instead of first calling &lt;x13/&gt;`findall`&lt;x14/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T155813Z" creationid="hsugawa8651" creationdate="20181109T155813Z">
        <seg>一般的に、boolean配列を使用する方が効率的です。 は、最初の呼び出し&lt;x13/&gt;'findall&lt;x14/&gt;を呼び出すのではなく、直接インデックスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It is good practice to provide as few inner constructor methods as possible: only those
taking all arguments explicitly and enforcing essential error checking and transformation.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T155831Z" creationid="hsugawa8651" creationdate="20181117T155831Z">
        <seg>できるだけ少ないインナーコンストラクタメソッドを提供することは良い習慣ですが、それだけでよいのです。 すべての引数を明示的に取得し、必須のエラーチェックと変換を実行します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It is multi-paradigm, combining features of imperative, functional, and object-oriented programming.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T182428Z" creationid="hsugawa8651" creationdate="20181118T182428Z">
        <seg>Juliaは命令型プログラミング・関数型プログラミング・オブジェクト指向プログラミングの機能を組み合わせたマルチパラダイム言語です。 </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It is often quite useful, however, to have access to some of your favorite tools—standard libraries, profilers, debuggers, personal utilities, etc.—even if they are not dependencies of the project you're working on.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T121412Z" creationid="hsugawa8651" creationdate="20181118T121412Z">
        <seg>しかし、自分が作業しているライブラリ、Profilers、デバッガ、パーソナルユーティリティーなどにアクセスできるのは、作業中の依存関係ではなくても、よくあることです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It is parameterized by
the number of dimensions &lt;x3/&gt;N&lt;x4/&gt; and the element type &lt;x5/&gt;T&lt;x6/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T160240Z" creationid="hsugawa8651" creationdate="20181109T160240Z">
        <seg>パラメータは、パラメータによってパラメータ化されます。 次元の数&lt;x3/&gt;N&lt;x4/&gt;と、エレメント・タイプ&lt;x5/&gt;T&lt;x6/&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It is possible to constrain the number of values passed as a variable argument; this will be discussed
later in &lt;x1/&gt;Parametrically-constrained Varargs methods&lt;x2/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T101624Z" creationid="hsugawa8651" creationdate="20181112T101624Z">
        <seg>変数引数として渡される値の数を制限することは可能です。これについては、以下を参照してください。 &lt;x1/&gt;パラメトリックに拘束されたVarargsメソッド&lt;x2/&gt;の後にあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It is possible to define a set of function methods such that there is no unique most specific
method applicable to some combinations of arguments:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T014257Z" creationid="hsugawa8651" creationdate="20181120T014257Z">
        <seg>ある種の引数の組み合わせに対しては、最も特化するメソッドが一意に定まらない、関数メソッドの組み合わせに、定義がなってしまう可能性があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It is possible to pass Julia functions to native C functions that accept function pointer arguments.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T153908Z" creationid="hsugawa8651" creationdate="20181109T153908Z">
        <seg>関数ポインタ引数を受け入れるネイティブC関数にJulia関数を渡すことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It is possible to pass Julia functions to native C functions that accept function pointer arguments.
For example, to match C prototypes of the form:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T133850Z" creationid="hsugawa8651" creationdate="20181117T133850Z">
        <seg>関数ポインタ引数を受け入れるネイティブC関数にJulia関数を渡すことができます。 たとえば、フォームのCプロトタイプに一致させるには、次のようにします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It is recommended that the disambiguating method be defined first, since otherwise the ambiguity
exists, if transiently, until the more specific method is defined.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T014356Z" creationid="hsugawa8651" creationdate="20181120T014356Z">
        <seg>曖昧さのないメソッドを最初に定義することが推奨されます。というのも、一時的にせよ、より特化したメソッドが定義されるまで、曖昧さが残るからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It is recommended that these operations
have nearly constant time complexity, or technically Õ(1) complexity, as otherwise some array
functions may be unexpectedly slow.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T160322Z" creationid="hsugawa8651" creationdate="20181109T160322Z">
        <seg>これらの操作は、次のように操作することをお勧めします。 ほとんど一定の時間的複雑さ(技術的には1)、あるいは技術的には複雑さがある 機能が予期せぬほど遅くなります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It is recommended to also define &lt;x5/&gt;`firstindex`&lt;x6/&gt; to specify the first valid index:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T113111Z" creationid="hsugawa8651" creationdate="20181112T113111Z">
        <seg>また、最初の有効なインデックスを指定するには、&lt;x5/&gt;'firstindex&lt;x6/&gt;を定義することをお勧めします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It is significant that like &lt;c0&gt;if&lt;/c0&gt;-&lt;c1&gt;elseif&lt;/c1&gt;-&lt;c2&gt;else&lt;/c2&gt;, the expressions before and after the &lt;c3&gt;:&lt;/c3&gt; are only evaluated if the condition expression evaluates to &lt;c4&gt;true&lt;/c4&gt; or &lt;c5&gt;false&lt;/c5&gt;, respectively:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T135645Z" creationid="hsugawa8651" creationdate="20181119T135645Z">
        <seg>重要なのは、&lt;c0&gt;if&lt;/c0&gt;-&lt;c1&gt;elseif&lt;/c1&gt;-&lt;c2&gt;else&lt;/c2&gt;の場合と同様に、 &lt;c3&gt;:&lt;/c3&gt; の前後の式は、それぞれ条件式が&lt;c4&gt;真&lt;/c4&gt;・&lt;c5&gt;偽&lt;/c5&gt;の時、そしてその時だけ、評価されるということです。
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It is significant that like &lt;x1/&gt;if&lt;x2/&gt;-&lt;x3/&gt;elseif&lt;x4/&gt;-&lt;x5/&gt;else&lt;x6/&gt;, the expressions before and after the &lt;x7/&gt;:&lt;x8/&gt; are
only evaluated if the condition expression evaluates to &lt;x9/&gt;true&lt;x10/&gt; or &lt;x11/&gt;false&lt;x12/&gt;, respectively:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T230156Z" creationid="hsugawa8651" creationdate="20181109T230156Z">
        <seg>&lt;x2/&gt;-&lt;x3/&gt;elseif&lt;x4/&gt;&lt;x5/&gt;else&lt;x6/&gt;以外の&lt;x6/&gt;&lt;x6/&gt;の場合は、&lt;x7/&gt;:&lt;x8/&gt;:&lt;x8/&gt;=&lt;x8/&gt;となる。 条件式が&lt;x9/&gt;真&lt;x10/&gt;または&lt;x11/&gt;false&lt;x12/&gt;と評価された場合にのみ評価されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It is sometimes convenient to terminate the repetition of a &lt;c0&gt;while&lt;/c0&gt; before the test condition is falsified or stop iterating in a &lt;c1&gt;for&lt;/c1&gt; loop before the end of the iterable object is reached.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T142251Z" creationid="hsugawa8651" creationdate="20181119T142207Z">
        <seg>&lt;c0&gt;while&lt;/c0&gt;ループで、条件式が偽になる前に繰り返しを終了したり、&lt;c1&gt;for&lt;/c1&gt;ループで、最後のイテラブル・オブジェクトに達する前に反復を止めたりすると、便利なことがあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It is sometimes convenient to terminate the repetition of a &lt;x1/&gt;while&lt;x2/&gt; before the test condition
is falsified or stop iterating in a &lt;x3/&gt;for&lt;x4/&gt; loop before the end of the iterable object is reached.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T124447Z" creationid="hsugawa8651" creationdate="20181118T124447Z">
        <seg>テスト条件の前に&lt;x2/&gt;の前で&lt;x1/&gt;の繰り返しを終了することは時に都合がよい は、iterableオブジェクトの終わりに到達する前に、&lt;x4/&gt;ループのために、&lt;x3/&gt;での反復の反復を行うか、反復を停止させる。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It is sometimes useful to close (unload) a library so that it can be reloaded.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T152352Z" creationid="hsugawa8651" creationdate="20181117T152352Z">
        <seg>ライブラリを閉じる(アンロードする)ことによって、ライブラリを再ロードすることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It is sometimes useful to perform element-by-element binary operations on arrays of different
sizes, such as adding a vector to each column of a matrix.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T160040Z" creationid="hsugawa8651" creationdate="20181109T160040Z">
        <seg>異なる要素のバイナリ・バイナリ・バイナリ・オペレーションを実行する場合には、次のようにします。 行列の各列にベクトルを追加するなどのサイズです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It is sometimes useful to perform element-by-element binary operations on arrays of different
sizes, such as adding a vector to each column of a matrix. An inefficient way to do this would
be to replicate the vector to the size of the matrix:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T135218Z" creationid="hsugawa8651" creationdate="20181117T135218Z">
        <seg>異なる要素のバイナリ・バイナリ・バイナリ・オペレーションを実行する場合には、次のようにします。 行列の各列にベクトルを追加するなどのサイズです。効率的な方法はありません。 ベクトルをマトリックスのサイズに複製することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It is stored and defined by-value.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T150705Z" creationid="hsugawa8651" creationdate="20181117T150705Z">
        <seg>それは値によって保存され、定義される。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It is strongly recommended not to use expressions with side effects (such
as printing) in chained comparisons.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T065346Z" creationid="hsugawa8651" creationdate="20181114T030749Z">
        <seg>連続した比較で副次効果のある式（印刷など）を使用しないことを推奨します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It is the default algorithm for non-numeric data.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T064113Z" creationid="hsugawa8651" creationdate="20181114T064113Z">
        <seg>これは、非数値データのデフォルトアルゴリズムです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It is worth noting that you do not need to (and should not) define both argument orders
of this call; defining one is sufficient no matter what order the user supplies the arguments in.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T131758Z" creationid="hsugawa8651" creationdate="20181113T131758Z">
        <seg>両方の引数の両方を定義する必要はありませんが、両方の命令を定義する必要はありません。 この呼び出しの定義では、ユーザが引数を指定する順序にかかわらず、一つだけで十分であることになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It may often be useful, however, to write
more general methods where the declared parameter types are abstract:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T012736Z" creationid="hsugawa8651" creationdate="20181120T012736Z">
        <seg>しかし、宣言するパラメータの型が抽象的な、汎化メソッドを書くと、けっこう役に立つかもしれません。。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It needs to be called to obtain an &lt;x3/&gt;Exception&lt;x4/&gt; object:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T124642Z" creationid="hsugawa8651" creationdate="20181118T124642Z">
        <seg>&lt;x3/&gt;例外&lt;x4/&gt;オブジェクトを取得するには、次のコマンドを呼び出す必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It then computes the &lt;x10/&gt;slug&lt;x11/&gt; for this UUID/SHA-1 pair, which is &lt;x12/&gt;HDkr&lt;x13/&gt; (the exact details of this computation aren't important, but it is consistent and deterministic).</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T121218Z" creationid="hsugawa8651" creationdate="20181118T121218Z">
        <seg>その後、このUUID/SHA-1対の&lt;x10/&gt;slug&lt;x11/&gt;を計算します。&lt;x12/&gt;HDkr&lt;x13/&gt;(この計算の正確な詳細は重要ではありませんが、一貫性があり決定論的です)。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It will
be evaluated and returned depending on the preceding conditionals:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T230826Z" creationid="hsugawa8651" creationdate="20181109T230826Z">
        <seg>それは 前の条件に応じて評価され、返されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It will be evaluated and returned depending on the preceding conditionals:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T141016Z" creationid="hsugawa8651" creationdate="20181119T141016Z">
        <seg>これは前の条件式に応じて評価され、戻り値を返します</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It's easy to experiment with this behavior:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T140318Z" creationid="hsugawa8651" creationdate="20181109T230248Z">
        <seg>これは簡単に試してみることができます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It's useful when you want to store a value (that you obtained after some math, for example) for later use.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T032405Z" creationid="hsugawa8651" creationdate="20181119T032405Z">
        <seg>これは、 計算によって得た値などを後に使用するために保存する際に便利です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Iterating over the &lt;x1/&gt;CartesianIndices&lt;x2/&gt; of the &lt;x3/&gt;axes(::Broadcasted)&lt;x4/&gt; and using
indexing with the resulting &lt;x5/&gt;CartesianIndex&lt;x6/&gt; object to compute the result.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T131732Z" creationid="hsugawa8651" creationdate="20181113T131732Z">
        <seg>&lt;x3/&gt;軸の&lt;x1/&gt;CartesianIndices&lt;x2/&gt;を繰り返し(::ブロードキャスト)&lt;x4/&gt;を使用して繰り返します。 結果の計算には、結果の&lt;x5/&gt;CartesianIndex&lt;x6/&gt;オブジェクトを使用してインデックスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Iteration</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T135120Z" creationid="hsugawa8651" creationdate="20181117T135120Z">
        <seg>反復</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Iteration utilities</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T043415Z" creationid="hsugawa8651" creationdate="20181112T043415Z">
        <seg>Iteration utilities</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>IteratorEltype(IterType)&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T112140Z" creationid="hsugawa8651" creationdate="20181112T112140Z">
        <seg>IteratorEltype(IterType)&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>IteratorSize(IterType)&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T112117Z" creationid="hsugawa8651" creationdate="20181112T112117Z">
        <seg>IteratorSize(IterType)&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Its &lt;x9/&gt;i&lt;x10/&gt;th element is populated by &lt;x11/&gt;A[2, I[i], 3]&lt;x12/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T160823Z" creationid="hsugawa8651" creationdate="20181114T160823Z">
        <seg>その&lt;x9/&gt;i&lt;x10/&gt;番目の要素は、&lt;x11/&gt;A[2,I[I],3]&lt;x12/&gt;で占められている。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Its implementation uses &lt;x2/&gt;`hash`&lt;x3/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T041720Z" creationid="hsugawa8651" creationdate="20181112T041720Z">
        <seg>その実装は、&lt;x2/&gt;'ハッシュを使用します。&lt;x3/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>JULIA_BINDIR&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T054734Z" creationid="hsugawa8651" creationdate="20181116T054734Z">
        <seg>JULIA_BINDIR&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Julia
functions are not pure mathematical functions, in the sense that functions can alter and be affected
by the global state of the program.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T125111Z" creationid="hsugawa8651" creationdate="20181110T025452Z">
        <seg>関数は、純粋に数学的な関数ではありません。プログラムのグローバルな状態を変更したり、逆に、グローバルな状態に影響を受けたりします。 </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Julia
makes dealing with plain ASCII text simple and efficient, and handling Unicode is as simple and
efficient as possible.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T075510Z" creationid="hsugawa8651" creationdate="20181120T075510Z">
        <seg>JuliaはASCIIテキストの取り扱いをシンプルかつ効率的にし、Unicodeの取り扱いも同様に可能な限りシンプル かつ効率的にします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Julia Base Type</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T150853Z" creationid="hsugawa8651" creationdate="20181117T150853Z">
        <seg>ジュリア・ベース・タイプ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Julia Base contains a range of functions and macros appropriate for performing
scientific and numerical computing, but is also as broad as those of many general purpose programming
languages.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T150054Z" creationid="hsugawa8651" creationdate="20181110T041646Z">
        <seg>Julia Baseには、実行するために適切な関数とマクロが含まれています。 科学的・数値的計算ではあるが、一般的なプログラミングと同様に広範なものである 言語。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Julia aims to create an unprecedented combination of ease-of-use, power,
and efficiency in a single language.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T082559Z" creationid="hsugawa8651" creationdate="20181118T082559Z">
        <seg>Juliaは、扱いやすさ・強力さ・効率性の前例のない組み合わせを1つの言語で実現しようとしています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Julia aims to create an unprecedented combination of ease-of-use, power, and efficiency in a single language.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T182655Z" creationid="hsugawa8651" creationdate="20181118T182655Z">
        <seg>Juliaは、扱いやすさ・強力さ・効率性の前例のない組み合わせを1つの言語で実現しようとしています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Julia allows
the dispatch process to choose which of a function's methods to call based on the number of arguments
given, and on the types of all of the function's arguments.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T010457Z" creationid="hsugawa8651" creationdate="20181120T010457Z">
        <seg>Juliaでは、ディスパッチの過程で、関数のメソッドのどれを呼び出すか、関数のすべての引数の型と個数に基づいて、選択できます。 </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Julia also defines the types &lt;c0&gt;Int&lt;/c0&gt; and &lt;c1&gt;UInt&lt;/c1&gt;, which are aliases for the system's signed and unsigned native integer types respectively:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T185155Z" creationid="hsugawa8651" creationdate="20181118T185155Z">
        <seg>また、Juliaは、&lt;c0&gt;Int&lt;/c0&gt;と&lt;c1&gt;UInt&lt;/c1&gt; の型を定義します。 これらは、それぞれ、システムの符号つきと符号なしのネイティブの整数型の別名（エイリアス）です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Julia also defines the types &lt;x1/&gt;Int&lt;x2/&gt; and &lt;x3/&gt;UInt&lt;x4/&gt;, which are aliases for the system's signed and unsigned
native integer types respectively:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T032727Z" creationid="hsugawa8651" creationdate="20181112T110348Z">
        <seg>Juliaは、システムの符号つきまたは符号なしの固有の整数型のエイリアスである &lt;x1/&gt;Int&lt;x2/&gt; および &lt;x3/&gt;UInt&lt;x4/&gt; 型を定義します。:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Julia also provides &lt;x1/&gt;*&lt;x2/&gt; for string concatenation:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T082115Z" creationid="hsugawa8651" creationdate="20181120T082115Z">
        <seg>Juliaは &lt;x1/&gt;*&lt;x2/&gt; も文字列連結の記述として提供しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Julia also provides the &lt;a0&gt;&lt;c1&gt;nextfloat&lt;/c1&gt;&lt;/a0&gt; and &lt;a2&gt;&lt;c3&gt;prevfloat&lt;/c3&gt;&lt;/a2&gt; functions which return the next largest or smallest representable floating-point number to the argument respectively:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T191434Z" creationid="hsugawa8651" creationdate="20181118T191434Z">
        <seg>また、Juliaは、&lt;a0&gt;&lt;c1&gt;nextfloat&lt;/c1&gt;&lt;/a0&gt;と、&lt;a2&gt;&lt;c3&gt;prevfloat&lt;/c3&gt;&lt;/a2&gt;関数を提供します。 引数に対して次の最大または最小の表現可能浮動小数点数をそれぞれ指定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Julia also provides the &lt;x1/&gt;`nextfloat()`&lt;x2/&gt; and &lt;x3/&gt;`prevfloat()`&lt;x4/&gt; functions which return
the next largest or smallest representable floating-point number to the argument respectively:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T034735Z" creationid="hsugawa8651" creationdate="20181119T235619Z">
        <seg>Juliaは、次の最大または最小の浮動小数点数を引数に戻り値として与える &lt;x1/&gt;`nextfloat()`&lt;x2/&gt; および &lt;x3/&gt;`prevfloat()`&lt;x4/&gt;関数を提供しています。:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Julia also provides the &lt;x1/&gt;`nextfloat`&lt;x2/&gt; and &lt;x3/&gt;`prevfloat`&lt;x4/&gt; functions which return
the next largest or smallest representable floating-point number to the argument respectively:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T111320Z" creationid="hsugawa8651" creationdate="20181112T111320Z">
        <seg>また、Juliaは、&lt;x1/&gt;`ネクトフロート'&lt;x2/&gt;と、&lt;x3/&gt;'プレビフロート'&lt;x4/&gt;関数を提供します。 引数に対して次の最大または最小の表現可能浮動小数点数をそれぞれ指定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Julia and IJulia cheatsheet&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T233939Z" creationid="hsugawa8651" creationdate="20181119T233939Z">
        <seg>Julia and IJulia cheatsheet&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Julia applies the following order and associativity of operations, from highest precedence to lowest:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T030806Z" creationid="hsugawa8651" creationdate="20181114T030806Z">
        <seg>Juliaは、最高優先順位から最低への順序付けと関連付けを適用し、次の順序を適用します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Julia applies the following order of operations, from highest precedence to lowest:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T065448Z" creationid="hsugawa8651" creationdate="20181120T065448Z">
        <seg>Juliaは、優先順位の高いものから低いものまで、以下の処理順序を適用しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Julia automatically inserts calls to the &lt;x1/&gt;`Base.cconvert`&lt;x2/&gt; function to convert each argument
to the specified type.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T150600Z" creationid="hsugawa8651" creationdate="20181117T150600Z">
        <seg>Juliaは、各引数を変換するために&lt;x1/&gt;'Base.チコンベルト'&lt;x2/&gt;関数への呼び出しを自動的に挿入します。 で指定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Julia automatically inserts calls to the &lt;x1/&gt;`Base.cconvert`&lt;x2/&gt; function to convert each argument
to the specified type. For example, the following call:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T134250Z" creationid="hsugawa8651" creationdate="20181117T134250Z">
        <seg>Juliaは、各引数を変換するために&lt;x1/&gt;'Base.チコンベルト'&lt;x2/&gt;関数への呼び出しを自動的に挿入します。 指定されたタイプです。たとえば、次の呼び出しが行われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Julia can be started in parallel mode with either the &lt;c0&gt;-p&lt;/c0&gt; or the &lt;c1&gt;--machine-file&lt;/c1&gt; options.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T181912Z" creationid="hsugawa8651" creationdate="20181118T173653Z">
        <seg>&lt;c0&gt;-p&lt;/c0&gt;もしくは &lt;c1&gt;--machine-file&lt;/c1&gt; オプションを設定することで、Juliaを並列モードで開始することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Julia can be started in parallel mode with either the &lt;c0&gt;&lt;s1&gt;-p&lt;/s1&gt;&lt;/c0&gt; or the
&lt;c2&gt;&lt;s3&gt;--machinefile&lt;/s3&gt;&lt;/c2&gt; options.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T085503Z" creationid="hsugawa8651" creationdate="20181118T084853Z">
        <seg>&lt;c0&gt;&lt;s1&gt;-p&lt;/s1&gt;&lt;/c0&gt; もしくは &lt;c2&gt;&lt;s3&gt;--machinefile&lt;/s3&gt;&lt;/c2&gt; オプションを設定することで、Juliaを並列モードで開始することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Julia can be started in parallel mode with either the &lt;x1/&gt;-p&lt;x2/&gt; or the &lt;x3/&gt;--machine-file&lt;x4/&gt; options.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T092131Z" creationid="hsugawa8651" creationdate="20181109T224410Z">
        <seg>&lt;x1/&gt;-p&lt;x2/&gt; もしくは &lt;x3/&gt;--machinefile&lt;x4/&gt; オプションを設定することで、Juliaを並列モードで開始することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Julia can be started in parallel mode with either the &lt;x1/&gt;-p&lt;x2/&gt; or the &lt;x3/&gt;--machinefile&lt;x4/&gt; options.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T232021Z" creationid="hsugawa8651" creationdate="20181119T232021Z">
        <seg>&lt;x1/&gt;-p&lt;x2/&gt; もしくは &lt;x3/&gt;--machinefile&lt;x4/&gt; オプションを設定することで、Juliaを並列モードで開始することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Julia considers some types to be "plain data", meaning all of their data is self-contained
and does not reference other objects.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T123756Z" creationid="hsugawa8651" creationdate="20181118T123756Z">
        <seg>Juliaは、いくつかのタイプを「プレーン・データ」と見なし、すべてのデータが自己完結型であることを意味しています。 他のオブジェクトは参照されません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Julia does not have an analog of MATLAB's &lt;x1/&gt;clear&lt;x2/&gt; function; once a name is defined in a Julia
session (technically, in module &lt;x3/&gt;Main&lt;x4/&gt;), it is always present.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181110T024636Z" creationid="hsugawa8651" creationdate="20181110T024636Z">
        <seg>JuliaはMATLABの&lt;x1/&gt;clear&lt;x2/&gt;関数のアナログを持っていない;名前がJuliaで定義された場合 セッション(技術的には、モジュール&lt;x3/&gt;メイン&lt;x4/&gt;)は常に存在します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Julia does not treat arrays in any special way.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154124Z" creationid="hsugawa8651" creationdate="20181109T154124Z">
        <seg>Juliaは、特別な方法でアレイを処理しません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Julia features optional typing, multiple dispatch, and good
performance, achieved using type inference and &lt;a0&gt;just-in-time (JIT)
compilation&lt;/a0&gt;,
implemented using &lt;a1&gt;LLVM&lt;/a1&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T081814Z" creationid="hsugawa8651" creationdate="20181118T081625Z">
        <seg>Juliaは任意の型付け、多重ディスパッチ、そして優れた性能を提供します。 これは型推論と、&lt;a1&gt;LLVM&lt;/a1&gt;によって実装された &lt;a0&gt;just-in-time (JIT) コンパイラ&lt;/a0&gt;によって実現されるものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Julia features optional typing, multiple dispatch, and good
performance, achieved using type inference and `just-in-time (JIT)
compilation &lt;https://en.wikipedia.org/wiki/Just-in-time_compilation&gt;`_,
implemented using `LLVM
&lt;https://en.wikipedia.org/wiki/Low_Level_Virtual_Machine&gt;`_.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T183648Z" creationid="hsugawa8651" creationdate="20181118T183648Z">
        <seg>Juliaは任意の型付け、多重ディスパッチ、そして優れた性能を提供します。 これは型推論と、`LLVM
&lt;https://en.wikipedia.org/wiki/Low_Level_Virtual_Machine&gt;`によって実装された `just-in-time (JIT)
コンパイラ &lt;https://en.wikipedia.org/wiki/Just-in-time_compilation&gt;`によって実現されるものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Julia features optional typing, multiple dispatch, and good performance, achieved using type inference and &lt;a0&gt;just-in-time (JIT) compilation&lt;/a0&gt;, implemented using &lt;a1&gt;LLVM&lt;/a1&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T182421Z" creationid="hsugawa8651" creationdate="20181118T182421Z">
        <seg>Juliaは任意の型付け、多重ディスパッチ、そして優れた性能を提供します。 これは型推論と、&lt;a1&gt;LLVM&lt;/a1&gt;によって実装された &lt;a0&gt;just-in-time (JIT) コンパイラ&lt;/a0&gt;によって実現されるものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Julia fully supports Unicode characters and strings.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T081336Z" creationid="hsugawa8651" creationdate="20181120T081336Z">
        <seg>JuliaはUnicode文字とUnicode文字列をサポートします。:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Julia function arguments follow a convention sometimes called "pass-by-sharing", which means that
values are not copied when they are passed to functions.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T125347Z" creationid="hsugawa8651" creationdate="20181110T025705Z">
        <seg>Juliaの関数の引数は、時折「共有渡し」と呼ばれる方式に従っていて、関数へ引き渡す際に、値の複写を行いません。 </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Julia has
a sophisticated type system and allows multiple dispatch on argument types.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T105931Z" creationid="hsugawa8651" creationdate="20181112T105931Z">
        <seg>ジュリアは 洗練されたタイプのシステムで、引数型で複数のディスパッチを実行することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Julia has a "no boilerplate" philosophy:
functions can be called directly from Julia without any "glue" code, code generation, or compilation
-- even from the interactive prompt.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T160541Z" creationid="hsugawa8651" creationdate="20181109T160541Z">
        <seg>Juliaは「ボイラープレートなし」哲学を持っている。 関数は、"glue"コード、コード生成、コンパイルなしで、Juliaから直接呼び出すことができます。 --対話型プロンプトからでも。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Julia has a rational number type to represent exact ratios of integers.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T123502Z" creationid="hsugawa8651" creationdate="20181118T123502Z">
        <seg>Juliaは整数の正確な比率を表すために、合理的な数値型を持っています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Julia has an extensive, flexible API for sorting and interacting with already-sorted arrays of
values.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T063708Z" creationid="hsugawa8651" creationdate="20181114T063708Z">
        <seg>Juliaは、すでにソートされた配列をソートし、相互に作用させるための広範で柔軟なAPIを持っています。 値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Julia has two mechanisms for loading code:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T152655Z" creationid="hsugawa8651" creationdate="20181117T152655Z">
        <seg>Juliaには、コードをロードするための2つのメカニズムがあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Julia includes predefined types for both complex and rational numbers, and supports
all the standard &lt;x1/&gt;Mathematical Operations and Elementary Functions&lt;x2/&gt; on them.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T123012Z" creationid="hsugawa8651" creationdate="20181118T123012Z">
        <seg>Juliaは、複雑な数値と有理数の両方に対して定義済みのタイプを含み、サポートされています。 すべての標準的な&lt;x1/&gt;数学的操作と基本的な関数&lt;x2/&gt;がそれらの上にあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Julia installation is straightforward, whether using precompiled
binaries or compiling from source.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T174855Z" creationid="hsugawa8651" creationdate="20181118T083710Z">
        <seg>Juliaのインストールは、コンパイル済みのバイナリを使用するか、ソースからコンパイルするかにかかわらず、簡単です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Julia installation is straightforward, whether using precompiled binaries or compiling from source.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T173308Z" creationid="hsugawa8651" creationdate="20181109T224247Z">
        <seg>Juliaのインストールは、コンパイル済みのバイナリを使用するか、ソースからコンパイルするかにかかわらず、簡単です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Julia provides &lt;a0&gt;&lt;c1&gt;eps&lt;/c1&gt;&lt;/a0&gt;, which gives the distance between &lt;c2&gt;1.0&lt;/c2&gt; and the next larger representable floating-point value:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T190901Z" creationid="hsugawa8651" creationdate="20181118T190901Z">
        <seg>Juliaは&lt;a0&gt;&lt;c1&gt;eps&lt;/c1&gt;&lt;/a0&gt;を提供する。これは&lt;x3/&gt;1.0&lt;x4/&gt;と次に大きい表現型の距離を与える。 浮動小数点値:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Julia provides &lt;x1/&gt;`eps()`&lt;x2/&gt;, which gives the distance between &lt;x3/&gt;1.0&lt;x4/&gt; and the next larger representable
floating-point value:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T034246Z" creationid="hsugawa8651" creationdate="20181119T235345Z">
        <seg>Juliaは、 &lt;x3/&gt;1.0&lt;x4/&gt; と次に大きい浮動小数点値の間の距離を取得する &lt;x1/&gt;`eps()`&lt;x2/&gt; 関数を提供しています。:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Julia provides &lt;x1/&gt;`eps`&lt;x2/&gt;, which gives the distance between &lt;x3/&gt;1.0&lt;x4/&gt; and the next larger representable
floating-point value:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T111137Z" creationid="hsugawa8651" creationdate="20181112T111137Z">
        <seg>Juliaは&lt;x1/&gt;'eps'&lt;x2/&gt;を提供する。これは&lt;x3/&gt;1.0&lt;x4/&gt;と次に大きい表現型の距離を与える。 浮動小数点値:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Julia provides a broad range of primitive numeric types, and a full complement of arithmetic and
bitwise operators as well as standard mathematical functions are defined over them.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T032331Z" creationid="hsugawa8651" creationdate="20181109T225045Z">
        <seg>Juliaは、幅広いプリミティブ数値型を提供し、標準的な数学関数はもちろん算術演算やビット演算子の 補完が定義されています。これらは、現代のコンピュータでサポートされている数値型や演算処理と関連づけます。 </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Julia provides a broad range of primitive numeric types, and a full complement of arithmetic and bitwise operators as well as standard mathematical functions are defined over them.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T184452Z" creationid="hsugawa8651" creationdate="20181118T184452Z">
        <seg>Juliaは、さまざまな原始的な数値型を提供し、算術演算の完全な補完を提供します。 ビット演算子と標準数学関数がそれらの上に定義されています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Julia provides a complete collection of basic arithmetic and bitwise operators across all of its
numeric primitive types, as well as providing portable, efficient implementations of a comprehensive
collection of standard mathematical functions.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T062802Z" creationid="hsugawa8651" creationdate="20181113T131929Z">
        <seg>Juliaは、基本的な数値プリミティブ型の全ての算術演算子とビット演算子だけでなく、 可搬的かつ標準的な数学関数の効率的な実装を実現しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Julia provides a comprehensive collection of mathematical functions and operators.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T065429Z" creationid="hsugawa8651" creationdate="20181114T030755Z">
        <seg>Juliaは、包括的な数学関数および演算子を提供します。こ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Julia provides a variety of control flow constructs:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T132702Z" creationid="hsugawa8651" creationdate="20181109T225711Z">
        <seg>Juliaには、さまざまな制御構造があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Julia provides additional functions to test numbers for special values, which can be useful in
situations like hash key comparisons:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T064428Z" creationid="hsugawa8651" creationdate="20181114T030534Z">
        <seg>Juliaは、ハッシュ値の比較など、特別な値を比較するための機能を提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Julia provides an extremely flexible system for naming variables.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T032444Z" creationid="hsugawa8651" creationdate="20181119T032444Z">
        <seg>Juliaでは変数名を柔軟に設定することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Julia provides ease and expressiveness
for high-level numerical computing, in the same way as languages such
as R, MATLAB, and Python, but also supports general programming.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T081706Z" creationid="hsugawa8651" creationdate="20181118T081706Z">
        <seg>JuliaはR、MATLAB、Pythonなどと同様に高度な数値計算のための簡単で高い表現力を持つ記法を提供しつつ、一般的なプログラミングもサポートします。 </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Julia provides ease and expressiveness for high-level numerical computing, in the same way as languages such as R, MATLAB, and Python, but also supports general programming.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T182435Z" creationid="hsugawa8651" creationdate="20181118T182435Z">
        <seg>JuliaはR、MATLAB、Pythonなどと同様に高度な数値計算のための簡単で高い表現力を持つ記法を提供しつつ、一般的なプログラミングもサポートします。 </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Julia provides functions which return literal 0 and 1 corresponding to a specified type or the
type of a given variable.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T041028Z" creationid="hsugawa8651" creationdate="20181112T112000Z">
        <seg>Juliaは、特定の方や特定の変数の型に対応してリテラル0および1を返す関数を提供しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Julia supports federated management of packages.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T152821Z" creationid="hsugawa8651" creationdate="20181117T152821Z">
        <seg>Juliaは、パッケージの連合管理をサポートしています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Julia supports simple tuple "destructuring" that facilitates this:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T101454Z" creationid="hsugawa8651" creationdate="20181112T101454Z">
        <seg>Juliaは単純なタプル"destructing"をサポートしており、これを容易にしています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Julia supports three forms of numerical conversion, which differ in their handling of inexact
conversions.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T070054Z" creationid="hsugawa8651" creationdate="20181114T031029Z">
        <seg>Juliaは、３つの形式の数値変換をサポートしています。この3つは、不正確な変換を扱う方法が異なります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Julia understands three kinds of environments:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T152915Z" creationid="hsugawa8651" creationdate="20181117T152915Z">
        <seg>Juliaは3種類の環境を理解しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Julia uses the UTF-8 encoding by default, and support for new encodings can be added by packages.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T081906Z" creationid="hsugawa8651" creationdate="20181120T081906Z">
        <seg>JuliaはデフォルトでUTF-8エンコーディングを使用し、加えてパッケージで追加できる新しいエンコーディングもサポートしています。 </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Julia uses the first of these that exists to load the public &lt;x1/&gt;Priv&lt;x2/&gt; package.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T121242Z" creationid="hsugawa8651" creationdate="20181118T121242Z">
        <seg>Juliaは、public&lt;x1/&gt;Priv&lt;x2/&gt;パッケージをロードするために存在する最初のものを使用します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Julia uses your system's locale and language settings to determine which characters can be printed
as-is and which must be output using the generic, escaped &lt;x1/&gt;\u&lt;x2/&gt; or &lt;x3/&gt;\U&lt;x4/&gt; input forms.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T080641Z" creationid="hsugawa8651" creationdate="20181120T080641Z">
        <seg>Juliaは、システムのロケールと言語設定を加味して、どの文字が支障なく出力できるか、そしてどの文字が&lt;x1/&gt;\u&lt;x2/&gt;  または &lt;x3/&gt;\U&lt;x4/&gt; を使用してエスケープされた状態で出力すべきか判断します。 </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Julia's &lt;x2/&gt;Rational&lt;x3/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T124153Z" creationid="hsugawa8651" creationdate="20181118T124153Z">
        <seg>Julia's&lt;x2/&gt;Rational&lt;x3/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Julia's base library has a an internal &lt;x1/&gt;sub2ind&lt;x2/&gt; function to calculate a linear index into an n-dimensional
array, based on a set of n multilinear indices - in other words, to calculate the index &lt;x3/&gt;i&lt;x4/&gt; that
can be used to index into an array &lt;x5/&gt;A&lt;x6/&gt; using &lt;x7/&gt;A[i]&lt;x8/&gt;, instead of &lt;x9/&gt;A[x,y,z,...]&lt;x10/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T032243Z" creationid="hsugawa8651" creationdate="20181116T032243Z">
        <seg>Juliaのベースライブラリは、n次元の線形インデックスを計算するための内部&lt;x1/&gt;sub2ind&lt;x2/&gt;関数を持っています。 配列は、n個の多線形インデックスの集合に基づいて、言い換えれば、インデックス&lt;x3/&gt;i&lt;x4/&gt;を計算することを意味する。 &lt;x9/&gt;A[i]&lt;x8/&gt;を用いて、&lt;x9/&gt;A[x,y,z,…]&lt;x10/&gt;の代わりに、配列&lt;x5/&gt;A&lt;x6/&gt;をインデックスにすることができる。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Julia's compiler uses type inference and generates
optimized code for scalar array indexing, allowing programs to be written in a style that is convenient
and readable, without sacrificing performance, and using less memory at times.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154155Z" creationid="hsugawa8651" creationdate="20181109T154155Z">
        <seg>Juliaのコンパイラーは型推論を使用し スカラー配列インデックスの最適化されたコードで、プログラムをスタイルに便利なスタイルで記述できるようにします。 パフォーマンスを犠牲にすることなく読み取り可能で、時にはメモリを減らすことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Julia's load path is a stacked environment, for example.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T152932Z" creationid="hsugawa8651" creationdate="20181117T152932Z">
        <seg>Juliaのロードパスは、たとえばスタックされた環境です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Julia's package loading mechanism allows this by distinguishing the two &lt;x43/&gt;Priv&lt;x44/&gt; packages by context and UUID.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T152908Z" creationid="hsugawa8651" creationdate="20181117T152908Z">
        <seg>Juliaのパッケージロードメカニズムでは、2つの&lt;x43/&gt;Priv&lt;x44/&gt;パッケージをコンテキストとUUIDで識別することによってこれを実現しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Julia's package loading mechanism handles this by not requiring package names to be globally unique, even within the dependency graph of a single project.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T152839Z" creationid="hsugawa8651" creationdate="20181117T152839Z">
        <seg>Juliaのパッケージロードメカニズムは、単一のプロジェクトの依存グラフ内でも、パッケージ名をグローバルに一意にする必要がないため、これを処理します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Julia's promotion system makes arithmetic operations on mixtures of argument types "just work"
naturally and automatically.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T063439Z" creationid="hsugawa8651" creationdate="20181113T132201Z">
        <seg>Juliaのプロモーションシステムは、複数の引数の型を含む算術演算が自然にかつ自動的に 動作するようにしています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Julia's system for object construction
addresses all of these cases and more.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T123734Z" creationid="hsugawa8651" creationdate="20181118T123734Z">
        <seg>ジュリアのオブジェクト構築システム これらすべてのケースに対応しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Julia, like most technical computing languages, provides a first-class array implementation.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154040Z" creationid="hsugawa8651" creationdate="20181109T154040Z">
        <seg>Juliaは、ほとんどの技術的なコンピューティング言語と同様、一流のアレイ実装を提供しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Just as in &lt;x1/&gt;&lt;x2/&gt;&lt;x3/&gt;(@ref man-array-indexing), the &lt;x4/&gt;end&lt;x5/&gt; keyword may be used
to represent the last index of each dimension within the indexing brackets, as
determined by the size of the array being assigned into.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T155438Z" creationid="hsugawa8651" creationdate="20181109T155438Z">
        <seg>&lt;x1/&gt;&lt;x2/&gt;&lt;x3/&gt;(@ref man array indexing)の場合と同様に、&lt;x4/&gt;end&lt;x5/&gt;キーワードを使用することもできます。 インデックス・ブラケット内の各次元の最後のインデックスを表示するには、次のように指定します。 割り当てられているアレイのサイズによって決定されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Just as in &lt;x1/&gt;&lt;x2/&gt;&lt;x3/&gt;(@ref man-array-indexing), the &lt;x4/&gt;end&lt;x5/&gt; keyword may be used
to represent the last index of each dimension within the indexing brackets, as
determined by the size of the array being assigned into. Indexed assignment
syntax without the &lt;x6/&gt;end&lt;x7/&gt; keyword is equivalent to a call to
&lt;x8/&gt;`setindex!`&lt;x9/&gt;:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T134933Z" creationid="hsugawa8651" creationdate="20181117T134933Z">
        <seg>&lt;x1/&gt;&lt;x2/&gt;&lt;x3/&gt;(@ref man array indexing)の場合と同様に、&lt;x4/&gt;end&lt;x5/&gt;キーワードを使用することもできます。 インデックス・ブラケット内の各次元の最後のインデックスを表示するには、次のように指定します。 割り当てられる配列のサイズによって決定されます。インデックス付きの割り当て &lt;x6/&gt;end&lt;x7/&gt;キーワードがない構文は、次のような呼び出しに相当します。 &lt;x8/&gt;`setindex!`&lt;x9/&gt;:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Just as text output is performed by &lt;x1/&gt;`print`&lt;x2/&gt; and user-defined types can indicate their textual
representation by overloading &lt;x3/&gt;`show`&lt;x4/&gt;, Julia provides a standardized mechanism for rich multimedia
output (such as images, formatted text, or even audio and video), consisting of three parts:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T090648Z" creationid="hsugawa8651" creationdate="20181112T043216Z">
        <seg>テキスト出力が&lt;x1/&gt;`print`&lt;x2/&gt;によって実行されるように、ユーザ定義型はそのテキストを示すことができる オーバーロード&lt;x3/&gt;"show`&lt;x4/&gt;をオーバーロードすることで表現することで、リッチなマルチメディアを実現するための標準化されたメカニズムを提供する 出力(イメージ、フォーマットされたテキスト、オーディオやビデオなど)、3つの部分から構成されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Just as you can put subtype constraints on type parameters in type declarations (see &lt;x1/&gt;Parametric Types&lt;x2/&gt;),
you can also constrain type parameters of methods:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T020239Z" creationid="hsugawa8651" creationdate="20181120T020239Z">
        <seg>型宣言（&lt;x1/&gt;Parametric Types&lt;x2/&gt;を参照）に出てくる型パラメータにサブタイプ制約を付加できるのと同様に、メソッドの型パラメータも制約することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Just like
inner functions used elsewhere in the language, variables from the enclosing scope can be
"captured" in the inner function.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T155005Z" creationid="hsugawa8651" creationdate="20181109T155005Z">
        <seg>ちょうど 言語で他の場所で使用される内部関数、囲みスコープからの変数は、次のようになります。 「取り込み」は内部機能である。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Just like all the
other machinery, &lt;x3/&gt;broadcasted&lt;x4/&gt; also computes and exposes the combined broadcast style of its
arguments, so instead of specializing on &lt;x5/&gt;broadcasted(f, args...)&lt;x6/&gt;, you can specialize on
&lt;x7/&gt;broadcasted(::DestStyle, f, args...)&lt;x8/&gt; for any combination of style, function, and arguments.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T131620Z" creationid="hsugawa8651" creationdate="20181113T131620Z">
        <seg>まるで その他の機械は、&lt;x3/&gt;をブロードキャストして、その組み合わせを計算します。 引数は、&lt;x5/&gt;ブロードキャスト(f,args.)&lt;x6/&gt;に特化するのではなく、特殊化することができます。 &lt;x7/&gt;ブロードキャスト(::DestStyle,f,args.)&lt;x8/&gt;任意のスタイル、関数、引数の組み合わせに対して&lt;x8/&gt;を指定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Just like condition expressions used in &lt;c0&gt;if&lt;/c0&gt;, &lt;c1&gt;elseif&lt;/c1&gt; or the ternary operator, the operands of &lt;c2&gt;&amp;&amp;&lt;/c2&gt; or &lt;c3&gt;||&lt;/c3&gt; must be boolean values (&lt;c4&gt;true&lt;/c4&gt; or &lt;c5&gt;false&lt;/c5&gt;).</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T140919Z" creationid="hsugawa8651" creationdate="20181119T140919Z">
        <seg>&lt;c0&gt;if&lt;/c0&gt;、&lt;c1&gt;elseif&lt;/c1&gt;、三項演算子で使用される条件式のと同様に、 &lt;c2&gt;&amp;&amp;&lt;/c2&gt;や&lt;c3&gt;||&lt;/c3&gt;の被演算子は、ブール値（&lt;c4&gt;true&lt;/c4&gt; か &lt;c5&gt;false&lt;/c5&gt;）でなければなりません。 </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Just like condition expressions used in &lt;x1/&gt;if&lt;x2/&gt;, &lt;x3/&gt;elseif&lt;x4/&gt; or the ternary operator, the operands of
&lt;x5/&gt;&amp;&amp;&lt;x6/&gt; or &lt;x7/&gt;||&lt;x8/&gt; must be boolean values (&lt;x9/&gt;true&lt;x10/&gt; or &lt;x11/&gt;false&lt;x12/&gt;).</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T230809Z" creationid="hsugawa8651" creationdate="20181109T230809Z">
        <seg>&lt;x2/&gt;、&lt;x3/&gt;elseif&lt;x4/&gt;、または三元演算子の&lt;x1/&gt;で使用される条件式と同じように、オペランドは次のようになります。 &lt;x5/&gt;&amp;&amp;&lt;x6/&gt;または&lt;x7/&gt;&lt;x8/&gt;は、ブール値(&lt;x9/&gt;true&lt;x10/&gt;または&lt;x11/&gt;false&lt;x12/&gt;)である必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Juxtaposed literal coefficient syntax may conflict with two numeric literal syntaxes: hexadecimal
integer literals and engineering notation for floating-point literals.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T040651Z" creationid="hsugawa8651" creationdate="20181112T111916Z">
        <seg>並列されたリテラル係数の構文は、16進整数リテラルと浮動小数点リテラルの指数表記の2つの 数値リテラルと競合する場合があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>LLVM Interface</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181110T042029Z" creationid="hsugawa8651" creationdate="20181110T042029Z">
        <seg>LLVM Interface</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Larger integer literals that cannot be represented using only 32 bits but can be represented in
64 bits always create 64-bit integers, regardless of the system type:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T032741Z" creationid="hsugawa8651" creationdate="20181109T225319Z">
        <seg>32ビットを使用して表現できないが、64ビットでは表現できるような大きな整数リテラルの場合、 システムタイプに関係なく常に64ビット整数を作成します。:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Larger integer literals that cannot be represented using only 32 bits but can be represented in 64 bits always create 64-bit integers, regardless of the system type:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T185213Z" creationid="hsugawa8651" creationdate="20181118T185213Z">
        <seg>32ビットのみを使用して表現することはできないが、次のように表現できる整数リテラル 64ビットは、システムタイプに関係なく、常に64ビットの整数を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Largest value</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T225129Z" creationid="hsugawa8651" creationdate="20181109T225129Z">
        <seg>最大値</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Left</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T095606Z" creationid="hsugawa8651" creationdate="20181114T030817Z">
        <seg>左</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Left&lt;x1/&gt;&lt;x2/&gt;&lt;x3/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T165035Z" creationid="hsugawa8651" creationdate="20181118T165035Z">
        <seg>左&lt;x1/&gt;&lt;x2/&gt;&lt;x3/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Let's start with an example to see what this means:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T020922Z" creationid="hsugawa8651" creationdate="20181120T020922Z">
        <seg>これが何を意味するかを例をあげて見てみましょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Libc.MS_ASYNC&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T043203Z" creationid="hsugawa8651" creationdate="20181112T043203Z">
        <seg>Libc.MS_ASYNC&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Libc.MS_INVALIDATE&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T043204Z" creationid="hsugawa8651" creationdate="20181112T043204Z">
        <seg>Libc.MS_INVALIDATE&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Libc.MS_SYNC&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T043205Z" creationid="hsugawa8651" creationdate="20181112T043205Z">
        <seg>Libc.MS_SYNC&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Libdl.dlclose(lib) &lt;x4/&gt; Close the library explicitly.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T152410Z" creationid="hsugawa8651" creationdate="20181117T152410Z">
        <seg>Libdl.dlclose(lib)&lt;x4/&gt;ライブラリを明示的に閉じます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Lightweight "green" threading (&lt;a0&gt;coroutines&lt;/a0&gt;)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T182724Z" creationid="hsugawa8651" creationdate="20181118T182724Z">
        <seg>軽量で”greenな”スレッドシステム [1] （ &lt;a0&gt;コルーチン&lt;/a0&gt; ）
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Lightweight “green” threading
(&lt;a0&gt;coroutines&lt;/a0&gt;)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T083202Z" creationid="hsugawa8651" creationdate="20181118T082816Z">
        <seg>軽量で”greenな”スレッドシステム [1] （ &lt;a0&gt;コルーチン&lt;/a0&gt; ）
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Like &lt;x2/&gt;Dict&lt;x3/&gt; it uses &lt;x4/&gt;hash&lt;x5/&gt; for hashing and &lt;x6/&gt;isequal&lt;x7/&gt; for equality, unlike &lt;x8/&gt;Dict&lt;x9/&gt; it does
not convert keys on insertion.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T032110Z" creationid="hsugawa8651" creationdate="20181114T032110Z">
        <seg>&lt;x2/&gt;Dict&lt;x3/&gt;と同様に、&lt;x4/&gt;はハッシュに&lt;x4/&gt;ハッシュ&lt;x5/&gt;を使用し、&lt;x8/&gt;等価&lt;x7/&gt;は&lt;x8/&gt;等価&lt;x7/&gt;である。 挿入時にキーを変換しません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Like C and Java, but unlike most dynamic languages, Julia has a first-class type representing
a single character, called &lt;x1/&gt;Char&lt;x2/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T075905Z" creationid="hsugawa8651" creationdate="20181120T075905Z">
        <seg>C言語やJavaと同様に、しかしほとんどの動的言語とは異なり、Juliaには &lt;x1/&gt;Char&lt;x2/&gt;. と呼ばれる1文字を表す第1級型があります。 </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Like Lisp,
Julia represents its own code as a data structure of the language itself.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T100155Z" creationid="hsugawa8651" creationdate="20181118T100155Z">
        <seg>Lispと同じように Juliaは自身のコードを言語自体のデータ構造として表しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Like ccall, all of these arguments will be evaluated at compile-time, when the containing method is defined.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T153944Z" creationid="hsugawa8651" creationdate="20181109T153944Z">
        <seg>ccallと同様に、これらの引数はすべてコンパイル時に評価され、containingメソッドが定義されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Limit usage of CPU features up to &lt;c0&gt;&lt;target&gt;&lt;/c0&gt;; set to &lt;c1&gt;help&lt;/c1&gt; to see the available options</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T174535Z" creationid="hsugawa8651" creationdate="20181118T174535Z">
        <seg>CPU機能の使用を制限&lt;c0&gt;&lt;target&gt;&lt;/c0&gt;に制限します。&lt;c1&gt;help&lt;/c1&gt;に設定すると、使用可能なオプションが表示されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Limit usage of CPU features up to &lt;x1/&gt;&lt;x2/&gt;&lt;x3/&gt;; set to &lt;x4/&gt;help&lt;x5/&gt; to see the available options</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T224739Z" creationid="hsugawa8651" creationdate="20181109T224739Z">
        <seg>CPU機能の使用を制限&lt;x1/&gt;&lt;x2/&gt;&lt;x3/&gt;に制限します。&lt;x4/&gt;ヘルプ&lt;x5/&gt;に設定すると、使用可能なオプションが表示されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Limit usage of cpu features up to &lt;target&gt;; set to &lt;c0&gt;help&lt;/c0&gt; to see the available options</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T183146Z" creationid="hsugawa8651" creationdate="20181118T183146Z">
        <seg>CPU機能の使用を制限&lt;target&gt;に制限します。&lt;c0&gt;help&lt;/c0&gt;に設定すると、使用可能なオプションが表示されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Linear algebra&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T234642Z" creationid="hsugawa8651" creationdate="20181119T234642Z">
        <seg>線形代数&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Lisp-like macros and other metaprogramming facilities</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T082943Z" creationid="hsugawa8651" creationdate="20181118T082943Z">
        <seg>Lispライクなマクロやその他のメタプログラミング機構</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Literal &lt;x3/&gt;`Float32`&lt;x4/&gt; values can be
entered by writing an &lt;x5/&gt;f&lt;x6/&gt; in place of &lt;x7/&gt;e&lt;x8/&gt;:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T033618Z" creationid="hsugawa8651" creationdate="20181112T110604Z">
        <seg>リテラル &lt;x3/&gt;`Float32`&lt;x4/&gt;  値は、 &lt;x5/&gt;f&lt;x6/&gt;  の代わりに &lt;x7/&gt;e&lt;x8/&gt;を使用することで入力が可能です。:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Literal floating-point numbers are represented in the standard formats, using
&lt;x1/&gt;E-notation&lt;x2/&gt; when necessary:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T110539Z" creationid="hsugawa8651" creationdate="20181112T110539Z">
        <seg>リテラル浮動小数点数は、標準形式で表されます。 &lt;x1/&gt;E表記法&lt;x2/&gt;必要に応じて&lt;x2/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Literal floating-point numbers are represented in the standard formats, using &lt;a0&gt;E-notation&lt;/a0&gt; when necessary:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T190352Z" creationid="hsugawa8651" creationdate="20181118T190352Z">
        <seg>リテラル浮動小数点数は、標準形式で表されます。必要に応じて &lt;a0&gt;E表記法&lt;/a0&gt;が用いられます</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Literal floating-point numbers are represented in the standard formats:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T033510Z" creationid="hsugawa8651" creationdate="20181119T235223Z">
        <seg>浮動小数点数リテラルは標準的な形式で表されます。:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Literal integers are represented in the standard manner:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T032611Z" creationid="hsugawa8651" creationdate="20181109T225202Z">
        <seg>整数リテラルは標準的な方法で表現されます。:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Literal one of type &lt;x1/&gt;x&lt;x2/&gt; or type of variable &lt;x3/&gt;x&lt;x4/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T041239Z" creationid="hsugawa8651" creationdate="20181112T112020Z">
        <seg>&lt;x1/&gt;x&lt;x2/&gt;型、または、 変数 &lt;x3/&gt;x&lt;x4/&gt; の型の、リテラル1</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Literal zero and one</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T164630Z" creationid="hsugawa8651" creationdate="20181118T164630Z">
        <seg>リテラル0と1</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Literal zero of type &lt;x1/&gt;x&lt;x2/&gt; or type of variable &lt;x3/&gt;x&lt;x4/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T041149Z" creationid="hsugawa8651" creationdate="20181112T112010Z">
        <seg>&lt;x1/&gt;x&lt;x2/&gt; 型、または、変数 &lt;x3/&gt;x&lt;x4/&gt; の型のリテラル0
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Load &lt;c0&gt;&lt;file&gt;&lt;/c0&gt; immediately on all processors</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T174329Z" creationid="hsugawa8651" creationdate="20181118T174329Z">
        <seg>すべてのプロセッサで&lt;c0&gt;&lt;file&gt;&lt;/c0&gt;を即時にロード</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Load &lt;x1/&gt;&lt;x2/&gt;/.julia/config/startup.jl&lt;x3/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T031604Z" creationid="hsugawa8651" creationdate="20181109T224646Z">
        <seg>&lt;x1/&gt;&lt;x2/&gt;/.julia/config/startup.jl&lt;x3/&gt;をロードします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Load &lt;x1/&gt;&lt;x2/&gt;&lt;x3/&gt; immediately on all processors</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T224705Z" creationid="hsugawa8651" creationdate="20181109T224705Z">
        <seg>すべてのプロセッサで&lt;x1/&gt;&lt;x2/&gt;&lt;x3/&gt;を即時にロード</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Load or save history</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T224730Z" creationid="hsugawa8651" creationdate="20181109T224730Z">
        <seg>履歴をロードまたは保存する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Logical indexing</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T135104Z" creationid="hsugawa8651" creationdate="20181117T135104Z">
        <seg>論理索引付け</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Machine epsilon</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T034147Z" creationid="hsugawa8651" creationdate="20181118T120349Z">
        <seg>計算機エプシロン</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Macro arguments may include expressions,
literal values, and symbols.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T100951Z" creationid="hsugawa8651" creationdate="20181120T100951Z">
        <seg>マクロの引き数は、式、リテラル値、シンボルを含むことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Macros provide a method to include generated code in the final body of a program.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T165334Z" creationid="hsugawa8651" creationdate="20181118T165334Z">
        <seg>マクロは、プログラムの最終的なボディに生成されたコードを含める方法を提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Many functions for constructing and initializing arrays are provided.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154333Z" creationid="hsugawa8651" creationdate="20181109T154333Z">
        <seg>配列を作成して初期化するための多くの関数が用意されています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Many methods in Julia such as &lt;x1/&gt;`unsafe_load`&lt;x2/&gt; and
&lt;x3/&gt;`String`&lt;x4/&gt; make copies of data instead of taking ownership of the buffer, so that it is
safe to free (or alter) the original data without affecting Julia.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T152244Z" creationid="hsugawa8651" creationdate="20181117T152244Z">
        <seg>&lt;x1/&gt;"unsafe_load"&lt;x2/&gt;などのJuliaでは多くのメソッドがあり &lt;x3/&gt;'String'&lt;x4/&gt;は、バッファの所有権を取得する代わりに、データのコピーを作成します。したがって、次のような結果が得られます。 Juliaに影響を与えることなく、元のデータを自由に(または変更)することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Many newcomers to Julia find the use of &lt;x1/&gt;...&lt;x2/&gt; operator confusing.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181110T025227Z" creationid="hsugawa8651" creationdate="20181110T025227Z">
        <seg>Juliaの新規参入者の多くは、&lt;x1/&gt;.…&lt;x2/&gt;演算子を混同していることを発見しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Many non- mutating functions are implemented by
calling a function of the same name with an added &lt;x6/&gt;!&lt;x7/&gt; at the end on an explicit
copy of the input, and returning that copy.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154222Z" creationid="hsugawa8651" creationdate="20181109T154222Z">
        <seg>多くの非重複関数は、次のように実装されています。 明示的に最後に&lt;x6/&gt;!&lt;x7/&gt;を追加して、同じ名前の関数を呼び出します。 入力のコピーを返し、そのコピーを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Many other
functions assume the default &lt;x11/&gt;`RoundNearest`&lt;x12/&gt; mode is set, and can give erroneous results
when operating under other rounding modes.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T035006Z" creationid="hsugawa8651" creationdate="20181120T035006Z">
        <seg>その他の多くの関数は、デフォルトの &lt;x11/&gt;`RoundNearest`&lt;x12/&gt;モードが 設定されている前提で機能し、その他の端数処理モードでの演算処理では誤った結果を出力する場合があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Many other special mathematical functions are provided by the package
&lt;x1/&gt;SpecialFunctions.jl&lt;x2/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T100139Z" creationid="hsugawa8651" creationdate="20181118T100139Z">
        <seg>その他の特殊な数学的関数は、パッケージによって提供されます。 &lt;x1/&gt;SpecialFunctions.jl&lt;x2/&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Mapping C Functions to Julia</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T151457Z" creationid="hsugawa8651" creationdate="20181117T151457Z">
        <seg>C関数をジュリアにマッピングする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Mapping C Types to Julia</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T150547Z" creationid="hsugawa8651" creationdate="20181117T150547Z">
        <seg>Cタイプをジュリアにマッピングする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Mathematical Functions</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T043424Z" creationid="hsugawa8651" creationdate="20181112T043424Z">
        <seg>Mathematical Functions</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Mathematical Operations and Elementary Functions</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T164907Z" creationid="hsugawa8651" creationdate="20181118T164907Z">
        <seg>算術演算と基本関数</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Mathematical Operations and Elementary Functions&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T234459Z" creationid="hsugawa8651" creationdate="20181119T234418Z">
        <seg>算術演算と基本関数&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Mathematics</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T043421Z" creationid="hsugawa8651" creationdate="20181112T043421Z">
        <seg>Mathematics</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Memory Ownership</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T151338Z" creationid="hsugawa8651" creationdate="20181117T151338Z">
        <seg>メモリの所有権</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Memory allocation analysis&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T234903Z" creationid="hsugawa8651" creationdate="20181119T234903Z">
        <seg>メモリ配置の分析&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Memory allocation and deallocation of such objects must be handled by calls to the appropriate
cleanup routines in the libraries being used, just like in any C program.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T151428Z" creationid="hsugawa8651" creationdate="20181117T151428Z">
        <seg>このようなオブジェクトのメモリ割り当てと解放は、適切なものを呼び出して処理する必要があります。 これは、Cプログラムの場合と同様に、使用されているライブラリ内のクリーンアップルーチンです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Memory layout</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181110T041853Z" creationid="hsugawa8651" creationdate="20181110T041853Z">
        <seg>Memory layout</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>MergeSort&lt;x1/&gt; is an O(n log n) stable sorting algorithm but is not in-place – it requires a temporary
array of half the size of the input array – and is typically not quite as fast as &lt;x2/&gt;QuickSort&lt;x3/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T064117Z" creationid="hsugawa8651" creationdate="20181114T064117Z">
        <seg>MergeSort&lt;x1/&gt;は、O(nログn)安定ソートアルゴリズムですが、インプレースではありません。一時的に必要です。 入力アレイのサイズの半分の配列で、通常は&lt;x2/&gt;QuickSort&lt;x3/&gt;のように高速ではありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Metaprogramming</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T165152Z" creationid="hsugawa8651" creationdate="20181118T165152Z">
        <seg>メタプログラミング</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Metaprogramming&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T234626Z" creationid="hsugawa8651" creationdate="20181119T234626Z">
        <seg>メタプログラミング&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Method definitions can optionally have type parameters qualifying the signature:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T015901Z" creationid="hsugawa8651" creationdate="20181120T015901Z">
        <seg>メソッド定義で、任意で型パラメータをつけて、シグネチャを細かく指定することができます。：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Method type parameters are not restricted to being used as the types of arguments:
they can be used anywhere a value would be in the signature of the function or body of the function.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T020114Z" creationid="hsugawa8651" creationdate="20181120T020114Z">
        <seg>メソッドの型パラメータは、引数の型として使えるだけでなく、関数の本体または関数のシグネチャの、値がある場所であればどこでも使えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>MethodError&lt;x1/&gt; should be thrown if no supported MIME types are found
for &lt;x2/&gt;x&lt;x3/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T043329Z" creationid="hsugawa8651" creationdate="20181112T043329Z">
        <seg>サポートされているMIMEタイプが見つからない場合は、MethodError&lt;x1/&gt;をスローする必要があります。 &lt;x2/&gt;x&lt;x3/&gt;である。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Methods to implement</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T094350Z" creationid="hsugawa8651" creationdate="20181118T094350Z">
        <seg>実装する方法</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Methods&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T234541Z" creationid="hsugawa8651" creationdate="20181119T234541Z">
        <seg>メソッド&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Mixed-type comparisons between signed integers, unsigned integers, and floats can be tricky.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T064658Z" creationid="hsugawa8651" creationdate="20181114T030621Z">
        <seg>符号付き整数、符号がない整数、および浮動小数点数間の複数の型の比較は注意が必要です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Modifications to mutable values (such as &lt;x3/&gt;Array&lt;x4/&gt;s) made within
a function will be visible to the caller.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T125445Z" creationid="hsugawa8651" creationdate="20181110T025712Z">
        <seg>関数内で(&lt;x3/&gt;配列&lt;x4/&gt;のような)可変な値を変更すると、呼び出す側にも影響します。 </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Modules can be replaced by redefining them, and so if you wrap all your new code inside a module
you can redefine types and constants.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181110T024738Z" creationid="hsugawa8651" creationdate="20181110T024738Z">
        <seg>モジュールを再定義すると、モジュールを再定義することができます。したがって、モジュール内の新しいコードをすべてラップすることができます。 タイプと定数を再定義できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Modules&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T234603Z" creationid="hsugawa8651" creationdate="20181119T234603Z">
        <seg>モジュール&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>More About Callbacks</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T152638Z" creationid="hsugawa8651" creationdate="20181117T152638Z">
        <seg>コールバックの詳細</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>More concrete examples
can be found within the &lt;x25/&gt;&lt;x26/&gt;&lt;x27/&gt;(@ref man-interface-strided-arrays).</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T160515Z" creationid="hsugawa8651" creationdate="20181109T160515Z">
        <seg>具体的な事例 は、&lt;x25/&gt;&lt;x26/&gt;&lt;x27/&gt;(@ref man interface strided配列)内にあることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>More generally, &lt;x1/&gt;f.(args...)&lt;x2/&gt; is actually equivalent to &lt;x3/&gt;broadcast(f, args...)&lt;x4/&gt;, which allows
you to operate on multiple arrays (even of different shapes), or a mix of arrays and scalars (see
&lt;x5/&gt;Broadcasting&lt;x6/&gt;).</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T120117Z" creationid="hsugawa8651" creationdate="20181118T120117Z">
        <seg>より一般的には、&lt;x1/&gt;f.(args.…)&lt;x2/&gt;は、実際には&lt;x3/&gt;ブロードキャスト(f、args.…)&lt;x4/&gt;と同等であり、これにより 複数の配列(異なる形状であっても)を操作したり、配列とスカラーを混在させたりすることができます( &lt;x5/&gt;ブロードキャスト&lt;x6/&gt;)。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>More on this below.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T152745Z" creationid="hsugawa8651" creationdate="20181117T152745Z">
        <seg>以下にその詳細を示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>More precisely, the set of all finite-length strings &lt;x1/&gt;S&lt;x2/&gt; together with the string concatenation operator
&lt;x3/&gt;*&lt;x4/&gt; forms a &lt;x5/&gt;free monoid&lt;x6/&gt; (&lt;x7/&gt;S&lt;x8/&gt;, &lt;x9/&gt;*&lt;x10/&gt;).</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T082612Z" creationid="hsugawa8651" creationdate="20181120T082612Z">
        <seg>より厳密に言えば、全ての有限の長さを持つ文字列の集合 &lt;x1/&gt;S&lt;x2/&gt;  と文字列連結演算子 &lt;x3/&gt;*&lt;x4/&gt; は &lt;x5/&gt;free monoid&lt;x6/&gt;自由モノイド (&lt;x7/&gt;S&lt;x8/&gt;, &lt;x9/&gt;*&lt;x10/&gt;) を形成します。 </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>More specifically, &lt;x1/&gt;a .^ b&lt;x2/&gt; is parsed as the &lt;x3/&gt;&lt;x4/&gt;&lt;x5/&gt;(@ref man-vectorized)
&lt;x6/&gt;(^).(a,b)&lt;x7/&gt;, which performs a &lt;x8/&gt;&lt;x9/&gt;&lt;x10/&gt;(@ref Broadcasting) operation:
it can combine arrays and scalars, arrays of the same size (performing
the operation elementwise), and even arrays of different shapes (e.g.
combining row and column vectors to produce a matrix).</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T115833Z" creationid="hsugawa8651" creationdate="20181113T132539Z">
        <seg>より具体的には、&lt;x1/&gt;a.^b&lt;x2/&gt;は、&lt;x3/&gt;&lt;x4/&gt;&lt;x5/&gt;(@ref man-vectorized)として解析されます。 &lt;x6/&gt;(^).(a,b)&lt;x7/&gt;&lt;x8/&gt;&lt;x8/&gt;&lt;x9/&gt;(@ref Broadcasting)動作を実行します。 配列とスカラを組み合わせることができ、同じサイズの配列(実行することができる) この操作エレメントは、異なる形状の配列(例えば 行列を生成するために行と列のベクトルを結合します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>More usefully, it is possible to constrain varargs methods by a parameter.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T022802Z" creationid="hsugawa8651" creationdate="20181120T022802Z">
        <seg>さらに便利なことに、パラメータで可変引数メソッドを制約することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Moreover,
since constructors can leverage all of the power of the type system, methods, and multiple dispatch,
defining sophisticated behavior is typically quite simple.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T124053Z" creationid="hsugawa8651" creationdate="20181118T124053Z">
        <seg>さらに コンストラクタは、型システム、メソッド、および複数のディスパッチのすべてを活用できます。 高度な動作を定義することは、一般的に非常に単純です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Moreover, &lt;x1/&gt;nested&lt;x2/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T120129Z" creationid="hsugawa8651" creationdate="20181118T120129Z">
        <seg>さらに、&lt;x1/&gt;ネストされた&lt;x2/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Moreover, &lt;x5/&gt;&amp;&lt;x6/&gt; may be used with any expression,
such as &lt;x7/&gt;&amp;0&lt;x8/&gt; or &lt;x9/&gt;&amp;f(x)&lt;x10/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T151902Z" creationid="hsugawa8651" creationdate="20181117T151858Z">
        <seg>さらに、&lt;x5/&gt;&amp;&lt;x6/&gt;は、任意の発現とともに使用することができる。 &lt;x7/&gt;&amp;0&lt;x8/&gt;や&lt;x9/&gt;&amp;f(x)&lt;x10/&gt;のようになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Moreover, an attempt to use &lt;x8/&gt;A&lt;x9/&gt; will likely result in an error, because most methods are not defined on type &lt;x10/&gt;Nothing&lt;x11/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181110T024705Z" creationid="hsugawa8651" creationdate="20181110T024705Z">
        <seg>さらに、&lt;x8/&gt;A&lt;x9/&gt;を使用しようとすると、エラーが発生する可能性があります。なぜなら、ほとんどのメソッドは、タイプ&lt;x10/&gt;Nothing&lt;x11/&gt;では定義されていないからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Moreover, if &lt;x2/&gt;import Zebra&lt;x3/&gt; occurs in the public &lt;x4/&gt;Priv&lt;x5/&gt; package—the one with UUID &lt;x6/&gt;2d15fe94-a1f7-436c-a4d8-07a9a496e01c&lt;x7/&gt;—then that would also fail since that &lt;x8/&gt;Priv&lt;x9/&gt; package has no declared dependencies in the manifest file and therefore cannot load any packages.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T121149Z" creationid="hsugawa8651" creationdate="20181118T121149Z">
        <seg>さらに、&lt;x2/&gt;のImport Zebra&lt;x3/&gt;がpublic&lt;x4/&gt;Priv&lt;x5/&gt;パッケージに存在する場合、UUID&lt;x6/&gt;2d15fe94-a1f7-436c-a4d8-07a9a496e01c&lt;x7/&gt;は、その&lt;x8/&gt;Priv&lt;x9/&gt;パッケージがマニフェストファイルに宣言された依存関係を持たず、したがってパッケージをロードできないため、失敗します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Moreover, like
all vectorized "dot calls," these "dot operators" are
&lt;x11/&gt;fusing&lt;x12/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T132535Z" creationid="hsugawa8651" creationdate="20181113T132535Z">
        <seg>さらに すべてのベクトル化された"ドット・コール"ドット・オペレーター"ドット・オペレーター"は &lt;x11/&gt;融合&lt;x12/&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Moreover, these functions (like any Julia function) can be applied in "vectorized" fashion to
arrays and other collections with the &lt;x1/&gt;&lt;x2/&gt;&lt;x3/&gt;(@ref man-vectorized) &lt;x4/&gt;f.(A)&lt;x5/&gt;,
e.g. &lt;x6/&gt;sin.(A)&lt;x7/&gt; will compute the sine of each element of an array &lt;x8/&gt;A&lt;x9/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T030803Z" creationid="hsugawa8651" creationdate="20181114T030803Z">
        <seg>さらに、これらの関数(Julia関数のような)は、「ベクトル化」された形式で適用することができます。 &lt;x1/&gt;&lt;x2/&gt;&lt;x3/&gt;(@ref man vectorized)&lt;x4/&gt;f.(A)&lt;x5/&gt;(A)&lt;x5/&gt;の配列とその他のコレクション 例えば、&lt;x6/&gt;sin(A)&lt;x7/&gt;は、配列&lt;x8/&gt;A&lt;x9/&gt;の各要素の正弦を計算します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Most
technical computing languages pay a lot of attention to their array implementation at the expense
of other containers.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154112Z" creationid="hsugawa8651" creationdate="20181109T154112Z">
        <seg>ほとんど テクニカル・コンピューティング言語は、アレイ実装に多大な関心を払っています。 その他の容器。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Most C and Fortran libraries ship
compiled as shared libraries already, but if you are compiling the code yourself using GCC (or
Clang), you will need to use the &lt;x1/&gt;-shared&lt;x2/&gt; and &lt;x3/&gt;-fPIC&lt;x4/&gt; options.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T160550Z" creationid="hsugawa8651" creationdate="20181109T160550Z">
        <seg>ほとんどのCおよびFortranライブラリは出荷されています。 はすでに共有ライブラリとしてコンパイルされていますが、GCCを使用して自分でコードをコンパイルする場合は Clang)は、&lt;x1/&gt;-shared&lt;x2/&gt;および&lt;x3/&gt;-fPIC&lt;x4/&gt;オプションを使用する必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Most indexing in Julia is 1-based: the first element of many integer-indexed objects is found at
index 1.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T100223Z" creationid="hsugawa8651" creationdate="20181120T100223Z">
        <seg>Julia では、ほどんどのインデックスは1から始まります。すなわち、整数でインデックスされるオブジェクトでは、ほぼ、最初の要素はインデックス1に見つかります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Most non-&lt;x3/&gt;AbstractString&lt;x4/&gt; objects are converted to strings closely corresponding to how
they are entered as literal expressions:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T082946Z" creationid="hsugawa8651" creationdate="20181120T082946Z">
        <seg>ほとんどの非 &lt;x3/&gt;AbstractString&lt;x4/&gt;  オブジェクトは、どのようにリテラル表現として入力されるかに対応する文字列に変換されます。:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Most of the Unicode infix operators (in category Sm), such as &lt;c3&gt;⊕&lt;/c3&gt;, are parsed as infix operators and are available for user-defined methods (e.g. you can use &lt;c4&gt;const ⊗ = kron&lt;/c4&gt; to define &lt;c5&gt;⊗&lt;/c5&gt; as an infix Kronecker product).</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T033110Z" creationid="hsugawa8651" creationdate="20181119T033110Z">
        <seg> ⊕ などのUnicode中置演算子（Smカテゴリ）のほとんどは、 中置演算子として解析され、ユーザ定義のメソッド（ ⊕ をクロネッカー積として定義するために const ⊗ = kron を 使用する等）として使用することが可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Most of these functions
also accept a first input &lt;x3/&gt;T&lt;x4/&gt;, which is the element type of the array.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154343Z" creationid="hsugawa8651" creationdate="20181109T154343Z">
        <seg>これらの関数の大部分 また、配列の要素タイプである最初の入力&lt;x3/&gt;T&lt;x4/&gt;を受け入れます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Most real numbers cannot be represented exactly with floating-point numbers, and so for many purposes
it is important to know the distance between two adjacent representable floating-point numbers,
which is often known as &lt;x1/&gt;machine epsilon&lt;x2/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T034216Z" creationid="hsugawa8651" creationdate="20181112T111132Z">
        <seg>ほとんどの実数は、浮動小数点数で正確に表現することができないため、&lt;x1/&gt;計算機イプシロン&lt;x2/&gt; として知られる隣接する２つの浮動小数点数の距離を理解することは、多くの用途のために重要となります。

</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Most real numbers cannot be represented exactly with floating-point numbers, and so for many purposes it is important to know the distance between two adjacent representable floating-point numbers, which is often known as &lt;a0&gt;machine epsilon&lt;/a0&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T190832Z" creationid="hsugawa8651" creationdate="20181118T190832Z">
        <seg>ほとんどの実数は浮動小数点数で正確に表現することはできません。したがって、多くの目的で使用することはできません。 2つの隣接する表現可能浮動小数点数間の距離を知ることが重要です。 これはしばしば&lt;x1/&gt;機械イプシロン&lt;x2/&gt;と呼ばれる。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Multi-Threading</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T043427Z" creationid="hsugawa8651" creationdate="20181112T043427Z">
        <seg>Multi-Threading</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Multimedia I/O</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T043215Z" creationid="hsugawa8651" creationdate="20181112T043215Z">
        <seg>Multimedia I/O</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Multimedia-capable display backends may be registered by subclassing a generic &lt;x1/&gt;AbstractDisplay&lt;x2/&gt; type
and pushing them onto a stack of display backends via &lt;x3/&gt;`pushdisplay`&lt;x4/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T043256Z" creationid="hsugawa8651" creationdate="20181112T043256Z">
        <seg>マルチメディア対応のディスプレイバックエンドは、一般的な&lt;x1/&gt;AbstractDisplay&lt;x2/&gt;タイプをサブクラス化することによって登録することができる。 そして、&lt;x3/&gt;"プッシュディスプレイ"&lt;x4/&gt;を介して、ディスプレイのバックエンドのスタックに押し込まれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Multiple &lt;x9/&gt;if @generated&lt;x10/&gt; blocks may occur, in which case the generated implementation uses
all of the &lt;x11/&gt;then&lt;x12/&gt; blocks and the alternate implementation uses all of the &lt;x13/&gt;else&lt;x14/&gt; blocks.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T032408Z" creationid="hsugawa8651" creationdate="20181116T032408Z">
        <seg>@生成&lt;x10/&gt;ブロックが発生した場合には複数の&lt;x9/&gt;が存在し、その場合には生成された実装が使用される。 すべての&lt;x11/&gt;&lt;x12/&gt;ブロックと代替実装は、すべて&lt;x13/&gt;else&lt;x14/&gt;ブロックを使用します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Multiple arguments to &lt;x15/&gt;D[...]&lt;x16/&gt; are converted to tuples; for example, the syntax
&lt;x17/&gt;D[x,y]&lt;x18/&gt;  is equivalent to &lt;x19/&gt;D[(x,y)]&lt;x20/&gt;, i.e. it refers to the value keyed by the tuple &lt;x21/&gt;(x,y)&lt;x22/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T063224Z" creationid="hsugawa8651" creationdate="20181114T063224Z">
        <seg>&lt;x15/&gt;D[.…]&lt;x16/&gt;への複数の引数は、タプルに変換されます。たとえば、構文は &lt;x17/&gt;D[x,y]&lt;x18/&gt;は、&lt;x19/&gt;D[(x,y)]&lt;x20/&gt;、即ち、タプル&lt;X21/&gt;(x,y)&lt;x22/&gt;によってキー付けされる値を意味する。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Multiple dispatch is particularly useful for mathematical code, where it makes little sense to
artificially deem the operations to "belong" to one argument more than any of the others: does
the addition operation in &lt;x8/&gt;x + y&lt;x9/&gt; belong to &lt;x10/&gt;x&lt;x11/&gt; any more than it does to &lt;x12/&gt;y&lt;x13/&gt;?</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T011729Z" creationid="hsugawa8651" creationdate="20181120T011518Z">
        <seg> 多重ディスパッチは特に数学のコードで有用です。演算がどの引数に、より「属している」かと不自然なことを考えても、意味がないからです。&lt;x8/&gt;x + y&lt;x9/&gt;の式の中の足し算は、 &lt;x10/&gt;x&lt;x11/&gt; に&lt;x12/&gt; y&lt;x13/&gt;よりも属してると思いますか？ </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Multiple dispatch together with the flexible parametric type system give Julia its ability to
abstractly express high-level algorithms decoupled from implementation details, yet generate efficient,
specialized code to handle each case at run time.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T014245Z" creationid="hsugawa8651" creationdate="20181120T014245Z">
        <seg>多重ディスパッチと柔軟なパラメトリック型システムによって、Juliaに与えられた能力は、高水準のアルゴリズムを抽象的に表現して、実装の詳細から切り離し、実行時に各ケースに特化して処理する効率的なコードを生成することです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Multiple nested &lt;c0&gt;for&lt;/c0&gt; loops can be combined into a single outer loop, forming the cartesian product of its iterables:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T142930Z" creationid="hsugawa8651" creationdate="20181119T142804Z">
        <seg>ネストしたforループ内のbreak文は、内側のループだけでなく、ネスト全体のループを終了します。

</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Multiple nested &lt;x1/&gt;for&lt;x2/&gt; loops can be combined into a single outer loop, forming the cartesian product
of its iterables:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T124530Z" creationid="hsugawa8651" creationdate="20181118T124530Z">
        <seg>&lt;x2/&gt;ループに対して複数のネストされた&lt;x1/&gt;は、単一の外側ループに結合され、デカルト積を形成することができる。 次のように表示されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Multiple parameters can be separated with commas, e.g. &lt;x7/&gt;where {T, S&lt;:Real}&lt;x8/&gt;, or written using
nested &lt;x9/&gt;where&lt;x10/&gt;, e.g. &lt;x11/&gt;where S&lt;:Real where T&lt;x12/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T020821Z" creationid="hsugawa8651" creationdate="20181120T020821Z">
        <seg>複数のパラメータは、例えば、カンマで区切ったり(例where {T, S&lt;:Real})、またはネストされたwhereを使ったりして記述されます。（例where S&lt;:Real where T）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Multiplication</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T165030Z" creationid="hsugawa8651" creationdate="20181118T165030Z">
        <seg>乗算</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>N/A</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T110219Z" creationid="hsugawa8651" creationdate="20181112T110219Z">
        <seg>N/A</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>NaN16&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T110837Z" creationid="hsugawa8651" creationdate="20181112T110837Z">
        <seg>NaN16&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>NaN32&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T110838Z" creationid="hsugawa8651" creationdate="20181112T110838Z">
        <seg>NaN32&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>NaN&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T110839Z" creationid="hsugawa8651" creationdate="20181112T110839Z">
        <seg>NaN&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>NaN&lt;x1/&gt; is not equal to, not less than, and not greater than anything, including itself.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T030509Z" creationid="hsugawa8651" creationdate="20181114T030509Z">
        <seg>NaN&lt;x1/&gt;は、それ自体を含めて、以下ではなく、それ以上ではありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Name</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T095052Z" creationid="hsugawa8651" creationdate="20181112T110802Z">
        <seg>名前</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Names of &lt;c0&gt;Type&lt;/c0&gt;s and &lt;c1&gt;Module&lt;/c1&gt;s begin with a capital letter and word separation is shown with upper camel case instead of underscores.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T033722Z" creationid="hsugawa8651" creationdate="20181119T033722Z">
        <seg>&lt;c0&gt;型&lt;/c0&gt;&gt;と &lt;c1&gt;モジュール&lt;/c1&gt;の名前は大文字で始まり、単語の区切りはアンダースコアの代わりにキャメルケースで表記されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Names of &lt;c0&gt;function&lt;/c0&gt;s and &lt;c1&gt;macro&lt;/c1&gt;s are in lower case, without underscores.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T033745Z" creationid="hsugawa8651" creationdate="20181119T033745Z">
        <seg>&lt;c0&gt;関数&lt;/c0&gt;や &lt;c1&gt;マクロ&lt;/c1&gt;の名前はアンダースコアを含まない小文字で表記されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Names of variables are in lower case.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T033618Z" creationid="hsugawa8651" creationdate="20181119T033618Z">
        <seg>変数名を小文字で表記する。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Naturally, it is possible for quote expressions to contain other quote expressions.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T115443Z" creationid="hsugawa8651" creationdate="20181118T115443Z">
        <seg>当然ながら、quote式には他の引用符式を含めることもできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Neither juxtaposition of two parenthesized expressions, nor placing a variable before a parenthesized
expression, however, can be used to imply multiplication:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T111842Z" creationid="hsugawa8651" creationdate="20181112T111842Z">
        <seg>括弧で括られた2つの表現の並列化はなく、括弧で括られたものの前に変数を配置することもない しかし、表現は乗算を意味するために使用することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Nested "dot calls" &lt;x5/&gt;f.(...)&lt;x6/&gt; (including calls to &lt;x7/&gt;.+&lt;x8/&gt; etcetera)
&lt;x9/&gt;&lt;x10/&gt;&lt;x11/&gt;(@ref man-dot-operators) into a single &lt;x12/&gt;broadcast&lt;x13/&gt; call.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T122046Z" creationid="hsugawa8651" creationdate="20181109T160131Z">
        <seg>ネストされた「ドットコール」&lt;x5/&gt;f.(...)&lt;x6/&gt;(&lt;x7/&gt;.+&lt;x8/&gt;eteteraへの呼び出しを含む) &lt;x9/&gt;&lt;x10/&gt;&lt;x11/&gt;(@ref man-dot-operators)は、単一の&lt;x12/&gt;ブロードキャスト・&lt;x13/&gt;コールに対して使用されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Nested quote</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T115441Z" creationid="hsugawa8651" creationdate="20181118T115441Z">
        <seg>ネストされた引用符</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Network I/O</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T150200Z" creationid="hsugawa8651" creationdate="20181117T150200Z">
        <seg>ネットワークI/O</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Networking and Streams&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T234653Z" creationid="hsugawa8651" creationdate="20181119T234653Z">
        <seg>ネットワーキングおよびストリーム&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Nevertheless, we have used multiple dispatch and methods almost continually without being aware
of it: all of Julia's standard functions and operators, like the aforementioned &lt;x1/&gt;+&lt;x2/&gt; function,
have many methods defining their behavior over various possible combinations of argument type
and count.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T012228Z" creationid="hsugawa8651" creationdate="20181120T012228Z">
        <seg>にもかかわらず、私たちは知らない間に、ほぼ断続的に多重ディスパッチとメソッドを使用してきました。 前述の&lt;x1/&gt;+&lt;x2/&gt;関数のような、Juliaの標準的な関数と演算子はすべて、多くのメソッドを持ち、引数の型と個数のさまざまな組み合わせに対して動作が定義されています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>No automatic casting or conversion of function arguments is ever performed: all
conversion in Julia is non-magical and completely explicit.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T013821Z" creationid="hsugawa8651" creationdate="20181120T013821Z">
        <seg>関数の引数の自動キャストや変換は一度も実行されません。 Juliaでは、すべての変換は魔法ではなく完全に明示的です。 </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>No matter how an &lt;x2/&gt;AbstractArray{T,N}&lt;x3/&gt; is represented internally, &lt;x4/&gt;T&lt;x5/&gt; is the type of
object returned by &lt;x6/&gt;integer&lt;x7/&gt; indexing (&lt;x8/&gt;A[1, ..., 1]&lt;x9/&gt;, when &lt;x10/&gt;A&lt;x11/&gt; is not empty) and &lt;x12/&gt;N&lt;x13/&gt; should be
the length of the tuple returned by &lt;x14/&gt;`size`&lt;x15/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T160357Z" creationid="hsugawa8651" creationdate="20181109T160357Z">
        <seg>&lt;x2/&gt;AbstractArray{T,N}&lt;x3/&gt;が内部的にどのように表されても、&lt;x4/&gt;T&lt;x5/&gt;は以下のタイプである。 &lt;x6/&gt;整数&lt;x7/&gt;インデックス(&lt;x8/&gt;A[1,.…,1]&lt;x9/&gt;,&lt;x10/&gt;)は&lt;x10/&gt;A&lt;x11/&gt;であり、&lt;x12/&gt;N&lt;x13/&gt;は&lt;x12/&gt;n&lt;x13/&gt;である。 &lt;x14/&gt;`size'&lt;x15/&gt;によって返されるタプルの長さです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>No need to vectorize code for performance; devectorized code is fast</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T082754Z" creationid="hsugawa8651" creationdate="20181118T082737Z">
        <seg>性能のためにコードをベクトル化する必要がありません。ベクトル化されていないコードも高速に動作します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>No, you are not allowed to have a &lt;x1/&gt;using&lt;x2/&gt; or &lt;x3/&gt;import&lt;x4/&gt; statement inside a function.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181110T025132Z" creationid="hsugawa8651" creationdate="20181110T025132Z">
        <seg>いいえ、関数内の&lt;x/&gt;または&lt;x3/&gt;インポート&lt;x4/&gt;ステートメントを&lt;x2/&gt;のインポートを使用することはできません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Non-associative</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T165110Z" creationid="hsugawa8651" creationdate="20181118T165110Z">
        <seg>非結合</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Non-boolean integers</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T134951Z" creationid="hsugawa8651" creationdate="20181117T134951Z">
        <seg>非ブール値の整数</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Non-constant Function Specifications</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T152257Z" creationid="hsugawa8651" creationdate="20181117T152257Z">
        <seg>非定常関数仕様</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Non-traditional indices&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T094502Z" creationid="hsugawa8651" creationdate="20181118T094502Z">
        <seg>非伝統的なインデックス&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>None of the examples
given here provide any type annotations on their arguments, meaning that they are applicable to
all types of arguments.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T105935Z" creationid="hsugawa8651" creationdate="20181112T105935Z">
        <seg>None of the examples
given here provide any type annotations on their arguments, meaning that they are applicable to
all types of arguments.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Not all integer values are valid Unicode code points, but for performance, the &lt;x1/&gt;Char()&lt;x2/&gt; conversion
does not check that every character value is valid.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T080342Z" creationid="hsugawa8651" creationdate="20181120T080342Z">
        <seg>全ての整数値が有効なUnicodeコードポイントではありません。しかしパフォーマンスの為に、Juliaは &lt;x1/&gt;Char()&lt;x2/&gt;  の呼び出しの際に 引数が有効なUnicodeコードポイントであるかをチェックしません。 </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Not all integer values are valid Unicode code points, but for performance, the &lt;x1/&gt;Char&lt;x2/&gt; conversion
does not check that every character value is valid.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T095908Z" creationid="hsugawa8651" creationdate="20181120T095908Z">
        <seg>全ての整数値が、有効なUnicodeコードポイントではありません。しかしパフォーマンスのために、&lt;x1/&gt;Char()&lt;x2/&gt; への変換の際に、文字の値が、有効であるかどうかをチェックしません。 </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Not all types support &lt;x1/&gt;axes&lt;x2/&gt; and indexing, but many are convenient to allow in broadcast.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T131033Z" creationid="hsugawa8651" creationdate="20181113T131033Z">
        <seg>すべてのタイプが&lt;x1/&gt;軸&lt;x2/&gt;とインデックス作成をサポートするわけではありませんが、ブロードキャストでは多くの場合に便利です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note
that if the object was not originally allocated by Julia, the new object will never be finalized
by Julia's garbage collector.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T152543Z" creationid="hsugawa8651" creationdate="20181117T152543Z">
        <seg>注 オブジェクトが元々ジュリアによって割り当てられていない場合、新しいオブジェクトは最終的にはファイナライズされません。 ジュリアのガーベジ・コレクターです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note also that UTF-8 string data in Julia is internally
NUL-terminated, so it can be passed to C functions expecting NUL-terminated data without making
a copy (but using the &lt;x7/&gt;Cwstring&lt;x8/&gt; type will cause an error to be thrown if the string itself contains
NUL characters).</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T151033Z" creationid="hsugawa8651" creationdate="20181117T151033Z">
        <seg>また、JuliaのUTF-8文字列データは内部的に存在することにも注意してください。 NUE終端されているので、Nendは コピー(ただし、&lt;x7/&gt;Cwstring&lt;x8/&gt;タイプを使用すると、文字列自体にエラーが発生することがあります) NUL文字)。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note how the size of the resulting array is different in the last two cases.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T160912Z" creationid="hsugawa8651" creationdate="20181114T160912Z">
        <seg>最後の2つのケースでは、結果として得られる配列のサイズが異なることに注意してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note on Optional and keyword Arguments</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T022844Z" creationid="hsugawa8651" creationdate="20181120T022844Z">
        <seg>オプション引数とキーワード引数の注意点</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note that &lt;c4&gt;ARGS&lt;/c4&gt; is also set when a Julia expression is given using the &lt;c5&gt;-e&lt;/c5&gt; option on the command line (see the &lt;c6&gt;julia&lt;/c6&gt; help output below) but &lt;c7&gt;PROGRAM_FILE&lt;/c7&gt; will be empty.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T181824Z" creationid="hsugawa8651" creationdate="20181118T173549Z">
        <seg>コマンドラインで  &lt;c5&gt;-e&lt;/c5&gt; オプションが設定された際にも &lt;c4&gt;ARGS&lt;/c4&gt; は設定されます（下の &lt;c6&gt;julia&lt;/c6&gt; ヘルプ出力を参照してください）が、&lt;c7&gt;PROGRAM_FILE&lt;/c7&gt;は空です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note that &lt;x1/&gt;3/4im == 3/(4*im) == -(3/4*im)&lt;x2/&gt;, since a literal coefficient binds more tightly than
division.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T123248Z" creationid="hsugawa8651" creationdate="20181118T123248Z">
        <seg>&lt;x1/&gt;3/4im==3/(4*im)==-(3/4*im)&lt;x2/&gt;は、リテラル係数がより強く結合するので、以下のようになることに注意してください。 分割。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note that &lt;x1/&gt;`DomainError`&lt;x2/&gt; without parentheses is not an exception, but a type of exception.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T124640Z" creationid="hsugawa8651" creationdate="20181118T124640Z">
        <seg>括弧なしの&lt;x1/&gt;'DomainError&lt;x2/&gt;は例外ではなく、例外のタイプであることに注意してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note that &lt;x1/&gt;is_linux&lt;x2/&gt; and &lt;x3/&gt;is_apple&lt;x4/&gt; are mutually exclusive subsets of &lt;x5/&gt;is_unix&lt;x6/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T234112Z" creationid="hsugawa8651" creationdate="20181119T234112Z">
        <seg>&lt;x1/&gt;is_linux&lt;x2/&gt;および&lt;x3/&gt;is_apple&lt;x4/&gt;は、&lt;x5/&gt;is_unix&lt;x6/&gt;の相互排他的なサブセットであることに留意されたい。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note that &lt;x1/&gt;islinux&lt;x2/&gt; and &lt;x3/&gt;isapple&lt;x4/&gt; are mutually exclusive subsets of &lt;x5/&gt;isunix&lt;x6/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T224942Z" creationid="hsugawa8651" creationdate="20181109T224942Z">
        <seg>&lt;x1/&gt;アリヌス&lt;x2/&gt;および&lt;x3/&gt;イサプリ&lt;x4/&gt;は、&lt;x5/&gt;イシュニク&lt;x6/&gt;の相互排他的なサブセットであることに留意されたい。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note that &lt;x9/&gt;ARGS&lt;x10/&gt; is
also set when a Julia expression is given using the &lt;x11/&gt;-e&lt;x12/&gt; option on the command line (see the
&lt;x13/&gt;julia&lt;x14/&gt; help output below) but &lt;x15/&gt;PROGRAM_FILE&lt;x16/&gt; will be empty.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T091953Z" creationid="hsugawa8651" creationdate="20181109T224338Z">
        <seg>コマンドラインで &lt;x11/&gt;-e&lt;x12/&gt; オプションが設定された際にも &lt;x9/&gt;ARGS&lt;x10/&gt; は設定されます（下の &lt;x13/&gt;julia&lt;x14/&gt; ヘルプ出力を参照してください）が、&lt;x15/&gt;PROGRAM_FILE&lt;x16/&gt;は空です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note that &lt;x9/&gt;ARGS&lt;x10/&gt; is also set when script code
is given using the &lt;x11/&gt;-e&lt;x12/&gt; option on the command line (see the &lt;x13/&gt;julia&lt;x14/&gt; help output below) but &lt;x15/&gt;PROGRAM_FILE&lt;x16/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T231910Z" creationid="hsugawa8651" creationdate="20181119T231910Z">
        <seg>コマンドラインで &lt;c8&gt;&lt;s9&gt;-e&lt;/s9&gt;&lt;/c8&gt; オプションが設定された際にも&lt;c6&gt;&lt;s7&gt; ARGS&lt;/s7&gt;&lt;/c6&gt; は設定されます（下の  &lt;c10&gt;&lt;s11&gt;julia&lt;/s11&gt;&lt;/c10&gt; ヘルプ出力を参照してください）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note that Julia
knows how to convert an array into a &lt;x5/&gt;Ptr{Cdouble}&lt;x6/&gt;, how to compute the size of a type in bytes
(identical to C's &lt;x7/&gt;sizeof&lt;x8/&gt; operator), and so on.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T150540Z" creationid="hsugawa8651" creationdate="20181117T150540Z">
        <seg>ジュリア 配列を&lt;x5/&gt;Ptr{Cdouble}&lt;x6/&gt;に変換する方法を知っています。バイト単位でタイプのサイズを計算する方法 (Cの&lt;x7/&gt;sizeof&lt;x8/&gt;演算子と同じ)などです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note that comparisons such as &lt;x1/&gt;==&lt;x2/&gt; operate on whole arrays, giving a single boolean
answer.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T160005Z" creationid="hsugawa8651" creationdate="20181109T160005Z">
        <seg>&lt;x1/&gt;==&lt;x2/&gt;のような比較は、すべての配列に対して動作し、単一のブール値を与えることに注意してください。 答えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note that comparisons such as &lt;x1/&gt;==&lt;x2/&gt; operate on whole arrays, giving a single boolean
answer. Use dot operators like &lt;x3/&gt;.==&lt;x4/&gt; for elementwise comparisons. (For comparison
operations like &lt;x5/&gt;&lt;&lt;x6/&gt;, &lt;x7/&gt;only&lt;x8/&gt; the elementwise &lt;x9/&gt;.&lt;&lt;x10/&gt; version is applicable to arrays.)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T135141Z" creationid="hsugawa8651" creationdate="20181117T135141Z">
        <seg>&lt;x1/&gt;==&lt;x2/&gt;のような比較は、すべての配列に対して動作し、単一のブール値を与えることに注意してください。 答え:&lt;x3/&gt;.==&lt;x4/&gt;のようなドット演算子を使用して、要素ごとの比較を行います(比較のために)。 &lt;x5/&gt;&lt;x6/&gt;のような操作、&lt;x7/&gt;&lt;x6/&gt;&lt;x8/&gt;&lt;x10/&gt;&lt;x8/&gt;&lt;x10/&gt;は、配列に適用されます。)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note that equivalent expressions may be constructed using &lt;x1/&gt;`Meta.parse`&lt;x2/&gt; or the direct &lt;x3/&gt;Expr&lt;x4/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T115347Z" creationid="hsugawa8651" creationdate="20181118T115347Z">
        <seg>等価な表現は、&lt;x1/&gt;'Meta.parse'&lt;x2/&gt;または直接&lt;x3/&gt;Expr&lt;x4/&gt;を用いて構成されることがあることに注意されたい。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note that events may be coalesced, so multiple calls to &lt;x1/&gt;uv_async_send&lt;x2/&gt; may result in a single wakeup
notification to the condition.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T152636Z" creationid="hsugawa8651" creationdate="20181117T152636Z">
        <seg>イベントは合体することがあるので、&lt;x1/&gt;uv_async_send&lt;x2/&gt;への複数の呼び出しは単一のウェイクアップを引き起こす可能性があることに注意してください。 条件への通知。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note that for this code to work correctly, &lt;x1/&gt;result_array&lt;x2/&gt; must be declared to be of type &lt;x3/&gt;Ref{Cdouble}&lt;x4/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T152205Z" creationid="hsugawa8651" creationdate="20181117T152205Z">
        <seg>このコードが正しく動作するためには、&lt;x1/&gt;の結果_array&lt;x2/&gt;は&lt;x3/&gt;Ref{Cdouble}&lt;x4/&gt;の型であることが宣言されている必要があることに注意してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note that it's very important to specify the two parameters of the &lt;x1/&gt;AbstractArray&lt;x2/&gt;; the first
defines the &lt;x3/&gt;`eltype`&lt;x4/&gt;, and the second defines the &lt;x5/&gt;`ndims`&lt;x6/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T083208Z" creationid="hsugawa8651" creationdate="20181113T083208Z">
        <seg>&lt;x1/&gt;AbstractArray&lt;x2/&gt;の2つのパラメータを指定することが非常に重要であることに注意してください。最初のパラメータは次のようになります。 &lt;x3/&gt;'エルテープ&lt;x4/&gt;を定義し、2番目は&lt;x5/&gt;'ンダムス''&lt;x6/&gt;を定義します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note that line breaks in literal strings, whether single- or triple-quoted, result in a newline
(LF) character &lt;x1/&gt;\n&lt;x2/&gt; in the string, even if your editor uses a carriage return &lt;x3/&gt;\r&lt;x4/&gt; (CR) or CRLF
combination to end lines.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T083645Z" creationid="hsugawa8651" creationdate="20181120T083645Z">
        <seg>シングルクオートかトリプルクオートかどうかに関係なく、文字列リテラルの改行は、 たとえあなたのエディタがキャリッジリターン &lt;x3/&gt;\r&lt;x4/&gt;(CR) またはCRLFの組み合わせを行末に使っているとしても、文字列内の改行(LF)文字 &lt;x1/&gt;\n&lt;x2/&gt;になります。 </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note that mathematical functions typically return real values when applied to real numbers and
complex values when applied to complex numbers.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T123419Z" creationid="hsugawa8651" creationdate="20181118T123419Z">
        <seg>数学的関数は通常、実数を実数に適用すると実値を返すことに注意してください。 複素数に適用された場合の複雑な値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note that no C header files are used anywhere in the process of calling C functions: you are responsible
for making sure that your Julia types and call signatures accurately reflect those in the C header
file.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T150553Z" creationid="hsugawa8651" creationdate="20181117T150553Z">
        <seg>Cの関数を呼び出すプロセスでは、Cヘッダー・ファイルは使用されないことに注意してください。 あなたのジュリア・タイプとコール・シグニチャーがCヘッダーにあるものを正確に反映していることを確認するために ファイルを参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note that no C header files are used anywhere in the process of calling C functions: you are responsible
for making sure that your Julia types and call signatures accurately reflect those in the C header
file. (The &lt;x1/&gt;Clang package&lt;x2/&gt; can be used to auto-generate
Julia code from a C header file.)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T134221Z" creationid="hsugawa8651" creationdate="20181117T134221Z">
        <seg>Cの関数を呼び出すプロセスでは、Cヘッダー・ファイルは使用されないことに注意してください。 あなたのジュリア・タイプとコール・シグニチャーがCヘッダーにあるものを正確に反映していることを確認するために ファイル(&lt;x1/&gt;Clangパッケージ&lt;x2/&gt;は自動生成のために使用できます。 Cヘッダー・ファイルからのJuliaコード。)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note that no whitespace may come between a numeric literal coefficient
and the identifier or parenthesized expression which it multiplies.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T040624Z" creationid="hsugawa8651" creationdate="20181112T111907Z">
        <seg>数値リテラル係数と乗算識別子や括弧で囲まれた式の間には、空白を入れることができませんので、注意してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note that symbols such as &lt;x1/&gt;:sin&lt;x2/&gt; return precedence &lt;x3/&gt;0&lt;x4/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T031020Z" creationid="hsugawa8651" creationdate="20181114T031020Z">
        <seg>&lt;x1/&gt;:sin&lt;x2/&gt;return precedence&lt;x3/&gt;0&lt;x4/&gt;のような記号があることに注意してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note that the argument
list can — and often does — include other nested &lt;x4/&gt;Broadcasted&lt;x5/&gt; wrappers.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T131346Z" creationid="hsugawa8651" creationdate="20181113T131346Z">
        <seg>引数は リストは、他のネストされた&lt;x4/&gt;ブロードキャストされた&lt;x5/&gt;ラッパーを含むことが多い。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note that the argument type tuple must be written as &lt;x1/&gt;(Cstring,)&lt;x2/&gt;, rather than &lt;x3/&gt;(Cstring)&lt;x4/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T224054Z" creationid="hsugawa8651" creationdate="20181109T224054Z">
        <seg>引数のタイプは、&lt;x3/&gt;(Cstring)&lt;x4/&gt;ではなく、&lt;x1/&gt;(Cstring,)&lt;x2/&gt;として記述する必要があることに注意してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note that the argument type tuple must be written as &lt;x1/&gt;(Cstring,)&lt;x2/&gt;, rather than &lt;x3/&gt;(Cstring)&lt;x4/&gt;. This
is because &lt;x5/&gt;(Cstring)&lt;x6/&gt; is just the expression &lt;x7/&gt;Cstring&lt;x8/&gt; surrounded by parentheses, rather than
a 1-tuple containing &lt;x9/&gt;Cstring&lt;x10/&gt;:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T133827Z" creationid="hsugawa8651" creationdate="20181117T133827Z">
        <seg>引数のタイプは、&lt;x3/&gt;(Cstring)&lt;x4/&gt;ではなく&lt;x1/&gt;(Cstring)&lt;x2/&gt;として記述する必要があることに注意してください。 &lt;x5/&gt;(Cstring)&lt;x6/&gt;は、&lt;x7/&gt;Cstring&lt;x8/&gt;で囲まれた括弧で囲まれた表現であり &lt;x9/&gt;Cstring&lt;x10/&gt;:を含む1組のタプル</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note that the set of operations that should not be attempted in a generated function is unbounded,
and the runtime system can currently only detect a subset of the invalid operations.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T032217Z" creationid="hsugawa8651" creationdate="20181116T032217Z">
        <seg>生成された関数で試行されるべきではない一連の操作は、制限されないことに注意してください。 ランタイム・システムは、現在、無効な操作のサブセットのみを検出できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note that the spaces around &lt;x19/&gt;?&lt;x20/&gt; and &lt;x21/&gt;:&lt;x22/&gt; are mandatory: an expression
like &lt;x23/&gt;a?b:c&lt;x24/&gt; is not a valid ternary expression (but a newline is acceptable after both the &lt;x25/&gt;?&lt;x26/&gt; and
the &lt;x27/&gt;:&lt;x28/&gt;).</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T230058Z" creationid="hsugawa8651" creationdate="20181109T230058Z">
        <seg>&lt;x19/&gt;?&lt;x20/&gt;と&lt;X21/&gt;:&lt;x22/&gt;以外のスペースは必須です。式は次のようになります。 &lt;x23/&gt;a?b:c&lt;x24/&gt;は、有効な三元表現ではありません(ただし、&lt;x25/&gt;?&lt;x26/&gt;&lt;x26/&gt;)は、&lt;x25/&gt;?&lt;x26/&gt;と &lt;x27/&gt;:&lt;x28/&gt;)。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note that very short conditional statements (one-liners) are frequently expressed using Short-Circuit
Evaluation in Julia, as outlined in the next section.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T230030Z" creationid="hsugawa8651" creationdate="20181109T230030Z">
        <seg>非常に短い条件文(oneliner)は、短絡を使用して頻繁に表現されることに注意してください。 次のセクションで概説されているように、Juliaでの評価。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note that very short conditional statements (one-liners) are frequently expressed using Short-Circuit Evaluation in Julia, as outlined in the next section.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T134803Z" creationid="hsugawa8651" creationdate="20181119T134803Z">
        <seg>Juliaでは、非常に短い条件文（ワンライナー）は、短絡評価を使って表現されることが非常に多い点に注意してください。 次のセクションで概説します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note that when using &lt;x1/&gt;ccall&lt;x2/&gt; with the tuple input
(e.g., &lt;x3/&gt;ccall((:my_fcn, "./my_lib.so"), ...)&lt;x4/&gt;), the library is opened implicitly
and it may not be explicitly closed.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T152413Z" creationid="hsugawa8651" creationdate="20181117T152413Z">
        <seg>タプル入力で&lt;x1/&gt;ccall&lt;x2/&gt;を使用するときに注意してください。 (例:&lt;x3/&gt;ccall((:my_fcn,"./my_lib.so"),.)&lt;x4/&gt;)ライブラリは暗黙的にオープンされます。 明示的にクローズされることはありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note the dot syntax is also applicable to user-defined operators.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T132633Z" creationid="hsugawa8651" creationdate="20181113T132633Z">
        <seg>ドット構文は、ユーザ定義の演算子にも適用できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note the evaluation behavior of chained comparisons:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T065226Z" creationid="hsugawa8651" creationdate="20181114T030727Z">
        <seg>連続した比較の値の処理に注意してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note the important distinction between the way &lt;x9/&gt;a&lt;x10/&gt; and &lt;x11/&gt;b&lt;x12/&gt; are used:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T165300Z" creationid="hsugawa8651" creationdate="20181118T165300Z">
        <seg>&lt;x10/&gt;a&lt;x10/&gt;と&lt;x12/&gt;b&lt;x12/&gt;との間では、次のような重要な違いがあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note though, that &lt;x10/&gt;import X&lt;x11/&gt; can load different packages in different contexts: &lt;x12/&gt;X&lt;x13/&gt; can refer to one package named &lt;x14/&gt;X&lt;x15/&gt; in the main project but potentially different packages named &lt;x16/&gt;X&lt;x17/&gt; in each dependency.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T152743Z" creationid="hsugawa8651" creationdate="20181117T152743Z">
        <seg>ただし、&lt;x10/&gt;インポートX&lt;x11/&gt;は異なるコンテキストで異なるパッケージをロードできます。&lt;x12/&gt;X&lt;x13/&gt;は主プロジェクトで&lt;x14/&gt;X&lt;x15/&gt;という名前のパッケージを参照できますが、各依存関係では&lt;x16/&gt;X&lt;x17/&gt;という名前のパッケージがある可能性があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note, though, that the above &lt;x1/&gt;only&lt;x2/&gt; defines &lt;x3/&gt;`getindex`&lt;x4/&gt; with one integer index.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T113135Z" creationid="hsugawa8651" creationdate="20181112T113135Z">
        <seg>しかし、上記の&lt;x1/&gt;は、1つの整数インデックスを有する&lt;x3/&gt;'getindex'&lt;x4/&gt;を定義することに注意されたい。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note: This feature is currently implemented on 64-bit x86 and AArch64 platforms only.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T151250Z" creationid="hsugawa8651" creationdate="20181117T151250Z">
        <seg>注:この機能は現在、64ビットのx86およびAArch64プラットフォームでのみ実装されています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Notice that &lt;x1/&gt;:(1 + 2)&lt;x2/&gt; now appears in the result instead of the symbol &lt;x3/&gt;:x&lt;x4/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T115458Z" creationid="hsugawa8651" creationdate="20181118T115458Z">
        <seg>&lt;x1/&gt;:(1 + 2)&lt;x2/&gt;は、シンボル&lt;x3/&gt;:x&lt;x4/&gt;ではなく、結果に表示されることに注意してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Notice that the &lt;x1/&gt;$&lt;x2/&gt; interpolation syntax allows inserting only a single expression into an
enclosing expression.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T115431Z" creationid="hsugawa8651" creationdate="20181118T115431Z">
        <seg>&lt;x1/&gt;$x2/&gt;補間構文では、1つの式のみを挿入できます。 式を囲みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Notice that the expressions &lt;x1/&gt;str[k]&lt;x2/&gt; and &lt;x3/&gt;str[k:k]&lt;x4/&gt; do not give the same result:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T081245Z" creationid="hsugawa8651" creationdate="20181120T081245Z">
        <seg>&lt;x1/&gt;str[k]&lt;x2/&gt; と &lt;x3/&gt;str[k:k]&lt;x4/&gt;は同じ結果にならないことに留意してください。:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Notice that the result contains &lt;x1/&gt;Expr(:$, :x)&lt;x2/&gt;, which means that &lt;x3/&gt;x&lt;x4/&gt; has not been
evaluated yet.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T115449Z" creationid="hsugawa8651" creationdate="20181118T115449Z">
        <seg>結果が&lt;x1/&gt;Expr(:$, :x)&lt;x2/&gt;であることに注目してください。&lt;x3/&gt;x4/&gt;は、&lt;x3/&gt;x&lt;x4/&gt;のことを意味しません。 評価されました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Notice that the result is a generic function, but with a compiler-generated
name based on consecutive numbering.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T130544Z" creationid="hsugawa8651" creationdate="20181120T130544Z">
        <seg>こうして生成されるのは総称関数ですが、コンパイラが順に番号付けした名前がつけられる点に注意しましょう。　</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Notice that this is an &lt;x1/&gt;IndexCartesian&lt;x2/&gt; array, so we must manually define &lt;x3/&gt;`getindex`&lt;x4/&gt; and &lt;x5/&gt;`setindex!`&lt;x6/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T083225Z" creationid="hsugawa8651" creationdate="20181113T083225Z">
        <seg>これは、&lt;x1/&gt;IndexCartesian&lt;x2/&gt;配列であることに注意してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Notice that we have to be careful about the return type: &lt;x1/&gt;qsort&lt;x2/&gt; expects a function returning
a C &lt;x3/&gt;int&lt;x4/&gt;, so we annotate the return type of the function to be sure it returns a &lt;x5/&gt;Cint&lt;x6/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T133254Z" creationid="hsugawa8651" creationdate="20181117T133254Z">
        <seg>戻り値のタイプに注意する必要があることに注意してください。&lt;x1/&gt;qsort&lt;x2/&gt;qsort&lt;x2/&gt;は関数を返すことに注意してください。 C&lt;x3/&gt;int&lt;x4/&gt;であるため、関数の戻り値の型に注釈を付けて、&lt;x5/&gt;Cint&lt;x6/&gt;を返すことを確認します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Notice that, after
the function call, &lt;x9/&gt;x&lt;x10/&gt; is still bound to the same array, but the content of that array changed:
the variables &lt;x11/&gt;A&lt;x12/&gt; and &lt;x13/&gt;x&lt;x14/&gt; were distinct bindings referring to the same mutable &lt;x15/&gt;Array&lt;x16/&gt; object.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181110T025111Z" creationid="hsugawa8651" creationdate="20181110T025111Z">
        <seg>次の点に注目してください。 関数呼び出し&lt;x9/&gt;x&lt;x10/&gt;は、まだ同じ配列にバインドされていますが、その配列の内容は変更されています。 変数&lt;x11/&gt;A&lt;x12/&gt;および&lt;x13/&gt;x14/&gt;は、同じ可変の&lt;x15/&gt;配列&lt;x16/&gt;オブジェクトを参照する別個のバインディングである。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Now &lt;x1/&gt;OrderedPair&lt;x2/&gt; objects can only be constructed such that &lt;x3/&gt;x &lt;= y&lt;x4/&gt;:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T155749Z" creationid="hsugawa8651" creationdate="20181117T155749Z">
        <seg>&lt;x1/&gt;OrderedPair&lt;x2/&gt;オブジェクトは、&lt;x3/&gt;x&lt;=y&lt;x4/&gt;のように構成できるようになりました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Now things get interesting.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T124118Z" creationid="hsugawa8651" creationdate="20181118T124118Z">
        <seg>これで面白いですね。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Now we add some new methods to &lt;x1/&gt;f(x)&lt;x2/&gt;:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T022631Z" creationid="hsugawa8651" creationdate="20181120T022631Z">
        <seg>ここでいくつかの新しいメソッドをf(x)に追加します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Now,
by default, &lt;x11/&gt;broadcasted&lt;x12/&gt; just calls the &lt;x13/&gt;Broadcasted&lt;x14/&gt; constructor to create the lazy representation
of the fused expression tree, but you can choose to override it for a particular combination
of function and arguments.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T131612Z" creationid="hsugawa8651" creationdate="20181113T131612Z">
        <seg>さて デフォルトでは、&lt;x11/&gt;ブロードキャストされた&lt;x12/&gt;は、&lt;x13/&gt;ブロードキャストされた&lt;x14/&gt;コンストラクタを呼び出して、遅延表現を作成します。 融合された表現ツリーのうち、特定の組み合わせに対して上書きすることを選択できます。 関数と引数を指定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Now, consider a slightly more complex macro:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T101047Z" creationid="hsugawa8651" creationdate="20181120T101047Z">
        <seg>ここでは、もう少し複雑なマクロを示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Now, suppose that we have a 1d array &lt;x17/&gt;A&lt;x18/&gt; of values in Julia that we want to sort
using the &lt;x19/&gt;qsort&lt;x20/&gt; function (rather than Julia's built-in &lt;x21/&gt;sort&lt;x22/&gt; function).</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T150528Z" creationid="hsugawa8651" creationdate="20181117T150528Z">
        <seg>次に、1d配列があると仮定します。これは、配列をソートするために、Juliaに値を&lt;x17/&gt;A&lt;x18/&gt;とします。 &lt;x19/&gt;qsort&lt;x20/&gt;関数を使用します(Julyの組み込み&lt;X21/&gt;ソート&lt;x22/&gt;関数ではなく、&lt;x22/&gt;関数を使用します)。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Now, when we ask Julia to &lt;x1/&gt;`collect`&lt;x2/&gt; all the elements into an array it can preallocate a &lt;x3/&gt;Vector{Int}&lt;x4/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T112802Z" creationid="hsugawa8651" creationdate="20181112T112802Z">
        <seg>さて、ジュリアに「collect」&lt;x×2/&gt;の要素を「collect」&lt;x2/&gt;に尋ねると、&lt;x3/&gt;Vector{Int}&lt;x4/&gt;をプリ割り当てすることができる。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Number of bits</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T110228Z" creationid="hsugawa8651" creationdate="20181109T225120Z">
        <seg>Number of bits</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Number of elements</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T164747Z" creationid="hsugawa8651" creationdate="20181118T164743Z">
        <seg>要素の数</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Number&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T041604Z" creationid="hsugawa8651" creationdate="20181112T041604Z">
        <seg>Number&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Numeric Comparisons</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T095336Z" creationid="hsugawa8651" creationdate="20181118T095336Z">
        <seg>数値比較</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Numeric literals also work as coefficients to parenthesized expressions:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T040317Z" creationid="hsugawa8651" creationdate="20181118T093832Z">
        <seg>数値リテラルは括弧内の式の係数としての役割も持ちます。:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Numerical Conversions</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T095708Z" creationid="hsugawa8651" creationdate="20181118T095708Z">
        <seg>数値変換</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>OR</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T135422Z" creationid="hsugawa8651" creationdate="20181117T135422Z">
        <seg>または</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Observe the following specific instances of these rules in our example:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T121339Z" creationid="hsugawa8651" creationdate="20181118T121339Z">
        <seg>次の例では、これらのルールの特定のインスタンスを観察します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Occasionally, you have an array of expressions and need them all to become arguments of
the surrounding expression.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T115434Z" creationid="hsugawa8651" creationdate="20181118T115434Z">
        <seg>時には、式の配列を持っていて、それをすべて引数にする必要があります。 で指定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Of course, in a purely linear function body like &lt;x1/&gt;g&lt;x2/&gt;, the usage of &lt;x3/&gt;return&lt;x4/&gt; is pointless since
the expression &lt;x5/&gt;x + y&lt;x6/&gt; is never evaluated and we could simply make &lt;x7/&gt;x * y&lt;x8/&gt; the last expression
in the function and omit the &lt;x9/&gt;return&lt;x10/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T125846Z" creationid="hsugawa8651" creationdate="20181120T125733Z">
        <seg>もちろん、&lt;x1/&gt;g&lt;x2/&gt;のように直線的に順次処理を行う関数で、&lt;x3/&gt;return&lt;x4/&gt; を使っても仕方がありません。 というのも、&lt;x5/&gt;x + y&lt;x6/&gt; という式は決して評価されないので、単に &lt;x7/&gt;x * y&lt;x8/&gt;  という式で終わって、&lt;x9/&gt;return&lt;x10/&gt; を削ればいいからです。 </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Of course, messing around with an object's internals uninvited is bad practice.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T155757Z" creationid="hsugawa8651" creationdate="20181117T155757Z">
        <seg>もちろん、オブジェクトの内部悪魔の招待状を回避することは、不適切なプラクティスです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Of course, the real trouble comes when one asks what
a character is.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T075244Z" creationid="hsugawa8651" creationdate="20181120T075244Z">
        <seg>ここでいう記号とは一般的な意味のそれとは少し違います。 Ω</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Of course, you can omit the dot if you write a specialized "vector" method of &lt;x1/&gt;f&lt;x2/&gt;, e.g. via &lt;x3/&gt;f(A::AbstractArray) = map(f, A)&lt;x4/&gt;,
and this is just as efficient as &lt;x5/&gt;f.(A)&lt;x6/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T120109Z" creationid="hsugawa8651" creationdate="20181118T120109Z">
        <seg>もちろん、&lt;x1/&gt;f&lt;x2/&gt;の特殊な「ベクトル」方式を書く場合は、例えば&lt;x3/&gt;f(A::AbstractArray)=map(f, A)&lt;x4/&gt;を使ってドットを省略することができます。 これは、&lt;x5/&gt;f.(A)&lt;x6/&gt;と同じくらい効率的です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Of particular interest may be &lt;x2/&gt;An Interview with the Old Man of Floating-Point&lt;x3/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T035602Z" creationid="hsugawa8651" creationdate="20181112T111534Z">
        <seg>特に &lt;x2/&gt;An Interview with the Old Man of Floating-Point&lt;x3/&gt;は特に興味深いものとなっています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Often referred to as logical indexing or indexing with a logical mask, indexing
by a boolean array selects elements at the indices where its values are &lt;x1/&gt;true&lt;x2/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T155734Z" creationid="hsugawa8651" creationdate="20181109T155734Z">
        <seg>論理的なインデックス作成と呼ばれる論理的インデックス作成またはインデックス作成と呼ばれることが多いインデックス作成 ブール型配列では、値が&lt;x1/&gt;真&lt;x2/&gt;であるインデックスで要素を選択します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Often referred to as logical indexing or indexing with a logical mask, indexing
by a boolean array selects elements at the indices where its values are &lt;x1/&gt;true&lt;x2/&gt;.
Indexing by a boolean vector &lt;x3/&gt;B&lt;x4/&gt; is effectively the same as indexing by the
vector of integers that is returned by &lt;x5/&gt;`findall(B)`&lt;x6/&gt;. Similarly, indexing
by a &lt;x7/&gt;N&lt;x8/&gt;-dimensional boolean array is effectively the same as indexing by the
vector of &lt;x9/&gt;CartesianIndex{N}&lt;x10/&gt;s where its values are &lt;x11/&gt;true&lt;x12/&gt;. A logical index
must be a vector of the same length as the dimension it indexes into, or it
must be the only index provided and match the size and dimensionality of the
array it indexes into. It is generally more efficient to use boolean arrays as
indices directly instead of first calling &lt;x13/&gt;`findall`&lt;x14/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T135109Z" creationid="hsugawa8651" creationdate="20181117T135109Z">
        <seg>論理的なインデックス作成と呼ばれる論理的インデックス作成またはインデックス作成と呼ばれることが多いインデックス作成 ブール型配列では、値が&lt;x1/&gt;真&lt;x2/&gt;であるインデックスで要素を選択します。 ブール型ベクトル&lt;x3/&gt;B&lt;x4/&gt;によるインデックス作成は、実効的には、以下のようにして行われる。 &lt;x5/&gt;'findall(B)`&lt;x6/&gt;によって返される整数のベクトル。同様に索引付け &lt;x7/&gt;N&lt;x8/&gt;-次元ブール配列は、実効的には、以下のように、インデックス化と同じである。 &lt;x9/&gt;CartesianIndex{N}&lt;x10/&gt;sのベクトル。その値は&lt;x11/&gt;真&lt;x12/&gt;である。論理インデックス は、インデックスを作成する寸法と同じ長さのベクトルである必要があります。また 指定された唯一のインデックスであり にインデックスを作成する配列です。一般的には、ブール型配列を使用する方が効率的です。 は、最初の呼び出し&lt;x13/&gt;'findall&lt;x14/&gt;を呼び出すのではなく、直接インデックスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Often the best way to deal with these is to deal with the byte offsets directly.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T151211Z" creationid="hsugawa8651" creationdate="20181117T151211Z">
        <seg>これらを処理する最良の方法は、バイトオフセットを直接処理することです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Often, however, a ready-to-use, named function does not exist.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T130701Z" creationid="hsugawa8651" creationdate="20181120T130701Z">
        <seg> ですが、多くの場合、すぐ使える名前付きの関数なんて存在しません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>On 32-bit architectures, &lt;x1/&gt;`typeof(ans)`&lt;x2/&gt; will be &lt;x3/&gt;`Int32`&lt;x4/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T080253Z" creationid="hsugawa8651" creationdate="20181120T080253Z">
        <seg>32ビットのアーキテクチャ上では、 &lt;x1/&gt;`typeof(ans)`&lt;x2/&gt; は&lt;x3/&gt;`Int32`&lt;x4/&gt;.を返します。 
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>On all systems we currently support, basic C/C++ value types may be translated to Julia types
as follows.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T150836Z" creationid="hsugawa8651" creationdate="20181117T150836Z">
        <seg>現在サポートされているすべてのシステムでは、基本的なC/C++の値タイプがJuliaタイプに変換されることがあります。 以下のようになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>On all systems we currently support, basic C/C++ value types may be translated to Julia types
as follows. Every C type also has a corresponding Julia type with the same name, prefixed by C.
This can help for writing portable code (and remembering that an &lt;x1/&gt;int&lt;x2/&gt; in C is not the same as
an &lt;x3/&gt;Int&lt;x4/&gt; in Julia).</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T140911Z" creationid="hsugawa8651" creationdate="20181117T140911Z">
        <seg>現在サポートされているすべてのシステムでは、基本的なC/C++の値タイプがJuliaタイプに変換されることがあります。 次のように、C型はすべて、同じ名前で接頭辞をつけられた同じ名前を持つ、対応するジュリア型を持っています。 これは、移植可能なコードを書くのに役立ちます(そして、Cでは&lt;x1/&gt;int&lt;x2/&gt;が同じではないことを思い出してください)。 &lt;x3/&gt;のInt&lt;x4/&gt;Int&lt;x4/&gt;int&lt;x4/&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>On the flip side, it is often handy to "splat" the values contained in an iterable collection
into a function call as individual arguments.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T101627Z" creationid="hsugawa8651" creationdate="20181112T101627Z">
        <seg>逆に、iterableコレクションに含まれる値を"splat"するのは便利なことが多い。 関数呼び出しに個別の引数として指定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>On the other hand, any type of expression can be used at the end of a conditional chain.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T141004Z" creationid="hsugawa8651" creationdate="20181109T230819Z">
        <seg>一方、条件式の連鎖の最終項では、あらゆる型の式が利用可能です。。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>On the other hand, the &lt;x1/&gt;symbol&lt;x2/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T165309Z" creationid="hsugawa8651" creationdate="20181118T165309Z">
        <seg>一方、&lt;x1/&gt;記号は&lt;x2/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Once
the user has entered a complete expression, such as &lt;c8&gt;&lt;s9&gt;1&lt;/s9&gt; &lt;s10&gt;+&lt;/s10&gt; &lt;s11&gt;2&lt;/s11&gt;&lt;/c8&gt;, and
hits enter, the interactive session evaluates the expression and shows
its value.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T084316Z" creationid="hsugawa8651" creationdate="20181118T083924Z">
        <seg>ユーザーが完全な式、例えば &lt;c8&gt;&lt;s9&gt;1&lt;/s9&gt;&lt;/c8&gt; &lt;s10&gt;+&lt;/s10&gt; &lt;s11&gt;2&lt;/s11&gt; を入力し、エンターキーを押すと、その式が評価され、値が表示されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Once created, they participate in arithmetic
with all other numeric types thanks to Julia's &lt;x2/&gt;&lt;x3/&gt;&lt;x4/&gt;(@ref conversion-and-promotion):</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T035909Z" creationid="hsugawa8651" creationdate="20181112T111549Z">
        <seg>Juliaの 型プロモーションと変換機構 &lt;x2/&gt;&lt;x3/&gt;&lt;x4/&gt;(@ref conversion-and-promotion)により、一度生成すると、全ての数値型で演算に対応します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Once the user has entered a complete expression, such as &lt;c5&gt;1 + 2&lt;/c5&gt;, and hits enter, the interactive session evaluates the expression and shows its value.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T181351Z" creationid="hsugawa8651" creationdate="20181118T173443Z">
        <seg>ユーザーが完全な式、例えば &lt;c5&gt;1 + 2&lt;/c5&gt; を入力し、エンターキーを押すと、その式が評価され、値が表示されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Once the user has entered a complete expression, such as &lt;x11/&gt;1 + 2&lt;x12/&gt;, and hits enter, the interactive
session evaluates the expression and shows its value.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T091352Z" creationid="hsugawa8651" creationdate="20181109T224313Z">
        <seg>ユーザーが完全な式、例えば &lt;x11/&gt; 1 + &lt;x12/&gt; を入力し、エンターキーを押すと、その式が評価され、値が表示されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Once the user has entered a complete expression, such as &lt;x9/&gt;1 + 2&lt;x10/&gt;, and hits enter, the interactive
session evaluates the expression and shows its value.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T231753Z" creationid="hsugawa8651" creationdate="20181119T231753Z">
        <seg>ユーザーが完全な式、例えば &lt;x11/&gt; 1 + &lt;x12/&gt; を入力し、エンターキーを押すと、その式が評価され、値が表示されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Once this package is loaded, i.e. after its first import, any subsequent import resolving to the same &lt;x17/&gt;uuid&lt;x18/&gt; will simply create a new binding to the original already-loaded package module.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T121033Z" creationid="hsugawa8651" creationdate="20181118T121033Z">
        <seg>このパッケージがロードされると、すなわち最初のインポート後、同じ&lt;x17/&gt;uuid&lt;x18/&gt;への後続のインポート解決は、元のすでにロードされているパッケージモジュールへの新しいバインドを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Once you understand how Julia
works, it's easy to write code that's nearly as fast as C.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T183544Z" creationid="hsugawa8651" creationdate="20181118T183544Z">
        <seg> Juliaがどのように動作するかを理解すれば、C言語と同等の速さで動くコードを簡単に書くことができるでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Once you understand how Julia
works, it’s easy to write code that’s nearly as fast as C.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T081603Z" creationid="hsugawa8651" creationdate="20181118T081603Z">
        <seg> Juliaがどのように動作するかを理解すれば、C言語と同等の速さで動くコードを簡単に書くことができるでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Once you understand how Julia works, it's easy to write code that's nearly as fast as C.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T182411Z" creationid="hsugawa8651" creationdate="20181118T182411Z">
        <seg> Juliaがどのように動作するかを理解すれば、C言語と同等の速さで動くコードを簡単に書くことができるでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>One can either restart Julia or use the
&lt;x1/&gt;Libdl&lt;x2/&gt; functions to manage the library explicitly, such as:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T152357Z" creationid="hsugawa8651" creationdate="20181117T152357Z">
        <seg>Juliaを再起動するか &lt;x1/&gt;Libdl&lt;x2/&gt;は、ライブラリを明示的に管理するために、次のような関数を実行します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>One common gotcha is that a 1-tuple must be
written with a trailing comma.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T224037Z" creationid="hsugawa8651" creationdate="20181109T224037Z">
        <seg>一般的なゴチャの一つは、1タプルが必要であるということです。 後続のカンマで作成されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>One consequence of federation is that there cannot be a central authority for package naming.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T152831Z" creationid="hsugawa8651" creationdate="20181117T152831Z">
        <seg>フェデレーションの一つの結果は、パッケージ命名の中心的な権限を持つことができないということです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>One could declare it
like this:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T155742Z" creationid="hsugawa8651" creationdate="20181117T155742Z">
        <seg>それを宣言することができる こんな感じです</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>One dimensional &lt;a0&gt;&lt;c1&gt;StridedArray&lt;/c1&gt;&lt;/a0&gt; with elements of type &lt;c2&gt;T&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131404Z" creationid="hsugawa8651" creationdate="20181119T131404Z">
        <seg>One dimensional &lt;a0&gt;&lt;c1&gt;StridedArray&lt;/c1&gt;&lt;/a0&gt; with elements of type &lt;c2&gt;T&lt;/c2&gt;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>One of &lt;x1/&gt;HasLength()&lt;x2/&gt;, &lt;x3/&gt;HasShape{N}()&lt;x4/&gt;, &lt;x5/&gt;IsInfinite()&lt;x6/&gt;, or &lt;x7/&gt;SizeUnknown()&lt;x8/&gt; as appropriate</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T112136Z" creationid="hsugawa8651" creationdate="20181112T112126Z">
        <seg>&lt;x1/&gt;HasLength()&lt;x2/&gt;の一つ、&lt;x3/&gt;HasShape{N}()&lt;x4/&gt;、&lt;x5/&gt;IsInfinite()&lt;x6/&gt;、必要に応じて&lt;x8/&gt;、&lt;x8/&gt;SizeUnknown()&lt;x8/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>One of the most common and useful string operations is concatenation:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T082038Z" creationid="hsugawa8651" creationdate="20181120T082038Z">
        <seg>最も一般的で便利な文字列操作の一つが連結です。:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>One rather
important distinction between the previous &lt;x2/&gt;while&lt;x3/&gt; loop form and the &lt;x4/&gt;for&lt;x5/&gt; loop form is the scope
during which the variable is visible.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T000254Z" creationid="hsugawa8651" creationdate="20181109T231156Z">
        <seg>前述の&lt;x2/&gt;while&lt;x3/&gt;ループ方式と&lt;x4/&gt;for&lt;x5/&gt;ループ方式のかなり重要な違いの1つは、ループの実行中の変数が見えるスコープです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>One rather important distinction between the previous &lt;c4&gt;while&lt;/c4&gt; loop form and the &lt;c5&gt;for&lt;/c5&gt; loop form is the scope during which the variable is visible.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T141755Z" creationid="hsugawa8651" creationdate="20181119T141618Z">
        <seg>前述の&lt;c4&gt;while&lt;/c4&gt;ループ方式と&lt;c5&gt;for&lt;/c5&gt;ループ方式のかなり重要な違いの1つは、ループの実行中の変数が見えるスコープです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>One way to do this is to provide a
constructor only for &lt;x15/&gt;SummedArray&lt;x16/&gt;, but inside the &lt;x17/&gt;struct&lt;x18/&gt; definition block to suppress
generation of default constructors:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T124258Z" creationid="hsugawa8651" creationdate="20181118T124258Z">
        <seg>これを実現する一つの方法は &lt;x15/&gt;SummedArray&lt;x16/&gt;のコンストラクタだけでなく、&lt;x17/&gt;構造体&lt;x18/&gt;定義ブロックの中にあるコンストラクタのみを抑制する デフォルト・コンストラクタの生成:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>One-dimensional &lt;a0&gt;&lt;c1&gt;DenseArray&lt;/c1&gt;&lt;/a0&gt; with elements of type &lt;c2&gt;T&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131331Z" creationid="hsugawa8651" creationdate="20181119T131331Z">
        <seg>One-dimensional &lt;a0&gt;&lt;c1&gt;DenseArray&lt;/c1&gt;&lt;/a0&gt; with elements of type &lt;c2&gt;T&lt;/c2&gt;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Operations on &lt;x11/&gt;AbstractArray&lt;x12/&gt; objects are defined using higher
level operators and functions, in a way that is independent of the underlying storage.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T160305Z" creationid="hsugawa8651" creationdate="20181109T160305Z">
        <seg>&lt;x11/&gt;AbstractArray&lt;x12/&gt;オブジェクトに対する操作は、より高い値を使用して定義されます。 レベル演算子と関数は、基礎となる記憶域とは独立して存在します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Operator</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T095345Z" creationid="hsugawa8651" creationdate="20181118T095345Z">
        <seg>演算子</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Operator Precedence</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T065547Z" creationid="hsugawa8651" creationdate="20181120T065547Z">
        <seg>演算子の優先順位</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Operator Precedence and Associativity</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T164937Z" creationid="hsugawa8651" creationdate="20181118T164918Z">
        <seg>演算子の優先順位と結合度</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Operators</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T164942Z" creationid="hsugawa8651" creationdate="20181118T164942Z">
        <seg>演算子</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Operators Are Functions</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T125945Z" creationid="hsugawa8651" creationdate="20181120T102028Z">
        <seg>演算子は関数</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Operators With Special Names</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T130216Z" creationid="hsugawa8651" creationdate="20181120T130216Z">
        <seg>特殊な名前の演算子</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Operators are just functions with special notation – to extend addition to new user-defined data types, you define new methods for the &lt;c0&gt;+&lt;/c0&gt; function.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T182625Z" creationid="hsugawa8651" creationdate="20181118T182625Z">
        <seg>これに対してJuliaの演算子は（特殊な記法を持った）単なる関数に過ぎません。 ユーザーが定義したデータ型に対して加算処理を追加したい場合は、&lt;c0&gt;+&lt;/c0&gt; 関数に対して新たなメソッドを定義します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Operators are just functions with special notation — to extend
addition to new user-defined data types, you define new methods for the
&lt;c0&gt;&lt;s1&gt;+&lt;/s1&gt;&lt;/c0&gt; function.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T082506Z" creationid="hsugawa8651" creationdate="20181118T082432Z">
        <seg>これに対してJuliaの演算子は（特殊な記法を持った）単なる関数に過ぎません。 ユーザーが定義したデータ型に対して加算処理を追加したい場合は、&lt;c0&gt;&lt;s1&gt;+&lt;/s1&gt;&lt;/c0&gt; 関数に対して新たなメソッドを定義します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Operators are just functions with special notation — to extend
addition to new user-defined data types, you define new methods for the
``+`` function.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T183854Z" creationid="hsugawa8651" creationdate="20181118T183854Z">
        <seg>これに対してJuliaの演算子は（特殊な記法を持った）単なる関数に過ぎません。 ユーザーが定義したデータ型に対して加算処理を追加したい場合は、``+`` 関数に対して新たなメソッドを定義します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Operators like &lt;c0&gt;+&lt;/c0&gt; are also valid identifiers, but are parsed specially.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T033205Z" creationid="hsugawa8651" creationdate="20181119T033047Z">
        <seg>例えば &lt;c0&gt;+&lt;/c0&gt; のような演算子も変数名として有効な識別子ですが、異なった解析がされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Optional methods&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T094608Z" creationid="hsugawa8651" creationdate="20181118T094608Z">
        <seg>オプションのメソッド&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Optionally, outer constructors
that determine type parameters automatically can be added, for example constructing a &lt;x5/&gt;Point{Int}&lt;x6/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T124231Z" creationid="hsugawa8651" creationdate="20181118T124231Z">
        <seg>オプションで、外部コンストラクタ たとえば、&lt;x5/&gt;ポイント{Int}&lt;x6/&gt;の構成など、タイプパラメータを自動的に追加することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Optionally, with this form you can also specialize on the type of &lt;x1/&gt;dest&lt;x2/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T131651Z" creationid="hsugawa8651" creationdate="20181113T131651Z">
        <seg>オプションで、このフォームでは、&lt;x1/&gt;dest&lt;x2/&gt;のタイプに特化することもできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Or for use with Julia's metaprogramming functionality:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T020127Z" creationid="hsugawa8651" creationdate="20181116T020127Z">
        <seg>Or for use with Julia's metaprogramming functionality:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Or in reverse order by a transformation:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T044919Z" creationid="hsugawa8651" creationdate="20181112T044919Z">
        <seg>Or in reverse order by a transformation:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Or you could put that code into a script and run it:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T224350Z" creationid="hsugawa8651" creationdate="20181109T224350Z">
        <seg>あるいは、スクリプトにコードを挿入して実行することもできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Order-Related Functions</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T150334Z" creationid="hsugawa8651" creationdate="20181117T150334Z">
        <seg>順序関連の関数</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Other compositions of unary operators are parsed with right-associativity, e.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T030930Z" creationid="hsugawa8651" creationdate="20181114T030918Z">
        <seg>単項演算子の他の組成は、右の連想であるeで解析されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Other numeric
types, such as integers or 32-bit floating-point values, are not automatically converted
to 64-bit floating-point, nor are strings parsed as numbers.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T012601Z" creationid="hsugawa8651" creationdate="20181120T012601Z">
        <seg>他の整数や32ビット浮動小数点数などの数値型は、自動的に64ビット浮動小数点数に変換されず、文字列も数字として解析されません。 </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Other supported conventions are: &lt;x3/&gt;stdcall&lt;x4/&gt;, &lt;x5/&gt;cdecl&lt;x6/&gt;, &lt;x7/&gt;fastcall&lt;x8/&gt;, and &lt;x9/&gt;thiscall&lt;x10/&gt; (no-op on 64-bit Windows).</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T152431Z" creationid="hsugawa8651" creationdate="20181117T152431Z">
        <seg>その他のサポートされる規則は以下の通りです:&lt;x3/&gt;stdcall&lt;x4/&gt;,&lt;x5/&gt;cdecl&lt;x6/&gt;,&lt;x7/&gt;fastcall&lt;x8/&gt;,&lt;x9/&gt;(64ビットWindows上でのno-op on64ビットWindows)。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Otherwise,
&lt;x5/&gt;X&lt;x6/&gt; is an array with the same number of dimensions as the sum of the dimensionalities of all the
indices.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T155131Z" creationid="hsugawa8651" creationdate="20181109T155131Z">
        <seg>そうでない場合は &lt;x5/&gt;x&lt;x6/&gt;は、すべての次元の次元性の合計と同じ数の次元を持つ配列です。 索引。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Otherwise, if the manifest stanza matching &lt;x1/&gt;uuid&lt;x2/&gt; has a &lt;x3/&gt;git-tree-sha1&lt;x4/&gt; entry, compute a deterministic hash function of &lt;x5/&gt;uuid&lt;x6/&gt; and &lt;x7/&gt;git-tree-sha1&lt;x8/&gt;—call it &lt;x9/&gt;slug&lt;x10/&gt;—and look for &lt;x11/&gt;packages/X/$slug&lt;x12/&gt; in each directory in the Julia &lt;x13/&gt;DEPOT_PATH&lt;x14/&gt; global array.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T121201Z" creationid="hsugawa8651" creationdate="20181118T121201Z">
        <seg>そうでない場合は、&lt;x1/&gt;uuid&lt;x2/&gt;に一致するマニフェストスタンザが&lt;x3/&gt;gitツリーsha1&lt;x4/&gt;エントリを持つ場合は、&lt;x5/&gt;uuid&lt;x6/&gt;の確定ハッシュ関数を計算して、&lt;x13/&gt;&lt;x9/&gt;の呼び出しを行います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>OurRational&lt;x1/&gt; also provides several outer constructor methods for convenience.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T124133Z" creationid="hsugawa8651" creationdate="20181118T124133Z">
        <seg>OurRational&lt;x1/&gt;には、便宜上、いくつかの外部コンストラクタメソッドも用意されています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Outer Constructor Methods</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T123740Z" creationid="hsugawa8651" creationdate="20181118T123740Z">
        <seg>外部コンストラクタのメソッド</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Outer constructor methods can only ever create a new instance
by calling another constructor method, such as the automatically provided default ones.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T155729Z" creationid="hsugawa8651" creationdate="20181117T155729Z">
        <seg>外部コンストラクタのメソッドは、新しいインスタンスを作成することしかできません。 別のコンストラクタ・メソッド(自動的に提供されるデフォルトのデフォルト値など)を呼び出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Outer constructors call inner constructors to actually
make instances.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T124237Z" creationid="hsugawa8651" creationdate="20181118T124237Z">
        <seg>外部コンストラクタは内部コンストラクタを呼び出して実際に インスタンスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Outer-only constructors</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T124226Z" creationid="hsugawa8651" creationdate="20181118T124226Z">
        <seg>外部のみのコンストラクタ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Overflow behavior</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T033146Z" creationid="hsugawa8651" creationdate="20181118T120330Z">
        <seg>オーバーフロー処理</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Overloading &lt;x1/&gt;`show`&lt;x2/&gt; allows one to indicate arbitrary multimedia representations (keyed by standard
MIME types) of user-defined types.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T043253Z" creationid="hsugawa8651" creationdate="20181112T043253Z">
        <seg>オーバロード&lt;x1/&gt;`show`&lt;x2/&gt;は、任意のマルチメディア表現を示すことができます(標準でキー設定されています)。 ユーザー定義型のMIMEタイプ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Override the computation of the lazy broadcast's axes</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T131004Z" creationid="hsugawa8651" creationdate="20181113T131004Z">
        <seg>遅延ブロードキャストの軸の計算をオーバーライドします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Override the default lazy behavior within a fused expression</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T083633Z" creationid="hsugawa8651" creationdate="20181113T083633Z">
        <seg>融合式の中でデフォルトの遅延動作をオーバーライドする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Package Development&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T234835Z" creationid="hsugawa8651" creationdate="20181119T234835Z">
        <seg>パッケージ開発&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Package directories</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T121258Z" creationid="hsugawa8651" creationdate="20181118T121258Z">
        <seg>パッケージのディレクトリ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Package directories are handy when you have a set of packages that you just want to put somewhere and use them as they are, without having to create and maintain a project environment for them.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T120939Z" creationid="hsugawa8651" creationdate="20181118T120939Z">
        <seg>パッケージのディレクトリは、単にどこかに配置したいパッケージのセットを持っていて、それらのパッケージをそのまま使用したり、プロジェクト環境を作成したり維持したりする必要がないようにする場合に便利です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Package directories provide a kind of environment that approximates package loading in Julia 0.6 and earlier, and which resembles package loading in many other dynamic languages.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T121300Z" creationid="hsugawa8651" creationdate="20181118T121300Z">
        <seg>パッケージ・ディレクトリは、Julia0.6以前のパッケージ・ロードに近似し、他の多くの動的言語でパッケージ・ロードに似た環境を提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Package directories provide low-overhead &lt;x1/&gt;convenience&lt;x2/&gt; when a project environment isn't needed.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T120934Z" creationid="hsugawa8651" creationdate="20181118T120934Z">
        <seg>パッケージディレクトリは、プロジェクト環境が不要な場合は、オーバーヘッドの少ない&lt;x1/&gt;の利便性&lt;x2/&gt;を提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Package loading is built on top of code inclusion and is a lot more complex.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T152749Z" creationid="hsugawa8651" creationdate="20181117T152749Z">
        <seg>パッケージのロードはコードインクルージョンの上に構築され、より複雑なものになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Package loading:&lt;x1/&gt; e.g. &lt;x2/&gt;import X&lt;x3/&gt; or &lt;x4/&gt;using X&lt;x5/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T152734Z" creationid="hsugawa8651" creationdate="20181117T152734Z">
        <seg>パッケージ荷重:&lt;x1/&gt;例えば&lt;x2/&gt;インポートX&lt;x3/&gt;または&lt;x4/&gt;をX&lt;x5/&gt;を使用する。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Packages from various registries are installed and managed using a common set of tools and workflows.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T152825Z" creationid="hsugawa8651" creationdate="20181117T152825Z">
        <seg>さまざまなレジストリからのパッケージは、共通のツールとワークフローを使用してインストールされ、管理されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Packages in non-primary environments can end up using incompatible versions of their dependencies even if their own environments are entirely compatible.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T121432Z" creationid="hsugawa8651" creationdate="20181118T121432Z">
        <seg>非プライマリ環境でのパッケージは、独自の環境が完全に互換性がある場合でも、互換性のないバージョンの依存関係を使用することがあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Packages&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T234823Z" creationid="hsugawa8651" creationdate="20181119T234823Z">
        <seg>パッケージ&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Packed structs and union declarations are not supported by Julia.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T151147Z" creationid="hsugawa8651" creationdate="20181117T151147Z">
        <seg>Packed構造体とUnion宣言は、Juliaではサポートされていません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Pair</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T165120Z" creationid="hsugawa8651" creationdate="20181118T165120Z">
        <seg>ペア</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Pair{Int, Int}&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T150709Z" creationid="hsugawa8651" creationdate="20181117T150709Z">
        <seg>Pair{Int, Int}&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Parallel Computing&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T234703Z" creationid="hsugawa8651" creationdate="20181119T234703Z">
        <seg>並列計算&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Parametric Constructors</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T123823Z" creationid="hsugawa8651" creationdate="20181118T123823Z">
        <seg>パラメトリックコンストラクタ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Parametric methods allow the same syntax as &lt;x1/&gt;where&lt;x2/&gt; expressions used to write types
(see &lt;x3/&gt;UnionAll Types&lt;x4/&gt;).</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T020315Z" creationid="hsugawa8651" creationdate="20181120T020315Z">
        <seg>パラメトリックメソッドでは、型の作成に使用されるwhere式と同じ構文を使用できます（全合併型を参照）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Parametric types add a few wrinkles to the constructor story.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T123826Z" creationid="hsugawa8651" creationdate="20181118T123826Z">
        <seg>パラメトリック・タイプでは、コンストラクター・ストーリーにいくつかのしわが追加されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Parametrically-constrained Varargs methods</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T022709Z" creationid="hsugawa8651" creationdate="20181120T022709Z">
        <seg>パラメトリック制約付き可変引数メソッド</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>PartialQuickSort(k)&lt;x1/&gt; is similar to &lt;x2/&gt;QuickSort&lt;x3/&gt;, but the output array is only sorted up to index
&lt;x4/&gt;k&lt;x5/&gt; if &lt;x6/&gt;k&lt;x7/&gt; is an integer, or in the range of &lt;x8/&gt;k&lt;x9/&gt; if &lt;x10/&gt;k&lt;x11/&gt; is an &lt;x12/&gt;OrdinalRange&lt;x13/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T064103Z" creationid="hsugawa8651" creationdate="20181114T064103Z">
        <seg>PartialQuickSort(k)&lt;x1/&gt;は&lt;x2/&gt;QuickSort&lt;x3/&gt;と類似していますが、出力配列はインデックスにのみソートされています。 &lt;x4/&gt;k&lt;x5/&gt;は、&lt;x6/&gt;k&lt;x7/&gt;が整数である場合、&lt;x10/&gt;k&lt;x11/&gt;が&lt;x12/&gt;k&lt;x11/&gt;の場合、&lt;x12/&gt;k&lt;x11/&gt;の範囲である。OrdinalRange。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Partially implemented by:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T041654Z" creationid="hsugawa8651" creationdate="20181112T041654Z">
        <seg>Partially implemented by:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Partly because of run-time type inference (augmented by optional type
annotations), and partly because of a strong focus on performance from
the inception of the project, Julia's computational efficiency exceeds
that of other dynamic languages, and even rivals that of
statically-compiled languages.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T183913Z" creationid="hsugawa8651" creationdate="20181118T183913Z">
        <seg>実行時型推論（任意の型注釈で補うこともできます）によって、またプロジェクト発足時からの性能に対する強い欲求によって、Juliaの計算効率は他の動的言語を圧倒し、静的コンパイル言語と競うレベルにあります。 </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Partly because of run-time type inference (augmented by optional type
annotations), and partly because of a strong focus on performance from
the inception of the project, Julia’s computational efficiency exceeds
that of other dynamic languages, and even rivals that of
statically-compiled languages.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T082529Z" creationid="hsugawa8651" creationdate="20181118T082529Z">
        <seg>実行時型推論（任意の型注釈で補うこともできます）によって、またプロジェクト発足時からの性能に対する強い欲求によって、Juliaの計算効率は他の動的言語を圧倒し、静的コンパイル言語と競うレベルにあります。 </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Partly because of run-time type inference (augmented by optional type annotations), and partly because of a strong focus on performance from the inception of the project, Julia's computational efficiency exceeds that of other dynamic languages, and even rivals that of statically-compiled languages.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T182644Z" creationid="hsugawa8651" creationdate="20181118T182644Z">
        <seg>実行時型推論（任意の型注釈で補うこともできます）によって、またプロジェクト発足時からの性能に対する強い欲求によって、Juliaの計算効率は他の動的言語を圧倒し、静的コンパイル言語と競うレベルにあります。 </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Passing Pointers for Modifying Inputs</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T151822Z" creationid="hsugawa8651" creationdate="20181117T151822Z">
        <seg>入力を変更するためのポインタを渡す</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Passing options to &lt;x1/&gt;julia&lt;x2/&gt; in so-called shebang by, e.g.,
&lt;x3/&gt;&lt;x4/&gt;!/usr/bin/env julia --startup-file=no&lt;x5/&gt; may not work in some
platforms such as Linux.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181110T024920Z" creationid="hsugawa8651" creationdate="20181110T024920Z">
        <seg>例えば、シェバンでは、&lt;x1/&gt;july&lt;x2/&gt;に渡すオプションを指定します。 &lt;x3/&gt;&lt;x4/&gt;!/usr/bin/env julia--startup file=no&lt;x5/&gt;は動作しない場合があります。 Linuxなどのプラットフォームです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Perhaps the best way to tie all these pieces together is to present a real world example of a
parametric composite type and its constructor methods.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T124057Z" creationid="hsugawa8651" creationdate="20181118T124057Z">
        <seg>これらすべてを結びつける最良の方法は、実際の例を提示することである。 パラメトリック複合型とそのコンストラクタメソッドです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Perhaps you've defined a type and then realize you need to add a new field.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181110T024714Z" creationid="hsugawa8651" creationdate="20181110T024714Z">
        <seg>おそらく、タイプを定義してから、新しいフィールドを追加する必要があることを認識しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Pointers contained in C
structs should be represented as fields of type &lt;x11/&gt;Ptr{T}&lt;x12/&gt; within the corresponding Julia struct
types designed to mimic the internal structure of corresponding C structs.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T151449Z" creationid="hsugawa8651" creationdate="20181117T151449Z">
        <seg>Cに含まれるポインタ 構造体は、対応するジュリア構造内の&lt;x11/&gt;Ptr{T}&lt;x12/&gt;の型のフィールドとして表されるべきである。 は、対応するC構造体の内部構造を模倣するように設計されています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Point{T}&lt;x1/&gt;, for each possible type &lt;x2/&gt;T&lt;:Real&lt;x3/&gt;, that
behaves just like non-parametric default inner constructors do.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T123910Z" creationid="hsugawa8651" creationdate="20181118T123910Z">
        <seg>点{T}&lt;x1/&gt;は、それぞれの可能なタイプ&lt;x2/&gt;T&lt;:Real&lt;x3/&gt;に対して は、非パラメトリックデフォルトのインナーコンストラクタと同じように動作します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Positive zero is equal but not greater than negative zero.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T064239Z" creationid="hsugawa8651" creationdate="20181114T030501Z">
        <seg>正のゼロは負のゼロに等しいですが、大きくはありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Powerful shell-like capabilities for managing other processes</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T082917Z" creationid="hsugawa8651" creationdate="20181118T082917Z">
        <seg>シェルのような強力なプロセス管理
n</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Powers, logs and roots</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T100005Z" creationid="hsugawa8651" creationdate="20181118T100005Z">
        <seg>冪乗、対数、冪乗根</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Practical use of it
requires using &lt;x3/&gt;llvmcall&lt;x4/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T063640Z" creationid="hsugawa8651" creationdate="20181114T063640Z">
        <seg>実用化 &lt;x3/&gt;リウムカル&lt;x4/&gt;を使用する必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Precedence rules for mixing styles</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T164824Z" creationid="hsugawa8651" creationdate="20181118T164824Z">
        <seg>スタイルをミキシングするための優先順位規則</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Precision</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T110226Z" creationid="hsugawa8651" creationdate="20181112T110226Z">
        <seg>Precision</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Print this message</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T224608Z" creationid="hsugawa8651" creationdate="20181109T224608Z">
        <seg>このメッセージを印刷する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Priv&lt;x1/&gt; package—the one with UUID &lt;x2/&gt;2d15fe94-a1f7-436c-a4d8-07a9a496e01c&lt;x3/&gt;—it finds its stanza in the manifest, see that it does &lt;x4/&gt;not&lt;x5/&gt; have a &lt;x6/&gt;path&lt;x7/&gt; entry, but that it does have a &lt;x8/&gt;git-tree-sha1&lt;x9/&gt; entry.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T121216Z" creationid="hsugawa8651" creationdate="20181118T121216Z">
        <seg>Priv&lt;x1/&gt;package-UUID&lt;x2/&gt;2d15fe94-a1f7-436c-a4d8-07a9a496e01c&lt;x3/&gt;-itは、マニフェスト内のスタンザを検出します。これは、&lt;x4/&gt;は&lt;x6/&gt;のパス&lt;x7/&gt;のエントリを持っていませんが、&lt;x8/&gt;gitツリーsha1&lt;x9/&gt;エントリを持っていることを示しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Profiling&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T234846Z" creationid="hsugawa8651" creationdate="20181119T234846Z">
        <seg>プロファイリング&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Program representation</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T165157Z" creationid="hsugawa8651" creationdate="20181118T165157Z">
        <seg>プログラム表現</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Project environments</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T121047Z" creationid="hsugawa8651" creationdate="20181118T121047Z">
        <seg>プロジェクト環境</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Project environments provide &lt;x1/&gt;reproducibility.&lt;x2/&gt; By checking a project environment into version control—e.g. a git repository—along with the rest of the project's source code, you can reproduce the exact state of the project &lt;x3/&gt;and&lt;x4/&gt; all of its dependencies since the manifest file captures the exact version of every dependency.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T153207Z" creationid="hsugawa8651" creationdate="20181117T153207Z">
        <seg>プロジェクト環境は、&lt;x1/&gt;再現性を提供します。&lt;x2/&gt;プロジェクト環境をバージョン制御することによって&lt;x/&gt;は、プロジェクトのソースコードとともに、プロジェクトの正確な状態を再現できます。&lt;x3/&gt;は、すべての依存関係の正確なバージョンをキャプチャするため、すべての依存関係の正確な状態を再現できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Properties of Types</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181110T041836Z" creationid="hsugawa8651" creationdate="20181110T041836Z">
        <seg>Properties of Types</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Provided the element type of the array is compatible with BLAS, a strided array can utilize BLAS and LAPACK routines
for more efficient linear algebra routines.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T083503Z" creationid="hsugawa8651" creationdate="20181113T083503Z">
        <seg>配列の要素タイプがBLASと互換性がある場合、strider配列はBLASとLAPACKルーチンを利用することができます。 より効率的な線形代数のルーチンです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Ptr&lt;x1/&gt; is always a word-size primitive type.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T151240Z" creationid="hsugawa8651" creationdate="20181117T151240Z">
        <seg>Ptr&lt;x1/&gt;は常にワードサイズのプリミティブ型である。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Ptr{Any}&lt;x1/&gt; (&lt;x2/&gt;Ref{Any}&lt;x3/&gt; is invalid as a return type)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T151807Z" creationid="hsugawa8651" creationdate="20181117T151807Z">
        <seg>Ptr{Any}&lt;x1/&gt;(&lt;x2/&gt;Ref{Any}&lt;x3/&gt;は、戻り型として無効です)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Ptr{Cdouble}&lt;x1/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T152206Z" creationid="hsugawa8651" creationdate="20181117T152206Z">
        <seg>Ptr{Cdouble}&lt;x1/&gt;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Ptr{Cvoid}&lt;x1/&gt; (you may need to use &lt;x2/&gt;`@cfunction`&lt;x3/&gt; explicitly to create this pointer)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T151602Z" creationid="hsugawa8651" creationdate="20181117T151602Z">
        <seg>Ptr{Cvoid}&lt;x1/&gt;(このポインタを作成するためには、&lt;x2/&gt;`@cfunction`&lt;x3/&gt;を明示的に使用する必要があります)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Ptr{T}&lt;x1/&gt;, where &lt;x2/&gt;T&lt;x3/&gt; is the Julia type corresponding to &lt;x4/&gt;T&lt;x5/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T151820Z" creationid="hsugawa8651" creationdate="20181117T151820Z">
        <seg>Ptr{T}&lt;x1/&gt;。ここで、&lt;x2/&gt;T&lt;x3/&gt;は、&lt;x4/&gt;T&lt;x5/&gt;に対応するジュリア型である。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Punctuation</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T150207Z" creationid="hsugawa8651" creationdate="20181117T150202Z">
        <seg>句読点</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>QuickSort&lt;x1/&gt; is an O(n log n) sorting algorithm which is in-place, very fast, but not stable –
i.e. elements which are considered equal will not remain in the same order in which they originally
appeared in the array to be sorted.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T064040Z" creationid="hsugawa8651" creationdate="20181114T064040Z">
        <seg>QuickSort&lt;x1/&gt;はO(nログn)ソートアルゴリズムで、インプレースではなく、非常に高速ですが、安定しています。 すなわち、等しいと考えられる要素は、本来は同じ順序では存在しない 配列に表示され、ソートされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>QuickSort&lt;x1/&gt; is selected as it is faster and indistinguishable
in this case from a stable sort (unless the array records its mutations in some way).</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T064123Z" creationid="hsugawa8651" creationdate="20181114T064123Z">
        <seg>クイックソート&lt;x1/&gt;が選択されると同時に選択され、識別できなくなります。 この場合は、安定なソート(配列が何らかの方法でその突然変異を記録しない限り)である。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Quiet startup: no banner, suppress REPL warnings</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T224722Z" creationid="hsugawa8651" creationdate="20181109T224722Z">
        <seg>quietスタートアップ:バナーがない、REPL警告が省略されていない</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>QuoteNode&lt;x1/&gt; can also be used for certain advanced metaprogramming tasks.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T165231Z" creationid="hsugawa8651" creationdate="20181118T165231Z">
        <seg>QuoteNode&lt;x1/&gt;は、特定の高度なメタプログラミング・タスクにも使用できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Quoting</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T115332Z" creationid="hsugawa8651" creationdate="20181118T115332Z">
        <seg>見積り</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Range indexing makes a copy of the selected part of the original string.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T100529Z" creationid="hsugawa8651" creationdate="20181120T100529Z">
        <seg>範囲によるインデックスは、元の文字列のうち、選択された部分のコピーを作ります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Ranges in generators and comprehensions can depend on previous ranges by writing multiple &lt;x1/&gt;for&lt;x2/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T155036Z" creationid="hsugawa8651" creationdate="20181109T155036Z">
        <seg>生成の範囲は、&lt;x2/&gt;を&lt;x2/&gt;に書くことによって、以前の範囲に依存することができる。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Ranges like &lt;x1/&gt;a:c&lt;x2/&gt; or &lt;x3/&gt;a:b:c&lt;x4/&gt;, which select contiguous or strided subsections from &lt;x5/&gt;a&lt;x6/&gt; to &lt;x7/&gt;c&lt;x8/&gt; (inclusive)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T155527Z" creationid="hsugawa8651" creationdate="20181109T155527Z">
        <seg>&lt;x1/&gt;a:c&lt;x2/&gt;または&lt;x3/&gt;a:b&lt;x4/&gt;のような範囲。&lt;x5/&gt;から&lt;x6/&gt;&lt;x8/&gt;&lt;x8/&gt;(含む)まで連続するサブセクションまたはストライドされたサブセクションを選択する。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Rather than relying on "vectorized" methods of functions like &lt;x8/&gt;sin&lt;x9/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T150005Z" creationid="hsugawa8651" creationdate="20181117T150005Z">
        <seg>&lt;x8/&gt;sin&lt;x9/&gt;のような"ベクトル化された"関数の関数に依存するのではなく</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Rational Numbers</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T123500Z" creationid="hsugawa8651" creationdate="20181118T123500Z">
        <seg>有理数</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Rational Numbers&lt;x1/&gt; -- its entire behavior is defined in these few lines.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T124158Z" creationid="hsugawa8651" creationdate="20181118T124158Z">
        <seg>Rational Number&lt;x1/&gt;--その動作全体は、これらの数行で定義されています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Rationals are constructed
using the &lt;x1/&gt;`//`&lt;x2/&gt; operator:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T123504Z" creationid="hsugawa8651" creationdate="20181118T123504Z">
        <seg>合理性を構築する &lt;x1/&gt;`//`&lt;x2/&gt;演算子を使用します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Rationals can easily be converted to floating-point numbers:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T123601Z" creationid="hsugawa8651" creationdate="20181118T123601Z">
        <seg>合理化は、簡単に浮動小数点数に変換できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Recall from &lt;x1/&gt;&lt;x2/&gt;&lt;x3/&gt;(@ref man-functions) that a function is an object that maps a tuple of arguments to a
return value, or throws an exception if no appropriate value can be returned.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T005752Z" creationid="hsugawa8651" creationdate="20181120T005752Z">
        <seg>関数の章を思い出してください。関数とは、引数のタプルを受け取り、戻り値を返す、または適切な値が返せない場合は例外を投げる、オブジェクトです。 </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Recall from &lt;x1/&gt;Parametric Types&lt;x2/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T123828Z" creationid="hsugawa8651" creationdate="20181118T123828Z">
        <seg>&lt;x1/&gt;パラメトリックタイプ&lt;x2/&gt;からリコールされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Recall that in &lt;x1/&gt;Integers and Floating-Point Numbers&lt;x2/&gt;, we introduced a variety of concrete
types of numeric values: &lt;x3/&gt;`Int8`&lt;x4/&gt;, &lt;x5/&gt;`UInt8`&lt;x6/&gt;, &lt;x7/&gt;`Int16`&lt;x8/&gt;, &lt;x9/&gt;`UInt16`&lt;x10/&gt;,
&lt;x11/&gt;`Int32`&lt;x12/&gt;, &lt;x13/&gt;`UInt32`&lt;x14/&gt;, &lt;x15/&gt;`Int64`&lt;x16/&gt;, &lt;x17/&gt;`UInt64`&lt;x18/&gt;, &lt;x19/&gt;`Int128`&lt;x20/&gt;,
&lt;x21/&gt;`UInt128`&lt;x22/&gt;, &lt;x23/&gt;`Float16`&lt;x24/&gt;, &lt;x25/&gt;`Float32`&lt;x26/&gt;, and &lt;x27/&gt;`Float64`&lt;x28/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T094913Z" creationid="hsugawa8651" creationdate="20181120T094913Z">
        <seg>Recall that in &lt;x1/&gt;Integers and Floating-Point Numbers&lt;x2/&gt;, we introduced a variety of concrete
types of numeric values: &lt;x3/&gt;`Int8`&lt;x4/&gt;, &lt;x5/&gt;`UInt8`&lt;x6/&gt;, &lt;x7/&gt;`Int16`&lt;x8/&gt;, &lt;x9/&gt;`UInt16`&lt;x10/&gt;,
&lt;x11/&gt;`Int32`&lt;x12/&gt;, &lt;x13/&gt;`UInt32`&lt;x14/&gt;, &lt;x15/&gt;`Int64`&lt;x16/&gt;, &lt;x17/&gt;`UInt64`&lt;x18/&gt;, &lt;x19/&gt;`Int128`&lt;x20/&gt;,
&lt;x21/&gt;`UInt128`&lt;x22/&gt;, &lt;x23/&gt;`Float16`&lt;x24/&gt;, &lt;x25/&gt;`Float32`&lt;x26/&gt;, and &lt;x27/&gt;`Float64`&lt;x28/&gt;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Recall that the variable &lt;a0&gt;&lt;c1&gt;ans&lt;/c1&gt;&lt;/a0&gt; is set to the value of the last expression evaluated in an interactive session.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T185314Z" creationid="hsugawa8651" creationdate="20181118T185314Z">
        <seg>変数&lt;x1/&gt;`は、最後に評価された最後の式の値に設定されていることを思い出してください。 対話型セッションです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Recall that the variable &lt;x1/&gt;`ans`&lt;x2/&gt; is set to the value of the last expression evaluated in
an interactive session.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T032916Z" creationid="hsugawa8651" creationdate="20181109T225338Z">
        <seg>前述の通り、変数 &lt;x1/&gt;ans&lt;x2/&gt; は対話セッションで最後に出力された式の値がセットされます。 </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Reflection</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181110T042017Z" creationid="hsugawa8651" creationdate="20181110T042017Z">
        <seg>Reflection</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Ref{Any}&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T151540Z" creationid="hsugawa8651" creationdate="20181117T151540Z">
        <seg>Ref{Any}&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Ref{T}&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T134447Z" creationid="hsugawa8651" creationdate="20181117T134447Z">
        <seg>Ref{T}&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Ref{T}&lt;x1/&gt;, where &lt;x2/&gt;T&lt;x3/&gt; is the Julia type corresponding to &lt;x4/&gt;T&lt;x5/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T151553Z" creationid="hsugawa8651" creationdate="20181117T151553Z">
        <seg>参照{T}&lt;x1/&gt;。&lt;x2/&gt;T&lt;x3/&gt;は、&lt;x4/&gt;T&lt;x5/&gt;に対応するジュリア型である。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Regex("^\\s*(?:&lt;x1/&gt;|\$)")</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T015626Z" creationid="hsugawa8651" creationdate="20181116T015626Z">
        <seg>Regex("^\\s*(?:&lt;x1/&gt;|\$)")</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Represented as either an array or a struct.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T150802Z" creationid="hsugawa8651" creationdate="20181117T150802Z">
        <seg>配列または構造体として表されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Required Methods</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T094116Z" creationid="hsugawa8651" creationdate="20181118T094116Z">
        <seg>必要なメソッド</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Required methods</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T164651Z" creationid="hsugawa8651" creationdate="20181118T164651Z">
        <seg>必要なメソッド</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Resources</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T120244Z" creationid="hsugawa8651" creationdate="20181118T120244Z">
        <seg>リソース</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Return a mutable array with the same element type and size &lt;x1/&gt;dims&lt;x2/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T164752Z" creationid="hsugawa8651" creationdate="20181118T164752Z">
        <seg>同じ要素タイプとサイズを持つ可変配列を返す&lt;x1/&gt;ディムス&lt;x2/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Return a mutable array with the same shape and element type</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T164749Z" creationid="hsugawa8651" creationdate="20181118T164749Z">
        <seg>同じシェイプとエレメントタイプを持つ可変配列を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Return a mutable array with the same shape and the specified element type</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T164750Z" creationid="hsugawa8651" creationdate="20181118T164750Z">
        <seg>同じ形状および指定された要素タイプを持つ可変配列を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Return a mutable array with the specified element type and size</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T094500Z" creationid="hsugawa8651" creationdate="20181118T094500Z">
        <seg>指定されたエレメントタイプとともに、可変配列を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Return a mutable array with the specified indices &lt;x1/&gt;inds&lt;x2/&gt; (see below)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T022621Z" creationid="hsugawa8651" creationdate="20181113T022621Z">
        <seg>指定されたインデックス&lt;x1/&gt;インスタンス&lt;x2/&gt;(以下参照)を使用して、可変配列を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Return an array similar to &lt;x1/&gt;T&lt;x2/&gt; with the specified indices &lt;x3/&gt;inds&lt;x4/&gt; (see below)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T022647Z" creationid="hsugawa8651" creationdate="20181113T022647Z">
        <seg>&lt;x1/&gt;T&lt;x2/&gt;のような配列を指定されたインデックス&lt;x3/&gt;inds&lt;x4/&gt;(以下参照)と同様に返す。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Return the &lt;x1/&gt;AbstractUnitRange&lt;x2/&gt; of valid indices</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T094507Z" creationid="hsugawa8651" creationdate="20181118T094507Z">
        <seg>有効なインデックスの&lt;x1/&gt;AbstractUnitRange&lt;x2/&gt;を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Return the distance in memory (in number of elements) between adjacent elements in dimension k.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T094614Z" creationid="hsugawa8651" creationdate="20181118T094614Z">
        <seg>寸法kの隣り合う要素間のメモリ内の距離(要素数)を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Return the distance in memory (in number of elements) between adjacent elements in each dimension as a tuple.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T094558Z" creationid="hsugawa8651" creationdate="20181118T094558Z">
        <seg>各次元内の隣り合う要素間の距離をタプルとして、メモリ内の距離を返します(要素数)。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Return the native address of an array.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T094606Z" creationid="hsugawa8651" creationdate="20181118T094606Z">
        <seg>配列のネイティブ・アドレスを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Return type</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T133907Z" creationid="hsugawa8651" creationdate="20181117T133907Z">
        <seg>戻り値の型</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Return type (see below for mapping the declared C type to Julia)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T223843Z" creationid="hsugawa8651" creationdate="20181109T223843Z">
        <seg>戻り型(宣言されたC型をJuliaにマッピングするには、次を参照)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returning to the sequence of squares from above, we could instead define it as a subtype of an
&lt;x1/&gt;AbstractArray{Int, 1}&lt;x2/&gt;:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T083159Z" creationid="hsugawa8651" creationdate="20181113T083159Z">
        <seg>上からの2乗のシーケンスに戻ると、それをサブタイプとして定義することができます。 &lt;x1/&gt;AbstractArray{Int,1}&lt;x2/&gt;:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a tuple containing the dimensions of &lt;x1/&gt;A&lt;x2/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T113218Z" creationid="hsugawa8651" creationdate="20181112T113218Z">
        <seg>&lt;x1/&gt;A&lt;x2/&gt;の次元を含むタプルを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns either &lt;x1/&gt;IndexLinear()&lt;x2/&gt; or &lt;x3/&gt;IndexCartesian()&lt;x4/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T113322Z" creationid="hsugawa8651" creationdate="20181112T113322Z">
        <seg>&lt;x1/&gt;IndexLinear()&lt;x2/&gt;または&lt;x3/&gt;IndexCartesian()&lt;x4/&gt;のいずれかを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns either a tuple of the first item and initial state or &lt;x1/&gt;`nothing`&lt;x2/&gt; if empty</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T112101Z" creationid="hsugawa8651" creationdate="20181112T112101Z">
        <seg>最初の項目と初期状態のタプルを返すか、&lt;x1/&gt;'nothing"&lt;x2/&gt;"&lt;x2/&gt;のいずれかを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns either a tuple of the next item and next state or &lt;x1/&gt;nothing&lt;x2/&gt; if no items remain</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T112109Z" creationid="hsugawa8651" creationdate="20181112T112109Z">
        <seg>次の項目のタプルを返し、次の状態または&lt;x1/&gt;何もしない&lt;x2/&gt;を返します。項目が残っていない場合は、&lt;x/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Right</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T095611Z" creationid="hsugawa8651" creationdate="20181118T095611Z">
        <seg>右</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Right&lt;x1/&gt;&lt;x2/&gt;&lt;x3/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T165016Z" creationid="hsugawa8651" creationdate="20181118T165016Z">
        <seg>右&lt;x1/&gt;&lt;x2/&gt;&lt;x3/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Rounding functions</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T095723Z" creationid="hsugawa8651" creationdate="20181118T095723Z">
        <seg>丸め関数</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Rounding modes</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T120353Z" creationid="hsugawa8651" creationdate="20181118T120353Z">
        <seg>丸めモード</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Run processes on hosts listed in &lt;c0&gt;&lt;file&gt;&lt;/c0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T174418Z" creationid="hsugawa8651" creationdate="20181118T174418Z">
        <seg>&lt;c0&gt;&lt;file&gt;&lt;/c0&gt;にリストされたホスト上でプロセスを実行する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Run processes on hosts listed in &lt;x1/&gt;&lt;x2/&gt;&lt;x3/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T224714Z" creationid="hsugawa8651" creationdate="20181109T224714Z">
        <seg>&lt;x1/&gt;&lt;x2/&gt;&lt;x3/&gt;にリストされたホスト上でプロセスを実行する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Running External Programs&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T234728Z" creationid="hsugawa8651" creationdate="20181119T234728Z">
        <seg>外部プログラムの実行&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Running a Julia script using &lt;x1/&gt;julia file.jl&lt;x2/&gt; does not throw
&lt;x3/&gt;`InterruptException`&lt;x4/&gt; when you try to terminate it with CTRL-C
(SIGINT).</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181110T024906Z" creationid="hsugawa8651" creationdate="20181110T024906Z">
        <seg>&lt;x1/&gt;ジュリアファイル.jl&lt;x2/&gt;を使用してジュリアスクリプトを実行しても、スローされません。 CTRL-Cで終了しようとすると、&lt;x3/&gt;'InterruptException'&lt;x4/&gt;となります。 (SIGINT)。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>SIMD Support</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T063634Z" creationid="hsugawa8651" creationdate="20181114T063634Z">
        <seg>SIMDサポート</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>SIMD Values</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T151248Z" creationid="hsugawa8651" creationdate="20181117T151248Z">
        <seg>SIMD値</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Scalar values passed to these functions are treated as 1-element arrays.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154559Z" creationid="hsugawa8651" creationdate="20181109T154559Z">
        <seg>これらの関数に渡されるスカラー値は、1要素配列として扱われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Scalar values passed to these functions are treated as 1-element arrays. For example,</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T134540Z" creationid="hsugawa8651" creationdate="20181117T134540Z">
        <seg>これらの関数に渡されるスカラー値は、1要素配列として扱われます。たとえば、次のようになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Scientific computing has traditionally required the highest performance,
yet domain experts have largely moved to slower dynamic languages for
daily work.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T081334Z" creationid="hsugawa8651" creationdate="20181118T081334Z">
        <seg>科学技術計算には常に最高の性能が求められますが、この分野のエキスパートたちはより低速な動的言語を使って仕事をしています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Scientific computing has traditionally required the highest performance, yet domain experts have largely moved to slower dynamic languages for daily work.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T182247Z" creationid="hsugawa8651" creationdate="20181118T182247Z">
        <seg>科学技術計算には常に最高の性能が求められますが、この分野のエキスパートたちはより低速な動的言語を使って仕事をしています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Search docs</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T031803Z" creationid="hsugawa8651" creationdate="20181119T031803Z">
        <seg>ドキュメントを検索</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Second"
 "3.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T161332Z" creationid="hsugawa8651" creationdate="20181114T161332Z">
        <seg>Second"
 "3.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>See
the &lt;x3/&gt;&lt;x4/&gt;&lt;x5/&gt;(@ref man-multi-dim-arrays) and the &lt;x6/&gt;&lt;x7/&gt;&lt;x8/&gt;(@ref lib-arrays) for more supported methods.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T022656Z" creationid="hsugawa8651" creationdate="20181113T022656Z">
        <seg>「」を参照してください。 サポートされるメソッドについては、&lt;x3/&gt;&lt;x4/&gt;&lt;x5/&gt;(@ref manマルチdimアレイ)および&lt;x6/&gt;&lt;x7/&gt;&lt;x8/&gt;(@ref lib arrays)を参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>See &lt;a0&gt;Scope of Variables&lt;/a0&gt; for a detailed explanation of variable scope and how it works in Julia.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T141923Z" creationid="hsugawa8651" creationdate="20181119T141923Z">
        <seg>変数のスコープとJuliaでの動作の詳細については、&lt;a0&gt;変数のスコープ&lt;/a0&gt;を参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>See &lt;x1/&gt;&lt;x2/&gt;&lt;x3/&gt;(@ref conversion-and-promotion) for details of the promotion
system.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T063513Z" creationid="hsugawa8651" creationdate="20181113T132207Z">
        <seg>プロモーションシステムの詳細については &lt;x1/&gt;&lt;x2/&gt;&lt;x3/&gt;変換とプロモーション(@ref conversion-and-promotion)を参照ください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>See &lt;x1/&gt;&lt;x2/&gt;&lt;x3/&gt;(@ref conversion-and-promotion) for how to define your own conversions and promotions.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T071002Z" creationid="hsugawa8651" creationdate="20181118T095716Z">
        <seg>独自の変換とプロモーションの定義方法については、&lt;x1/&gt;&lt;x2/&gt;&lt;x3/&gt;(@ref conversion-and-promotion) を参照してください</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>See &lt;x1/&gt;&lt;x2/&gt;&lt;x3/&gt;(@ref scope-of-variables) for a detailed explanation of variable scope and how it works in
Julia.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T124434Z" creationid="hsugawa8651" creationdate="20181118T124434Z">
        <seg>可変スコープの詳細な説明およびそれがどのように動作するかについては、&lt;x1/&gt;&lt;x2/&gt;&lt;x3/&gt;(変数の@ref scope of variables)を参照してください。 ジュリア。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>See &lt;x5/&gt;Iteration&lt;x6/&gt; below, and for some more advanced
examples, see &lt;x7/&gt;this blog post on multidimensional algorithms and
iteration&lt;x8/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T155626Z" creationid="hsugawa8651" creationdate="20181109T155626Z">
        <seg>以下の「&lt;x5/&gt;イテレーション&lt;x6/&gt;」を参照してください。また、詳細については、以下を参照してください。 例を参照してください。このブログ記事は、多次元アルゴリズムに関するこのブログ記事を参照してください。 繰り返し&lt;x8/&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>See also &lt;x1/&gt;&lt;x2/&gt;&lt;x3/&gt;(@ref man-scripting) for more information on writing Julia scripts.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T224404Z" creationid="hsugawa8651" creationdate="20181109T224404Z">
        <seg>Juliaスクリプトの記述についての詳細は、&lt;x1/&gt;&lt;x2/&gt;&lt;x3/&gt;(@ref man scripting)も参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>See also the &lt;x1/&gt;&lt;x2/&gt;&lt;x3/&gt;(@ref man-vectorized);
for example, &lt;x4/&gt;f.(args...)&lt;x5/&gt; implicitly calls &lt;x6/&gt;broadcast(f, args...)&lt;x7/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T115833Z" creationid="hsugawa8651" creationdate="20181117T150003Z">
        <seg>&lt;x1/&gt;&lt;x2/&gt;&lt;x3/&gt;(@ref man-vectorized)も参照してください。 たとえば、&lt;x4/&gt;f.(args...)&lt;x5/&gt;は暗黙的に&lt;x6/&gt;ブロードキャスト(f,args.…)&lt;x7/&gt;を呼び出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>See also:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T043138Z" creationid="hsugawa8651" creationdate="20181112T043138Z">
        <seg>See also:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>See the &lt;x3/&gt;&lt;x4/&gt;&lt;x5/&gt;(@ref man-interface-array) for more details
on implementing a custom array type.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154135Z" creationid="hsugawa8651" creationdate="20181109T154135Z">
        <seg>詳細については、&lt;x3/&gt;&lt;x4/&gt;&lt;x5/&gt;(@ref man interface array)を参照してください。 カスタム・アレイ・タイプの実装です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>See the &lt;x3/&gt;&lt;x4/&gt;&lt;x5/&gt;(@ref man-interface-iteration) for more details about defining a custom
iterable type.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T041550Z" creationid="hsugawa8651" creationdate="20181112T041550Z">
        <seg>カスタムを定義する方法の詳細については、&lt;x3/&gt;&lt;x4/&gt;&lt;x5/&gt;(@ref man interface iteration)を参照してください。 iterable型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>See the description below.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T113328Z" creationid="hsugawa8651" creationdate="20181112T113328Z">
        <seg>以下の説明を参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Selecting an appropriate output array</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T164829Z" creationid="hsugawa8651" creationdate="20181118T164829Z">
        <seg>適切な出力配列を選択する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Selecting an appropriate output array for the given set of arguments</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T131027Z" creationid="hsugawa8651" creationdate="20181113T131027Z">
        <seg>指定された引数のセットに対して適切な出力配列を選択する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Selecting an efficient implementation for the given set of arguments</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T131030Z" creationid="hsugawa8651" creationdate="20181113T131030Z">
        <seg>指定された引数のセットに対する効率的な実装の選択</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Sequential iteration is implemented by the &lt;x1/&gt;`iterate`&lt;x2/&gt; function.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T112352Z" creationid="hsugawa8651" creationdate="20181112T112352Z">
        <seg>逐次的反復は、&lt;x1/&gt;'reiterate'&lt;x2/&gt;関数によって実装される。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Set &lt;dir&gt; as the home project/environment.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T174218Z" creationid="hsugawa8651" creationdate="20181118T174218Z">
        <seg>&lt;dir&gt;をホームプロジェクト/環境として設定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Set &lt;x1/&gt; as the home project/environment.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T224611Z" creationid="hsugawa8651" creationdate="20181109T224611Z">
        <seg>&lt;x1/&gt;をホームプロジェクト/環境として設定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Set location of &lt;x1/&gt;julia&lt;x2/&gt; executable</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T224639Z" creationid="hsugawa8651" creationdate="20181109T224639Z">
        <seg>&lt;x1/&gt;ジュリア&lt;x2/&gt;実行可能ファイルの場所を設定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Set the optimization level (default level is 2 if unspecified or 3 if used without a level)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T174546Z" creationid="hsugawa8651" creationdate="20181109T224743Z">
        <seg>デバッグ情報の生成レベルを有効/設定します(デフォルトレベルは、指定されていない場合は1、レベルなしでは2を指定します)。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Set-Like Collections</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T041820Z" creationid="hsugawa8651" creationdate="20181112T041820Z">
        <seg>Set-Like Collections</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Shared libraries and functions are referenced by a tuple of the form &lt;x1/&gt;(:function, "library")&lt;x2/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T161432Z" creationid="hsugawa8651" creationdate="20181114T161432Z">
        <seg>共有ライブラリと関数は、&lt;x1/&gt;(:関数、"ライブラリ")&lt;x2/&gt;という形式のタプルによって参照されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Short, simple function definitions
are common in Julia.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T125230Z" creationid="hsugawa8651" creationdate="20181110T025617Z">
        <seg>こうした短くて簡単な関数定義は、Juliaではよく使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Short-Circuit Evaluation</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T230217Z" creationid="hsugawa8651" creationdate="20181109T230217Z">
        <seg>Short-Circuit Evaluation</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Short-Circuit Evaluation&lt;x1/&gt;: &lt;x2/&gt;&amp;&amp;&lt;x3/&gt;, &lt;x4/&gt;||&lt;x5/&gt; and chained comparisons.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T225726Z" creationid="hsugawa8651" creationdate="20181109T225726Z">
        <seg>短絡評価&lt;x1/&gt;:&lt;x2/&gt;&amp;&amp;&lt;x3/&gt;、&lt;x4/&gt;&lt;x5/&gt;および連鎖比較。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Short-circuit evaluation is quite similar to conditional evaluation.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T230224Z" creationid="hsugawa8651" creationdate="20181109T230224Z">
        <seg>短絡評価は条件付き評価と非常によく似ています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Sign and absolute value functions</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T095905Z" creationid="hsugawa8651" creationdate="20181118T095905Z">
        <seg>符号および絶対値関数</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Signed&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T134438Z" creationid="hsugawa8651" creationdate="20181117T134438Z">
        <seg>Signed&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Signed?</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T110030Z" creationid="hsugawa8651" creationdate="20181112T110030Z">
        <seg>Signed?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Similarly for unary
operators like &lt;x17/&gt;!&lt;x18/&gt; or &lt;x19/&gt;√&lt;x20/&gt;, there is a corresponding &lt;x21/&gt;.√&lt;x22/&gt; that
applies the operator elementwise.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T132515Z" creationid="hsugawa8651" creationdate="20181113T132501Z">
        <seg>単項についても同様 &lt;x17/&gt;!&lt;x18/&gt;や&lt;x19/&gt;√x20/&gt;のような演算子は、対応する&lt;X21/&gt;.√&lt;x22/&gt;となります。 は、演算子要素を適用します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Similarly, for array arguments (&lt;x11/&gt;T[]&lt;x12/&gt; or &lt;x13/&gt;T*&lt;x14/&gt;), the
Julia type should again be &lt;x15/&gt;Ptr{T}&lt;x16/&gt;, not &lt;x17/&gt;Vector{T}&lt;x18/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T151015Z" creationid="hsugawa8651" creationdate="20181117T151015Z">
        <seg>同様に、配列引数(&lt;x11/&gt;T[]&lt;x12/&gt;または&lt;x13/&gt;T*&lt;x14/&gt;)では、次のようになります。 また、Julia型は、再び&lt;x15/&gt;Ptr{T}&lt;x16/&gt;であり、&lt;x17/&gt;ベクトル{T}&lt;x18/&gt;ではない。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Similarly, indexing
by a &lt;x7/&gt;N&lt;x8/&gt;-dimensional boolean array is effectively the same as indexing by the
vector of &lt;x9/&gt;CartesianIndex{N}&lt;x10/&gt;s where its values are &lt;x11/&gt;true&lt;x12/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T155802Z" creationid="hsugawa8651" creationdate="20181109T155802Z">
        <seg>同様にインデックス化 &lt;x7/&gt;N&lt;x8/&gt;-次元ブール配列は、実効的には、以下のように、インデックス化と同じである。 &lt;x9/&gt;CartesianIndex{N}&lt;x10/&gt;sのベクトルであり、その値は&lt;x11/&gt;真&lt;x12/&gt;である。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Similarly, instead of &lt;c4&gt;if !</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T140550Z" creationid="hsugawa8651" creationdate="20181119T140550Z">
        <seg> 同様に、 &lt;c4&gt;if ！ </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Similarly, instead of &lt;x1/&gt;if !</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T124409Z" creationid="hsugawa8651" creationdate="20181118T124409Z">
        <seg>同様に、!ではなく&lt;x1/&gt;の代わりに!</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Similarly, some subtypes may wish to override &lt;x4/&gt;&lt;x5/&gt;&lt;x6/&gt;(@ref Base.Multimedia.redisplay).</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T063328Z" creationid="hsugawa8651" creationdate="20181114T063328Z">
        <seg>同様に、サブタイプによっては、&lt;x4/&gt;&lt;x5/&gt;&lt;x6/&gt;(@ref Base.Multimedia.redisplay)をオーバーライドすることを希望する場合もあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Similarly, such operators are assigned associativity &lt;x5/&gt;:none&lt;x6/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T095706Z" creationid="hsugawa8651" creationdate="20181118T095706Z">
        <seg>同様に、このような演算子には、関連付け&lt;x5/&gt;:なし&lt;x6/&gt;が割り当てられています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Similarly, you can completely override out-of-place broadcasting with a &lt;x1/&gt;copy(::Broadcasted)&lt;x2/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T131708Z" creationid="hsugawa8651" creationdate="20181113T131708Z">
        <seg>同様に、&lt;x1/&gt;コピー(:ブロードキャスト)&lt;x2/&gt;を使用して、場所を指定しないブロードキャストを完全に上書きできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Simple blocks:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T120254Z" creationid="hsugawa8651" creationdate="20181118T120254Z">
        <seg>単純なブロック:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Since
&lt;x9/&gt;gcd&lt;x10/&gt; returns the greatest common divisor of its arguments with sign matching the first argument
(&lt;x11/&gt;den&lt;x12/&gt; here), after this division the new value of &lt;x13/&gt;den&lt;x14/&gt; is guaranteed to be non-negative.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T124126Z" creationid="hsugawa8651" creationdate="20181118T124126Z">
        <seg>以降 &lt;x9/&gt;gcd&lt;x10/&gt;は、最初の引数と一致する符号を持つ引数の最大公約数を返します。 (&lt;x11/&gt;den&lt;x12/&gt;ここで)この除算の後、&lt;x13/&gt;den&lt;x14/&gt;の新しい値は負ではないことが保証されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Since &lt;x5/&gt;Zebra&lt;x6/&gt; does not appear in the project file, the import will fail even though &lt;x7/&gt;Zebra&lt;x8/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T121144Z" creationid="hsugawa8651" creationdate="20181118T121144Z">
        <seg>プロジェクトファイルに&lt;x5/&gt;Zebra&lt;x6/&gt;が表示されないため、&lt;x7/&gt;Zebra&lt;x8/&gt;であってもインポートは失敗します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Since adding dots to many operations and function calls in an expression
can be tedious and lead to code that is difficult to read, the macro
&lt;x1/&gt;&lt;x2/&gt;&lt;x3/&gt;(@ref @&lt;x4/&gt;dot&lt;x5/&gt;) is provided to convert &lt;x6/&gt;every&lt;x7/&gt; function call,
operation, and assignment in an expression into the "dotted" version.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T120207Z" creationid="hsugawa8651" creationdate="20181118T120207Z">
        <seg>式の多くの操作と関数呼び出しにドットを追加することで は退屈で、読むのが難しいコードにつながり、マクロを読み取ることができない &lt;x6/&gt;&lt;x2/&gt;&lt;x3/&gt;(@ref@&lt;x4/&gt;ドット&lt;x5/&gt;)は、&lt;x6/&gt;すべての&lt;x7/&gt;関数呼び出しを変換するために提供されます。 「ドット」バージョンへの式での操作および割り当て。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Since all packages in a package directory environment are, by definition, subdirectories with the expected entry-point files, their &lt;x1/&gt;paths&lt;x2/&gt; map entries always have this form.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T121402Z" creationid="hsugawa8651" creationdate="20181118T121402Z">
        <seg>パッケージディレクトリ環境内のすべてのパッケージは、定義上、期待されるエントリポイントファイルを持つサブディレクトリであるため、それらの&lt;x1/&gt;パス&lt;x2/&gt;マップエントリは常にこの形式を持っています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Since code is represented
by objects that can be created and manipulated from within the language, it is possible for a
program to transform and generate its own code.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T115135Z" creationid="hsugawa8651" creationdate="20181118T115135Z">
        <seg>コードが表現されるため 言語内で作成および操作できるオブジェクトがあります。 独自のコードを変換して生成するプログラムです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Since counting up and
down like the above &lt;x3/&gt;while&lt;x4/&gt; loop does is so common, it can be expressed more concisely with a
&lt;x5/&gt;for&lt;x6/&gt; loop:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T231131Z" creationid="hsugawa8651" creationdate="20181109T231131Z">
        <seg>カウントアップして &lt;x4/&gt;ループは非常に一般的であるので、上記&lt;x3/&gt;のようにダウンすることができる。 &lt;x6/&gt;ループの場合は&lt;x5/&gt;&lt;x6/&gt;:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Since counting up and down like the above &lt;c1&gt;while&lt;/c1&gt; loop does is so common, it can be expressed more concisely with a &lt;c2&gt;for&lt;/c2&gt; loop:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T141513Z" creationid="hsugawa8651" creationdate="20181119T141357Z">
        <seg>上記の&lt;c1&gt;while&lt;/c1&gt;ループのようなカウントアップ・カウントダウンは非常に一般的ですが、&lt;c2&gt;for&lt;/c2&gt;ループなら、より簡潔に表現できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Since expressions are just &lt;x1/&gt;Expr&lt;x2/&gt; objects which can be constructed programmatically and then evaluated,
it is possible to dynamically generate arbitrary code which can then be run using &lt;x3/&gt;`eval`&lt;x4/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T165254Z" creationid="hsugawa8651" creationdate="20181118T165254Z">
        <seg>式は、プログラム的に構築されて評価されることができる、単純な&lt;x1/&gt;Expr&lt;x2/&gt;オブジェクトであるからです。 任意のコードを動的に生成して、&lt;x3/&gt;`eval'&lt;x4/&gt;を使用して実行することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Since function definitions can be entered into interactive sessions, it is easy to compare these
definitions:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T125627Z" creationid="hsugawa8651" creationdate="20181120T125627Z">
        <seg>対話セッションでも関数の定義を入力できるので、簡単に定義の比較ができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Since indexing is
such an important part of an array and often occurs in hot loops, it's important to make both
indexing and indexed assignment as efficient as possible.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T022702Z" creationid="hsugawa8651" creationdate="20181113T022702Z">
        <seg>インデックス作成は このような重要な部分は、多くの場合、ホット・ループで発生するため、両方とも重要です。 インデックス化とインデックス化された割り当ては可能な限り効率的です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Since outer constructor
methods can only create objects by calling other constructor methods, ultimately, some inner constructor
must be called to create an object.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T155801Z" creationid="hsugawa8651" creationdate="20181117T155801Z">
        <seg>外部コンストラクタ メソッドは、他のコンストラクタ・メソッドを呼び出してオブジェクトを作成できるだけで、最終的には内部コンストラクタを作成できます オブジェクトを作成するために呼び出される必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Since the body of the generated function is non-deterministic, its behavior, &lt;x1/&gt;and the behavior of all subsequent code&lt;x2/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T032051Z" creationid="hsugawa8651" creationdate="20181116T032051Z">
        <seg>生成された関数の本体は決定的ではないので、その振る舞いは、&lt;x1/&gt;と、その後のすべてのコード&lt;x2/&gt;の振る舞いとなります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Since the decentralized naming problem is somewhat abstract, it may help to walk through a concrete scenario to understand the issue.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T152846Z" creationid="hsugawa8651" creationdate="20181117T152846Z">
        <seg>分散ネーミング問題は幾分抽象的なので、この問題を理解するためには、具体的なシナリオをウォークスルーすることが有用です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Since the fundamental difficulty may not be immediately
obvious, let us briefly explain it.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T155840Z" creationid="hsugawa8651" creationdate="20181117T155840Z">
        <seg>根本的な困難はすぐにはない わかりやすく説明しましょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Since the method declaration restricts the arguments to being of the
same type, calls like &lt;x2/&gt;Point(1,2.5)&lt;x3/&gt;, with arguments of different types, result in "no method"
errors.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T123952Z" creationid="hsugawa8651" creationdate="20181118T123952Z">
        <seg>メソッド宣言によって引き数が制限されるため 同じタイプで、&lt;x2/&gt;ポイント(1,2.5)&lt;x3/&gt;のような呼び出しがあり、さまざまなタイプの引数がある場合は、「メソッドなし」となります。 エラーです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Since the primary environment is typically the environment of a project you're working on, while environments later in the stack contain additional tools, this is the right tradeoff: it's better to break your dev tools but keep the project working.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T121436Z" creationid="hsugawa8651" creationdate="20181118T121436Z">
        <seg>一般的な環境は、作業中のプロジェクトの環境ですが、その後にスタックの追加ツールが追加されます。これは適切なトレードオフです。開発ツールを中断しても、プロジェクトの機能を維持したほうがよいのです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Since these are fairly small, simple expressions, they could easily be placed onto a single line,
which is where the &lt;x1/&gt;(;)&lt;x2/&gt; chain syntax comes in handy:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T225809Z" creationid="hsugawa8651" creationdate="20181109T225809Z">
        <seg>これらはかなり小さいので、簡単な表現で簡単に1行に配置することができます。 ここでは、&lt;x1/&gt;(;)&lt;x2/&gt;チェイン構文が便利です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Since these are fairly small, simple expressions, they could easily be placed onto a single line, which is where the &lt;c0&gt;(;)&lt;/c0&gt; chain syntax comes in handy:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T133657Z" creationid="hsugawa8651" creationdate="20181119T133657Z">
        <seg>この例では、式がかなり小さくて単純なので、簡単に1行にまとめることができます。こういう場合に便利なのが、セミコロン&lt;c0&gt;(;)&lt;/c0&gt;連鎖構文です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Since these two &lt;x31/&gt;Priv&lt;x32/&gt; packages are different but both required for &lt;x33/&gt;App&lt;x34/&gt; to continue working correctly, the expression &lt;x35/&gt;import Priv&lt;x36/&gt; must refer to different &lt;x37/&gt;Priv&lt;x38/&gt; packages depending on whether it occurs in &lt;x39/&gt;App&lt;x40/&gt;'s code or in &lt;x41/&gt;Pub&lt;x42/&gt;'s code.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T152906Z" creationid="hsugawa8651" creationdate="20181117T152906Z">
        <seg>これらの2つの&lt;x31/&gt;Priv&lt;x32/&gt;パッケージは異なりますが、&lt;x33/&gt;App&lt;x34/&gt;は正常に動作するためには必要です。&lt;x35/&gt;import Priv&lt;x36/&gt;は、&lt;x41/&gt;の&lt;x40/&gt;のコードで発生するか、&lt;x41/&gt;Pub&lt;x42/&gt;Pub&lt;x42/&gt;のコードで発生するかによって、&lt;x33/&gt;Priv&lt;x38/&gt;の異なるを参照しなければなりません。x39。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>SizeUnknown()&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T112328Z" creationid="hsugawa8651" creationdate="20181112T112328Z">
        <seg>SizeUnknown()&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Smallest value</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T225124Z" creationid="hsugawa8651" creationdate="20181109T225124Z">
        <seg>最小値</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>So &lt;x1/&gt;-2x&lt;x2/&gt; is parsed as &lt;x3/&gt;(-2) * x&lt;x4/&gt; and &lt;x5/&gt;√2x&lt;x6/&gt; is parsed as &lt;x7/&gt;(√2) * x&lt;x8/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T111801Z" creationid="hsugawa8651" creationdate="20181112T111801Z">
        <seg>&lt;x1/&gt;-2x&lt;x2/&gt;は&lt;x3/&gt;(-2)*x&lt;x4/&gt;と解析され、&lt;x2/&gt;は&lt;x7/&gt;(√2)×x&lt;x8/&gt;と解析され、&lt;x7/&gt;となる。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>So &lt;x1/&gt;2^3x&lt;x2/&gt; is parsed as &lt;x3/&gt;2^(3x)&lt;x4/&gt;, and &lt;x5/&gt;2x^3&lt;x6/&gt; is parsed as &lt;x7/&gt;2*(x^3)&lt;x8/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T040309Z" creationid="hsugawa8651" creationdate="20181120T000903Z">
        <seg>&lt;x1/&gt;2^3x&lt;x2/&gt;  は &lt;x3/&gt;2^(3x)&lt;x4/&gt;,として 解析され、&lt;x5/&gt;2x^3&lt;x6/&gt; は &lt;x7/&gt;2*(x^3)&lt;x8/&gt;として解析されます。:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>So, the method body that will be used here doesn't include a loop at all - just indexing into
the two tuples, multiplication and addition/subtraction.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T032334Z" creationid="hsugawa8651" creationdate="20181116T032334Z">
        <seg>このため、ここで使用されるメソッド本体はループを一切含まず、単にインデックス作成するだけです。 2つのタプル、乗算と加算、減算。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>So, we could have defined the &lt;c3&gt;test&lt;/c3&gt; function above as</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T134457Z" creationid="hsugawa8651" creationdate="20181119T134457Z">
        <seg>そのため、上記の&lt;c3&gt;test&lt;/c3&gt;関数は、このようにも定義できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>So, we could have defined the &lt;x6/&gt;test&lt;x7/&gt; function above as</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T225921Z" creationid="hsugawa8651" creationdate="20181109T225921Z">
        <seg>そこで、上記の&lt;x6/&gt;test&lt;x7/&gt;関数を定義することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Some C libraries execute their callbacks from a different thread, and since Julia isn't thread-safe
you'll need to take some extra precautions.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T152623Z" creationid="hsugawa8651" creationdate="20181117T152623Z">
        <seg>Cライブラリの中には、別のスレッドからコールバックを実行するものもあれば、スレッドセーフではないものもあります。 さらに注意する必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Some Examples of C Wrappers</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T151907Z" creationid="hsugawa8651" creationdate="20181117T151907Z">
        <seg>Cラッパーのいくつかの例</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Some examples:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T135007Z" creationid="hsugawa8651" creationdate="20181117T135007Z">
        <seg>いくつかの例を次に示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Some functions have both modifying (e.g., &lt;x3/&gt;sort!&lt;x4/&gt;) and non-modifying (&lt;x5/&gt;sort&lt;x6/&gt;) versions.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181110T041726Z" creationid="hsugawa8651" creationdate="20181110T041726Z">
        <seg>関数の中には、修正(例えば&lt;x3/&gt;ソート!&lt;x4/&gt;)や修正されない(&lt;x5/&gt;ソート&lt;x6/&gt;)バージョンの両方があるものがあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Some general notes:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T150044Z" creationid="hsugawa8651" creationdate="20181117T150044Z">
        <seg>一般的な注意事項は次のとおりです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Some operations that should not be attempted include:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T032222Z" creationid="hsugawa8651" creationdate="20181116T032222Z">
        <seg>試行されるべきでない操作には、次のものがあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Sometimes extra parentheses around the argument to &lt;x1/&gt;:&lt;x2/&gt; are needed to avoid ambiguity in parsing.:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T115324Z" creationid="hsugawa8651" creationdate="20181118T115324Z">
        <seg>構文解析のあいまいさを避けるために、&lt;x1/&gt;:&lt;x2/&gt;への引数を囲む余分な括弧が必要になる場合があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Sometimes invariants must be enforced, either by checking arguments
or by transforming them.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T155644Z" creationid="hsugawa8651" creationdate="20181117T155644Z">
        <seg>時には、引数をチェックすることによって、変数を強制する必要があります。 変えることです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Sometimes it is convenient to have a single expression which evaluates several subexpressions
in order, returning the value of the last subexpression as its value.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T225754Z" creationid="hsugawa8651" creationdate="20181109T225754Z">
        <seg>いくつかのサブ式を評価する単一の表現を持つことが便利な場合もあります。 は、最後のサブ式の値をその値として返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Sometimes it is convenient to have a single expression which evaluates several subexpressions in order, returning the value of the last subexpression as its value.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T133459Z" creationid="hsugawa8651" creationdate="20181119T133459Z">
        <seg>何個かの部分式を順番に評価していき、最後の式の値を戻り値とするような単一の式を考えると、便利なことが、時々あります。 </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Sometimes it is necessary to get around this (for example, if you are implementing the above REPL).</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T021236Z" creationid="hsugawa8651" creationdate="20181120T021236Z">
        <seg>場合によってはこれを回避する必要があります（たとえば、上記のREPLを実装している場合など）。 </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Sometimes, it's just convenient to be able to construct objects
with fewer or different types of parameters than they have fields.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T155648Z" creationid="hsugawa8651" creationdate="20181117T155648Z">
        <seg>場合によっては、オブジェクトを構築することができます。 フィールドには、フィールドとは異なるタイプのパラメータが含まれています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Sorting Algorithms</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T063958Z" creationid="hsugawa8651" creationdate="20181114T063958Z">
        <seg>Sorting Algorithms</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Sorting Functions</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T150319Z" creationid="hsugawa8651" creationdate="20181117T150319Z">
        <seg>ソート関数</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Sorting and Related Functions</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T150304Z" creationid="hsugawa8651" creationdate="20181117T150304Z">
        <seg>ソートと関連機能</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>SparseVecStyle(::Val{0}) = SparseVecStyle()
SparseVecStyle(::Val{1}) = SparseVecStyle()
SparseVecStyle(::Val{2}) = SparseMatStyle()
SparseVecStyle(::Val{N}) where N = Broadcast.DefaultArrayStyle{N}()</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T131900Z" creationid="hsugawa8651" creationdate="20181113T131900Z">
        <seg>SparseVecStyle(::Val{0}) = SparseVecStyle()
SparseVecStyle(::Val{1}) = SparseVecStyle()
SparseVecStyle(::Val{2}) = SparseMatStyle()
SparseVecStyle(::Val{N}) where N = Broadcast.DefaultArrayStyle{N}()</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Special Reference Syntax for ccall (deprecated):</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T151838Z" creationid="hsugawa8651" creationdate="20181117T151838Z">
        <seg>ccall(廃止された)のための特別なリファレンス構文:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Special Types</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181110T041912Z" creationid="hsugawa8651" creationdate="20181110T041912Z">
        <seg>Special Types</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Special floating-point values</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T033923Z" creationid="hsugawa8651" creationdate="20181112T110751Z">
        <seg>特殊な浮動小数点値</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Special functions</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T100132Z" creationid="hsugawa8651" creationdate="20181118T100132Z">
        <seg>特殊な機能</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Specifically &lt;x10/&gt;:X =&gt; uuid&lt;x11/&gt; goes in &lt;x12/&gt;roots&lt;x13/&gt; for each such &lt;x14/&gt;X&lt;x15/&gt; where &lt;x16/&gt;uuid&lt;x17/&gt; is defined as:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T121307Z" creationid="hsugawa8651" creationdate="20181118T121307Z">
        <seg>特に&lt;x12/&gt;X=&gt;uuid&lt;x11/&gt;は、&lt;x12/&gt;x15/&gt;の各&lt;x14/&gt;のルート&lt;x13/&gt;であり、&lt;x16/&gt;uuid&lt;x17/&gt;は次のように定義されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Specifically:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T151306Z" creationid="hsugawa8651" creationdate="20181117T151306Z">
        <seg>具体的には、次のようになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Splatting interpolation</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T115429Z" creationid="hsugawa8651" creationdate="20181118T115429Z">
        <seg>スプラッティング補間</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>SquaresVector&lt;x1/&gt;, we are able to define &lt;x2/&gt;`setindex!`&lt;x3/&gt;,
and so we can mutate the array:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T083229Z" creationid="hsugawa8651" creationdate="20181113T083229Z">
        <seg>SquaresVector&lt;x1/&gt;では、&lt;x2/&gt;'setindex!&lt;x3/&gt;を定義することができます。 配列を突然変異させることができます</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Stack Traces&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T234913Z" creationid="hsugawa8651" creationdate="20181119T234913Z">
        <seg>スタック・トレース&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>StackTraces</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T064236Z" creationid="hsugawa8651" creationdate="20181114T064236Z">
        <seg>StackTraces</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Stacked environments allow for &lt;x1/&gt;augmentation&lt;x2/&gt; of the primary environment with additional tools.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T120941Z" creationid="hsugawa8651" creationdate="20181118T120941Z">
        <seg>スタック環境では、追加のツールを使用して、プライマリ環境の&lt;x1/&gt;拡張&lt;x2/&gt;を実現できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Stacktrace:
 [1] Point{Float64}(::Float64) at ./sysimg.jl:77

julia&gt; Point{Float64}(1.0,2.0,3.0)
ERROR: MethodError: no method matching Point{Float64}(::Float64, ::Float64, ::Float64)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T095136Z" creationid="hsugawa8651" creationdate="20181120T095136Z">
        <seg>Stacktrace:
 [1] Point{Float64}(::Float64) at ./sysimg.jl:77

julia&gt; Point{Float64}(1.0,2.0,3.0)
ERROR: MethodError: no method matching Point{Float64}(::Float64, ::Float64, ::Float64)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Stacktrace:
[...]</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T124613Z" creationid="hsugawa8651" creationdate="20181118T124613Z">
        <seg>Stacktrace:
[...]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Stacktrace:
[...]

julia&gt; sqrt(-1 + 0im)
0.0 + 1.0im</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T123430Z" creationid="hsugawa8651" creationdate="20181118T123430Z">
        <seg>Stacktrace:
[...]

julia&gt; sqrt(-1 + 0im)
0.0 + 1.0im</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Standard Julia Alias</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T150851Z" creationid="hsugawa8651" creationdate="20181117T150851Z">
        <seg>標準ジュリアエイリアス</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Standard Numeric Types</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T044707Z" creationid="hsugawa8651" creationdate="20181112T044707Z">
        <seg>Standard Numeric Types</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Standard comparison operations are defined for all the primitive numeric types:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T064039Z" creationid="hsugawa8651" creationdate="20181113T132654Z">
        <seg>標準的な比較演算子は、全ての数値プリミティブ型に定義されています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Standard functions to manipulate complex values are provided:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T123245Z" creationid="hsugawa8651" creationdate="20181118T123245Z">
        <seg>複雑な値を操作するための標準関数が用意されています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Start some other operations that use &lt;x1/&gt;f(x)&lt;x2/&gt;:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T022617Z" creationid="hsugawa8651" creationdate="20181120T022617Z">
        <seg>他のf(x)を使う操作を開始します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Start up with the given system image file</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T224637Z" creationid="hsugawa8651" creationdate="20181109T224637Z">
        <seg>指定されたシステムイメージファイルで起動する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Strided arrays
must define a &lt;x3/&gt;`strides(A)`&lt;x4/&gt; method that returns a tuple of "strides" for each dimension; a
provided &lt;x5/&gt;`stride(A,k)`&lt;x6/&gt; method accesses the &lt;x7/&gt;k&lt;x8/&gt;th element within this tuple.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T160458Z" creationid="hsugawa8651" creationdate="20181109T160458Z">
        <seg>ストローブされた配列 は、各次元のタプルを返す&lt;x3/&gt;`end(A)'&lt;x4/&gt;メソッドを定義する必要があります。 &lt;x5/&gt;`stride(A,k)'は、このタプル内の&lt;x7/&gt;k&lt;x8/&gt;番目のエレメントにアクセスします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>String Basics</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T094206Z" creationid="hsugawa8651" creationdate="20181120T094206Z">
        <seg>文字列の基本</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>String literals are delimited by double quotes or triple double quotes:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T080756Z" creationid="hsugawa8651" creationdate="20181120T080756Z">
        <seg>文字列リテラルはダブルクオーテーションまたは3つのダブルクオーテーションで区切られます。:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>String literals are encoded using
the UTF-8 encoding.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T081447Z" creationid="hsugawa8651" creationdate="20181120T081447Z">
        <seg>文字列リテラルはUTF-8エンコードを使用してエンコードされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Strings are finite sequences of characters.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T075230Z" creationid="hsugawa8651" creationdate="20181120T075230Z">
        <seg>文字列は有限の記号の連続を意味します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Strings in Julia can contain invalid UTF-8 code unit sequences.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T020620Z" creationid="hsugawa8651" creationdate="20181116T020620Z">
        <seg>Strings in Julia can contain invalid UTF-8 code unit sequences.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Strings&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T234453Z" creationid="hsugawa8651" creationdate="20181119T234453Z">
        <seg>文字列&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Struct Type correspondences</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T151131Z" creationid="hsugawa8651" creationdate="20181117T151131Z">
        <seg>構造型の対応付け</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Style Guide</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T094637Z" creationid="hsugawa8651" creationdate="20181120T094637Z">
        <seg>スタイル・ガイド</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Style Guide&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T234927Z" creationid="hsugawa8651" creationdate="20181119T234927Z">
        <seg>スタイル・ガイド&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>SubArray&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T041653Z" creationid="hsugawa8651" creationdate="20181112T041653Z">
        <seg>SubArray&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>SubArray&lt;x1/&gt; is a specialization of &lt;x2/&gt;AbstractArray&lt;x3/&gt; that performs indexing by
sharing memory with the original array rather than by copying it.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T160427Z" creationid="hsugawa8651" creationdate="20181109T160427Z">
        <seg>サブアレイ&lt;x1/&gt;は、インデックス作成を実行する&lt;x2/&gt;AbstractArray&lt;x3/&gt;の特殊化です。 コピーするのではなく、オリジナルのアレイとメモリを共有することです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>SubArray&lt;x1/&gt; is a specialization of &lt;x2/&gt;AbstractArray&lt;x3/&gt; that performs indexing by
sharing memory with the original array rather than by copying it. A &lt;x4/&gt;SubArray&lt;x5/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T135339Z" creationid="hsugawa8651" creationdate="20181117T135339Z">
        <seg>サブアレイ&lt;x1/&gt;は、インデックス作成を実行する&lt;x2/&gt;AbstractArray&lt;x3/&gt;の特殊化です。 コピーするよりも、元のアレイとのメモリを共有することです。&lt;x4/&gt;サブアレイ&lt;x5/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Subsequent characters may also include !</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T033339Z" creationid="hsugawa8651" creationdate="20181119T033255Z">
        <seg>二文字目以降は、</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Subsequently, however, an unrelated package also named &lt;x13/&gt;Priv&lt;x14/&gt; has been published and become popular.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T152854Z" creationid="hsugawa8651" creationdate="20181117T152854Z">
        <seg>その後、&lt;x13/&gt;Priv&lt;x14/&gt;という名前の無関係なパッケージが発行され、一般的になりました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Such behaviour can be avoided by using &lt;x7/&gt;ISO_C_BINDING&lt;x8/&gt; and
including &lt;x9/&gt;bind(c)&lt;x10/&gt; in the definition of the subroutine, which is strongly recommended for
interoperable code.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T151121Z" creationid="hsugawa8651" creationdate="20181117T151121Z">
        <seg>このような動作は、&lt;x7/&gt;ISO_C_BINDING&lt;x8/&gt;を使用して回避することができます。 サブルーチンの定義には&lt;x9/&gt;bind(c)&lt;x10/&gt;を含めることが強く推奨されます。このサブルーチンは、以下のように強く推奨されます。 相互運用可能なコードです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Such definitions correspond to methods whose type signatures are &lt;x1/&gt;UnionAll&lt;x2/&gt; types
(see &lt;x3/&gt;UnionAll Types&lt;x4/&gt;).</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T020027Z" creationid="hsugawa8651" creationdate="20181120T020027Z">
        <seg>そのような定義はシグネチャがUnionAll型であるメソッドに対応します(全合併型 参照)。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Such functions behave just like they would in traditional dynamically typed languages.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T012202Z" creationid="hsugawa8651" creationdate="20181120T012202Z">
        <seg>そのような関数は、従来の動的型付け言語と同じように動作します。 </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Suppose the contents of &lt;x18/&gt;DEPOT_PATH&lt;x19/&gt; is &lt;x20/&gt;["/home/me/.julia", "/usr/local/julia"]&lt;x21/&gt;; then Julia will look at the following paths to see if they exist:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T121223Z" creationid="hsugawa8651" creationdate="20181118T121223Z">
        <seg>&lt;x18/&gt;DEPOT_PATH&lt;x19/&gt;の内容が&lt;x20/&gt;["/home/me/.jula","/usr/local/julia"]であると仮定します。次に、Juliaは次のパスを参照して、それらが存在するかどうかを調べます。次のパスを参照してください:X21</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Suppose we want to stop execution immediately if the square root of a negative number is taken.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T124713Z" creationid="hsugawa8651" creationdate="20181118T124713Z">
        <seg>負の数の平方根が取られた場合には、すぐに実行を停止したいと考えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Suppose we wanted to make the constructor call &lt;x1/&gt;Point(1,2.5)&lt;x2/&gt; work by "promoting" the integer
value &lt;x3/&gt;1&lt;x4/&gt; to the floating-point value &lt;x5/&gt;1.0&lt;x6/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T123956Z" creationid="hsugawa8651" creationdate="20181118T123956Z">
        <seg>コンストラクタの呼び出し&lt;x1/&gt;Point(1,2.5)&lt;x2/&gt;work by"promote"を実行して、この整数を指定したいとします。 浮動小数点値&lt;x1/&gt;を浮動小数点値&lt;x5/&gt;1.0&lt;x6/&gt;に値&lt;x6/&gt;&lt;x6/&gt;で指定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Suppose you call a function like this:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181110T024957Z" creationid="hsugawa8651" creationdate="20181110T024957Z">
        <seg>次のような関数を呼び出すとします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Suppose you're developing an application called &lt;x1/&gt;App&lt;x2/&gt;, which uses two packages: &lt;x3/&gt;Pub&lt;x4/&gt; and  &lt;x5/&gt;Priv&lt;x6/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T152848Z" creationid="hsugawa8651" creationdate="20181117T152848Z">
        <seg>&lt;x1/&gt;App&lt;x2/&gt;というアプリケーションを開発していると仮定します。&lt;x3/&gt;Pub&lt;x4/&gt;と&lt;x5/&gt;Priv&lt;x6/&gt;の2つのパッケージを使用しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Switch</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T120224Z" creationid="hsugawa8651" creationdate="20181118T120224Z">
        <seg>Switch</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Symbols</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T115302Z" creationid="hsugawa8651" creationdate="20181118T115302Z">
        <seg>Symbols</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Synchronization Primitives</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T044704Z" creationid="hsugawa8651" creationdate="20181112T044704Z">
        <seg>Synchronization Primitives</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Syntax</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T164952Z" creationid="hsugawa8651" creationdate="20181114T030853Z">
        <seg>構文</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Syntax / Keyword</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T150615Z" creationid="hsugawa8651" creationdate="20181117T150615Z">
        <seg>構文/キーワード</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Syntax Conflicts</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T040641Z" creationid="hsugawa8651" creationdate="20181118T164546Z">
        <seg>構文の競合</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>System Independent:&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T150843Z" creationid="hsugawa8651" creationdate="20181117T150843Z">
        <seg>システムに依存しない:&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>System-dependent:&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T150959Z" creationid="hsugawa8651" creationdate="20181117T150959Z">
        <seg>システム依存:&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>T (*)(...)&lt;x1/&gt; (e.g. a pointer to a function)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T151559Z" creationid="hsugawa8651" creationdate="20181117T151559Z">
        <seg>T(*)(...)&lt;x1/&gt;(例:関数へのポインタ)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>T(Base.to_shape(inds))&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T094513Z" creationid="hsugawa8651" creationdate="20181118T094513Z">
        <seg>T(Base.to_shape(inds))&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>T*&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T151547Z" creationid="hsugawa8651" creationdate="20181117T151547Z">
        <seg>T*&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>T...&lt;x1/&gt; (where &lt;x2/&gt;T&lt;x3/&gt; is one of the above types, variadic functions of different argument types are not supported)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T150946Z" creationid="hsugawa8651" creationdate="20181117T150946Z">
        <seg>T.…&lt;x1/&gt;(ここで、&lt;x2/&gt;T&lt;x3/&gt;は、異なる引数タイプの変数はサポートされていません。)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>T...&lt;x1/&gt;, where &lt;x2/&gt;T&lt;x3/&gt; is the Julia type</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T151748Z" creationid="hsugawa8651" creationdate="20181117T151748Z">
        <seg>T.…&lt;x1/&gt;は、&lt;x2/&gt;T&lt;x3/&gt;はジュリア型である。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>T&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T031120Z" creationid="hsugawa8651" creationdate="20181114T031120Z">
        <seg>T&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>T&lt;x1/&gt; is a primitive bits type and the tuple length is in the set {2-6,8-10,16}.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T063648Z" creationid="hsugawa8651" creationdate="20181114T063648Z">
        <seg>T&lt;x1/&gt;はプリミティブビット型であり、タプル長はセット{2-6,8-10,16}にあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>T&lt;x1/&gt; is not known statically.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T151245Z" creationid="hsugawa8651" creationdate="20181117T151245Z">
        <seg>T&lt;x1/&gt;は静的に認識されません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>T&lt;x1/&gt;, where &lt;x2/&gt;T&lt;x3/&gt; is a Julia Leaf Type</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T151805Z" creationid="hsugawa8651" creationdate="20181117T151805Z">
        <seg>T&lt;x1/&gt;。ここで&lt;x2/&gt;T&lt;x3/&gt;はJulia Leaf Typeである。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>T&lt;x1/&gt;, where &lt;x2/&gt;T&lt;x3/&gt; is a Julia leaf type</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T151519Z" creationid="hsugawa8651" creationdate="20181117T151519Z">
        <seg>T&lt;x1/&gt;は、&lt;x2/&gt;T&lt;x3/&gt;はJulia leaf型である。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>T&lt;x1/&gt;, where &lt;x2/&gt;T&lt;x3/&gt; is an equivalent Julia Bits Type (per the table above)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T151510Z" creationid="hsugawa8651" creationdate="20181117T151510Z">
        <seg>T&lt;x1/&gt;は、&lt;x2/&gt;T&lt;x3/&gt;であり、ここで、&lt;x2/&gt;は、等価なジュリア・ビット型(上記表に基づく)である。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>T&lt;x1/&gt;, where &lt;x2/&gt;T&lt;x3/&gt; is one of the primitive types: &lt;x4/&gt;char&lt;x5/&gt;, &lt;x6/&gt;int&lt;x7/&gt;, &lt;x8/&gt;long&lt;x9/&gt;, &lt;x10/&gt;short&lt;x11/&gt;, &lt;x12/&gt;float&lt;x13/&gt;, &lt;x14/&gt;double&lt;x15/&gt;,
&lt;x16/&gt;complex&lt;x17/&gt;, &lt;x18/&gt;enum&lt;x19/&gt; or any of their &lt;x20/&gt;typedef&lt;x21/&gt; equivalents</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T151508Z" creationid="hsugawa8651" creationdate="20181117T151508Z">
        <seg>T&lt;x1/&gt;ここで&lt;x2/&gt;T&lt;x3/&gt;はプリミティブ型の一つであり、&lt;x4/&gt;char&lt;x5/&gt;、&lt;x6/&gt;int&lt;x7/&gt;、&lt;x8/&gt;、&lt;x9/&gt;、&lt;x12/&gt;、&lt;x12/&gt;、&lt;x12/&gt;、x12/&gt;、&lt;x14/&gt;、x15/&gt;、x15/&gt;、x15/&gt;、x15/&gt;、x15/&gt;、x15/&gt;、x15/&gt;、x15/&gt;である。 &lt;x16/&gt;コンプレックス&lt;x17/&gt;、&lt;x18/&gt;enum&lt;x19/&gt;、またはそれらの&lt;x20/&gt;typedef&lt;X21/&gt;等価物のいずれか</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Taking any locks: C code you call out to may use locks internally, (for example, it is not problematic
to call &lt;x1/&gt;malloc&lt;x2/&gt;, even though most implementations require locks internally) but don't attempt
to hold or acquire any while executing Julia code.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T032233Z" creationid="hsugawa8651" creationdate="20181116T032233Z">
        <seg>ロックを取る:呼び出し先のCコードは、内部的にロックを使用することがあります(たとえば、問題が発生しないようにします)。 &lt;x1/&gt;malloc&lt;x2/&gt;を呼び出すためには、ほとんどの実装は内部的にロックを必要としますが、実行しないでください。 は、ジュリア・コードの実行中に保持または取得されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Tasks</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T044738Z" creationid="hsugawa8651" creationdate="20181112T044738Z">
        <seg>Tasks</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Technically, the fusion stops as soon as
a "non-dot" function call is encountered; for example, in &lt;x2/&gt;sin.(sort(cos.(X)))&lt;x3/&gt; the &lt;x4/&gt;sin&lt;x5/&gt; and &lt;x6/&gt;cos&lt;x7/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T120143Z" creationid="hsugawa8651" creationdate="20181118T120143Z">
        <seg>技術的には、融合はすぐに停止する。 "非ドット"関数呼び出しが発生します。たとえば、&lt;x2/&gt;sin(sort(cos.(X)))&lt;x3/&gt;sin&lt;x4/&gt;&lt;x6/&gt;cos&lt;x7/&gt;と&lt;x6/&gt;cos&lt;x7/&gt;cos&lt;x7/&gt;となります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Text I/O</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T043213Z" creationid="hsugawa8651" creationdate="20181112T043213Z">
        <seg>Text I/O</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>That allows the user to control
the size.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T225434Z" creationid="hsugawa8651" creationdate="20181109T225434Z">
        <seg>これによってユーザは サイズです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>That allows the user to control the size.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T185354Z" creationid="hsugawa8651" creationdate="20181118T185354Z">
        <seg>これによってユーザは サイズを制御することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>That is, &lt;c8&gt;eps(x)&lt;/c8&gt; yields a value of the same type as &lt;c9&gt;x&lt;/c9&gt; such that &lt;c10&gt;x + eps(x)&lt;/c10&gt; is the next representable floating-point value larger than &lt;c11&gt;x&lt;/c11&gt;:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T191145Z" creationid="hsugawa8651" creationdate="20181118T191145Z">
        <seg>すなわち、&lt;c8&gt;eps(x)&lt;/c8&gt;は、&lt;c9&gt;x&lt;/c9&gt;と同じタイプの値を生成し、それによって &lt;c10&gt;x + eps(x)&lt;/c10&gt;は、 &lt;c11&gt;x&lt;/c11&gt;より大きい次の表現可能浮動小数点値です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>That is, &lt;x11/&gt;eps(x)&lt;x12/&gt; yields a value of the same type as &lt;x13/&gt;x&lt;x14/&gt; such that
&lt;x15/&gt;x + eps(x)&lt;x16/&gt; is the next representable floating-point value larger than &lt;x17/&gt;x&lt;x18/&gt;:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T034601Z" creationid="hsugawa8651" creationdate="20181112T111202Z">
        <seg>つまり、 &lt;x11/&gt;eps(x)&lt;x12/&gt; は &lt;x13/&gt;x&lt;x14/&gt; と同様の型の値を生成し、&lt;x15/&gt;x + eps(x)&lt;x16/&gt; は &lt;x17/&gt;x&lt;x18/&gt; よりも 大きい次の浮動小数点値を生成します。:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>That is, if &lt;x1/&gt;a&lt;x2/&gt; contained
a reference to &lt;x3/&gt;b&lt;x4/&gt; and both &lt;x5/&gt;a&lt;x6/&gt; and &lt;x7/&gt;b&lt;x8/&gt; are due for garbage collection, there is no guarantee
that &lt;x9/&gt;b&lt;x10/&gt; would be finalized after &lt;x11/&gt;a&lt;x12/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T152252Z" creationid="hsugawa8651" creationdate="20181117T152252Z">
        <seg>すなわち、&lt;x1/&gt;a&lt;x2/&gt;が含まれる場合 &lt;x3/&gt;b&lt;x4/&gt;への参照と、&lt;x5/&gt;a&lt;x6/&gt;と&lt;x7/&gt;b&lt;x8/&gt;は、ガーベッジ・コレクションのためのものであり、保証するものではありません。 &lt;x9/&gt;b&lt;x10/&gt;は、&lt;x11/&gt;a&lt;x12/&gt;の後に最終的に確定されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>That means that the values and types of local variables are not available at code generation
time --- the code-generation code can only see the types of arguments.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T032413Z" creationid="hsugawa8651" creationdate="20181116T032413Z">
        <seg>つまり、ローカル変数の値と型は、コード生成では使用できないということです。 time--コード生成コードは、引数の種類だけを見ることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>That supertype and those three
methods are all it takes for &lt;x7/&gt;SquaresVector&lt;x8/&gt; to be an iterable, indexable, and completely functional
array:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T083211Z" creationid="hsugawa8651" creationdate="20181113T083211Z">
        <seg>そのスーパータイプと3は メソッドは、&lt;x7/&gt;SquaresVector&lt;x8/&gt;を実行するために必要とされるものであり、これは、実行可能な、インデックス可能な、完全に機能するものです。 配列:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>That's all there is to stacked environments.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T121425Z" creationid="hsugawa8651" creationdate="20181118T121425Z">
        <seg>環境を積み重ねることができるのです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The
Julia programming language fills this role: it is a flexible dynamic
language, appropriate for scientific and numerical computing, with
performance comparable to traditional statically-typed languages.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T081452Z" creationid="hsugawa8651" creationdate="20181118T081452Z">
        <seg> Juliaはこのような目的のために開発されています。つまり、Juliaは柔軟な動的言語であると同時に、古くからの静的型付け言語と同等の性能を実現することで科学計算や数値計算に適してたものになっています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The
name of the script itself is passed in as the global &lt;x7/&gt;PROGRAM_FILE&lt;x8/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T224334Z" creationid="hsugawa8651" creationdate="20181109T224334Z">
        <seg>の スクリプト自体の名前は、グローバルな&lt;x7/&gt;PROGRAM_FILE&lt;x8/&gt;として渡されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The
resulting expression contains &lt;x5/&gt;only&lt;x6/&gt; the second &lt;x7/&gt;println&lt;x8/&gt;:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T015342Z" creationid="hsugawa8651" creationdate="20181116T015342Z">
        <seg>The
resulting expression contains &lt;x5/&gt;only&lt;x6/&gt; the second &lt;x7/&gt;println&lt;x8/&gt;:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The 32-bit floating-point literal expression &lt;x1/&gt;1.5f22&lt;x2/&gt; could be interpreted as the numeric literal
&lt;x3/&gt;1.5&lt;x4/&gt; multiplied by the variable &lt;x5/&gt;f22&lt;x6/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T111934Z" creationid="hsugawa8651" creationdate="20181112T111934Z">
        <seg>32ビット浮動小数点リテラル式&lt;x1/&gt;1f22&lt;x2/&gt;は、数値リテラルとして解釈することができます。 &lt;x3/&gt;1.5&lt;x4/&gt;は、変数&lt;x5/&gt;F22&lt;x6/&gt;で乗算されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;a6&gt;&lt;c7&gt;eps&lt;/c7&gt;&lt;/a6&gt; function can also take a floating-point value as an argument, and gives the absolute difference between that value and the next representable floating point value.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T191045Z" creationid="hsugawa8651" creationdate="20181118T191045Z">
        <seg>&lt;a6&gt;&lt;c7&gt;eps&lt;/c7&gt;&lt;/a6&gt;関数は、浮動小数点値を 引数は、その値と次の表現可能な値との間に絶対差を与えます。 浮動小数点値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;c0&gt;--&lt;/c0&gt; delimiter can be used to separate command-line arguments intended for the script file from arguments intended for Julia:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T181836Z" creationid="hsugawa8651" creationdate="20181118T173643Z">
        <seg>&lt;c0&gt;--&lt;/c0&gt;デリミタは、July:を対象とした引数から、スクリプトファイルに対して指定されたコマンドライン引数を区切るために使用できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;c0&gt;&lt;s1&gt;--&lt;/s1&gt;&lt;/c0&gt; delimiter can be used to separate command-line args to the scriptfile from args to Julia:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T175501Z" creationid="hsugawa8651" creationdate="20181118T175501Z">
        <seg>&lt;c0&gt;&lt;s1&gt;--&lt;/s1&gt;&lt;/c0&gt;デリミタは、July:を対象とした引数から、スクリプトファイルに対して指定されたコマンドライン引数を区切るために使用できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;c0&gt;continue&lt;/c0&gt; keyword accomplishes this:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T142454Z" creationid="hsugawa8651" creationdate="20181119T142454Z">
        <seg>&lt;c0&gt;continue&lt;/c0&gt;キーワードは、これを実現します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;c0&gt;elseif&lt;/c0&gt; and &lt;c1&gt;else&lt;/c1&gt; blocks are optional, and as many &lt;c2&gt;elseif&lt;/c2&gt; blocks as desired can be used.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T134204Z" creationid="hsugawa8651" creationdate="20181119T134127Z">
        <seg>この、&lt;c0&gt;elseif&lt;/c0&gt; および &lt;c1&gt;else&lt;/c1&gt;ブロックは省略可能で、&lt;c2&gt;elseif&lt;/c2&gt;ブロックは、書いた数だけ使うことができます。
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;c0&gt;for&lt;/c0&gt; loop makes common repeated evaluation idioms easier to write.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T141414Z" creationid="hsugawa8651" creationdate="20181119T141341Z">
        <seg>&lt;c0&gt;for&lt;/c0&gt;ループは、よくある繰り返し評価を、書きやすい慣用表現にしたものです。 </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;c0&gt;while&lt;/c0&gt; loop evaluates the condition expression (&lt;c1&gt;i &lt;= 5&lt;/c1&gt; in this case), and as long it remains &lt;c2&gt;true&lt;/c2&gt;, keeps also evaluating the body of the &lt;c3&gt;while&lt;/c3&gt; loop.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T141226Z" creationid="hsugawa8651" creationdate="20181119T141226Z">
        <seg>&lt;c0&gt;while&lt;/c0&gt; ループは、条件式 （この場合は&lt;c1&gt;i &lt;= 5&lt;/c1&gt;）を評価し、その式が&lt;c2&gt;真&lt;/c2&gt;である間、&lt;c3&gt;while&lt;/c3&gt;ループ本体の評価を続けます。 
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;c14&gt;&lt;s15&gt;ans&lt;/s15&gt;&lt;/c14&gt; variable is only bound in interactive
sessions, not when Julia code is run in other ways.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T084210Z" creationid="hsugawa8651" creationdate="20181118T084007Z">
        <seg>&lt;c14&gt;&lt;s15&gt;ans &lt;/s15&gt;&lt;/c14&gt;はインタラクティブ・セッションでのみ利用可能で、他の方法でJuliaのコードが実行された際には使うことができません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;c2&gt;for&lt;/c2&gt; loop iterates through these values, assigning each one in turn to the variable &lt;c3&gt;i&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T141734Z" creationid="hsugawa8651" creationdate="20181119T141558Z">
        <seg>&lt;c2&gt;for&lt;/c2&gt; ループはこれらの値を反復し、順番に変数&lt;c3&gt;i&lt;/c3&gt;に代入します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;c7&gt;ans&lt;/c7&gt; variable is only bound in interactive sessions, not when Julia code is run in other ways.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T181425Z" creationid="hsugawa8651" creationdate="20181118T173513Z">
        <seg>変数&lt;c7&gt;ans&lt;/c7&gt;はインタラクティブ・セッションでのみ利用可能で、他の方法でJuliaのコードが実行された際には使うことができません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;x1/&gt;&amp;&lt;x2/&gt; syntax is deprecated, use the &lt;x3/&gt;Ref{T}&lt;x4/&gt; argument type instead.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T151841Z" creationid="hsugawa8651" creationdate="20181117T151841Z">
        <seg>&lt;x1/&gt;&amp;&lt;x2/&gt;構文は廃止されます。代わりに、&lt;x3/&gt;Ref{T}&lt;x4/&gt;引数タイプを使用してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;x1/&gt;--&lt;x2/&gt; delimiter can be used to separate command-line args to the scriptfile from args to Julia:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T231939Z" creationid="hsugawa8651" creationdate="20181119T231939Z">
        <seg>&lt;x1/&gt;--&lt;x2/&gt;デリミタは、July:を対象とした引数から、スクリプトファイルに対して指定されたコマンドライン引数を区切るために使用できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;x1/&gt;--&lt;x2/&gt; delimiter can be used to separate command-line arguments intended for the script file from arguments intended for Julia:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T224357Z" creationid="hsugawa8651" creationdate="20181109T224357Z">
        <seg>&lt;x1/&gt;--&lt;x2/&gt;デリミタは、July:を対象とした引数から、スクリプトファイルに対して指定されたコマンドライン引数を区切るために使用できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;x1/&gt;2x + y&lt;x2/&gt; definition is only used in the first case, while the &lt;x3/&gt;2x - y&lt;x4/&gt; definition is used
in the others.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T013810Z" creationid="hsugawa8651" creationdate="20181120T013810Z">
        <seg>2x + yという定義は、最初の場合にだけ使われていますが、2x - yという定義が、その他では使われています。 </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;x1/&gt;:&lt;x2/&gt; character has two syntactic purposes in Julia.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T165201Z" creationid="hsugawa8651" creationdate="20181118T165201Z">
        <seg>&lt;x1/&gt;:&lt;x2/&gt;文字は、Juliaでは2つの構文的な目的を持っています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;x1/&gt;&lt;x2/&gt;&lt;x3/&gt;(@ref man-numeric-literal-coefficients) does not work when constructing a complex number
from variables.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T123438Z" creationid="hsugawa8651" creationdate="20181118T123438Z">
        <seg>複素数を構成する場合、&lt;x1/&gt;&lt;x2/&gt;&lt;x3/&gt;(@ref man数値リテラル係数)は動作しません。 変数から。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;x1/&gt;AbstractArray&lt;x2/&gt; type includes anything vaguely array-like, and implementations of it might
be quite different from conventional arrays.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T160313Z" creationid="hsugawa8651" creationdate="20181109T160313Z">
        <seg>&lt;x1/&gt;AbstractArray&lt;x2/&gt;タイプは、曖昧な配列を含んでおり、実装は実装されています。 従来のアレイとは大きく異なります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;x1/&gt;AbstractArray&lt;x2/&gt; type includes anything vaguely array-like, and implementations of it might
be quite different from conventional arrays. For example, elements might be computed on request
rather than stored. However, any concrete &lt;x3/&gt;AbstractArray{T,N}&lt;x4/&gt; type should generally implement
at least &lt;x5/&gt;`size(A)`&lt;x6/&gt; (returning an &lt;x7/&gt;Int&lt;x8/&gt; tuple), &lt;x9/&gt;`getindex(A,i)`&lt;x10/&gt; and &lt;x11/&gt;&lt;x12/&gt;&lt;x13/&gt;(@ref getindex);
mutable arrays should also implement &lt;x14/&gt;`setindex!`&lt;x15/&gt;. It is recommended that these operations
have nearly constant time complexity, or technically Õ(1) complexity, as otherwise some array
functions may be unexpectedly slow. Concrete types should also typically provide a &lt;x16/&gt;`similar(A,T=eltype(A),dims=size(A))`&lt;x17/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T135318Z" creationid="hsugawa8651" creationdate="20181117T135318Z">
        <seg>&lt;x1/&gt;AbstractArray&lt;x2/&gt;タイプは、曖昧な配列を含んでおり、実装は実装されています。 従来のアレイとはかなり異なります。たとえば、要求に対して要素が計算される場合があります。 ただし、保存するのではなく、すべての具体的な&lt;x3/&gt;AbstractArray{T,N}&lt;x4/&gt;タイプを実装する必要があります。 &lt;x5/&gt;'size(A)'&lt;x6/&gt;(return an&lt;x7/&gt;Int&lt;x8/&gt;タプルを返す)&lt;x9/&gt;`getindex(A,i)`&lt;x10/&gt;&lt;x13/&gt;&lt;x13/&gt;&lt;x13/&gt;&lt;x13/&gt;(@ref getindex); mutable配列は、&lt;x14/&gt;'setindex!`&lt;x15/&gt;を実装する必要があります。これらの操作を行うには、次の操作を行うことをお勧めします ほとんど一定の時間的複雑さ(技術的には1)、あるいは技術的には複雑さがある 関数は予期せぬほど遅くなります。具体的には、&lt;x16/&gt;`同様(A、T=エルテープ(A)、dims=size(A))`&lt;x17/&gt;を指定する必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;x1/&gt;GNU Scientific Library&lt;x2/&gt; (here assumed to be accessible
through &lt;x3/&gt;:libgsl&lt;x4/&gt;) defines an opaque pointer, &lt;x5/&gt;gsl_permutation *&lt;x6/&gt;, as the return type of the C
function &lt;x7/&gt;gsl_permutation_alloc&lt;x8/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T152041Z" creationid="hsugawa8651" creationdate="20181117T152041Z">
        <seg>&lt;x1/&gt;GNU Scientific Library&lt;x2/&gt;(ここではアクセス可能であると仮定される) &lt;x3/&gt;:libgsl&lt;x4/&gt;は、Cの戻り型として、不透明ポインタ&lt;x5/&gt;gsl_substitutions*&lt;x6/&gt;を定義している。 関数&lt;x7/&gt;gsl_mutation_alloc&lt;x8/&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;x1/&gt;Pkg&lt;x2/&gt; package manager ships with Julia 0.7/1.0 and lets you install and manage your projects' dependencies.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T152827Z" creationid="hsugawa8651" creationdate="20181117T152827Z">
        <seg>&lt;x1/&gt;Pkg&lt;x2/&gt;パッケージマネージャはJulia0.7/1.0と一緒に出荷され、プロジェクトの依存関係をインストールして管理することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;x1/&gt;Pub&lt;x2/&gt; package is in the user depot, where packages installed by the user live.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T121255Z" creationid="hsugawa8651" creationdate="20181118T121255Z">
        <seg>&lt;x1/&gt;Pub&lt;x2/&gt;パッケージはユーザーデポにあり、ユーザーがインストールしたパッケージはユーザーによってインストールされています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;x1/&gt;Rounding functions&lt;x2/&gt; take a type &lt;x3/&gt;T&lt;x4/&gt; as an optional argument.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T070533Z" creationid="hsugawa8651" creationdate="20181114T031049Z">
        <seg> &lt;x1/&gt;Rounding functions&lt;x2/&gt;  は、  &lt;x3/&gt;T&lt;x4/&gt;型をオプション引数としてとります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;x1/&gt;`BigFloat`&lt;x2/&gt; and &lt;x3/&gt;`BigInt`&lt;x4/&gt; types implements
arbitrary-precision floating point and integer arithmetic, respectively.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T032210Z" creationid="hsugawa8651" creationdate="20181114T032210Z">
        <seg>&lt;x1/&gt;`BigFloat'&lt;x2/&gt;と、&lt;x3/&gt;"BigInt"&lt;x4/&gt;型は実装されている。 任意精度浮動小数点および整数算術。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;x1/&gt;`Cstring`&lt;x2/&gt; type is essentially a synonym for &lt;x3/&gt;Ptr{UInt8}&lt;x4/&gt;, except the conversion to &lt;x5/&gt;Cstring&lt;x6/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T150948Z" creationid="hsugawa8651" creationdate="20181117T150948Z">
        <seg>&lt;x1/&gt;のCstring&lt;x2/&gt;型は本質的に&lt;x3/&gt;Ptr{UInt8}&lt;x4/&gt;の同義語であり、&lt;x5/&gt;Cstring&lt;x6/&gt;への変換を除く。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;x1/&gt;`Symbol`&lt;x2/&gt; constructor takes any number of arguments and creates a new symbol by concatenating
their string representations together:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T115319Z" creationid="hsugawa8651" creationdate="20181118T115319Z">
        <seg>&lt;x1/&gt;"シンボル"&lt;x2/&gt;コンストラクタは任意の数の引数を取り、新しいシンボルを連結することによって新しいシンボルを作成します。 これらの文字列の表現は次のようになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;x1/&gt;`dump`&lt;x2/&gt; function provides indented and annotated display of &lt;x3/&gt;Expr&lt;x4/&gt; objects:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T115244Z" creationid="hsugawa8651" creationdate="20181118T115244Z">
        <seg>&lt;x1/&gt;`dump'&lt;x2/&gt;関数は、&lt;x3/&gt;Expr&lt;x4/&gt;オブジェクトのインデントされた注釈付きの表示を提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;x1/&gt;`error`&lt;x2/&gt; function is used to produce an &lt;x3/&gt;`ErrorException`&lt;x4/&gt; that interrupts
the normal flow of control.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T124711Z" creationid="hsugawa8651" creationdate="20181118T124711Z">
        <seg>&lt;x1/&gt;'エラー"&lt;x2/&gt;関数は、&lt;x3/&gt;'ErrorException&lt;x4/&gt;を生成するために使用されます。 制御の正常な流れです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;x1/&gt;`throw`&lt;x2/&gt; function</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T124623Z" creationid="hsugawa8651" creationdate="20181118T124623Z">
        <seg>&lt;x1/&gt;`throw'&lt;x2/&gt;関数</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;x1/&gt;`typemin()`&lt;x2/&gt; and &lt;x3/&gt;`typemax()`&lt;x4/&gt; functions also apply to floating-point types:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T034136Z" creationid="hsugawa8651" creationdate="20181119T235320Z">
        <seg>&lt;x1/&gt;`typemin()`&lt;x2/&gt;および&lt;x3/&gt;`typemax()`&lt;x4/&gt;関数は浮動小数点型に対しても使用が可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;x1/&gt;`typemin`&lt;x2/&gt; and &lt;x3/&gt;`typemax`&lt;x4/&gt; functions also apply to floating-point types:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T111123Z" creationid="hsugawa8651" creationdate="20181112T110920Z">
        <seg>&lt;x1/&gt;`テーパミン'&lt;x2/&gt;と&lt;x3/&gt;'テーペマス'&lt;x4/&gt;関数も浮動小数点型に適用される。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;x1/&gt;base&lt;x2/&gt; argument is a pointer to an array of length &lt;x3/&gt;nmemb&lt;x4/&gt;, with elements of &lt;x5/&gt;size&lt;x6/&gt; bytes
each.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T150525Z" creationid="hsugawa8651" creationdate="20181117T150525Z">
        <seg>&lt;x1/&gt;の基本&lt;x2/&gt;引数は、&lt;x5/&gt;nmemb&lt;x4/&gt;の配列へのポインタであり、&lt;x5/&gt;サイズ&lt;x6/&gt;バイトの要素がある。 各。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;x1/&gt;base&lt;x2/&gt; argument is a pointer to an array of length &lt;x3/&gt;nmemb&lt;x4/&gt;, with elements of &lt;x5/&gt;size&lt;x6/&gt; bytes
each. &lt;x7/&gt;compare&lt;x8/&gt; is a callback function which takes pointers to two elements &lt;x9/&gt;a&lt;x10/&gt; and &lt;x11/&gt;b&lt;x12/&gt; and returns
an integer less/greater than zero if &lt;x13/&gt;a&lt;x14/&gt; should appear before/after &lt;x15/&gt;b&lt;x16/&gt; (or zero if any order
is permitted). Now, suppose that we have a 1d array &lt;x17/&gt;A&lt;x18/&gt; of values in Julia that we want to sort
using the &lt;x19/&gt;qsort&lt;x20/&gt; function (rather than Julia's built-in &lt;x21/&gt;sort&lt;x22/&gt; function). Before we worry about
calling &lt;x23/&gt;qsort&lt;x24/&gt; and passing arguments, we need to write a comparison function that works for some
arbitrary objects (which define &lt;x25/&gt;&lt;&lt;x26/&gt;):</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T133933Z" creationid="hsugawa8651" creationdate="20181117T133931Z">
        <seg>The &lt;x1/&gt;base&lt;x2/&gt; argument is a pointer to an array of length &lt;x3/&gt;nmemb&lt;x4/&gt;, with elements of &lt;x5/&gt;size&lt;x6/&gt; bytes
each. &lt;x7/&gt;compare&lt;x8/&gt; is a callback function which takes pointers to two elements &lt;x9/&gt;a&lt;x10/&gt; and &lt;x11/&gt;b&lt;x12/&gt; and returns
an integer less/greater than zero if &lt;x13/&gt;a&lt;x14/&gt; should appear before/after &lt;x15/&gt;b&lt;x16/&gt; (or zero if any order
is permitted). Now, suppose that we have a 1d array &lt;x17/&gt;A&lt;x18/&gt; of values in Julia that we want to sort
using the &lt;x19/&gt;qsort&lt;x20/&gt; function (rather than Julia's built-in &lt;x21/&gt;sort&lt;x22/&gt; function). Before we worry about
calling &lt;x23/&gt;qsort&lt;x24/&gt; and passing arguments, we need to write a comparison function that works for some
arbitrary objects (which define &lt;x25/&gt;&lt;&lt;x26/&gt;):</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;x1/&gt;continue&lt;x2/&gt; keyword accomplishes this:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T124520Z" creationid="hsugawa8651" creationdate="20181118T124520Z">
        <seg>&lt;x1/&gt;continue&lt;x2/&gt;キーワードを使用すると、次のことが実現されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;x1/&gt;elseif&lt;x2/&gt; and &lt;x3/&gt;else&lt;x4/&gt; blocks are optional, and as many &lt;x5/&gt;elseif&lt;x6/&gt; blocks as desired can be used.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T124337Z" creationid="hsugawa8651" creationdate="20181118T124337Z">
        <seg>&lt;x1/&gt;elseif&lt;x2/&gt;および&lt;x3/&gt;else&lt;x4/&gt;ブロックはオプションであり、必要に応じて、&lt;x5/&gt;elseif&lt;x6/&gt;ブロックを必要に応じて使用することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;x1/&gt;for&lt;x2/&gt; loop makes common repeated evaluation idioms easier to write.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T231125Z" creationid="hsugawa8651" creationdate="20181109T231125Z">
        <seg>&lt;x2/&gt;ループのための&lt;x1/&gt;は、共通の繰り返し評価イディオムを書くのを容易にする。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;x1/&gt;isless&lt;x2/&gt; function is invoked by default, but the relation
can be specified via the &lt;x3/&gt;lt&lt;x4/&gt; keyword.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T063935Z" creationid="hsugawa8651" creationdate="20181114T063935Z">
        <seg>&lt;x1/&gt;isless&lt;x2/&gt;関数はデフォルトで呼び出されますが、関係は次のようになります。 は&lt;x3/&gt;lt&lt;x4/&gt;キーワードで指定することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;x1/&gt;paths&lt;x2/&gt; map assigns to each package UUID-name pair, the location of that package's entry-point source file.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T121023Z" creationid="hsugawa8651" creationdate="20181118T121023Z">
        <seg>&lt;x1/&gt;パス&lt;x2/&gt;マップは、各パッケージUUIDの名前ペアに割り当て、そのパッケージのエントリポイントソースファイルの場所を指定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;x1/&gt;primary environment&lt;x2/&gt;—i.e. the first environment in a stack—is faithfully embedded in a stacked environment.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T121428Z" creationid="hsugawa8651" creationdate="20181118T121428Z">
        <seg>スタックの中では、&lt;x1/&gt;プライマリ環境&lt;x2/&gt;-i.即ち最初の環境がスタック環境に忠実に埋め込まれています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;x1/&gt;promote&lt;x2/&gt; function converts all its arguments to a common type -- in this case &lt;x3/&gt;`Float64`&lt;x4/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T124037Z" creationid="hsugawa8651" creationdate="20181118T124037Z">
        <seg>&lt;x1/&gt;プロモート&lt;x2/&gt;関数は、すべての引数を共通の型に変換します。この場合は、&lt;x3/&gt;`Float64'&lt;x4/&gt;のようになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;x1/&gt;return&lt;x2/&gt; Keyword</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T101757Z" creationid="hsugawa8651" creationdate="20181120T101757Z">
        <seg>&lt;x1/&gt;return&lt;x2/&gt;キーワード</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;x1/&gt;same_type_numeric&lt;x2/&gt; function behaves much like the &lt;x3/&gt;same_type&lt;x4/&gt; function defined above, but
is only defined for pairs of numbers.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T020258Z" creationid="hsugawa8651" creationdate="20181120T020258Z">
        <seg>このsame_type_numeric関数は、以前に定義した関数same_typeと非常によく似た動作をしますが、数値の組に対してのみ定義されています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;x1/&gt;state&lt;x2/&gt; object may be anything, and should be chosen appropriately for each iterable type.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T032029Z" creationid="hsugawa8651" creationdate="20181114T032029Z">
        <seg>The &lt;x1/&gt;state&lt;x2/&gt; object may be anything, and should be chosen appropriately for each iterable type.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;x1/&gt;try/catch&lt;x2/&gt; statement</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T124745Z" creationid="hsugawa8651" creationdate="20181118T124745Z">
        <seg>&lt;x1/&gt;try/catch&lt;x2/&gt;ステートメント</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;x1/&gt;try/catch&lt;x2/&gt; statement allows for &lt;x3/&gt;Exception&lt;x4/&gt;s to be tested for.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T124740Z" creationid="hsugawa8651" creationdate="20181118T124740Z">
        <seg>&lt;x1/&gt;try/catch&lt;x2/&gt;ステートメントでは、&lt;x3/&gt;Exception&lt;x4/&gt;sをテストすることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;x1/&gt;while&lt;x2/&gt; loop evaluates the condition expression (&lt;x3/&gt;i &lt;= 5&lt;x4/&gt; in this case), and as long it remains
&lt;x5/&gt;true&lt;x6/&gt;, keeps also evaluating the body of the &lt;x7/&gt;while&lt;x8/&gt; loop.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T230858Z" creationid="hsugawa8651" creationdate="20181109T230858Z">
        <seg>&lt;x1/&gt;while&lt;x2/&gt;ループは条件式(この場合は&lt;x3/&gt;i&lt;=5&lt;x4/&gt;)を評価しており、それは長いままである &lt;x5/&gt;true&lt;x6/&gt;は、&lt;x8/&gt;ループでは、&lt;x7/&gt;のボディを評価します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;x10/&gt;Zebra&lt;x11/&gt; package can only be loaded by packages for which it appear as an explicit dependency in the manifest file: the  &lt;x12/&gt;Pub&lt;x13/&gt; package and one of the &lt;x14/&gt;Priv&lt;x15/&gt; packages.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T121152Z" creationid="hsugawa8651" creationdate="20181118T121152Z">
        <seg>&lt;x10/&gt;Zebra&lt;x11/&gt;パッケージは、マニフェスト・ファイルに明示的な依存関係として表示されるパッケージ(&lt;x12/&gt;Pub&lt;x13/&gt;パッケージおよび&lt;x14/&gt;Priv&lt;x15/&gt;パッケージの一つ)でのみロードできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;x10/&gt;`transcode()`&lt;x11/&gt; function is provided to convert data between the various UTF-xx encodings,
primarily for working with external data and libraries.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T082026Z" creationid="hsugawa8651" creationdate="20181120T082026Z">
        <seg>&lt;x10/&gt;`transcode()`&lt;x11/&gt; 関数は、主に外部データやライブラリを扱うために、様々なUTF-xxエンコーディング間のデータ変換を提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;x11/&gt;reverse&lt;x12/&gt; is present because &lt;x13/&gt;merge&lt;x14/&gt; favors the last argument rather than first when there are collisions between keys in its argument dictionaries.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T121423Z" creationid="hsugawa8651" creationdate="20181118T121423Z">
        <seg>&lt;x11/&gt;の逆方向&lt;x12/&gt;&lt;x12/&gt;は、&lt;x13/&gt;merge&lt;x14/&gt;が、引数ディクショナリ内のキー間の衝突があるときに最初の引数ではなく、最後の引数を優先するためです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;x13/&gt;ans&lt;x14/&gt; variable is only
bound in interactive sessions, not when Julia code is run in other ways.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T231821Z" creationid="hsugawa8651" creationdate="20181119T231808Z">
        <seg>&lt;x15/&gt;ans&lt;x16/&gt;はインタラクティブ・セッションでのみ利用可能で、他の方法でJuliaのコードが実行された際には使うことができません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;x15/&gt;ans&lt;x16/&gt; variable is only
bound in interactive sessions, not when Julia code is run in other ways.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T091601Z" creationid="hsugawa8651" creationdate="20181114T031402Z">
        <seg>&lt;x15/&gt;ans &lt;x16/&gt;はインタラクティブ・セッションでのみ利用可能で、他の方法でJuliaのコードが実行された際には使うことができません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;x21/&gt;roots&lt;x22/&gt;, &lt;x23/&gt;graph&lt;x24/&gt; and &lt;x25/&gt;paths&lt;x26/&gt; maps of a project environment are defined as follows.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T121057Z" creationid="hsugawa8651" creationdate="20181118T121057Z">
        <seg>プロジェクト環境の&lt;X21/&gt;ルート&lt;x22/&gt;、&lt;x23/&gt;グラフ&lt;x24/&gt;、&lt;x25/&gt;の各パスは、次のように定義されています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;x3/&gt;`Base.broadcastable`&lt;x4/&gt; function is called on each argument to broadcast, allowing
it to return something different that supports &lt;x5/&gt;axes&lt;x6/&gt; and indexing.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T131036Z" creationid="hsugawa8651" creationdate="20181113T131036Z">
        <seg>&lt;x3/&gt;'Base.broadcastable'&lt;x4/&gt;関数は、各引数で呼び出され、ブロードキャストされます。 &lt;x5/&gt;軸&lt;x6/&gt;とインデックス作成をサポートするものとは異なるものを返すことです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;x5/&gt;AbstractArray&lt;x6/&gt; fallback methods use &lt;x7/&gt;`similar`&lt;x8/&gt; to allocate an &lt;x9/&gt;Array&lt;x10/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T083303Z" creationid="hsugawa8651" creationdate="20181113T083303Z">
        <seg>&lt;x5/&gt;AbstractArray&lt;x6/&gt;フォールバックメソッドは&lt;x7/&gt;'を使用して、&lt;x9/&gt;アレイを割り当てます。&lt;x6/&gt;&lt;x10/&gt;&lt;x10/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;x5/&gt;`BigInt`&lt;x6/&gt; and &lt;x7/&gt;`BigFloat`&lt;x8/&gt; types are available in Julia for arbitrary
precision integer and floating point numbers respectively.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T035712Z" creationid="hsugawa8651" creationdate="20181112T111544Z">
        <seg>Juliaでは任意精度整数と浮動小数点数のための The  &lt;x5/&gt;`BigInt`&lt;x6/&gt; および &lt;x7/&gt;`BigFloat`&lt;x8/&gt; 型を利用いただけます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;x5/&gt;return&lt;x6/&gt; on the last line could be omitted
since it is the last expression.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T125934Z" creationid="hsugawa8651" creationdate="20181120T125934Z">
        <seg> 最終行の &lt;x5/&gt;return&lt;x6/&gt;は最後尾の式なので省略可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;x7/&gt;:&lt;x8/&gt; character, followed
by paired parentheses around a single statement of Julia code, produces an &lt;x9/&gt;Expr&lt;x10/&gt; object based
on the enclosed code.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T115341Z" creationid="hsugawa8651" creationdate="20181118T115341Z">
        <seg>&lt;x7/&gt;:&lt;x8/&gt;文字の後に続く Juliaコードの単一文の周りに括弧で括られた括弧によって、&lt;x9/&gt;Expr&lt;x10/&gt;オブジェクトを生成します。 を使用します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;x7/&gt;`Array`&lt;x8/&gt; type is a specific instance
of &lt;x9/&gt;DenseArray&lt;x10/&gt;;  &lt;x11/&gt;`Vector`&lt;x12/&gt; and &lt;x13/&gt;`Matrix`&lt;x14/&gt; are aliases for the 1-d and 2-d cases.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T160422Z" creationid="hsugawa8651" creationdate="20181109T160422Z">
        <seg>&lt;x7/&gt;「Array」&lt;x8/&gt;タイプは、特定のインスタンスです。 &lt;x9/&gt;DenseArray&lt;x10/&gt;;&lt;x11/&gt;'Vector'&lt;x12/&gt;および&lt;x13/&gt;'Matrix'&lt;x14/&gt;は、1-dおよび2-dケースのエイリアスです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;x9/&gt;`eps()`&lt;x10/&gt; function can also take a floating-point value as an
argument, and gives the absolute difference between that value and the next representable
floating point value.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T034531Z" creationid="hsugawa8651" creationdate="20181119T235500Z">
        <seg> &lt;x9/&gt;`eps()`&lt;x10/&gt; 関数は、浮動小数点値を引数として使用したり、ある値と次の浮動小数点値との絶対差を 得ることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;x9/&gt;`eps`&lt;x10/&gt; function can also take a floating-point value as an
argument, and gives the absolute difference between that value and the next representable
floating point value.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T111150Z" creationid="hsugawa8651" creationdate="20181112T111150Z">
        <seg>&lt;x9/&gt;'eps'&lt;x10/&gt;関数は、浮動小数点値を 引数は、その値と次の表現可能な値との間に絶対差を与えます。 浮動小数点値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The C &lt;x1/&gt;getenv&lt;x2/&gt; function indicates an error by returning &lt;x3/&gt;NULL&lt;x4/&gt;, but other standard C functions
indicate errors in various different ways, including by returning -1, 0, 1 and other special values.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T224130Z" creationid="hsugawa8651" creationdate="20181109T224130Z">
        <seg>C&lt;x1/&gt;getenv&lt;x2/&gt;関数は、&lt;x3/&gt;NULL&lt;x4/&gt;を返すことによってエラーを示しますが、他の標準的なC関数の関数です。 -1 0 1、その他の特別な値を返すなど、さまざまな方法でエラーを表示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The C &lt;x1/&gt;getenv&lt;x2/&gt; function indicates an error by returning &lt;x3/&gt;NULL&lt;x4/&gt;, but other standard C functions
indicate errors in various different ways, including by returning -1, 0, 1 and other special values.
This wrapper throws an exception clearly indicating the problem if the caller tries to get a non-existent
environment variable:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T134122Z" creationid="hsugawa8651" creationdate="20181117T134122Z">
        <seg>C&lt;x1/&gt;getenv&lt;x2/&gt;関数は、&lt;x3/&gt;NULL&lt;x4/&gt;を返すことによってエラーを示しますが、他の標準的なC関数の関数です。 -1 0 1、その他の特別な値を返すなど、さまざまな方法でエラーを表示します。 このラッパーは、呼び出し者が存在しないことを示す問題を明確に示す例外をスローします。 環境変数:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The C function wrapped returns an integer error code; the results of the actual evaluation of
the Bessel J function populate the Julia array &lt;x1/&gt;result_array&lt;x2/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T152202Z" creationid="hsugawa8651" creationdate="20181117T152202Z">
        <seg>C関数は、整数エラー・コードを返します。実際の評価結果は次のようになります。 Bessel J関数は、Julia配列&lt;x1/&gt;result_array&lt;x2/&gt;を生成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The Julia &lt;x3/&gt;LOAD_PATH&lt;x4/&gt; global defines an environment stack—the environment in which the Julia process operates.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T121409Z" creationid="hsugawa8651" creationdate="20181118T121409Z">
        <seg>Julia&lt;x3/&gt;LOAD_PATH&lt;x4/&gt;グローバルは、環境のスタックを定義します。環境スタックは、ジュリアプロセスが動作する環境を定義します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The Julia Language</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T031753Z" creationid="hsugawa8651" creationdate="20181119T031753Z">
        <seg>Julia言語</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The Julia Language logo</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T031736Z" creationid="hsugawa8651" creationdate="20181119T031736Z">
        <seg>The Julia Language logo</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The Julia Manual</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T234323Z" creationid="hsugawa8651" creationdate="20181119T234323Z">
        <seg>Julia言語</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The Julia internal variable &lt;a0&gt;&lt;c1&gt;Sys.WORD_SIZE&lt;/c1&gt;&lt;/a0&gt; indicates whether the target system is 32-bit or 64-bit:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T184926Z" creationid="hsugawa8651" creationdate="20181118T184904Z">
        <seg>Julia内部変数 &lt;a0&gt;&lt;c1&gt;Sys.WORD_SIZE&lt;/c1&gt;&lt;/a0&gt;は、ターゲットシステムが32ビット、または、64ビットであるかどうかを示します。 </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The Julia internal variable &lt;x1/&gt;`Sys.WORD_SIZE`&lt;x2/&gt; indicates whether the target system is 32-bit
or 64-bit:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T032653Z" creationid="hsugawa8651" creationdate="20181112T110332Z">
        <seg>Juliaの内部変数  &lt;x1/&gt;`Sys.WORD_SIZE`&lt;x2/&gt;  はターゲットシステムが32ビットまたは64ビットのどちらかであることを示します。:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The Julia programming language fills this role: it is a flexible dynamic language, appropriate for scientific and numerical computing, with performance comparable to traditional statically-typed languages.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T182315Z" creationid="hsugawa8651" creationdate="20181118T182315Z">
        <seg> Juliaはこのような目的のために開発されています。つまり、Juliaは柔軟な動的言語であると同時に、古くからの静的型付け言語と同等の性能を実現することで科学計算や数値計算に適してたものになっています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The ability to define function behavior across many combinations of
argument types via &lt;a0&gt;multiple
dispatch&lt;/a0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T082157Z" creationid="hsugawa8651" creationdate="20181118T082117Z">
        <seg>&lt;a0&gt;多重ディスパッチ&lt;/a0&gt; によってさまざまな引数の組み合わせごとに関数の振る舞いを定義できます
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The ability to define function behavior across many combinations of argument types via &lt;a0&gt;multiple dispatch&lt;/a0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T182532Z" creationid="hsugawa8651" creationdate="20181118T182532Z">
        <seg>&lt;a0&gt;多重ディスパッチ&lt;/a0&gt; によってさまざまな引数の組み合わせごとに関数の振る舞いを定義できます
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The above results are all &lt;a0&gt;&lt;c1&gt;Float64&lt;/c1&gt;&lt;/a0&gt; values.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T190407Z" creationid="hsugawa8651" creationdate="20181118T190407Z">
        <seg>上記の結果は全て&lt;x1/&gt;'Float64&lt;x2/&gt;の値である。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The above results are all &lt;x1/&gt;`Float64`&lt;x2/&gt; values.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T033549Z" creationid="hsugawa8651" creationdate="20181112T110619Z">
        <seg>上記の結果は、全て&lt;x1/&gt;`Float64`&lt;x2/&gt;  値です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The above syntactic enhancements significantly reduce the visual noise incurred when writing common
mathematical formulae.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T040620Z" creationid="hsugawa8651" creationdate="20181112T111904Z">
        <seg>上記の構文の拡張機能は、同様な数式を記載する際の視覚的なノイズを低減します。 </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The absolute path of the directory containing the Julia executable, which sets
the global variable &lt;x1/&gt;`Sys.BINDIR`&lt;x2/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T054725Z" creationid="hsugawa8651" creationdate="20181116T054725Z">
        <seg>The absolute path of the directory containing the Julia executable, which sets
the global variable &lt;x1/&gt;`Sys.BINDIR`&lt;x2/&gt;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The actual allocation of the result array is
handled by &lt;x1/&gt;similar&lt;x2/&gt;, using the Broadcasted object as its first argument.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T131302Z" creationid="hsugawa8651" creationdate="20181113T131302Z">
        <seg>結果配列の実際の割り当ては次のとおりです。 ブロードキャストオブジェクトを最初の引数として使用して、&lt;x1/&gt;類似の&lt;x2/&gt;で処理されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The application also depends on the &lt;x1/&gt;Pub&lt;x2/&gt; package, which in turn depends on the public &lt;x3/&gt;Priv &lt;x4/&gt; and the same &lt;x5/&gt;Zebra&lt;x6/&gt; package which the private &lt;x7/&gt;Priv&lt;x8/&gt; package depends on.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T121130Z" creationid="hsugawa8651" creationdate="20181118T121130Z">
        <seg>アプリケーションは、&lt;x1/&gt;Pub&lt;x2/&gt;パッケージにも依存します。これは、パブリック&lt;x/&gt;Priv&lt;x4/&gt;によって異なります。また、プライベート&lt;x7/&gt;Priv&lt;x8/&gt;パッケージが依存する同じ&lt;x5/&gt;Zebra&lt;x6/&gt;パッケージに依存します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The argument is: ", $(Expr(:copyast, :($(QuoteNode(:((1, 2, 3)))))))))

julia&gt; eval(ex)
I execute at runtime.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T015349Z" creationid="hsugawa8651" creationdate="20181116T015349Z">
        <seg>The argument is: ", $(Expr(:copyast, :($(QuoteNode(:((1, 2, 3)))))))))

julia&gt; eval(ex)
I execute at runtime.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The argument is: ", $arg))
       end
@twostep (macro with 1 method)

julia&gt; ex = macroexpand(Main, :(@twostep :(1, 2, 3)) );
I execute at parse time.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T015339Z" creationid="hsugawa8651" creationdate="20181116T015339Z">
        <seg>The argument is: ", $arg))
       end
@twostep (macro with 1 method)

julia&gt; ex = macroexpand(Main, :(@twostep :(1, 2, 3)) );
I execute at parse time.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The argument is: ", arg)
           return :(println("I execute at runtime.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T001412Z" creationid="hsugawa8651" creationdate="20181120T001412Z">
        <seg>The argument is: ", arg)
           return :(println("I execute at runtime.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The array library is implemented
almost completely in Julia itself, and derives its performance from the compiler, just like any
other code written in Julia.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154129Z" creationid="hsugawa8651" creationdate="20181109T154129Z">
        <seg>アレイ・ライブラリーは実装されています。 ほとんどの場合、ジュリア自身は、コンパイラーからのパフォーマンスを導き出し その他のコードはジュリアに書かれています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The base Julia runtime provides only plain-text display, but richer displays may be enabled by
loading external modules or by using graphical Julia environments (such as the IPython-based IJulia
notebook).</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T043259Z" creationid="hsugawa8651" creationdate="20181112T043259Z">
        <seg>基本的なJuliaランタイムはプレーンテキスト表示のみを提供しますが、よりリッチなディスプレイを有効にすることができます。 外部モジュールをロードするか、グラフィカルなJulia環境(IPythonベースのIJuliaなど)を使用する )を使用します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The base array type in Julia is the abstract type &lt;x1/&gt;`AbstractArray{T,N}`&lt;x2/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T161340Z" creationid="hsugawa8651" creationdate="20181114T161340Z">
        <seg>ジュリアのベース・アレイ型は、抽象型の&lt;x1/&gt;`AbstractArray{T,N}'&lt;x2/&gt;である。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The base array type in Julia is the abstract type &lt;x1/&gt;`AbstractArray{T,N}`&lt;x2/&gt;. It is parameterized by
the number of dimensions &lt;x3/&gt;N&lt;x4/&gt; and the element type &lt;x5/&gt;T&lt;x6/&gt;. &lt;x7/&gt;`AbstractVector`&lt;x8/&gt; and &lt;x9/&gt;`AbstractMatrix`&lt;x10/&gt; are
aliases for the 1-d and 2-d cases. Operations on &lt;x11/&gt;AbstractArray&lt;x12/&gt; objects are defined using higher
level operators and functions, in a way that is independent of the underlying storage. These operations
generally work correctly as a fallback for any specific array implementation.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T135313Z" creationid="hsugawa8651" creationdate="20181117T135313Z">
        <seg>Juliaの基本配列タイプは、抽象型&lt;x1/&gt;'AbstractArray{T,N}'&lt;x2/&gt;であり、パラメータ化されています。 次元の数&lt;x3/&gt;N&lt;x4/&gt;および要素タイプ&lt;x5/&gt;T&lt;x6/&gt;.&lt;x7/&gt;'AbstractVector'&lt;x8/&gt;および&lt;x9/&gt;'AbstractMatrix'&lt;x10/&gt;は 1dおよび2dケースのエイリアス。&lt;x11/&gt;AbstractArray&lt;x12/&gt;オブジェクトに対する操作は、より高い値を使用して定義されます。 レベル演算子と関数は、基礎となるストレージとは無関係です。これらの操作は、次のような操作によって行われます。 一般的には、特定のアレイ実装のフォールバックとして正しく動作します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The basic syntax for defining functions in Julia is:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T125027Z" creationid="hsugawa8651" creationdate="20181110T025456Z">
        <seg> Juliaで関数を定義する基本構文は次のとおりです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The behavior is found in
most imperative programming languages having the &lt;x1/&gt;&amp;&amp;&lt;x2/&gt; and &lt;x3/&gt;||&lt;x4/&gt; boolean operators: in a series
of boolean expressions connected by these operators, only the minimum number of expressions are
evaluated as are necessary to determine the final boolean value of the entire chain.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T230229Z" creationid="hsugawa8651" creationdate="20181109T230229Z">
        <seg>動作は &lt;x1/&gt;&amp;&amp;&lt;x2/&gt;と&lt;x3/&gt;&lt;x4/&gt;ブール演算子を持つ最も命令的なプログラミング言語:シリーズ これらの演算子によって接続されたブール式のうち、最小の数だけが チェーン全体の最終的なブール値を決定するために必要な評価が行われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The behavior is found in most imperative programming languages having the &lt;c0&gt;&amp;&amp;&lt;/c0&gt; and &lt;c1&gt;||&lt;/c1&gt; boolean operators: in a series of boolean expressions connected by these operators, only the minimum number of expressions are evaluated as are necessary to determine the final boolean value of the entire chain.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T135839Z" creationid="hsugawa8651" creationdate="20181119T135702Z">
        <seg> 命令型プログラミング言語にみられる&lt;c0&gt;&amp;&amp;&lt;/c0&gt;や&lt;c1&gt;||&lt;/c1&gt;のブール演算子のほとんどは短絡評価です。 これらの演算子で連結したブール式の中で、評価されるのは、式全体のブール値を決定する最小限のものだけです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The blank lines actually have spaces on them.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T081838Z" creationid="hsugawa8651" creationdate="20181120T081838Z">
        <seg>空白行には実際にはスペースがあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The body becomes almost identical, but
instead of calculating the linear index, we build up an &lt;x1/&gt;expression&lt;x2/&gt; that calculates the index:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T032316Z" creationid="hsugawa8651" creationdate="20181116T032316Z">
        <seg>体はほぼ同じですが 線形インデックスを計算する代わりに、インデックスを計算する&lt;x1/&gt;式&lt;x2/&gt;を構築します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The broadcast style is computed for every broadcasting operation to allow for
dispatch and specialization.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T131259Z" creationid="hsugawa8651" creationdate="20181113T131259Z">
        <seg>ブロードキャスト・スタイルは、すべてのブロードキャスト・オペレーションに対して計算され 派遣・専門化。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The built-in
broadcast machinery will then determine the result type and size based upon the arguments, allocate
it, and then finally copy the realization of the &lt;x13/&gt;Broadcasted&lt;x14/&gt; object into it with a default
&lt;x15/&gt;copyto!(::AbstractArray, ::Broadcasted)&lt;x16/&gt; method.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T131542Z" creationid="hsugawa8651" creationdate="20181113T131542Z">
        <seg>内蔵の ブロードキャスト・マシンは、引数に基づいて結果のタイプとサイズを決定し、割り当てます。 そして、最後に、&lt;x13/&gt;ブロードキャストされた&lt;x14/&gt;オブジェクトの実現をデフォルトでその中にコピーします。 &lt;x15/&gt;copyto!(::AbstractArray,::ブロードキャスト)&lt;x16/&gt;メソッド。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The built-in &lt;c1&gt;Exception&lt;/c1&gt;s listed below all interrupt the normal flow of control.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T143221Z" creationid="hsugawa8651" creationdate="20181119T143221Z">
        <seg>以下に挙げた標準装備の&lt;c1&gt;例外&lt;/c1&gt;は、すべて、通常の制御の流れを中断します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The built-in &lt;x2/&gt;Exception&lt;x3/&gt;s listed
below all interrupt the normal flow of control.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T124600Z" creationid="hsugawa8651" creationdate="20181118T124600Z">
        <seg>組み込みの&lt;x2/&gt;例外&lt;x3/&gt;が一覧表示されています。 すべての割り込みが制御の正常な流れを中断します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The built-in concrete type used for strings (and string literals) in Julia is &lt;x1/&gt;`String`&lt;x2/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T075717Z" creationid="hsugawa8651" creationdate="20181120T075717Z">
        <seg>Juliaにおける文字列を扱うビルトインの型は&lt;x1/&gt;`String`&lt;x2/&gt;です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The built-in fallback &lt;x17/&gt;broadcast&lt;x18/&gt; and
&lt;x19/&gt;broadcast!&lt;x20/&gt; methods similarly construct a transient &lt;x21/&gt;Broadcasted&lt;x22/&gt; representation of the operation
so they can follow the same codepath.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T131537Z" creationid="hsugawa8651" creationdate="20181113T131537Z">
        <seg>組み込みのフォールバック&lt;x17/&gt;ブロードキャスト&lt;x18/&gt;と &lt;x19/&gt;ブロードキャスト!&lt;x20/&gt;メソッドは、同様に、操作の一時的な&lt;X21/&gt;ブロードキャスト&lt;x22/&gt;表現を構成します。 同じコデパスにたどり着くことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The call &lt;x1/&gt;Point{Int64}(1,2)&lt;x2/&gt; will invoke the definition &lt;x3/&gt;Point{T}(x,y)&lt;x4/&gt; inside the
&lt;x5/&gt;struct&lt;x6/&gt; block.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T123938Z" creationid="hsugawa8651" creationdate="20181118T123938Z">
        <seg>&lt;x1/&gt;ポイント{Int64}(1,2)&lt;x2/&gt;は、次のように定義&lt;x3/&gt;ポイント{T}(x,y)&lt;x4/&gt;を呼び出します。 &lt;x5/&gt;構造体&lt;x6/&gt;ブロック。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The callback you pass to C should only execute a &lt;x1/&gt;`ccall`&lt;x2/&gt; to &lt;x3/&gt;:uv_async_send&lt;x4/&gt;, passing
&lt;x5/&gt;cond.handle&lt;x6/&gt; as the argument, taking care to avoid any allocations or other interactions with the
Julia runtime.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T152633Z" creationid="hsugawa8651" creationdate="20181117T152633Z">
        <seg>Cに渡されるコールバックは、&lt;x1/&gt;`ccall'&lt;x2/&gt;を実行して、&lt;x3/&gt;:uv_async_send&lt;x4/&gt;を通過させるべきです。 &lt;x5/&gt;cond.handle&lt;x6/&gt;は引数として指定し、割り当てやその他の相互作用がないように注意してください。 Juliaランタイム。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The characters that English speakers are familiar with are the letters &lt;x1/&gt;A&lt;x2/&gt;, &lt;x3/&gt;B&lt;x4/&gt;,
&lt;x5/&gt;C&lt;x6/&gt;, etc., together with numerals and common punctuation symbols.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T075300Z" creationid="hsugawa8651" creationdate="20181120T075300Z">
        <seg>英語話者にとって馴染みのある記号は A 、B 、C 、などの文字と、アラビア数字や句読記号です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The choice of which method to execute when a function is applied is called &lt;x1/&gt;dispatch&lt;x2/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T010049Z" creationid="hsugawa8651" creationdate="20181120T010049Z">
        <seg>実行するメソッドを、関数が適用される際に選択することを、ディスパッチと呼ばれます。 </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The code to be called must be available as a shared library.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T160547Z" creationid="hsugawa8651" creationdate="20181109T160547Z">
        <seg>呼び出されるコードは共有ライブラリとして使用できる必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The code to be called must be available as a shared library. Most C and Fortran libraries ship
compiled as shared libraries already, but if you are compiling the code yourself using GCC (or
Clang), you will need to use the &lt;x1/&gt;-shared&lt;x2/&gt; and &lt;x3/&gt;-fPIC&lt;x4/&gt; options. The machine instructions generated
by Julia's JIT are the same as a native C call would be, so the resulting overhead is the same
as calling a library function from C code. (Non-library function calls in both C and Julia can
be inlined and thus may have even less overhead than calls to shared library functions. When both
libraries and executables are generated by LLVM, it is possible to perform whole-program optimizations
that can even optimize across this boundary, but Julia does not yet support that. In the future,
however, it may do so, yielding even greater performance gains.)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T133708Z" creationid="hsugawa8651" creationdate="20181117T133708Z">
        <seg>呼び出されるコードは共有ライブラリとして使用可能である必要があります。ほとんどのCおよびFortranライブラリは、次のようになります。 はすでに共有ライブラリとしてコンパイルされていますが、GCCを使用して自分でコードをコンパイルする場合は Clang)は、&lt;x1/&gt;-共有&lt;x2/&gt;および&lt;x3/&gt;-fPIC&lt;x4/&gt;オプションを使用する必要があります。 JuliaのJITはネイティブのC呼び出しと同じであるため、結果として生じるオーバーヘッドは同じです。 Cコードからライブラリ関数を呼び出します(CとJuliaの両方での非ライブラリ関数呼び出しです)。 共有ライブラリ関数への呼び出しよりも、インライン化されるため、オーバーヘッドが少なくなります。両方とも ライブラリと実行可能ファイルはLLVMによって生成されるため、プログラム全体の最適化を実行することができます。 この境界を越えて最適化することもできますがジュリアはまだサポートしていません将来は しかし、それによってパフォーマンスが向上する可能性があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The compiler will use it if convenient, but otherwise may choose to use the normal
implementation instead.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T032417Z" creationid="hsugawa8651" creationdate="20181116T032417Z">
        <seg>コンパイラは、便利であればそれを使用しますが、そうでなければ通常のものを使用することを選択することができます。 代わりに実装する必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The complete list of trigonometric functions with degree variants is:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T074656Z" creationid="hsugawa8651" creationdate="20181118T100128Z">
        <seg>角度で計算できる三角関数のリストは以下の通りです。:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The concatenation functions are used so often that they have special syntax:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154623Z" creationid="hsugawa8651" creationdate="20181109T154623Z">
        <seg>連結関数は、頻繁に使用されるため、特別な構文が使用されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The condition expressions in the &lt;c3&gt;if&lt;/c3&gt;-&lt;c4&gt;elseif&lt;/c4&gt;-&lt;c5&gt;else&lt;/c5&gt; construct are evaluated until the first one evaluates to &lt;c6&gt;true&lt;/c6&gt;, after which the associated block is evaluated, and no further condition expressions or blocks are evaluated.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T134305Z" creationid="hsugawa8651" creationdate="20181119T134134Z">
        <seg>&lt;c3&gt;if&lt;/c3&gt;-&lt;c4&gt;elseif&lt;/c4&gt;-&lt;c5&gt;else&lt;/c5&gt;構文中の条件文は、&lt;c6&gt;真&lt;/c6&gt;になるものが現れるまで評価が続きます。 その真になった条件式に対応するブロックが評価されると、あとの条件式やブロックは評価されません。
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The condition expressions in the &lt;x7/&gt;if&lt;x8/&gt;-&lt;x9/&gt;elseif&lt;x10/&gt;-&lt;x11/&gt;else&lt;x12/&gt; construct are evaluated until the first
one evaluates to &lt;x13/&gt;true&lt;x14/&gt;, after which the associated block is evaluated, and no further condition
expressions or blocks are evaluated.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T124341Z" creationid="hsugawa8651" creationdate="20181118T124341Z">
        <seg>&lt;x8/&gt;-&lt;x9/&gt;elseif&lt;x12/&gt;&lt;x11/&gt;else&lt;x12/&gt;構成の場合、&lt;x7/&gt;の条件式が評価され、最初の値が最初の値になるまで評価される。 一つは&lt;x13/&gt;真&lt;x14/&gt;と評価され、その後、関連付けられたブロックは評価され、それ以上の条件はありません。 式やブロックが評価されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The contents and code at the cfunction pointer will be erased via a &lt;x7/&gt;`finalizer`&lt;x8/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T152344Z" creationid="hsugawa8651" creationdate="20181117T152344Z">
        <seg>cfunctionポインタでの内容とコードは、&lt;x7/&gt;`ファイナライザー''&lt;x8/&gt;によって消去されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The core language imposes very little; Julia Base and the standard library is written in Julia itself, including primitive operations like integer arithmetic</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T182457Z" creationid="hsugawa8651" creationdate="20181118T182457Z">
        <seg>言語のコア部分は最小限の機能しか提供しません。整数の四則演算のような初等演算を含む標準ライブラリはJulia自身で書かれています</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The core language imposes very little; the standard library is
written in Julia itself, including primitive operations like integer
arithmetic</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T082055Z" creationid="hsugawa8651" creationdate="20181118T082002Z">
        <seg>言語のコア部分は最小限の機能しか提供しません。整数の四則演算のような初等演算を含む標準ライブラリはJulia自身で書かれています</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The default @.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T120236Z" creationid="hsugawa8651" creationdate="20181118T120236Z">
        <seg>デフォルトの@,</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The default constructor
is equivalent to writing your own inner constructor method that takes all of the object's fields
as parameters (constrained to be of the correct type, if the corresponding field has a type),
and passes them to &lt;x1/&gt;new&lt;x2/&gt;, returning the resulting object:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T155809Z" creationid="hsugawa8651" creationdate="20181117T155809Z">
        <seg>デフォルトのコンストラクタ は、すべてのオブジェクトのフィールドを取得する独自のインナー・コンストラクタ・メソッドを記述することと同じです。 パラメータとして指定します(対応するフィールドが型を持つ場合は、正しいタイプに制限されます)。 そして、それらを&lt;x1/&gt;新しい&lt;x2/&gt;に渡して、結果として得られるオブジェクトを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The default mode used is always &lt;a0&gt;&lt;c1&gt;RoundNearest&lt;/c1&gt;&lt;/a0&gt;, which rounds to the nearest representable value, with ties rounded towards the nearest value with an even least significant bit.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T191521Z" creationid="hsugawa8651" creationdate="20181118T191521Z">
        <seg>使用されるデフォルト・モードは常に&lt;a0&gt;&lt;c1&gt;RoundNearest&lt;/c1&gt;&lt;/a0&gt;であり、これは最も近い表現可能なものに丸められます。 値は、最も近い値に対して、最も近い値に丸められ、最も重要なビットであることを示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The default mode used is always &lt;x1/&gt;`RoundNearest`&lt;x2/&gt;, which rounds to the nearest representable
value, with ties rounded towards the nearest value with an even least significant bit.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T034833Z" creationid="hsugawa8651" creationdate="20181112T111339Z">
        <seg>デフォルトでは、偶数の最下位ビットに最も近い値になるよう値を 繰り上げる &lt;x1/&gt;`RoundNearest`&lt;x2/&gt;,が常に使用されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The default precision (in number of bits of the significand) and rounding mode of &lt;x1/&gt;`BigFloat`&lt;x2/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T040028Z" creationid="hsugawa8651" creationdate="20181112T111601Z">
        <seg>デフォルトの精度（仮数のビット数で設定）および&lt;x1/&gt;`BigFloat`&lt;x2/&gt;関数の端数処理は
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The default sorting algorithms are chosen on the basis that they are fast and stable, or &lt;x1/&gt;appear&lt;x2/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T064120Z" creationid="hsugawa8651" creationdate="20181114T064120Z">
        <seg>デフォルトのソートアルゴリズムは、高速で安定しているか、&lt;x1/&gt;が&lt;x2/&gt;であることに基づいて選択されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The default type for an integer literal depends on whether the target system has a 32-bit architecture
or a 64-bit architecture:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T032632Z" creationid="hsugawa8651" creationdate="20181112T110320Z">
        <seg>整数リテラルのデフォルトの型は、ターゲットシステムのアーキテクチャが32ビットであるか 64ビットであるかによって異なります。:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The default type for an integer literal depends on whether the target system has a 32-bit architecture or a 64-bit architecture:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T184844Z" creationid="hsugawa8651" creationdate="20181118T184844Z">
        <seg>整数リテラルのデフォルト・タイプは、ターゲット・システムが32ビット・アーキテクチャーであるか、または、 64ビットのアーキテクチャであるかによって異なります。:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The definitive guide to floating point arithmetic is the &lt;a0&gt;IEEE 754-2008 Standard&lt;/a0&gt;; however, it is not available for free online.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T191537Z" creationid="hsugawa8651" creationdate="20181118T191537Z">
        <seg>浮動小数点演算の最終的なガイドは、&lt;x1/&gt;IEEE754-2008標準&lt;x2/&gt;です。 ただし、無料のオンラインでは利用できません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The definitive guide to floating point arithmetic is the &lt;x1/&gt;IEEE 754-2008 Standard&lt;x2/&gt;;
however, it is not available for free online.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T035107Z" creationid="hsugawa8651" creationdate="20181112T111446Z">
        <seg>浮動小数点演算の最も有効なガイドは &lt;x1/&gt;IEEE754-2008規格&lt;x2/&gt;です。しかし、オンライン上で無償で利用することはできません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The dependency graph&lt;x1/&gt; of a project directory is determined by the presence and contents of project files in the subdirectory of each package.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T121316Z" creationid="hsugawa8651" creationdate="20181118T121316Z">
        <seg>プロジェクトディレクトリの依存グラフ&lt;x1/&gt;は、各パッケージのサブディレクトリ内にあるプロジェクトファイルの存在と内容によって決まります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The dependency graph&lt;x1/&gt; of a project environment is determined by the contents of the manifest file, if present.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T121112Z" creationid="hsugawa8651" creationdate="20181118T121112Z">
        <seg>プロジェクト環境の依存グラフ&lt;x1/&gt;は、マニフェストファイルが存在する場合は、その内容によって決定されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The destructuring feature can also be used within a function argument.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T101537Z" creationid="hsugawa8651" creationdate="20181112T101537Z">
        <seg>デストラクチャリング機能は、関数引数内で使用することもできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The display functions for &lt;x11/&gt;D&lt;x12/&gt; can then be called directly, but they can also be invoked
automatically from &lt;x13/&gt;`display(x)`&lt;x14/&gt; simply by pushing a new display onto the display-backend stack
with:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T043339Z" creationid="hsugawa8651" creationdate="20181112T043339Z">
        <seg>&lt;x11/&gt;D&lt;x12/&gt;の表示関数は直接呼び出すことができますが、呼び出されることもあります。 display(x)`&lt;x14/&gt;display(x)`&lt;x14/&gt;単に新しいディスプレイをディスプレイのバックエンド・スタックにプッシュすることによって、自動的に&lt;x13/&gt;`display(x)`&lt;x14/&gt;から :</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The distance between two adjacent representable floating-point numbers is not constant, but is
smaller for smaller values and larger for larger values.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T034619Z" creationid="hsugawa8651" creationdate="20181112T111227Z">
        <seg>隣接する2つの浮動小数点数の距離は一定ではありませんが、小さい値ではその距離はより小さく、 大きい値ではより大きくなります。言</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The distance between two adjacent representable floating-point numbers is not constant, but is smaller for smaller values and larger for larger values.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T191154Z" creationid="hsugawa8651" creationdate="20181118T191154Z">
        <seg>2つの隣接する表現可能浮動小数点数の間の距離は一定ではありませんが 小さい値では小さくなり、大きい値ほど大きい値になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The easiest way to learn and experiment with Julia is by starting an
interactive session (also known as a read-eval-print loop or “repl”)
by double-clicking the Julia executable or running &lt;c0&gt;&lt;s1&gt;julia&lt;/s1&gt;&lt;/c0&gt; from the
command line:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T083810Z" creationid="hsugawa8651" creationdate="20181118T083810Z">
        <seg>Juliaを学んだり試したりする一番簡単な方法は、インタラクティブ・セッション（read-eval-print loop、もしくは”repl”とも呼ばれるものです）を使ったものです。セッションを起動するには、Juliaの実行ファイルをダブルクリックするか、コマンドラインから&lt;c0&gt;&lt;s1&gt;julia&lt;/s1&gt;&lt;/c0&gt; を実行します。

</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The easiest way to learn and experiment with Julia is by starting an interactive session (also
known as a read-eval-print loop or "REPL") by double-clicking the Julia executable or running
&lt;x1/&gt;julia&lt;x2/&gt; from the command line:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T091013Z" creationid="hsugawa8651" creationdate="20181109T224254Z">
        <seg>Juliaを学んだり試したりする一番簡単な方法は、インタラクティブ・セッション（read-eval-print loop、もしくは”repl”とも呼ばれるものです）を使ったものです。セッションを起動するには、Juliaの実行ファイルをダブルクリックするか、コマンドラインから&lt;x1/&gt;julia&lt;x2/&gt;を実行します。

</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The easiest way to learn and experiment with Julia is by starting an interactive session (also
known as a read-eval-print loop or "repl") by double-clicking the Julia executable or running
&lt;x1/&gt;julia&lt;x2/&gt; from the command line:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T231742Z" creationid="hsugawa8651" creationdate="20181119T231742Z">
        <seg>Juliaを学んだり試したりする一番簡単な方法は、インタラクティブ・セッション（read-eval-print loop、もしくは”repl”とも呼ばれるものです）を使ったものです。セッションを起動するには、Juliaの実行ファイルをダブルクリックするか、コマンドラインから&lt;x1/&gt;julia&lt;x2/&gt;を実行します。

</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The easiest way to learn and experiment with Julia is by starting an interactive session (also known as a read-eval-print loop or "REPL") by double-clicking the Julia executable or running &lt;c0&gt;julia&lt;/c0&gt; from the command line:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T182950Z" creationid="hsugawa8651" creationdate="20181118T173416Z">
        <seg>Juliaを学んだり試したりする一番簡単な方法は、インタラクティブ・セッション（read-eval-print loop、すなわち、 ”REPL”とも呼ばれるものです）を使ったものです。セッションを起動するには、Juliaの実行ファイルをダブルクリックするか、コマンドラインから&lt;c0&gt;julia&lt;/c0&gt;を実行します。

</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The easiest way to understand this behavior is to see an example.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T135302Z" creationid="hsugawa8651" creationdate="20181109T230103Z">
        <seg>この動作を理解する最も簡単な方法は、例を見ることでしょう。
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The effect of &lt;x15/&gt;import X&lt;x16/&gt; depends on two questions:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T152813Z" creationid="hsugawa8651" creationdate="20181117T152813Z">
        <seg>&lt;x15/&gt;インポートX&lt;x16/&gt;の効果は、次の2つの質問に依存しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The element type of the tuple must be an instance of &lt;x1/&gt;VecElement{T}&lt;x2/&gt; where &lt;x3/&gt;T&lt;x4/&gt; is a primitive type that
is 1, 2, 4 or 8 bytes.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T151316Z" creationid="hsugawa8651" creationdate="20181117T151316Z">
        <seg>タプルの要素タイプは、&lt;x1/&gt;VecElement{T}&lt;x2/&gt;のインスタンスでなければならない。ここで、&lt;x3/&gt;T&lt;x4/&gt;はプリミティブ型である。 は、1 2 4バイトまたは8バイトです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The expression &lt;c0&gt;a&lt;/c0&gt;, before the &lt;c1&gt;?&lt;/c1&gt;, is a condition expression, and the ternary operation evaluates the expression &lt;c2&gt;b&lt;/c2&gt;, before the &lt;c3&gt;:&lt;/c3&gt;, if the condition &lt;c4&gt;a&lt;/c4&gt; is &lt;c5&gt;true&lt;/c5&gt; or the expression &lt;c6&gt;c&lt;/c6&gt;, after the &lt;c7&gt;:&lt;/c7&gt;, if it is &lt;c8&gt;false&lt;/c8&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T135252Z" creationid="hsugawa8651" creationdate="20181119T135252Z">
        <seg>&lt;c1&gt;！&lt;/c1&gt;の前にある式&lt;c0&gt;a&lt;/c0&gt;は条件式で、三項演算は&lt;c4&gt;a&lt;/c4&gt;が&lt;c5&gt;真&lt;/c5&gt;のときは、&lt;c3&gt;:&lt;/c3&gt;の前にある&lt;c2&gt;b&lt;/c2&gt;を評価し、&lt;c8&gt;偽&lt;/c8&gt;の時は、&lt;c7&gt;:&lt;/c7&gt;の後にある&lt;c6&gt;c&lt;/c6&gt;を評価します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The expression &lt;x1/&gt;a&lt;x2/&gt;, before the &lt;x3/&gt;?&lt;x4/&gt;, is a condition expression, and the ternary operation evaluates
the expression &lt;x5/&gt;b&lt;x6/&gt;, before the &lt;x7/&gt;:&lt;x8/&gt;, if the condition &lt;x9/&gt;a&lt;x10/&gt; is &lt;x11/&gt;true&lt;x12/&gt; or the expression &lt;x13/&gt;c&lt;x14/&gt;, after
the &lt;x15/&gt;:&lt;x16/&gt;, if it is &lt;x17/&gt;false&lt;x18/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T124400Z" creationid="hsugawa8651" creationdate="20181118T124400Z">
        <seg>&lt;x3/&gt;?&lt;x4/&gt;より前の&lt;x1/&gt;a&lt;x2/&gt;は条件式であり、三元演算は次の条件式で評価される。 &lt;x7/&gt;の前に&lt;x5/&gt;b&lt;x6/&gt;、条件&lt;x9/&gt;a&lt;x10/&gt;が&lt;x11/&gt;真&lt;x12/&gt;である場合、または式&lt;x13/&gt;c&lt;x14/&gt;、&lt;x13/&gt;c&lt;x14/&gt;c&lt;x14/&gt;、&lt;x13/&gt; &lt;x15/&gt;:&lt;x16/&gt;は、&lt;x17/&gt;false&lt;x18/&gt;である場合には、その値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The expression &lt;x4/&gt;include("source.jl")&lt;x5/&gt; causes the contents of the file &lt;x6/&gt;source.jl&lt;x7/&gt; to be evaluated in the global scope of the module where the &lt;x8/&gt;include&lt;x9/&gt; call occurs.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T152713Z" creationid="hsugawa8651" creationdate="20181117T152713Z">
        <seg>&lt;x4/&gt;の表現は、&lt;x8/&gt;が&lt;x9/&gt;のコールが発生するモジュールのグローバルスコープで、ファイル&lt;x6/&gt;ソース.jl&lt;x7/&gt;の内容を評価することを意味します。&lt;x4/&gt;は、&lt;x8/&gt;の内容を表します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The fallback definition is</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T131316Z" creationid="hsugawa8651" creationdate="20181113T131316Z">
        <seg>フォールバック定義は、次のとおりです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The field declarations &lt;x5/&gt;num::T&lt;x6/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T124112Z" creationid="hsugawa8651" creationdate="20181118T124112Z">
        <seg>フィールド宣言&lt;x5/&gt;num::T&lt;x6/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The final argument
&lt;x1/&gt;bc&lt;x2/&gt; is a lazy representation of a (potentially fused) broadcast operation, a &lt;x3/&gt;Broadcasted&lt;x4/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T131331Z" creationid="hsugawa8651" creationdate="20181113T131331Z">
        <seg>最後の引数 &lt;x1/&gt;bc&lt;x2/&gt;は(潜在的に融合された)ブロードキャスト動作の遅延表現であり、&lt;x3/&gt;ブロードキャストされた&lt;x4/&gt;である。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The final call to &lt;x1/&gt;qsort&lt;x2/&gt; looks like this:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T150536Z" creationid="hsugawa8651" creationdate="20181117T150536Z">
        <seg>&lt;x1/&gt;qsort&lt;x2/&gt;の最終的な呼び出しは、次のようになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The final problem which has still not been addressed is construction of self-referential objects,
or more generally, recursive data structures.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T155838Z" creationid="hsugawa8651" creationdate="20181117T155838Z">
        <seg>まだ取り組まれていない最後の問題は、自己参照オブジェクトの構築です。 より一般的には、再帰データ構造体です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The first and most basic definition just makes &lt;x2/&gt;a ⊘ b&lt;x3/&gt; construct a &lt;x4/&gt;OurRational&lt;x5/&gt; by applying the
&lt;x6/&gt;OurRational&lt;x7/&gt; constructor to &lt;x8/&gt;a&lt;x9/&gt; and &lt;x10/&gt;b&lt;x11/&gt; when they are integers.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T124208Z" creationid="hsugawa8651" creationdate="20181118T124208Z">
        <seg>最初と最も基本的な定義は、&lt;x2/&gt;aθb&lt;x3/&gt;構成を作成することによって、&lt;x4/&gt;OurRational&lt;x/&gt;を構成することができます。 &lt;x6/&gt;OurRational&lt;x7/&gt;コンストラクタ&lt;x8/&gt;&lt;x9/&gt;と&lt;x10/&gt;b&lt;x11/&gt;は整数である。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The first argument to &lt;x1/&gt;`@cfunction`&lt;x2/&gt; can be marked with a &lt;x3/&gt;$&lt;x4/&gt;, in which case
the return value will instead be a &lt;x5/&gt;struct CFunction&lt;x6/&gt; which closes over the argument.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T152340Z" creationid="hsugawa8651" creationdate="20181117T152340Z">
        <seg>&lt;x1/&gt;`@cfunction`&lt;x2/&gt;の最初の引数は、&lt;x3/&gt;$&lt;x4/&gt;でマークすることができます。この場合は 戻り値は、引数の上で閉じる&lt;x5/&gt;構造体CFunction&lt;x6/&gt;となります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The first argument to &lt;x1/&gt;`ccall`&lt;x2/&gt; can also be an expression evaluated at run time.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T152323Z" creationid="hsugawa8651" creationdate="20181117T152323Z">
        <seg>&lt;x1/&gt;`ccall'&lt;x2/&gt;への最初の引数は、実行時に評価された式でもあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The first construct is used when you need the value, but not index, of each element.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T155843Z" creationid="hsugawa8651" creationdate="20181109T155843Z">
        <seg>最初の構成は、各要素の値が必要な場合に使用されますが、インデックスでは使用されません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The first construct is used when you need the value, but not index, of each element. In the second
construct, &lt;x1/&gt;i&lt;x2/&gt; will be an &lt;x3/&gt;Int&lt;x4/&gt; if &lt;x5/&gt;A&lt;x6/&gt; is an array type with fast linear indexing; otherwise,
it will be a &lt;x7/&gt;CartesianIndex&lt;x8/&gt;:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T135123Z" creationid="hsugawa8651" creationdate="20181117T135123Z">
        <seg>最初の構成は、各要素の値が必要な場合に使用されますが、インデックスではありません。2番目の構成は、次のように使用されます。 構成,&lt;x1/&gt;i&lt;x2/&gt;は&lt;x5/&gt;Int&lt;x6/&gt;であり,&lt;x5/&gt;A&lt;x6/&gt;が高速線形インデックスを用いたアレイ型である場合は,それ以外の値である。 &lt;x7/&gt;CartesianIndex&lt;x8/&gt;になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The first five control flow mechanisms are standard to high-level programming languages.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T133336Z" creationid="hsugawa8651" creationdate="20181109T225741Z">
        <seg>はじめの５つは、高水準なプログラミング言語には標準的な制御構造です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The first form creates a &lt;x3/&gt;`Symbol`&lt;x4/&gt;,
an &lt;x5/&gt;interned string&lt;x6/&gt; used as one building-block
of expressions:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T165204Z" creationid="hsugawa8651" creationdate="20181118T165204Z">
        <seg>最初の形式では、&lt;x3/&gt;`Symbol'&lt;x4/&gt;が作成されます。 &lt;x5/&gt;インターンされたストリング&lt;x6/&gt;は、1つのビルディング・ブロックとして使用されます。 式:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The first index</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T113023Z" creationid="hsugawa8651" creationdate="20181112T113012Z">
        <seg>最初のインデックス</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The first is the "standard"
general constructor that infers the type parameter &lt;x2/&gt;T&lt;x3/&gt; from the type of the numerator and denominator
when they have the same type.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T124136Z" creationid="hsugawa8651" creationdate="20181118T124136Z">
        <seg>一つ目は「標準」です 分子の種類と分母のタイプからの型パラメータ&lt;x2/&gt;T&lt;x3/&gt;を推論する一般的なコンストラクタ 同じタイプを持っています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The first line -- &lt;x1/&gt;struct OurRational{T&lt;:Integer} &lt;: Real&lt;x2/&gt; -- declares that &lt;x3/&gt;OurRational&lt;x4/&gt; takes one
type parameter of an integer type, and is itself a real type.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T124107Z" creationid="hsugawa8651" creationdate="20181118T124107Z">
        <seg>最初の行--&lt;x1/&gt;struct OurRational{T&lt;:Integer}&lt;:Real&lt;x2/&gt;--&lt;x3/&gt;は、&lt;x3/&gt;OurRational&lt;x/&gt;を宣言します。 integer型のパラメータで、それ自体が実際の型です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The first method applies whenever both arguments are of the same concrete type, regardless of
what type that is, while the second method acts as a catch-all, covering all other cases.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T015956Z" creationid="hsugawa8651" creationdate="20181120T015956Z">
        <seg>第1のメソッドは、両方の引数が同じ具象型であれば、どんな型であれ適用されます。第2のメソッドは他のすべての場合に渡る全捕捉として働きます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The first method definition for a function creates the
function object, and subsequent method definitions add new methods to the existing function object.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T012929Z" creationid="hsugawa8651" creationdate="20181120T012904Z">
        <seg>最初のメソッド定義では、関数オブジェクトを作成され、次回以降のメソッド定義では、既存の関数オブジェクトに新しいメソッドが追加されます。 </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The floating-point literal expression &lt;x1/&gt;1e10&lt;x2/&gt; could be interpreted as the numeric literal &lt;x3/&gt;1&lt;x4/&gt; multiplied
by the variable &lt;x5/&gt;e10&lt;x6/&gt;, and similarly with the equivalent &lt;x7/&gt;E&lt;x8/&gt; form.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T040942Z" creationid="hsugawa8651" creationdate="20181112T111928Z">
        <seg>浮動小数点リテラルの表記 &lt;x1/&gt;1e10&lt;x2/&gt; は、数値リテラル &lt;x3/&gt;1&lt;x4/&gt; 掛ける指数関数のような変数 &lt;x5/&gt;e10&lt;x6/&gt; と解釈される可能性があります</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The following
change to the above function results in a runtime error</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T124343Z" creationid="hsugawa8651" creationdate="20181118T124343Z">
        <seg>次 上記の関数に変更すると、ランタイムエラーになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The following &lt;x1/&gt;arithmetic operators&lt;x2/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T131935Z" creationid="hsugawa8651" creationdate="20181113T131935Z">
        <seg>以下の演算子&lt;x1/&gt;演算子&lt;x2/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The following &lt;x1/&gt;bitwise operators&lt;x2/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T132228Z" creationid="hsugawa8651" creationdate="20181113T132228Z">
        <seg>以下の&lt;x1/&gt;ビット演算子&lt;x2/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The following Julia code calls &lt;x1/&gt;dist&lt;x2/&gt; using &lt;x3/&gt;ccall&lt;x4/&gt;:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T151323Z" creationid="hsugawa8651" creationdate="20181117T151323Z">
        <seg>次のJuliaコードは、&lt;x3/&gt;ccall&lt;x4/&gt;を使用して&lt;x1/&gt;dist&lt;x2/&gt;を呼び出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The following are Julia's primitive numeric types:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T032232Z" creationid="hsugawa8651" creationdate="20181109T225110Z">
        <seg>以下はJuliaにおける数値プリミティブ型です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The following arguments, if any, are the actual argument values passed to the function.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T224007Z" creationid="hsugawa8651" creationdate="20181109T224007Z">
        <seg>次の引数は、関数に渡された実際の引数の値です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The following change to the above function results in a runtime error</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T134616Z" creationid="hsugawa8651" creationdate="20181119T134616Z">
        <seg>上記の関数を次のように変更すると、実行時エラーが発生します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The following example computes a dot product using a BLAS function.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T151846Z" creationid="hsugawa8651" creationdate="20181117T151846Z">
        <seg>次の例では、BLAS関数を使用してドット製品を計算します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The following example computes a weighted average of the current element and its left and right
neighbor along a 1-d grid.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154818Z" creationid="hsugawa8651" creationdate="20181109T154818Z">
        <seg>次の例では、現在の要素とその左側と右側の加重平均を計算しています。 1Dグリッドに沿った隣接。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The following example computes a weighted average of the current element and its left and right
neighbor along a 1-d grid. :</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T134801Z" creationid="hsugawa8651" creationdate="20181117T134801Z">
        <seg>次の例では、現在の要素とその左側と右側の加重平均を計算しています。 1Dグリッドに沿った隣接するもの:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The following example computes the QR decomposition of a small section of a larger array, without
creating any temporaries, and by calling the appropriate LAPACK function with the right leading
dimension size and stride parameters.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T160522Z" creationid="hsugawa8651" creationdate="20181109T160522Z">
        <seg>次の例は、大きな配列の小さいセクションのQR分解を計算します。 一時的なものを作成すること、そして適切なLAPACK関数を使って適切な関数を呼び出すこと 寸法のサイズと歩幅のパラメータです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The following examples show the different forms.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T070904Z" creationid="hsugawa8651" creationdate="20181114T031056Z">
        <seg>以下の例は異なる形式を表しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The following is an inefficient and
verbose way to iterate through the characters of &lt;x6/&gt;s&lt;x7/&gt;:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T081821Z" creationid="hsugawa8651" creationdate="20181120T081821Z">
        <seg>下の例は &lt;x6/&gt;s&lt;x7/&gt;という文字を反復処理する非効率的で冗長的な方法です。:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The following methods and types in &lt;x1/&gt;Base.StackTraces&lt;x2/&gt; are not exported and need to be called e.g.
as &lt;x3/&gt;StackTraces.lookup(ptr)&lt;x4/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T064304Z" creationid="hsugawa8651" creationdate="20181114T064304Z">
        <seg>&lt;x1/&gt;ベース.StackTraces&lt;x2/&gt;では、次のメソッドとタイプはエクスポートされず、呼び出される必要があります。 &lt;x3/&gt;StackTraces.lookup(ptr)&lt;x4/&gt;となります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The following methods are described as "unsafe" because a bad pointer or type declaration can
cause Julia to terminate abruptly.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T152524Z" creationid="hsugawa8651" creationdate="20181117T152524Z">
        <seg>次のメソッドは、不正なポインタまたはタイプ宣言は、「安全でない」と記述されています。 ジュリアが突然終了する原因です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The following operators are supported for arrays:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T161207Z" creationid="hsugawa8651" creationdate="20181114T161207Z">
        <seg>配列では、次の演算子がサポートされています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The following two types are equivalent -- one with a default constructor,
the other with an explicit constructor:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T155817Z" creationid="hsugawa8651" creationdate="20181117T155817Z">
        <seg>次の2つのタイプは、デフォルトコンストラクタを使用した場合と同じです。 もう一つは明示的なコンストラクタである。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The following two-word sequences are reserved:
&lt;x1/&gt;abstract type&lt;x2/&gt;, &lt;x3/&gt;mutable struct&lt;x4/&gt;, &lt;x5/&gt;primitive type&lt;x6/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181110T041755Z" creationid="hsugawa8651" creationdate="20181110T041755Z">
        <seg>次の2語のシーケンスが予約されています。 &lt;x1/&gt;抽象型&lt;x2/&gt;,&lt;x3/&gt;mutable構造体&lt;x4/&gt;,&lt;x5/&gt;プリミティブ型&lt;x6/&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The former is a single character value of type &lt;x1/&gt;Char&lt;x2/&gt;, while the latter is a string value that
happens to contain only a single character.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T081316Z" creationid="hsugawa8651" creationdate="20181120T081316Z">
        <seg>前者の記法では一文字のみを取得することが想定されているので、前者は  &lt;x1/&gt;Char&lt;x2/&gt;型になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The full dependency graph of the first environment in a stack is guaranteed to be included intact in the stacked environment including the same versions of all dependencies.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T121430Z" creationid="hsugawa8651" creationdate="20181118T121430Z">
        <seg>スタック内の最初の環境の完全な依存性グラフは、すべての依存関係の同じバージョンを含むスタック環境で完全に含まれていることが保証されています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The full gamut of other &lt;x11/&gt;Elementary Functions&lt;x12/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T123355Z" creationid="hsugawa8651" creationdate="20181118T123355Z">
        <seg>その他の&lt;x11/&gt;プリミティブ関数&lt;x12/&gt;の全範囲</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The garbage collector does not guarantee any order of finalization.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T152248Z" creationid="hsugawa8651" creationdate="20181117T152248Z">
        <seg>ガーベジ・コレクターは、最終化の順序を保証しません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The general &lt;x3/&gt;for&lt;x4/&gt; loop:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181110T042052Z" creationid="hsugawa8651" creationdate="20181110T042052Z">
        <seg>&lt;x4/&gt;ループの一般的な&lt;x3/&gt;は次のようになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The general syntax for assigning values in an n-dimensional array A is:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T155333Z" creationid="hsugawa8651" creationdate="20181109T155333Z">
        <seg>n次元配列Aの値を代入する一般的な構文は次のとおりです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The general syntax for indexing into an n-dimensional array A is:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T155109Z" creationid="hsugawa8651" creationdate="20181109T155109Z">
        <seg>n次元配列Aへの索引付けの一般的な構文は次のとおりです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The global constant &lt;x1/&gt;`im`&lt;x2/&gt; is bound to the complex number &lt;x3/&gt;i&lt;x4/&gt;, representing the principal
square root of -1.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T123030Z" creationid="hsugawa8651" creationdate="20181118T123030Z">
        <seg>グローバル定数&lt;x1/&gt;`im'&lt;x2/&gt;は、複素数&lt;x3/&gt;i&lt;x4/&gt;に結合されており、これは主なものである。 -1の平方根です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The hexadecimal integer literal expression &lt;x1/&gt;0xff&lt;x2/&gt; could be interpreted as the numeric literal
&lt;x3/&gt;0&lt;x4/&gt; multiplied by the variable &lt;x5/&gt;xff&lt;x6/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T041009Z" creationid="hsugawa8651" creationdate="20181112T111924Z">
        <seg>16進整数リテラルの表記 &lt;x1/&gt;0xff&lt;x2/&gt; は、数値リテラル &lt;x3/&gt;0&lt;x4/&gt; 掛ける変数 &lt;x5/&gt;xff&lt;x6/&gt; と解釈される可能性があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The host machine must have the requisite SIMD registers.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T151333Z" creationid="hsugawa8651" creationdate="20181117T151333Z">
        <seg>ホストマシンは、必要なSIMDレジスタを持っている必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The identity element
of this set is the empty string, &lt;x11/&gt;""&lt;x12/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T082631Z" creationid="hsugawa8651" creationdate="20181120T082631Z">
        <seg>この集合の単位元は空の文字列 &lt;x11/&gt;""&lt;x12/&gt;.です。 </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The implementation
of a mathematical operator generally depends on the types of all of its arguments.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T011627Z" creationid="hsugawa8651" creationdate="20181120T011627Z">
        <seg>数学的演算子の実装は、一般には、すべての引数の型に依存しています。 </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The implementation of this behavior is a "world age counter".</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T021113Z" creationid="hsugawa8651" creationdate="20181120T021113Z">
        <seg>この行動の実装は「世界の世代のカウンター」です。
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The import mechanism allows you to load a package—i.e. an independent, reusable collection of Julia code, wrapped in a module—and makes the resulting module available by the name &lt;x6/&gt;X&lt;x7/&gt; inside of the importing module.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T152737Z" creationid="hsugawa8651" creationdate="20181117T152737Z">
        <seg>インポート機構を使用すると、モジュールにラップされたJulia codeの独立した再利用可能なコレクションをロードできます。また、インポートモジュールの内部では、そのモジュールを&lt;x6/&gt;x7/&gt;x&lt;x7/&gt;の名前で使用できるようになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The included path, &lt;x14/&gt;source.jl&lt;x15/&gt;, is interpreted relative to the file where the &lt;x16/&gt;include&lt;x17/&gt; call occurs.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T152708Z" creationid="hsugawa8651" creationdate="20181117T152708Z">
        <seg>インクルードパス&lt;x14/&gt;ソース.jl&lt;x15/&gt;は、&lt;x16/&gt;が&lt;x17/&gt;コールが発生するファイルに対して相対的に解釈されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The index argument is optional (default
is 1), and follows the Julia-convention of 1-based indexing.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T152529Z" creationid="hsugawa8651" creationdate="20181117T152529Z">
        <seg>index引数はオプションです(デフォルトです)。 は1)で、1ベースのインデックス作成のJulia条約に従っています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The infix form is exactly equivalent to the function application form -- in fact the former is
parsed to produce the function call internally.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T130115Z" creationid="hsugawa8651" creationdate="20181120T130115Z">
        <seg>中置方式は関数適用方式とまったく同等です。じつのところ、中置方式は構文解析後に、内部的に関数呼び出しを行っているのです。 </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The initial contents of a plain data type is
undefined:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T123801Z" creationid="hsugawa8651" creationdate="20181118T123801Z">
        <seg>プレーン・データ型の初期内容は、次のとおりです。 未定義:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The inner constructor method can then use the incomplete
object, finishing its initialization before returning it.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T155859Z" creationid="hsugawa8651" creationdate="20181117T155859Z">
        <seg>内部コンストラクタメソッドは、不完全な オブジェクトは初期化を終了してから戻す。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The input &lt;x1/&gt;n&lt;x2/&gt; is passed by value, and so the function's input signature is
simply declared as &lt;x3/&gt;(Csize_t,)&lt;x4/&gt; without any &lt;x5/&gt;Ref&lt;x6/&gt; or &lt;x7/&gt;Ptr&lt;x8/&gt; necessary.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T152051Z" creationid="hsugawa8651" creationdate="20181117T152051Z">
        <seg>入力&lt;x1/&gt;n&lt;x2/&gt;は値によって渡されるので、関数の入力シグネチャは次のようになります。 &lt;x3/&gt;(Csize_t,)&lt;x4/&gt;は、必要な&lt;x5/&gt;Ref&lt;x6/&gt;&lt;x7/&gt;Ptr&lt;x8/&gt;Ptr&lt;x8/&gt;を必要としません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The input types must be written as a literal tuple, not a tuple-valued
variable or expression.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T223955Z" creationid="hsugawa8651" creationdate="20181109T223955Z">
        <seg>入力タイプは、タプルではなく、リテラルタプルとして記述する必要があります。 変数または式。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The interested reader should consider perusing the rest of &lt;x7/&gt;`rational.jl`&lt;x8/&gt;:
it is short, self-contained, and implements an entire basic Julia type.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T124224Z" creationid="hsugawa8651" creationdate="20181118T124224Z">
        <seg>興味のある読者は、残りの&lt;x7/&gt;`rational.jl'&lt;x8/&gt;の残りを熟考する必要があります。 は短い自己完結型で、基本的なJulia型を実装しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The intuition behind this behavior is that &lt;x1/&gt;x&lt;x2/&gt; is evaluated once for each &lt;x3/&gt;$&lt;x4/&gt;:
one &lt;x5/&gt;$&lt;x6/&gt; works similarly to &lt;x7/&gt;eval(:x)&lt;x8/&gt;, giving &lt;x9/&gt;x&lt;x10/&gt;'s value, while two &lt;x11/&gt;$&lt;x12/&gt;s do the
equivalent of &lt;x13/&gt;eval(eval(:x))&lt;x14/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T165209Z" creationid="hsugawa8651" creationdate="20181118T165209Z">
        <seg>この挙動の背後にある直感は、&lt;x1/&gt;x&lt;x2/&gt;が、&lt;x3/&gt;$&lt;x4/&gt;に1回ずつ評価されることである。 &lt;x5/&gt;$&lt;x6/&gt;は、&lt;x7/&gt;eval(:x)&lt;x8/&gt;と同様に動作します。&lt;x9/&gt;x10/&gt;の値は&lt;x9/&gt;x&lt;x10/&gt;の値であり、2&lt;x11/&gt;$x12/&gt;です。 &lt;x13/&gt;eval(eval(:x))&lt;x14/&gt;に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The key point here is that Julia code is internally represented as a data structure that is accessible
from the language itself.&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T115242Z" creationid="hsugawa8651" creationdate="20181118T115242Z">
        <seg>ここでのキーポイントは、Juliaコードは、アクセス可能なデータ構造として内部的に表現されるということです。 &lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The lack of type declarations in most dynamic
languages, however, means that one cannot instruct the compiler about
the types of values, and often cannot explicitly talk about types at
all.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T082237Z" creationid="hsugawa8651" creationdate="20181118T082237Z">
        <seg>多くの動的言語における型宣言の欠落は、コンパイラに対して値の型を伝えられない、または型について何ら触れることができないということを意味します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The lack of type declarations in most dynamic languages, however, means that one cannot instruct the compiler about the types of values, and often cannot explicitly talk about types at all.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T182559Z" creationid="hsugawa8651" creationdate="20181118T182559Z">
        <seg>多くの動的言語における型宣言の欠落は、コンパイラに対して値の型を伝えられない、または型について何ら触れることができないということを意味します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The last error is because &lt;x1/&gt;'o'&lt;x2/&gt; is a character literal, and &lt;x3/&gt;`contains()`&lt;x4/&gt; is a generic
function that looks for subsequences.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T083849Z" creationid="hsugawa8651" creationdate="20181120T083849Z">
        <seg>最後のエラーは、&lt;x1/&gt;'o'&lt;x2/&gt;が文字リテラルであり、&lt;x3/&gt;`contains()`&lt;x4/&gt;は部分列を探す汎用関数であるために起こりました。 </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The last index, used in &lt;x1/&gt;X[end]&lt;x2/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T113029Z" creationid="hsugawa8651" creationdate="20181112T113029Z">
        <seg>最後のインデックスで、&lt;x1/&gt;X[end]&lt;x2/&gt;で使用されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The last point is potentially surprising and thus worth noting:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T064349Z" creationid="hsugawa8651" creationdate="20181114T030511Z">
        <seg>最後の記述は驚くべきものかもしれませんが、特段意味があるものではありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The location &lt;x1/&gt;(i_1, i_2, i_3, ..., i_{n+1})&lt;x2/&gt; contains the value at &lt;x3/&gt;A[I_1[i_1, i_2], I_2[i_3], ..., I_n[i_{n+1}]]&lt;x4/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T160844Z" creationid="hsugawa8651" creationdate="20181114T160844Z">
        <seg>位置&lt;x1/&gt;(i_1,i_2,i_3,.…i_{n+1})&lt;x2/&gt;は、&lt;x3/&gt;A[I_1[i_1,i_2],I_2[i_3],.…I_n[i_{n+1}]]&lt;x4/&gt;の値を含む。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The location &lt;x1/&gt;(i_1, i_2, i_3, ..., i_{n+1})&lt;x2/&gt; contains the value at &lt;x3/&gt;A[I_1[i_1, i_2], I_2[i_3], ..., I_n[i_{n+1}]]&lt;x4/&gt;.
All dimensions indexed with scalars are dropped. For example, the result of &lt;x5/&gt;A[2, I, 3]&lt;x6/&gt; is an
array with size &lt;x7/&gt;size(I)&lt;x8/&gt;. Its &lt;x9/&gt;i&lt;x10/&gt;th element is populated by &lt;x11/&gt;A[2, I[i], 3]&lt;x12/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T134838Z" creationid="hsugawa8651" creationdate="20181117T134838Z">
        <seg>位置&lt;x1/&gt;(i_1,i_2,i_3,.…i_{n+1})&lt;x2/&gt;は、&lt;x3/&gt;A[I_1[i_1,i_2],I_2[i_3],.…I_n[i_{n+1}]]&lt;x4/&gt;の値を含む。 スカラーでインデックス付けされたすべての次元は削除されます。たとえば、&lt;x5/&gt;A[2,I,3]&lt;x6/&gt;の結果は size&lt;x7/&gt;サイズ(I)&lt;x8/&gt;の配列。&lt;x9/&gt;i&lt;x10/&gt;th要素は&lt;x11/&gt;A[2,I[I],3]&lt;x12/&gt;で占められる。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The machine instructions generated
by Julia's JIT are the same as a native C call would be, so the resulting overhead is the same
as calling a library function from C code.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T160553Z" creationid="hsugawa8651" creationdate="20181109T160553Z">
        <seg>生成されたマシン命令 JuliaのJITはネイティブのC呼び出しと同じであるため、結果として生じるオーバーヘッドは同じです。 は、Cコードからライブラリ関数を呼び出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The machines defined in &lt;c14&gt;&lt;s15&gt;file&lt;/s15&gt;&lt;/c14&gt; must be accessible via a
passwordless &lt;c16&gt;&lt;s17&gt;ssh&lt;/s17&gt;&lt;/c16&gt; login, with Julia installed at the same location as the
current host.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T175657Z" creationid="hsugawa8651" creationdate="20181118T084922Z">
        <seg>&lt;c14&gt;&lt;s15&gt;file&lt;/s15&gt;&lt;/c14&gt; で定義されたマシンは、パスワード無しで &lt;c16&gt;&lt;s17&gt;ssh&lt;/s17&gt;&lt;/c16&gt; アクセスでき、現在のホストと同じ場所にJuliaがインストールされている必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The machines defined in &lt;c6&gt;file&lt;/c6&gt; must be accessible via a password-less &lt;c7&gt;ssh&lt;/c7&gt; login, with Julia installed at the same location as the current host.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T173842Z" creationid="hsugawa8651" creationdate="20181118T173842Z">
        <seg>&lt;c6&gt;file&lt;/c6&gt; で定義されたマシンは、パスワード無しで &lt;c7&gt;ssh&lt;/c7&gt; アクセスでき、現在のホストと同じ場所にJuliaがインストールされている必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The machines defined in &lt;x6/&gt;file&lt;x7/&gt; must be accessible via a password-less
&lt;x8/&gt;ssh&lt;x9/&gt; login, with Julia installed at the same location as the current host.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T092400Z" creationid="hsugawa8651" creationdate="20181109T224421Z">
        <seg>&lt;x6/&gt;file&lt;x7/&gt; で定義されたマシンは、パスワード無しで &lt;x8&gt;ssh&lt;x9/&gt; アクセスでき、現在のホストと同じ場所にJuliaがインストールされている必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The machines defined in &lt;x6/&gt;file&lt;x7/&gt; must be accessible via a passwordless
&lt;x8/&gt;ssh&lt;x9/&gt; login, with Julia installed at the same location as the current host.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T233739Z" creationid="hsugawa8651" creationdate="20181119T233739Z">
        <seg>&lt;x6/&gt;file&lt;x7/&gt; で定義されたマシンは、パスワード無しで &lt;x8/&gt;ssh&lt;x9/&gt;アクセスでき、現在のホストと同じ場所にJuliaがインストールされている必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The macro &lt;x1/&gt;`@cfunction`&lt;x2/&gt; generates the C-compatible function pointer for a call to a
Julia function.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T153931Z" creationid="hsugawa8651" creationdate="20181109T153931Z">
        <seg>マクロ&lt;x1/&gt;`@cfunction`&lt;x2/&gt;は、コールのC互換関数ポインタを生成します。 Julia関数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The macro &lt;x1/&gt;`@cfunction`&lt;x2/&gt; generates the C-compatible function pointer for a call to a
Julia function. Arguments to &lt;x3/&gt;`@cfunction`&lt;x4/&gt; are as follows:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T133859Z" creationid="hsugawa8651" creationdate="20181117T133859Z">
        <seg>マクロ&lt;x1/&gt;`@cfunction`&lt;x2/&gt;は、コールのC互換関数ポインタを生成します。 Julia関数。&lt;x3/&gt;`@cfunction`&lt;x4/&gt;への引数は次のとおりです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The manifest file, if present, gives a complete dependency graph, including all direct and indirect dependencies, exact versions of each dependency, and sufficient information to locate and load the correct version.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T152921Z" creationid="hsugawa8651" creationdate="20181117T152921Z">
        <seg>マニフェスト・ファイルが存在する場合、すべての依存関係、依存関係の正確なバージョン、適切なバージョンを検索してロードするための十分な情報など、すべての依存関係を含む完全な依存関係グラフが表示されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The matrix adds a dimension.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T160902Z" creationid="hsugawa8651" creationdate="20181114T160902Z">
        <seg>マトリックスは寸法を追加します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The meaning of &lt;x9/&gt;X&lt;x10/&gt; in &lt;x11/&gt;import X&lt;x12/&gt; is context-dependent: which &lt;x13/&gt;X&lt;x14/&gt; package is loaded depends on what code the statement occurs in.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T152810Z" creationid="hsugawa8651" creationdate="20181117T152810Z">
        <seg>&lt;x11/&gt;インポートX&lt;x12/&gt;における&lt;x9/&gt;x10/&gt;の意味はコンテキスト依存であり、&lt;x13/&gt;X&lt;x14/&gt;パッケージは、文がどのコードによって生成されるかによって異なります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The meaning of prefix &lt;x1/&gt;&amp;&lt;x2/&gt; is not quite the same as in C. In particular, any changes to the referenced
variables will not be visible in Julia unless the type is mutable (declared via &lt;x3/&gt;mutable struct&lt;x4/&gt;).</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T151853Z" creationid="hsugawa8651" creationdate="20181117T151853Z">
        <seg>プレフィックス&lt;x1/&gt;&amp;&lt;x2/&gt;の意味は、Cとまったく同じではありません。特に、参照されているものの変更はありません。 変数は、そのタイプがmutable(&lt;x3/&gt;mutable構造体&lt;x4/&gt;によって宣言されている)でない限り、Juliaでは表示されません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The meaning of this form is that &lt;x1/&gt;F(x,y,...)&lt;x2/&gt; is evaluated with the variables &lt;x3/&gt;x&lt;x4/&gt;, &lt;x5/&gt;y&lt;x6/&gt;, etc. taking
on each value in their given list of values.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154807Z" creationid="hsugawa8651" creationdate="20181109T154807Z">
        <seg>この形式の意味は、&lt;x1/&gt;F(x,y,...)&lt;x2/&gt;は、変数&lt;x3/&gt;x4&lt;x4/&gt;、&lt;x5/&gt;y&lt;x6/&gt;の変数を用いて評価されることである。 指定された値リストの各値です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The meaning of this form is that &lt;x1/&gt;F(x,y,...)&lt;x2/&gt; is evaluated with the variables &lt;x3/&gt;x&lt;x4/&gt;, &lt;x5/&gt;y&lt;x6/&gt;, etc. taking
on each value in their given list of values. Values can be specified as any iterable object, but
will commonly be ranges like &lt;x7/&gt;1:n&lt;x8/&gt; or &lt;x9/&gt;2:(n-1)&lt;x10/&gt;, or explicit arrays of values like &lt;x11/&gt;[1.2, 3.4, 5.7]&lt;x12/&gt;.
The result is an N-d dense array with dimensions that are the concatenation of the dimensions
of the variable ranges &lt;x13/&gt;rx&lt;x14/&gt;, &lt;x15/&gt;ry&lt;x16/&gt;, etc. and each &lt;x17/&gt;F(x,y,...)&lt;x18/&gt; evaluation returns a scalar.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T134758Z" creationid="hsugawa8651" creationdate="20181117T134758Z">
        <seg>この形式の意味は、&lt;x1/&gt;F(x,y,...)&lt;x2/&gt;は、変数&lt;x3/&gt;x4&lt;x4/&gt;、&lt;x5/&gt;y&lt;x6/&gt;の変数を用いて評価されることである。 指定された値リストの各値を指定します。値は、任意のオブジェクトとして指定することができますが は一般的に&lt;x7/&gt;1:n&lt;x8/&gt;または&lt;x9/&gt;2:(n-1)&lt;x10/&gt;、または&lt;x11/&gt;[1.2、3.4、5.7]&lt;x12/&gt;のような明示的な値の配列である。 結果は、次元の連結である次元を持つN次元の密配列です。 変数範囲&lt;x13/&gt;rx&lt;x14/&gt;、&lt;x15/&gt;ry&lt;x16/&gt;など、各&lt;x17/&gt;F(x,y,...)&lt;x18/&gt;評価はスカラーを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The mechanism by which Julia picks default sorting algorithms is implemented via the &lt;x1/&gt;Base.Sort.defalg&lt;x2/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T064226Z" creationid="hsugawa8651" creationdate="20181114T064226Z">
        <seg>Juliaがデフォルトのソートアルゴリズムを選択するメカニズムは、&lt;x1/&gt;Base.Sort.デフォルグ&lt;x2/&gt;を介して実装されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The mechanism for combining the &lt;x1/&gt;roots&lt;x2/&gt;, &lt;x3/&gt;graph&lt;x4/&gt; and &lt;x5/&gt;paths&lt;x6/&gt; data structures of the components of an environment stack is simple: they are simply merged as dictionaries, favoring earlier entries over later ones in the case of key collisions.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T121416Z" creationid="hsugawa8651" creationdate="20181118T121416Z">
        <seg>環境スタックの構成要素の&lt;x1/&gt;ルート&lt;x2/&gt;,&lt;x3/&gt;グラフ&lt;x4/&gt;と&lt;x6/&gt;の各パス&lt;x6/&gt;データ構造を結合する機構は簡単である。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The memory is managed by Julia and the &lt;x2/&gt;Ref&lt;x3/&gt; signature alerts Julia's
garbage collector to keep managing the memory for &lt;x4/&gt;result_array&lt;x5/&gt; while the &lt;x6/&gt;`ccall`&lt;x7/&gt; executes.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T152212Z" creationid="hsugawa8651" creationdate="20181117T152212Z">
        <seg>メモリはJuliaによって管理され、&lt;x2/&gt;Ref&lt;x3/&gt;&lt;x3/&gt;のシグニチャアラートが表示されます。 &lt;x6/&gt;のccall&lt;x7/&gt;が実行されている間に、&lt;x4/&gt;result_array&lt;x5/&gt;のメモリを管理するためのガーベッジ・コレクタです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The memory will be released the next time the garbage collector runs; you can force
this to happen with &lt;x5/&gt;&lt;x6/&gt;&lt;x7/&gt;(@ref Base.GC.gc).</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181110T024659Z" creationid="hsugawa8651" creationdate="20181110T024659Z">
        <seg>次にガーベッジ・コレクターが実行されるとメモリーが解放され、次のように強制的に実行されます。 これは&lt;x5/&gt;&lt;x6/&gt;&lt;x7/&gt;(@ref Base.GC.gc)で起こる。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The middle expression is only evaluated once, rather than twice as it would be if the expression
were written as &lt;x1/&gt;v(1) &lt; v(2) &amp;&amp; v(2) &lt;= v(3)&lt;x2/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T065318Z" creationid="hsugawa8651" creationdate="20181114T030745Z">
        <seg>&lt;x1/&gt;v(1) &lt; v(2) &amp;&amp; v(2) &lt;= v(3)&lt;x2/&gt;と記載されている場合は2度処理されるかのように 思われるかもしれませんが、中間の式は1度だけ処理されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The minimum and maximum representable values of primitive numeric types such as integers are given
by the &lt;x1/&gt;`typemin()`&lt;x2/&gt; and &lt;x3/&gt;`typemax()`&lt;x4/&gt; functions:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T032958Z" creationid="hsugawa8651" creationdate="20181119T235025Z">
        <seg>整数のような数値プリミティブ型の最小値と最大値は、 &lt;x1/&gt;`typemin()`&lt;x2/&gt; および&lt;x3/&gt;`typemax()`&lt;x4/&gt;関数により取得が可能です。:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The minimum and maximum representable values of primitive numeric types such as integers are given
by the &lt;x1/&gt;`typemin`&lt;x2/&gt; and &lt;x3/&gt;`typemax`&lt;x4/&gt; functions:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T120325Z" creationid="hsugawa8651" creationdate="20181118T120325Z">
        <seg>整数などのプリミティブ数値型の最小および最大表現可能値を指定します。 &lt;x1/&gt;「テーパミン」&lt;x2/&gt;および&lt;x3/&gt;「テーペマス」&lt;x4/&gt;関数:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The minimum and maximum representable values of primitive numeric types such as integers are given by the &lt;a0&gt;&lt;c1&gt;typemin&lt;/c1&gt;&lt;/a0&gt; and &lt;a2&gt;&lt;c3&gt;typemax&lt;/c3&gt;&lt;/a2&gt; functions:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T185644Z" creationid="hsugawa8651" creationdate="20181118T185644Z">
        <seg>整数などのプリミティブ数値型の最小および最大表現可能値を指定します。 &lt;a0&gt;&lt;c1&gt;typemin&lt;/c1&gt;&lt;/a0&gt;および&lt;a2&gt;&lt;c3&gt;typemax&lt;/c3&gt;&lt;/a2&gt;関数:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The most significant departures of Julia from typical dynamic languages
are:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T081945Z" creationid="hsugawa8651" creationdate="20181118T081945Z">
        <seg>一般の動的言語と比べてJuliaが特に優れている点としては以下のようなものが挙げられます。
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The most significant departures of Julia from typical dynamic languages are:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T182452Z" creationid="hsugawa8651" creationdate="20181118T182452Z">
        <seg>一般の動的言語と比べてJuliaが特に優れている点としては以下のようなものが挙げられます。
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The most specific method definition matching the number and types of the arguments will be executed
when the function is applied.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T012940Z" creationid="hsugawa8651" creationdate="20181120T012940Z">
        <seg>関数の適用時に、引数の数と型が最も一致するメソッド定義が実行されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The name of the script
itself is passed in as the global &lt;x7/&gt;PROGRAM_FILE&lt;x8/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T231904Z" creationid="hsugawa8651" creationdate="20181119T231904Z">
        <seg>このスクリプト自体の名前は、グローバルな&lt;x7/&gt;PROGRAM_FILE&lt;x8/&gt;として渡されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The name of the script itself is passed in as the global &lt;c3&gt;PROGRAM_FILE&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T173607Z" creationid="hsugawa8651" creationdate="20181118T173537Z">
        <seg>スクリプト自体の名前は、グローバルな&lt;c3&gt;PROGRAM_FILE&lt;/c3&gt;として渡されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The new global is immediately visible to the &lt;x3/&gt;tryeval&lt;x4/&gt; function,
so you could write &lt;x5/&gt;return newfun&lt;x6/&gt; (without parentheses).</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T020947Z" creationid="hsugawa8651" creationdate="20181120T020947Z">
        <seg>新しいグローバルな関数はすぐにtryeval関数から見えるので、return newfun（カッコなし）と書くことができます。 </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The next section discusses how to use indirect calls to efficiently accomplish a similar effect.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T152318Z" creationid="hsugawa8651" creationdate="20181117T152318Z">
        <seg>次のセクションでは、間接呼び出しを使用して同様の効果を効率的に達成する方法について説明します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The next step is to &lt;x1/&gt;parse&lt;x2/&gt; each string
into an object called an expression, represented by the Julia type &lt;x3/&gt;Expr&lt;x4/&gt;:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T115159Z" creationid="hsugawa8651" creationdate="20181118T115159Z">
        <seg>次のステップは、各文字列を&lt;x1/&gt;parse&lt;x2/&gt;に変換することです。 は、Juliaタイプ&lt;x3/&gt;Expr&lt;x4/&gt;:で表される表現と呼ばれるオブジェクトになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The next two steps (selecting the output array and implementation) are dependent upon
determining a single answer for a given set of arguments.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T131106Z" creationid="hsugawa8651" creationdate="20181113T131106Z">
        <seg>次の2つのステップ(出力配列と実装を選択)は、次のように依存します。 指定された引数の集合に対する単一の応答を決定することです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The notation &lt;x1/&gt;T(x)&lt;x2/&gt; or &lt;x3/&gt;convert(T,x)&lt;x4/&gt; converts &lt;x5/&gt;x&lt;x6/&gt; to a value of type &lt;x7/&gt;T&lt;x8/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T070142Z" creationid="hsugawa8651" creationdate="20181114T031031Z">
        <seg>表記法  &lt;x1/&gt;T(x)&lt;x2/&gt;  または &lt;x3/&gt;convert(T,x)&lt;x4/&gt;は、 &lt;x5/&gt;x&lt;x6/&gt;  を &lt;x7/&gt;T&lt;x8/&gt;型の値に変換します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The notation &lt;x3/&gt;Vararg{T,N}&lt;x4/&gt; is used to indicate
such a constraint.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T022750Z" creationid="hsugawa8651" creationdate="20181120T022750Z">
        <seg> Vararg{T,N}という記法は、そういう制約のために使用われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The number of items in each dimension, if known</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T094113Z" creationid="hsugawa8651" creationdate="20181118T094113Z">
        <seg>各次元のアイテム数(既知の場合)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The number of items, if known</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T112228Z" creationid="hsugawa8651" creationdate="20181112T112228Z">
        <seg>品目数(既知の場合)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The only explicitly disallowed names for variables are the names of built-in statements:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T033119Z" creationid="hsugawa8651" creationdate="20181119T033119Z">
        <seg>ビルトインステートメントの名前のみを変数名として使用することはできません</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The only solution is to allow creating an incompletely initialized instance
of &lt;x3/&gt;SelfReferential&lt;x4/&gt; with an unassigned &lt;x5/&gt;obj&lt;x6/&gt; field, and using that incomplete instance as a valid
value for the &lt;x7/&gt;obj&lt;x8/&gt; field of another instance, such as, for example, itself.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T155854Z" creationid="hsugawa8651" creationdate="20181117T155854Z">
        <seg>唯一の解決策は、不完全に初期化されたインスタンスを作成することです。 &lt;x3/&gt;SelfReferential&lt;x4/&gt;のうち、未割り当ての&lt;x6/&gt;obj&lt;x6/&gt;&lt;x6/&gt;フィールドを指定し、その不完全なインスタンスを有効にして使用します。 他のインスタンスの&lt;x7/&gt;obj&lt;x8/&gt;フィールドの値(例えば、それ自体)。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The optional &lt;c12&gt;bind-to bind_addr[:port]&lt;/c12&gt; specifies the IP address and port that other workers should use to connect to this worker.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T174018Z" creationid="hsugawa8651" creationdate="20181118T174018Z">
        <seg>&lt;c12&gt;bind-to bind_addr[:port]&lt;/c12&gt; オプションを指定すると、他のワーカーがそのワーカーと接続する際に使うIPアドレスとポートを設定することもできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The optional &lt;c27&gt;&lt;s28&gt;bind-to&lt;/s28&gt; &lt;s29&gt;bind_addr[:port]&lt;/s29&gt;&lt;/c27&gt;
specifies the ip-address and port that other workers should use to
connect to this worker.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T085144Z" creationid="hsugawa8651" creationdate="20181118T085022Z">
        <seg>&lt;c27&gt;&lt;s28&gt;bind-to&lt;/s28&gt; &lt;s29&gt;bind_addr[:port]&lt;/s29&gt;&lt;/c27&gt; オプションを指定すると、他のワーカーがそのワーカーと接続する際に使うIPアドレスとポートを設定することもできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The optional &lt;x18/&gt;bind-to bind_addr[:port]&lt;x19/&gt; specifies the IP address and port that other workers
should use to connect to this worker.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T092621Z" creationid="hsugawa8651" creationdate="20181109T224449Z">
        <seg>&lt;x18/&gt;bind-to bind_addr[:port]&lt;x19/&gt; オプションを指定すると、他のワーカーがそのワーカーと接続する際に使うIPアドレスとポートを設定することもできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The optional &lt;x18/&gt;bind-to bind_addr[:port]&lt;x19/&gt; specifies the ip-address and port that other workers
should use to connect to this worker.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T233813Z" creationid="hsugawa8651" creationdate="20181119T233813Z">
        <seg>&lt;x18/&gt;bind-to bind_addr[:port]&lt;x19/&gt; オプションを指定すると、他のワーカーがそのワーカーと接続する際に使うIPアドレスとポートを設定することもできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The original three-way
example requires chaining multiple uses of the ternary operator together:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T230140Z" creationid="hsugawa8651" creationdate="20181109T230140Z">
        <seg>オリジナルの3ウェイ 例では、三元演算子の複数の使用を一緒に連鎖する必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The original three-way example requires chaining multiple uses of the ternary operator together:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T135506Z" creationid="hsugawa8651" creationdate="20181119T135506Z">
        <seg>もともとの三分岐版の例では、三項演算子を複数連鎖させて使用​​する必要があります。q</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The outer constructor declaration, on the other hand, defines a
method for the general &lt;x7/&gt;Point&lt;x8/&gt; constructor which only applies to pairs of values of the same real
type.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T123941Z" creationid="hsugawa8651" creationdate="20181118T123941Z">
        <seg>一方、外部コンストラクタ宣言は 同じ実数の値のペアにのみ適用される、一般的な&lt;x7/&gt;ポイント&lt;x8/&gt;コンストラクタのメソッド の双曲線コサインを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The parser yields &lt;x7/&gt;QuoteNode&lt;x8/&gt;s for simple quoted items like symbols:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T165229Z" creationid="hsugawa8651" creationdate="20181118T165229Z">
        <seg>パーサは、シンボルのような単純な引用項目に対して、&lt;x7/&gt;QuoteNode&lt;x8/&gt;sを生成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The path of a package &lt;x2/&gt;uuid&lt;x3/&gt; named &lt;x4/&gt;X&lt;x5/&gt; is determined by these two rules:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T121157Z" creationid="hsugawa8651" creationdate="20181118T121157Z">
        <seg>&lt;x4/&gt;X&lt;x5/&gt;という名前のパッケージ&lt;x2/&gt;uuid&lt;x3/&gt;のパスは、次の2つのルールによって決定されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The paths map&lt;x1/&gt; in a package directory is simple: it maps subdirectory names to their corresponding entry-point paths.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T121357Z" creationid="hsugawa8651" creationdate="20181118T121357Z">
        <seg>パッケージディレクトリのパスマップ&lt;x1/&gt;は単純です。サブディレクトリ名は、サブディレクトリ名を対応するエントリポイントパスにマッピングします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The paths map&lt;x1/&gt; of a project environment is also determined by the manifest file if present and is empty if there is no manifest.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T121155Z" creationid="hsugawa8651" creationdate="20181118T121155Z">
        <seg>プロジェクト環境のパスマップ&lt;x1/&gt;は、マニフェストファイルが存在する場合は、マニフェストファイルによって決定されます。マニフェストが存在しない場合は、そのファイルが空になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The plain data types consist of primitive types (e.g. &lt;x3/&gt;Int&lt;x4/&gt;)
and immutable structs of other plain data types.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T123759Z" creationid="hsugawa8651" creationdate="20181118T123759Z">
        <seg>プレーン・データ型は、プリミティブ型(例えば、&lt;x3/&gt;Int&lt;x4/&gt;)で構成されています。 その他のプレーン・データ型の不変構造体です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The precedence of numeric literal coefficients is slightly lower than that of
unary operators such as negation.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T111745Z" creationid="hsugawa8651" creationdate="20181112T111745Z">
        <seg>数値リテラル係数の優先順位は、次の値よりもわずかに低くなります。 否定のような単項演算子です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The precedence of numeric literal coefficients is the same as that of unary operators such as
negation.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T040223Z" creationid="hsugawa8651" creationdate="20181119T235801Z">
        <seg>数値リテラル係数の優先順位は、否定のような単項演算子と同様です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The precedence rules are defined by binary &lt;x1/&gt;BroadcastStyle&lt;x2/&gt; calls:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T131737Z" creationid="hsugawa8651" creationdate="20181113T131737Z">
        <seg>優先順位ルールは、バイナリ&lt;x1/&gt;BroadcastStyle&lt;x2/&gt;コールによって定義されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The primary use for anonymous functions is passing them to functions which take other functions
as arguments.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T130601Z" creationid="hsugawa8651" creationdate="20181120T130601Z">
        <seg>無名関数の主な用途は、別の関数を引数とする関数に渡すことでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The private &lt;x1/&gt;Priv&lt;x2/&gt; depends on the &lt;x3/&gt;Pub&lt;x4/&gt; and &lt;x5/&gt;Zebra&lt;x6/&gt; packages.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T121124Z" creationid="hsugawa8651" creationdate="20181118T121124Z">
        <seg>プライベート&lt;x1/&gt;Priv&lt;x2/&gt;は、&lt;x3/&gt;Pub&lt;x4/&gt;および&lt;x5/&gt;Zebra&lt;x6/&gt;パッケージに依存します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The private &lt;x1/&gt;Priv&lt;x2/&gt; package is "&lt;x3/&gt;vendored&lt;x4/&gt;" inside the &lt;x5/&gt;App&lt;x6/&gt; repository.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T121248Z" creationid="hsugawa8651" creationdate="20181118T121248Z">
        <seg>プライベート&lt;x1/&gt;Priv&lt;x2/&gt;パッケージは、&lt;x5/&gt;アプリケーション&lt;x6/&gt;リポジトリの内側にある&lt;x3/&gt;ベンダーである&lt;x4/&gt;"です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The problem is that we want &lt;x1/&gt;S&lt;x2/&gt; to be a larger type than &lt;x3/&gt;T&lt;x4/&gt;, so that we can sum many elements
with less information loss.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T124249Z" creationid="hsugawa8651" creationdate="20181118T124249Z">
        <seg>問題は、&lt;x1/&gt;S&lt;x2/&gt;が&lt;x3/&gt;T&lt;x4/&gt;よりも大きいタイプであることであるため、多くの要素を合計することができる。 情報損失が少ない。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The problem of
handling disparate numeric types is delegated to the arithmetic operations in the
expression &lt;x3/&gt;2x - y&lt;x4/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T012831Z" creationid="hsugawa8651" creationdate="20181120T012831Z">
        <seg> 異なる数値型を処理する問題は、式&lt;x3/&gt;2x - y&lt;x4/&gt;の算術演算に委譲されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The project file determines what the names and identities of the direct dependencies of a project are.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T152919Z" creationid="hsugawa8651" creationdate="20181117T152919Z">
        <seg>プロジェクトファイルは、プロジェクトの直接的な依存関係の名前と識別情報を決定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The public &lt;x1/&gt;Priv&lt;x2/&gt; and &lt;x3/&gt;Zebra&lt;x4/&gt; packages are in the system depot, where packages installed and managed by the system administrator live.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T121250Z" creationid="hsugawa8651" creationdate="20181118T121250Z">
        <seg>public&lt;x1/&gt;Priv&lt;x2/&gt;および&lt;x3/&gt;Zebra&lt;x4/&gt;パッケージはシステム・デポ内にあり、システム管理者によってインストールされ、管理されているパッケージが存在します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The public &lt;x1/&gt;Priv&lt;x2/&gt; has no dependencies.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T121127Z" creationid="hsugawa8651" creationdate="20181118T121127Z">
        <seg>public&lt;x1/&gt;Priv&lt;x2/&gt;には依存関係はありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The question &lt;x3/&gt;"what is `X`?"&lt;x4/&gt; is answered by determining the UUID of &lt;x5/&gt;X&lt;x6/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T152844Z" creationid="hsugawa8651" creationdate="20181117T152844Z">
        <seg>&lt;x3/&gt;"what is"X"と"は、&lt;x5/&gt;X&lt;x6/&gt;のUUIDを決定することによって答えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The reasoning is that &lt;c0&gt;a &amp;&amp; b&lt;/c0&gt; must be &lt;c1&gt;false&lt;/c1&gt; if &lt;c2&gt;a&lt;/c2&gt; is &lt;c3&gt;false&lt;/c3&gt;, regardless of the value of &lt;c4&gt;b&lt;/c4&gt;, and likewise, the value of &lt;c5&gt;a || b&lt;/c5&gt; must be true if &lt;c6&gt;a&lt;/c6&gt; is &lt;c7&gt;true&lt;/c7&gt;, regardless of the value of &lt;c8&gt;b&lt;/c8&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T140207Z" creationid="hsugawa8651" creationdate="20181119T140207Z">
        <seg>なぜなら、&lt;c4&gt;b&lt;/c4&gt;の値にかかわらず、&lt;c2&gt;a&lt;/c2&gt;が&lt;c3&gt;偽&lt;/c3&gt;の時には、&lt;c0&gt;a &amp;&amp; b&lt;/c0&gt;は&lt;c1&gt;偽&lt;/c1&gt;でなければならないからです。 同様に、&lt;c8&gt;b&lt;/c8&gt;の値にかかわらず、&lt;c6&gt;a&lt;/c6&gt;が&lt;c7&gt;真&lt;/c7&gt;の時には、&lt;c5&gt;a || b&lt;/c5&gt;は真でなければなりません。
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The reasoning is that &lt;x1/&gt;a &amp;&amp; b&lt;x2/&gt; must be &lt;x3/&gt;false&lt;x4/&gt; if &lt;x5/&gt;a&lt;x6/&gt; is &lt;x7/&gt;false&lt;x8/&gt;, regardless of the value of
&lt;x9/&gt;b&lt;x10/&gt;, and likewise, the value of &lt;x11/&gt;a || b&lt;x12/&gt; must be true if &lt;x13/&gt;a&lt;x14/&gt; is &lt;x15/&gt;true&lt;x16/&gt;, regardless of the value
of &lt;x17/&gt;b&lt;x18/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T230241Z" creationid="hsugawa8651" creationdate="20181109T230241Z">
        <seg>&lt;x1/&gt;a&amp;b&lt;x2/&gt;は、&lt;x5/&gt;&lt;x6/&gt;が&lt;x7/&gt;であれば&lt;x4/&gt;でなければならない。 &lt;x9/&gt;b&lt;x10/&gt;は、&lt;x13/&gt;a&lt;x12/&gt;が&lt;x15/&gt;真&lt;x16/&gt;である場合、値に関係なく真でなければなりません。&lt;x13/&gt;&lt;x16/&gt; &lt;x17/&gt;b&lt;x18/&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The recommended ways to iterate over a whole array are</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T161138Z" creationid="hsugawa8651" creationdate="20181114T161138Z">
        <seg>配列全体を繰り返し処理するには、次のような方法が推奨されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The referenced memory can safely be freed or released.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T152535Z" creationid="hsugawa8651" creationdate="20181117T152535Z">
        <seg>参照メモリは、安全に解放されたり解放されたりすることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The remainder and modulus functions (&lt;c5&gt;rem&lt;/c5&gt; and &lt;c6&gt;mod&lt;/c6&gt;) throw a &lt;a7&gt;&lt;c8&gt;DivideError&lt;/c8&gt;&lt;/a7&gt; when their second argument is zero.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T190257Z" creationid="hsugawa8651" creationdate="20181118T190257Z">
        <seg>余りと剰余関数((&lt;c5&gt;rem&lt;/c5&gt; および&lt;c6&gt;mod&lt;/c6&gt;)は、 2番目の引数は0のとき、&lt;a7&gt;&lt;c8&gt;DivideError&lt;/c8&gt;&lt;/a7&gt;をthrowする。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The remainder and modulus functions (&lt;x7/&gt;rem&lt;x8/&gt; and &lt;x9/&gt;mod&lt;x10/&gt;) throw a &lt;x11/&gt;`DivideError`&lt;x12/&gt; when their
second argument is zero.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T033456Z" creationid="hsugawa8651" creationdate="20181112T110536Z">
        <seg>余りおよび絶対値の 関数（&lt;x7/&gt;rem&lt;x8/&gt; および &lt;x9/&gt;mod&lt;x10/&gt; ）についても、その第二引数が0の際に &lt;x11/&gt;`DivideError`&lt;x12/&gt; となります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The result
of &lt;x4/&gt;`view`&lt;x5/&gt; looks the same as the result of &lt;x6/&gt;`getindex`&lt;x7/&gt;, except the
data is left in place.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T160436Z" creationid="hsugawa8651" creationdate="20181109T160436Z">
        <seg>結果 &lt;x4/&gt;'view'&lt;x5/&gt;は、&lt;x6/&gt;'getindex'&lt;x7/&gt;の結果と同じであるが データが残されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The result is a pointer giving the address of the value.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T152516Z" creationid="hsugawa8651" creationdate="20181117T152516Z">
        <seg>その結果、値のアドレスを示すポインタが表示されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The result is an N-d dense array with dimensions that are the concatenation of the dimensions
of the variable ranges &lt;x13/&gt;rx&lt;x14/&gt;, &lt;x15/&gt;ry&lt;x16/&gt;, etc. and each &lt;x17/&gt;F(x,y,...)&lt;x18/&gt; evaluation returns a scalar.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154815Z" creationid="hsugawa8651" creationdate="20181109T154815Z">
        <seg>結果は、次元の連結である次元を持つN次元の密配列です。 変数範囲&lt;x13/&gt;rx&lt;x14/&gt;、&lt;x15/&gt;ry&lt;x16/&gt;など、各&lt;x17/&gt;F(x,y,...)&lt;x18/&gt;評価はスカラーを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The result of indexing an &lt;x1/&gt;AbstractArray&lt;x2/&gt; can itself be an array (for instance when indexing by
an &lt;x3/&gt;AbstractRange&lt;x4/&gt;).</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T083307Z" creationid="hsugawa8651" creationdate="20181113T083307Z">
        <seg>&lt;x1/&gt;AbstractArray&lt;x2/&gt;のインデックス作成の結果は、それ自体が配列(例えば、インデックス作成の際に)であることができます。 &lt;x3/&gt;AbstractRange&lt;x4/&gt;)。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The resulting array type depends on the types of the computed elements.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T150425Z" creationid="hsugawa8651" creationdate="20181117T150425Z">
        <seg>結果として得られる配列タイプは、計算された要素の種類によって異なります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The resulting array type depends on the types of the computed elements. In order to control the
type explicitly, a type can be prepended to the comprehension. For example, we could have requested
the result in single precision by writing:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T134806Z" creationid="hsugawa8651" creationdate="20181117T134806Z">
        <seg>結果の配列タイプは、計算された要素のタイプに依存します。 明示的にタイプを指定することができます。たとえば、次のように入力することができます。 以下のように記述することによって、単精度での結果が得られます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The return type of the &lt;x4/&gt;`ccall`&lt;x5/&gt; is declared as &lt;x6/&gt;Ptr{gsl_permutation}&lt;x7/&gt;, since
the memory allocated and pointed to by &lt;x8/&gt;output_ptr&lt;x9/&gt; is controlled by C (and not Julia).</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T152048Z" creationid="hsugawa8651" creationdate="20181117T152048Z">
        <seg>&lt;x4/&gt;'ccall'&lt;x5/&gt;の戻り型は、&lt;x6/&gt;Ptr{gsl_mutation}&lt;x7/&gt;として宣言されている。 &lt;x8/&gt;出力ptr&lt;x9/&gt;によって割り当てられ、指示されたメモリーは、C(およびジュリアではない)によって制御されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The return type should either be &lt;x3/&gt;Cvoid&lt;x4/&gt; for
Fortran subroutines, or a &lt;x5/&gt;T&lt;x6/&gt; for Fortran functions returning the type &lt;x7/&gt;T&lt;x8/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T151455Z" creationid="hsugawa8651" creationdate="20181117T151455Z">
        <seg>戻り値のタイプは、&lt;x3/&gt;Cvoid&lt;x4/&gt;である必要があります。 Fortranのサブルーチン、または&lt;x8/&gt;T&lt;x6/&gt;のFortran関数では、&lt;x7/&gt;T&lt;x8/&gt;を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The return value from iterate
is always either a tuple of a value and a state, or &lt;x3/&gt;nothing&lt;x4/&gt; if no elements remain.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T112400Z" creationid="hsugawa8651" creationdate="20181112T112400Z">
        <seg>反復からの戻り値 は常に値と状態のタプルであるか、あるいは&lt;x3/&gt;何もない場合は&lt;x3/&gt;何もしません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The return value will be a new object initialized to contain a copy of the contents of the referenced
memory.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T152533Z" creationid="hsugawa8651" creationdate="20181117T152533Z">
        <seg>戻り値は、参照される内容のコピーを含むように初期化された新しいオブジェクトになります。 メモリー。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The reverse (passing an object
allocated in Julia to be freed by an external library) is equally invalid.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T151434Z" creationid="hsugawa8651" creationdate="20181117T151434Z">
        <seg>逆(オブジェクトを渡すこと) 外部ライブラリによって解放されるためにJuliaに割り当てられていることは、同じように無効です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The reverse operation (writing data to a &lt;x1/&gt;Ptr{T}&lt;x2/&gt;), can be performed using &lt;x3/&gt;`unsafe_store!(ptr, value, [index])`&lt;x4/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T152559Z" creationid="hsugawa8651" creationdate="20181117T152559Z">
        <seg>逆の操作(&lt;x1/&gt;Ptr{T}&lt;x2/&gt;への書き込み)は、&lt;x3/&gt;"unsafe_store!(ptr,value,[index])`&lt;x4/&gt;を使って実行することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The roots map&lt;x1/&gt; is determined by the subdirectories &lt;x2/&gt;X&lt;x3/&gt; of a package directory for which &lt;x4/&gt;X/src/X.jl&lt;x5/&gt; exists and whether &lt;x6/&gt;X/Project.toml&lt;x7/&gt; exists and has a top-level &lt;x8/&gt;uuid&lt;x9/&gt; entry.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T121305Z" creationid="hsugawa8651" creationdate="20181118T121305Z">
        <seg>ルートは、&lt;x4/&gt;X/src/X.jl&lt;x5/&gt;が存在し、&lt;x6/&gt;X/Project.トミル&lt;x7/&gt;が存在し、最上位の&lt;x8/&gt;uuid&lt;x9/&gt;エントリが存在するパッケージディレクトリのサブディレクトリ&lt;x2/&gt;X&lt;x3/&gt;によって決定される。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The roots map&lt;x1/&gt; of the environment is determined by the contents of the project file, specifically, its top-level &lt;x2/&gt;name&lt;x3/&gt; and &lt;x4/&gt;uuid&lt;x5/&gt; entries and its &lt;x6/&gt;[deps]&lt;x7/&gt; section (all optional).</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T121100Z" creationid="hsugawa8651" creationdate="20181118T121100Z">
        <seg>環境の根は、プロジェクトファイルの内容、特にトップレベルの&lt;x2/&gt;name&lt;x3/&gt;および&lt;x4/&gt;uuid&lt;x5/&gt;のエントリとその&lt;x6/&gt;[deps]&lt;x7/&gt;セクション(すべてオプション)によって決定される。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The rules are:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T121318Z" creationid="hsugawa8651" creationdate="20181118T121318Z">
        <seg>ルールは次のとおりです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The same holds for &lt;x8/&gt;`setindex!`&lt;x9/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T083157Z" creationid="hsugawa8651" creationdate="20181113T083157Z">
        <seg>同じことが&lt;x8/&gt;`setindex!`&lt;x9/&gt;に対しても当てはまります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The same relationship holds for &lt;x8/&gt;min.(a,b)&lt;x9/&gt; and &lt;x10/&gt;minimum(a)&lt;x11/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T160036Z" creationid="hsugawa8651" creationdate="20181109T160036Z">
        <seg>&lt;x8/&gt;min(a,b)&lt;x9/&gt;と&lt;x10/&gt;最小(a)&lt;x11/&gt;と同じ関係が成り立つ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The second and third arguments are both optional, defaulting to the element type and dimensions of &lt;x3/&gt;A&lt;x4/&gt; if omitted.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154442Z" creationid="hsugawa8651" creationdate="20181109T154442Z">
        <seg>2番目と3番目の引数は両方とも省略可能です。デフォルトでは、&lt;x3/&gt;A&lt;x4/&gt;&lt;x/&gt;の要素タイプと次元は省略されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The second applies when the given numerator and denominator values
have different types: it promotes them to a common type and then delegates construction to the
outer constructor for arguments of matching type.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T124139Z" creationid="hsugawa8651" creationdate="20181118T124139Z">
        <seg>2番目は、与えられた分子と分母の値がある場合に適用されます。 は異なるタイプを持ち、一般的なタイプにプロモートしてから、次のように構築を行います。 一致するタイプの引数用の外部コンストラクタです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The second argument to &lt;x1/&gt;`ccall`&lt;x2/&gt; can optionally be a calling convention specifier (immediately
preceding return type).</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T152426Z" creationid="hsugawa8651" creationdate="20181117T152426Z">
        <seg>&lt;x1/&gt;`ccall'&lt;x2/&gt;への2番目の引数は、オプションとして、呼び出し規約指定子(即時に)とすることができます。 先行する戻り値のタイプ)。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The second syntactic purpose of the &lt;x1/&gt;:&lt;x2/&gt; character is to create expression objects without using
the explicit &lt;x3/&gt;Expr&lt;x4/&gt; constructor.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T115336Z" creationid="hsugawa8651" creationdate="20181118T115336Z">
        <seg>&lt;x1/&gt;:&lt;x2/&gt;文字の2番目の構文目的は、次のような表現オブジェクトを使用せずに表現オブジェクトを作成することです。 明示的な&lt;x3/&gt;Expr&lt;x4/&gt;コンストラクタです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The set of packages available in a package directory corresponds to the set of subdirectories it contains that look like packages: if &lt;x1/&gt;X/src/X.jl&lt;x2/&gt; is a file in a package directory, then &lt;x3/&gt;X&lt;x4/&gt; is considered to be a package and &lt;x5/&gt;X/src/X.jl&lt;x6/&gt; is the file Julia loads to get &lt;x7/&gt;X&lt;x8/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T121302Z" creationid="hsugawa8651" creationdate="20181118T121302Z">
        <seg>パッケージディレクトリで使用可能なパッケージのセットは、パッケージのような外観を含むサブディレクトリのセットに対応します。&lt;x1/&gt;X/src/X.jl&lt;x2/&gt;がパッケージディレクトリ内のファイルである場合、&lt;x3/&gt;X&lt;x4/&gt;はパッケージと見なされ、x5/&gt;X/src/X.jl&lt;x6/&gt;は、&lt;x7/&gt;X&lt;x8/&gt;を取得するためにロードされるファイルジュリアです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The short function syntax is accordingly quite idiomatic, considerably reducing
both typing and visual noise.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T125241Z" creationid="hsugawa8651" creationdate="20181110T025621Z">
        <seg>短い関数構文を多用するほど、文字数が大幅に少なくなり、見た目もすっきりします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The shortest complete expression after the &lt;x1/&gt;$&lt;x2/&gt; is taken as the expression whose value is to be
interpolated into the string.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T082849Z" creationid="hsugawa8651" creationdate="20181120T082849Z">
        <seg> &lt;x1/&gt;$&lt;x2/&gt;  の後の最短の完全な式は、値が文字列に補間される式として解釈されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The simplest way to achieve this is to define the
following additional outer constructor method:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T124001Z" creationid="hsugawa8651" creationdate="20181118T124001Z">
        <seg>これを実現する最も簡単な方法は、次のように定義することです。 次の追加の外部コンストラクタメソッド:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The size
of the binary data item is the minimal needed size, if the leading digit of the literal is not
&lt;x1/&gt;0&lt;x2/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T225415Z" creationid="hsugawa8651" creationdate="20181109T225415Z">
        <seg>サイズ リテラルの先頭桁が必要ない場合は、バイナリ・データ項目の最小サイズが2進数データ項目となります。 &lt;x1/&gt;0&lt;x2/&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The size of the binary data item is the minimal needed size, if the leading digit of the literal is not &lt;c0&gt;0&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T185322Z" creationid="hsugawa8651" creationdate="20181118T185322Z">
        <seg>サイズ リテラルの先頭桁が必要ない場合は、バイナリ・データ項目の最小サイズが2進数データ項目となります。 &lt;x1/&gt;0&lt;x2/&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The size of the unsigned value is
determined by the number of hex digits used:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T032822Z" creationid="hsugawa8651" creationdate="20181112T110409Z">
        <seg>符号なしの値の大きさは、使用されている16進数の桁数により決定されます。:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The size of the unsigned value is determined by the number of hex digits used:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T185304Z" creationid="hsugawa8651" creationdate="20181118T185304Z">
        <seg>符号なし値のサイズは 使用される16進数の数によって決定されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The so-called "ternary operator", &lt;c0&gt;?:&lt;/c0&gt;, is closely related to the &lt;c1&gt;if&lt;/c1&gt;-&lt;c2&gt;elseif&lt;/c2&gt;-&lt;c3&gt;else&lt;/c3&gt; syntax, but is used where a conditional choice between single expression values is required, as opposed to conditional execution of longer blocks of code.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T135027Z" creationid="hsugawa8651" creationdate="20181119T134947Z">
        <seg>いわゆる「三項演算子」&lt;c0&gt;？:&lt;/c0&gt;は、&lt;c1&gt;if&lt;/c1&gt;-&lt;c2&gt;elseif&lt;/c2&gt;-&lt;c3&gt;else&lt;/c3&gt;構文と密接に関連しています。 前者は単一の式の値を選択するような条件分岐を行う場合に利用されますが、後者は条件式の実行がもっと長いコードのブロックになる場合に使います。 </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The so-called "ternary operator", &lt;x1/&gt;?:&lt;x2/&gt;, is closely related to the &lt;x3/&gt;if&lt;x4/&gt;-&lt;x5/&gt;elseif&lt;x6/&gt;-&lt;x7/&gt;else&lt;x8/&gt; syntax,
but is used where a conditional choice between single expression values is required, as opposed
to conditional execution of longer blocks of code.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T230045Z" creationid="hsugawa8651" creationdate="20181109T230045Z">
        <seg>いわゆる「三元演算子」&lt;x1/&gt;?&lt;x2/&gt;は、&lt;x4/&gt;-&lt;x5/&gt;elseif&lt;x6/&gt;-&lt;x7/&gt;else&lt;x8/&gt;の場合、&lt;x4/&gt;と密接に関係している。 しかし、単一の表現値間の条件付き選択が必要とされる場合に使用されます。 より長いブロックを条件付きで実行することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The special &lt;x1/&gt;CartesianIndex{N}&lt;x2/&gt; object represents a scalar index that behaves
like an &lt;x3/&gt;N&lt;x4/&gt;-tuple of integers spanning multiple dimensions.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T160948Z" creationid="hsugawa8651" creationdate="20181114T160948Z">
        <seg>特殊な&lt;x1/&gt;CartesianIndex{N}&lt;x2/&gt;オブジェクトは、スカラーインデックスを表します。 &lt;x3/&gt;N&lt;x4/&gt;のように、複数の次元にまたがる整数の&lt;x/&gt;N&lt;x4/&gt;のようになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The special &lt;x1/&gt;CartesianIndex{N}&lt;x2/&gt; object represents a scalar index that behaves
like an &lt;x3/&gt;N&lt;x4/&gt;-tuple of integers spanning multiple dimensions.  For example:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T135016Z" creationid="hsugawa8651" creationdate="20181117T135016Z">
        <seg>特殊な&lt;x1/&gt;CartesianIndex{N}&lt;x2/&gt;オブジェクトは、スカラーインデックスを表します。 たとえば、複数の次元にまたがる整数の&lt;x3/&gt;N&lt;x4/&gt;-タプルのようになります。次に例を示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The stability
property comes at a non-negligible cost, so if you don't need it, you may want to explicitly specify
your preferred algorithm, e.g. &lt;x2/&gt;sort!(v, alg=QuickSort)&lt;x3/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T064159Z" creationid="hsugawa8651" creationdate="20181114T064159Z">
        <seg>安定性 プロパティーは無視できないコストで発生するため、必要がない場合は、明示的に指定する必要があります。 たとえば、&lt;x2/&gt;ソート!(v,alg=QuickSort)&lt;x3/&gt;のような優先アルゴリズムを指定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The standardized numerator and
denominator of a rational value can be extracted using the &lt;x1/&gt;`numerator`&lt;x2/&gt; and &lt;x3/&gt;`denominator`&lt;x4/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T123519Z" creationid="hsugawa8651" creationdate="20181118T123519Z">
        <seg>標準化された分子と 有理値の分母は、&lt;x1/&gt;「分子」&lt;x2/&gt;および&lt;x3/&gt;「分母」&lt;x4/&gt;を使って抽出することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The state object will be passed back to the iterate function on the next iteration
and is generally considered an implementation detail private to the iterable object.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T112403Z" creationid="hsugawa8651" creationdate="20181112T112403Z">
        <seg>状態オブジェクトは、次の反復の繰り返し関数に渡されます。 一般的には、iterableオブジェクトに対してプライベートな実装の詳細と見なされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The static parameters of the function may be used as type parameters in the call signature,
as long as they don't affect the layout of the type.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T151235Z" creationid="hsugawa8651" creationdate="20181117T151235Z">
        <seg>関数の静的パラメータは、呼び出しシグネチャのタイプパラメータとして使用できます。 タイプのレイアウトに影響を与えない限りです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The strongest legacy of Lisp in the Julia language is its metaprogramming support.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T100153Z" creationid="hsugawa8651" creationdate="20181118T100153Z">
        <seg>Julia言語でのLispの最も強力なレガシーは、そのメタプログラミングのサポートです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The subscripted &lt;x1/&gt;rootsᵢ&lt;x2/&gt;, &lt;x3/&gt;graphᵢ&lt;x4/&gt; and &lt;x5/&gt;pathsᵢ&lt;x6/&gt; variables correspond to the subscripted environments, &lt;x7/&gt;envᵢ&lt;x8/&gt;, contained &lt;x9/&gt;stack&lt;x10/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T121420Z" creationid="hsugawa8651" creationdate="20181118T121420Z">
        <seg>The subscripted &lt;x1/&gt;rootsᵢ&lt;x2/&gt;, &lt;x3/&gt;graphᵢ&lt;x4/&gt; and &lt;x5/&gt;pathsᵢ&lt;x6/&gt; variables correspond to the subscripted environments, &lt;x7/&gt;envᵢ&lt;x8/&gt;, contained &lt;x9/&gt;stack&lt;x10/&gt;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The syntax &lt;x1/&gt;[A, B, C, ...]&lt;x2/&gt; constructs a 1-d array (i.e., a vector) of its arguments.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154518Z" creationid="hsugawa8651" creationdate="20181109T154518Z">
        <seg>構文&lt;x1/&gt;[A,B,C,…]&lt;x2/&gt;は、その引数の1次元配列(すなわち、ベクトル)を構成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The syntax &lt;x1/&gt;[A, B, C, ...]&lt;x2/&gt; constructs a 1-d array (i.e., a vector) of its arguments. If all
arguments have a common &lt;x3/&gt;&lt;x4/&gt;&lt;x5/&gt;(@ref conversion-and-promotion) then they get
converted to that type using &lt;x6/&gt;`convert`&lt;x7/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T134526Z" creationid="hsugawa8651" creationdate="20181117T134526Z">
        <seg>構文&lt;x1/&gt;[A,B,C,.]&lt;x2/&gt;は、引数の1d配列(ベクトル)を構成します。すべての引数を指定します。 引数には共通の&lt;x3/&gt;&lt;x4/&gt;&lt;x5/&gt;(@ref変換とプロモーション)があります。 &lt;x6/&gt;'convert`&lt;x7/&gt;を使用して、そのタイプに変換されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The syntax &lt;x3/&gt;new{T,S}&lt;x4/&gt; allows
specifying parameters for the type to be constructed, i.e. this call will return a &lt;x5/&gt;SummedArray{T,S}&lt;x6/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T124309Z" creationid="hsugawa8651" creationdate="20181118T124309Z">
        <seg>構文&lt;x3/&gt;new{T,S}&lt;x4/&gt;は、次のことを可能にします。 構成するタイプのパラメータを指定します。つまり、この呼び出しは、&lt;x5/&gt;SummedArray{T,S}&lt;x6/&gt;を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The third and final kind of environment is one that combines other environments by overlaying several of them, making the packages in each available in a single composite environment.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T121405Z" creationid="hsugawa8651" creationdate="20181118T121405Z">
        <seg>3番目と最終的な環境は、複数の環境を重ね合わせることによって、一つの複合環境でパッケージを利用できるようにするというものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The third outer constructor turns integer values
into rationals by supplying a value of &lt;x4/&gt;1&lt;x5/&gt; as the denominator.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T124143Z" creationid="hsugawa8651" creationdate="20181118T124143Z">
        <seg>3番目の外部コンストラクタは整数値を返します。 &lt;x4/&gt;1&lt;x5/&gt;の値を分母として供給することにより、合理的になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The traditional function
declaration syntax demonstrated above is equivalent to the following compact "assignment form":</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T125139Z" creationid="hsugawa8651" creationdate="20181110T025506Z">
        <seg>上に示したような、従来の関数を宣言する構文と、つぎのような、コンパクトな「代入方式」とは同等です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The tuple must be the same size as the SIMD type.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T151257Z" creationid="hsugawa8651" creationdate="20181117T151257Z">
        <seg>タプルはSIMD型と同じサイズである必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The two expressions constructed above – by parsing and by direct construction – are equivalent:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T115239Z" creationid="hsugawa8651" creationdate="20181118T115239Z">
        <seg>上で作成された2つの式(構文解析と直接構築によって)は、次のようになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The two uses of the &lt;x1/&gt;...&lt;x2/&gt; operator: slurping and splatting</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181110T025224Z" creationid="hsugawa8651" creationdate="20181110T025224Z">
        <seg>&lt;x1/&gt;.…&lt;x2/&gt;演算子の2つの用途:slingingとspliting</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The type arguments to &lt;x1/&gt;ccall&lt;x2/&gt; and &lt;x3/&gt;@cfunction&lt;x4/&gt; are evaluated statically,
when the method containing the usage is defined.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T151222Z" creationid="hsugawa8651" creationdate="20181117T151222Z">
        <seg>&lt;x1/&gt;ccall&lt;x2/&gt;および&lt;x3/&gt;@cfunction&lt;x4/&gt;のタイプ引数は静的に評価されます。 使用されているメソッドが定義されています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The type is defined as:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T063642Z" creationid="hsugawa8651" creationdate="20181114T063642Z">
        <seg>タイプは次のように定義されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The type of the first entry of the tuple returned by &lt;x1/&gt;iterate()&lt;x2/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T112213Z" creationid="hsugawa8651" creationdate="20181112T112213Z">
        <seg>&lt;x1/&gt;によって返されるタプルの最初のエントリのタイプは()&lt;x2/&gt;で返されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The type parameters of a leaf type must be fully defined (no &lt;x1/&gt;TypeVars&lt;x2/&gt; are allowed) in order for the instance to be constructed.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T150621Z" creationid="hsugawa8651" creationdate="20181117T150621Z">
        <seg>インスタンスを構築するには、リーフタイプのタイプパラメータを完全に定義する必要があります(&lt;x1/&gt;TypeVars&lt;x2/&gt;は許可されません)。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The type system is described in &lt;x1/&gt;&lt;x2/&gt;&lt;x3/&gt;(@ref man-types) and defining a function
in terms of methods chosen by multiple dispatch on run-time argument types is described in &lt;x4/&gt;Methods&lt;x5/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T122504Z" creationid="hsugawa8651" creationdate="20181112T105939Z">
        <seg>タイプシステムは&lt;x1/&gt;&lt;x2/&gt;&lt;x3/&gt;@ref man-types)で記述され、関数を定義します。 ランタイム引数の種類に対する複数のディスパッチによって選択されるメソッドについては、&lt;x4/&gt;メソッド&lt;x5/&gt;で説明されています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The unary variant states
that you intend to implement specific broadcasting behavior and/or output type, and do not wish to
rely on the default fallback &lt;x2/&gt;`Broadcast.DefaultArrayStyle`&lt;x3/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T131129Z" creationid="hsugawa8651" creationdate="20181113T131129Z">
        <seg>単項変異体の状態 特定のブロードキャスト動作や出力タイプを実装することを意図しており デフォルトのフォールバック&lt;x2/&gt;`ブロードキャスト.DefaultArrayStyle'&lt;x3/&gt;に依存します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The underscore &lt;c0&gt;_&lt;/c0&gt; can be used as digit separator:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T190521Z" creationid="hsugawa8651" creationdate="20181118T190521Z">
        <seg>アンダースコア&lt;x1/&gt;_&lt;x2/&gt;は、桁区切り記号として使用できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The underscore &lt;x1/&gt;_&lt;x2/&gt; can be used as digit separator:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T033802Z" creationid="hsugawa8651" creationdate="20181118T093626Z">
        <seg>アンダースコア（ &lt;x1/&gt;_&lt;x2/&gt; ）は桁区切り文字として使用することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The updating version of the binary operator is formed
by placing a &lt;x1/&gt;=&lt;x2/&gt; immediately after the operator.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T063838Z" creationid="hsugawa8651" creationdate="20181113T132348Z">
        <seg>二項演算子の更新機能は、演算子の後ろに &lt;x1/&gt;=&lt;x2/&gt; を記載することで実行できます。 </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The updating versions of all the binary arithmetic and bitwise operators are:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T063927Z" creationid="hsugawa8651" creationdate="20181113T132411Z">
        <seg>更新機能を持つ二項演算子とビット単位の演算子は以下の通りです。:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The use of &lt;x1/&gt;$&lt;x2/&gt; for expression interpolation is intentionally reminiscent of &lt;x3/&gt;&lt;x4/&gt;&lt;x5/&gt;(@ref string-interpolation)
and &lt;x6/&gt;&lt;x7/&gt;&lt;x8/&gt;(@ref command-interpolation).</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T115425Z" creationid="hsugawa8651" creationdate="20181118T115425Z">
        <seg>表現補間に&lt;x1/&gt;$&lt;x2/&gt;を使用することは意図的に&lt;x3/&gt;&lt;x4/&gt;&lt;x5/&gt;(@ref string interpolation)を連想させます。 &lt;x6/&gt;&lt;x7/&gt;&lt;x8/&gt;(@refコマンドの補間)。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The usual representation of a &lt;x1/&gt;quote&lt;x2/&gt; form in an AST is an &lt;x3/&gt;Expr&lt;x4/&gt; with head &lt;x5/&gt;:quote&lt;x6/&gt;:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T165216Z" creationid="hsugawa8651" creationdate="20181118T165216Z">
        <seg>ASTにおける&lt;x1/&gt;引用符&lt;x2/&gt;の典型的な表現は&lt;x3/&gt;Expr&lt;x4/&gt;であり、head&lt;x5/&gt;:quote&lt;x6/&gt;である。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The value can be manipulated through
this pointer using &lt;x1/&gt;`unsafe_load`&lt;x2/&gt; and &lt;x3/&gt;`unsafe_store!`&lt;x4/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T152518Z" creationid="hsugawa8651" creationdate="20181117T152518Z">
        <seg>この値は、以下のように操作して操作することができます。 このポインタは、&lt;x1/&gt;`unsafe_load'&lt;x2/&gt;と、&lt;x3/&gt;"unsafe_store!"&lt;x4/&gt;を使用します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The value in location &lt;x5/&gt;I_1[i_1], I_2[i_2], ..., I_n[i_n]&lt;x6/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T155412Z" creationid="hsugawa8651" creationdate="20181109T155412Z">
        <seg>location&lt;x5/&gt;I_1[i_1]の値、I_2[i_2]、.…、I_n[i_n]&lt;x6/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The value of &lt;x1/&gt;a&lt;x2/&gt; is used to construct the expression &lt;x3/&gt;ex&lt;x4/&gt; which applies the &lt;x5/&gt;+&lt;x6/&gt; function to the
value 1 and the variable &lt;x7/&gt;b&lt;x8/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T165258Z" creationid="hsugawa8651" creationdate="20181118T165258Z">
        <seg>&lt;x1/&gt;&lt;x2/&gt;の値は、&lt;x4/&gt;&lt;x6/&gt;関数を適用する&lt;x/&gt;の式&lt;x4/&gt;を構成するために使用される。 値1および変数&lt;x7/&gt;b&lt;x8/&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The value of both compound expression constructs
is that of the last subexpression.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T225759Z" creationid="hsugawa8651" creationdate="20181109T225759Z">
        <seg>複合式の両方の構成要素の値 は最後のサブ式のものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The value of both compound expression constructs is that of the last subexpression.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T133520Z" creationid="hsugawa8651" creationdate="20181119T133520Z">
        <seg>どちらの複合式も、最後の部分式の値が戻り値になります。 </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The value of the &lt;x1/&gt;variable&lt;x2/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T165302Z" creationid="hsugawa8651" creationdate="20181118T165302Z">
        <seg>&lt;x1/&gt;変数&lt;x2/&gt;の値</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The value returned by a function is the value of the last expression evaluated, which, by default,
is the last expression in the body of the function definition.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T125517Z" creationid="hsugawa8651" creationdate="20181110T025723Z">
        <seg>関数の返す値は、最後に評価された式の値で、デフォルトでは関数定義の本体内で、最後尾の式の値になります。 </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The values returned by &lt;a0&gt;&lt;c1&gt;typemin&lt;/c1&gt;&lt;/a0&gt; and &lt;a2&gt;&lt;c3&gt;typemax&lt;/c3&gt;&lt;/a2&gt; are always of the given argument type.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T185806Z" creationid="hsugawa8651" creationdate="20181118T185806Z">
        <seg>&lt;a0&gt;&lt;c1&gt;typemin&lt;/c1&gt;&lt;/a0&gt;と&lt;a2&gt;&lt;c3&gt;typemax&lt;/c3&gt;&lt;/a2&gt;は常に与えられた引数の型である。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The values returned by &lt;x1/&gt;`typemin()`&lt;x2/&gt; and &lt;x3/&gt;`typemax()`&lt;x4/&gt; are always of the given argument
type.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T033035Z" creationid="hsugawa8651" creationdate="20181119T235118Z">
        <seg>&lt;x1/&gt;`typemin()`&lt;x2/&gt; および &lt;x3/&gt;`typemax()`&lt;x4/&gt;  の戻り値は常に指定された引数の型となります。 </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The values returned by &lt;x1/&gt;`typemin`&lt;x2/&gt; and &lt;x3/&gt;`typemax`&lt;x4/&gt; are always of the given argument
type.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T225538Z" creationid="hsugawa8651" creationdate="20181109T225538Z">
        <seg>The values returned by &lt;x1/&gt;`typemin`&lt;x2/&gt; and &lt;x3/&gt;`typemax`&lt;x4/&gt; are always of the given argument
type.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The variable
&lt;c12&gt;&lt;s13&gt;ans&lt;/s13&gt;&lt;/c12&gt; is bound to the value of the last evaluated expression whether
it is shown or not.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T084224Z" creationid="hsugawa8651" creationdate="20181118T083955Z">
        <seg>&lt;c12&gt;&lt;s13&gt;ans&lt;/s13&gt;&lt;/c12&gt; という変数は、最後に評価された式の値（それが表示されたか否かに関わらず）に束縛されています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The variable &lt;c0&gt;relation&lt;/c0&gt; is declared inside the &lt;c1&gt;if&lt;/c1&gt; block, but used outside.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T134543Z" creationid="hsugawa8651" creationdate="20181119T134405Z">
        <seg>変数&lt;c0&gt;relation&lt;/c0&gt;は&lt;c1&gt;if&lt;/c1&gt;ブロックの内側で宣言されていますが、使用されるのは外側です。 </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The variable &lt;c6&gt;ans&lt;/c6&gt; is bound to the value of the last evaluated expression whether it is shown or not.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T181404Z" creationid="hsugawa8651" creationdate="20181118T173452Z">
        <seg>&lt;c6&gt;ans&lt;/c6&gt; という変数は、最後に評価された式の値（それが表示されたか否かに関わらず）に束縛されています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The variable &lt;x1/&gt;Sys.KERNEL&lt;x2/&gt; can be used to handle such
cases.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T093240Z" creationid="hsugawa8651" creationdate="20181109T224825Z">
        <seg>変数&lt;x1/&gt;Sys.KERNEL&lt;x2/&gt;は、そのような場合を扱うために使用することができます。 </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The variable &lt;x1/&gt;Sys.KERNEL&lt;x2/&gt; can be used to write these special cases.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T234013Z" creationid="hsugawa8651" creationdate="20181119T234013Z">
        <seg>変数&lt;x1/&gt;Sys.KERNEL&lt;x2/&gt;は、そのような場合を扱うために使用することができます。 </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The variable &lt;x1/&gt;relation&lt;x2/&gt; is declared inside the &lt;x3/&gt;if&lt;x4/&gt; block, but used outside.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T225941Z" creationid="hsugawa8651" creationdate="20181109T225941Z">
        <seg>The variable &lt;x1/&gt;relation&lt;x2/&gt; is declared inside the &lt;x3/&gt;if&lt;x4/&gt; block, but used outside.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The variable &lt;x11/&gt;ans&lt;x12/&gt; is bound to the
value of the last evaluated expression whether it is shown or not.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T231802Z" creationid="hsugawa8651" creationdate="20181119T231802Z">
        <seg>&lt;x13/&gt;ans&lt;x14/&gt; という変数は、最後に評価された式の値（それが表示されたか否かに関わらず）に束縛されています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The variable &lt;x13/&gt;ans&lt;x14/&gt; is bound to the
value of the last evaluated expression whether it is shown or not.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T091528Z" creationid="hsugawa8651" creationdate="20181114T031359Z">
        <seg>&lt;x13/&gt;ans&lt;x14/&gt; という変数は、最後に評価された式の値（それが表示されたか否かに関わらず）に束縛されています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Then, for each MIME type (&lt;x5/&gt;mime&lt;x6/&gt; string) that can be displayed on &lt;x7/&gt;D&lt;x8/&gt;, one should
define a function &lt;x9/&gt;display(d::D, ::MIME"mime", x) = ...&lt;x10/&gt; that displays &lt;x11/&gt;x&lt;x12/&gt; as that MIME type,
usually by calling &lt;x13/&gt;`show(io, mime, x)`&lt;x14/&gt; or &lt;x15/&gt;`repr(io, mime, x)`&lt;x16/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T043318Z" creationid="hsugawa8651" creationdate="20181112T043318Z">
        <seg>次に、&lt;x7/&gt;D&lt;x8/&gt;上に表示できるMIMEタイプ(&lt;x5/&gt;mime&lt;x6/&gt;ストリング)ごとに、次のいずれかを実行する必要があります。 関数&lt;x9/&gt;ディスプレイ(d::D,:MIME"mime",x)=&lt;x10/&gt;x12/&gt;を定義します。&lt;x11/&gt;x12/&gt;は、MIMEタイプとして&lt;x11/&gt;x&lt;x12/&gt;を表示します。 通常は、&lt;x13/&gt;`show(io,mime,x)`&lt;x14/&gt;または&lt;x15/&gt;`repr(io,mime,x)`&lt;x16/&gt;を呼び出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>There are
many other operations that will simply corrupt the runtime system without notification, usually
in subtle ways not obviously connected to the bad definition.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T032219Z" creationid="hsugawa8651" creationdate="20181116T032219Z">
        <seg>その他 通知なしでランタイム・システムを単純に破壊する他の多くの操作 明らかに悪い定義とは関係ありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>There are a couple of noteworthy features of this design:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T121427Z" creationid="hsugawa8651" creationdate="20181118T121427Z">
        <seg>この設計には、いくつかの注目すべき特徴があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>There are a few more methods we can extend to give Julia more information about this iterable
collection.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T112544Z" creationid="hsugawa8651" creationdate="20181112T112527Z">
        <seg>その他にも、Juliaにこの問題に関する情報を提供する方法がいくつかある。 のリストを参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>There are a few noteworthy high-level features about Julia's strings:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T075656Z" creationid="hsugawa8651" creationdate="20181120T075656Z">
        <seg>Juliaには、文字列に関係する特筆すべき高度な機能があります：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>There are currently four sorting algorithms available in base Julia:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T064002Z" creationid="hsugawa8651" creationdate="20181114T064002Z">
        <seg>現在、基本的なJuliaには4つのソートアルゴリズムが用意されている。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>There are several
functions in the &lt;x3/&gt;Sys&lt;x4/&gt; module intended to make this easier: &lt;x5/&gt;isunix&lt;x6/&gt;, &lt;x7/&gt;islinux&lt;x8/&gt;, &lt;x9/&gt;isapple&lt;x10/&gt;,
&lt;x11/&gt;isbsd&lt;x12/&gt;, and &lt;x13/&gt;iswindows&lt;x14/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T001533Z" creationid="hsugawa8651" creationdate="20181120T001533Z">
        <seg>&lt;x3/&gt;Sys&lt;x4/&gt;モジュールには、これをより容易にすることを目的とした、いくつかの関数があります。&lt;x5/&gt;isunix&lt;x6/&gt;, &lt;x7/&gt;islinux&lt;x8/&gt;, &lt;x9/&gt;isapple&lt;x10/&gt;, &lt;x11/&gt;isbsd&lt;x12/&gt;と &lt;x13/&gt;iswindows&lt;x14/&gt;です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>There are several
functions intended to make this easier: &lt;x3/&gt;is_unix&lt;x4/&gt;, &lt;x5/&gt;is_linux&lt;x6/&gt;, &lt;x7/&gt;is_apple&lt;x8/&gt;, &lt;x9/&gt;is_bsd&lt;x10/&gt;, and &lt;x11/&gt;is_windows&lt;x12/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T234023Z" creationid="hsugawa8651" creationdate="20181119T234023Z">
        <seg>&lt;x3/&gt;Sys&lt;x4/&gt;モジュールには、これをより容易にすることを目的とした、いくつかの関数があります。&lt;x5/&gt;isunix&lt;x6/&gt;, &lt;x7/&gt;islinux&lt;x8/&gt;, &lt;x9/&gt;isapple&lt;x10/&gt;, &lt;x11/&gt;isbsd&lt;x12/&gt;, and &lt;x13/&gt;iswindows&lt;x14/&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>There are several functions in the &lt;x3/&gt;Sys&lt;x4/&gt; module intended to make this easier:
&lt;x5/&gt;isunix&lt;x6/&gt;, &lt;x7/&gt;islinux&lt;x8/&gt;, &lt;x9/&gt;isapple&lt;x10/&gt;, &lt;x11/&gt;isbsd&lt;x12/&gt;, and &lt;x13/&gt;iswindows&lt;x14/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T093424Z" creationid="hsugawa8651" creationdate="20181109T224828Z">
        <seg>&lt;x3/&gt;Sys&lt;x4/&gt;モジュールには、これをより容易にすることを目的とした、いくつかの関数があります。&lt;x5/&gt;isunix&lt;x6/&gt;, &lt;x7/&gt;islinux&lt;x8/&gt;, &lt;x9/&gt;isapple&lt;x10/&gt;, &lt;x11/&gt;isbsd&lt;x12/&gt;, and &lt;x13/&gt;iswindows&lt;x14/&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>There are several special types to be aware of, as no other type can be defined to behave the
same:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T134404Z" creationid="hsugawa8651" creationdate="20181117T134404Z">
        <seg>他のタイプが定義されていないため、以下のように注意すべき特殊なタイプがいくつかあります。 同じ:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>There are three possible points of return from this function, returning the values of three different
expressions, depending on the values of &lt;x1/&gt;x&lt;x2/&gt; and &lt;x3/&gt;y&lt;x4/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T125922Z" creationid="hsugawa8651" creationdate="20181120T125922Z">
        <seg>この関数には、値を返せる場所が３か所ありますが、３つの異なる式のどの値が返されるのかは、&lt;x1/&gt;x&lt;x2/&gt;  と &lt;x3/&gt;y&lt;x4/&gt; の 値に応じて変化します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>There are three specified standard floating-point values that do not correspond to any point on
the real number line:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T033918Z" creationid="hsugawa8651" creationdate="20181118T120346Z">
        <seg>実数直線上に対応しない3つの浮動小数点値が存在します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>There are two Julia constructs
that accomplish this: &lt;x1/&gt;begin&lt;x2/&gt; blocks and &lt;x3/&gt;(;)&lt;x4/&gt; chains.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T225757Z" creationid="hsugawa8651" creationdate="20181109T225757Z">
        <seg>ジュリアの構成が2あります これは、&lt;x1/&gt;が&lt;x2/&gt;ブロックと&lt;x3/&gt;(;)&lt;x4/&gt;鎖を形成することを意味します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>There are two Julia constructs that accomplish this: &lt;c0&gt;begin&lt;/c0&gt; blocks and &lt;c1&gt;(;)&lt;/c1&gt; chains.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T133614Z" creationid="hsugawa8651" creationdate="20181119T133512Z">
        <seg>これを実現するJuliaの制御構造には、&lt;c0&gt;beginブロック&lt;/c0&gt;と、セミコロン&lt;c1&gt;(;)&lt;/c1&gt;連鎖の２つがあります。 </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>There are two constructs for repeated evaluation of expressions: the &lt;c0&gt;while&lt;/c0&gt; loop and the &lt;c1&gt;for&lt;/c1&gt; loop.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T141057Z" creationid="hsugawa8651" creationdate="20181119T141057Z">
        <seg>式を繰り返し評価する制御構造は２つあります。&lt;c0&gt;while&lt;/c0&gt;ループと&lt;c1&gt;for&lt;/c1&gt;ループです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>There are two constructs for repeated evaluation of expressions: the &lt;x1/&gt;while&lt;x2/&gt; loop and the &lt;x3/&gt;for&lt;x4/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T230950Z" creationid="hsugawa8651" creationdate="20181109T230950Z">
        <seg>反復評価には2つの構成があります。&lt;x1/&gt;while&lt;x2/&gt;loop and the&lt;x3/&gt;for&lt;x4/&gt;&lt;x4/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>There are two different &lt;x1/&gt;Priv&lt;x2/&gt; packages that the application needs—a private one which is a direct dependency and a public one which is an indirect dependency through &lt;x3/&gt;Pub&lt;x4/&gt;:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T121121Z" creationid="hsugawa8651" creationdate="20181118T121121Z">
        <seg>アプリケーションが必要とする2つの異なる&lt;x1/&gt;Priv&lt;x2/&gt;パッケージがあります。これは直接依存性であり、&lt;x3/&gt;Pub&lt;x4/&gt;を介して間接的依存性であるプライベートです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>There are two main
ways of doing so:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T131717Z" creationid="hsugawa8651" creationdate="20181113T131717Z">
        <seg>主に2つの その方法は次のとおりです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>There are various ways to run Julia code and provide options, similar to
those available for the &lt;c0&gt;&lt;s1&gt;perl&lt;/s1&gt;&lt;/c0&gt; and &lt;c2&gt;&lt;s3&gt;ruby&lt;/s3&gt;&lt;/c2&gt; programs:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T085612Z" creationid="hsugawa8651" creationdate="20181118T085526Z">
        <seg>他の言語（&lt;c0&gt;&lt;s1&gt;perl&lt;/s1&gt;&lt;/c0&gt; や &lt;c2&gt;&lt;s3&gt;ruby&lt;/s3&gt;&lt;/c2&gt; など）のように、Juliaを実行するには様々な方法やオプションがあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>There are various ways to run Julia code and provide options, similar to those available for the
&lt;x1/&gt;perl&lt;x2/&gt; and &lt;x3/&gt;ruby&lt;x4/&gt; programs:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T092737Z" creationid="hsugawa8651" creationdate="20181109T224520Z">
        <seg>他の言語（&lt;x1/&gt;perl&lt;x2/&gt; や &lt;x3/&gt;ruby&lt;x4/&gt; など）のように、Juliaを実行するには様々な方法やオプションがあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>There are various ways to run Julia code and provide options, similar to those available for the &lt;c0&gt;perl&lt;/c0&gt; and &lt;c1&gt;ruby&lt;/c1&gt; programs:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T174145Z" creationid="hsugawa8651" creationdate="20181118T174145Z">
        <seg>他の言語（&lt;c0&gt;perl&lt;/c0&gt; や &lt;c1&gt;ruby&lt;/c1&gt; など）のように、Juliaを実行するには様々な方法やオプションがあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>There is a second syntactic form of quoting for multiple expressions: blocks of code enclosed
in &lt;x1/&gt;quote ... end&lt;x2/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T115403Z" creationid="hsugawa8651" creationdate="20181118T115403Z">
        <seg>複数の表現に対して引用符で囲まれた2番目の構文形式の構文があります。 &lt;x1/&gt;引用では、&lt;x/&gt;&lt;x2/&gt;である。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>There is a second, more terse syntax for defining a function in Julia.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T125124Z" creationid="hsugawa8651" creationdate="20181110T025503Z">
        <seg>もっと簡潔に関数を定義する第二の構文もあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>There is also a
&lt;x7/&gt;`broadcast!`&lt;x8/&gt; function to specify an explicit destination (which can also
be accessed in a fusing fashion by &lt;x9/&gt;.=&lt;x10/&gt; assignment).</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T161307Z" creationid="hsugawa8651" creationdate="20181114T161307Z">
        <seg>また &lt;x7/&gt;'ブロードキャスト!&lt;x8/&gt;関数は明示的な宛先を指定することができます(これは &lt;x9/&gt;.=&lt;x10/&gt;割り当てにより、融合方式でアクセスすることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>There is one additional special calling convention &lt;x1/&gt;&lt;x2/&gt;&lt;x3/&gt;(@ref Base.llvmcall),
which allows inserting calls to LLVM intrinsics directly.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T122410Z" creationid="hsugawa8651" creationdate="20181117T152448Z">
        <seg>さらに特別な呼び出し規則が一つあります&lt;x1/&gt;&lt;x2/&gt;&lt;x3/&gt;(@ref Base.llvmcall)。 ではLLVM組み込みへの呼び出しを直接挿入することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Therefore this syntax is disallowed, and spaces must be used around
the operator in such cases.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T132651Z" creationid="hsugawa8651" creationdate="20181113T132651Z">
        <seg>したがって、この構文は使用できません。また、スペースを使用してスペースを使用する必要があります。 この場合の演算子です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Therefore we want to avoid an interface that allows the user to construct
instances of the type &lt;x13/&gt;SummedArray{Int32,Int32}&lt;x14/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T124254Z" creationid="hsugawa8651" creationdate="20181118T124254Z">
        <seg>したがって、ユーザーが作成できるインターフェイスを回避したいと考えています。 &lt;x13/&gt;SummedArray{Int32,Int32}&lt;x14/&gt;のインスタンスです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Therefore, &lt;x12/&gt;any&lt;x13/&gt; Julia function
&lt;x14/&gt;f&lt;x15/&gt; can be applied elementwise to any array (or other collection) with the syntax &lt;x16/&gt;f.(A)&lt;x17/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T120059Z" creationid="hsugawa8651" creationdate="20181118T120059Z">
        <seg>したがって、&lt;x12/&gt;任意の&lt;x13/&gt;ジュリア関数です。 &lt;x14/&gt;f&lt;x15/&gt;は、&lt;x16/&gt;f.(A)&lt;x17/&gt;という構文を持つ任意の配列(またはその他のコレクション)に対して、要素ごとに適用することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Therefore, assignments to &lt;x6/&gt;i&lt;x7/&gt; will not be visible to subsequent iterations:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T124540Z" creationid="hsugawa8651" creationdate="20181118T124540Z">
        <seg>したがって、&lt;x6/&gt;i&lt;x7/&gt;への割り当ては、次の反復では可視ではありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Therefore, if an &lt;x1/&gt;Array&lt;x2/&gt; contains data in the wrong format, it will have to be explicitly converted
using a call such as &lt;x3/&gt;trunc(Int32, a)&lt;x4/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T140857Z" creationid="hsugawa8651" creationdate="20181117T134507Z">
        <seg>したがって、&lt;x1/&gt;配列&lt;x2/&gt;が誤った形式でデータを含む場合は、明示的に変換する必要があります。 &lt;x3/&gt;trunc(Int32,a)&lt;x4/&gt;のようなコールを使用します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Therefore, the &lt;x15/&gt;Ref{gsl_permutation}&lt;x16/&gt; declaration allows pointers managed by C or
Julia to be used.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T152140Z" creationid="hsugawa8651" creationdate="20181117T152140Z">
        <seg>したがって、&lt;x15/&gt;Ref{gsl_mutation}&lt;x16/&gt;宣言は、Cによって管理されるポインタを許可する。 ジュリアは使用される。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Therefore, the rest of this chapter focuses on the behavior and mechanics of package loading.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T152750Z" creationid="hsugawa8651" creationdate="20181117T152750Z">
        <seg>したがって、この章の残りはパッケージロードの動作とメカニズムに焦点を当てています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Therefore, when you next upgrade &lt;x17/&gt;Pub&lt;x18/&gt; to get the latest bug fixes and features, &lt;x19/&gt;App&lt;x20/&gt; will end up—through no action of yours other than upgrading—depending on two different packages named &lt;x21/&gt;Priv&lt;x22/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T152900Z" creationid="hsugawa8651" creationdate="20181117T152900Z">
        <seg>したがって、&lt;x17/&gt;Pub&lt;x18/&gt;をアップグレードして最新のバグ修正と機能を取得する場合、&lt;x19/&gt;App&lt;x20/&gt;は、&lt;X21/&gt;Priv&lt;x22/&gt;という名前の2つの異なるパッケージに依存してアップグレードする以外の操作は行いません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>These are
normal functions, which happen to support infix operator syntax, but always evaluate their arguments:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T230459Z" creationid="hsugawa8651" creationdate="20181109T230459Z">
        <seg>これらは 通常の関数は、インフィックス演算子の構文をサポートしていますが、常にその引数を評価します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>These are all single-argument functions, with &lt;x1/&gt;`atan`&lt;x2/&gt; also accepting two arguments
corresponding to a traditional &lt;x3/&gt;`atan2`&lt;x4/&gt; function.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T100119Z" creationid="hsugawa8651" creationdate="20181118T100119Z">
        <seg>これらはすべて単一引数関数であり、&lt;x1/&gt;`atan'&lt;x2/&gt;は2つの引数を受け入れます。 これは従来の&lt;x3/&gt;atan2&lt;x4/&gt;関数に対応しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>These are all single-argument functions, with the exception of &lt;x1/&gt;atan2&lt;x2/&gt;,
which gives the angle in &lt;x3/&gt;radians&lt;x4/&gt; between the &lt;x5/&gt;x&lt;x6/&gt;-axis
and the point specified by its arguments, interpreted as &lt;x7/&gt;x&lt;x8/&gt; and &lt;x9/&gt;y&lt;x10/&gt; coordinates.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T074543Z" creationid="hsugawa8651" creationdate="20181120T074543Z">
        <seg>これらはすべて引数が1つの関数ですが、 &lt;x1/&gt;atan2&lt;x2/&gt;は例外で、角度を&lt;x5/&gt;x&lt;x6/&gt;軸と引数で 指定された点の &lt;x3/&gt;ラジアン&lt;x4/&gt; で表し、&lt;x7/&gt;x&lt;x8/&gt;座標と&lt;x9/&gt;y&lt;x10/&gt; 座標として解釈します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>These are available to all users on the system.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T121252Z" creationid="hsugawa8651" creationdate="20181118T121252Z">
        <seg>これらは、システム上のすべてのユーザーが利用できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>These are normal functions, which happen to support infix operator syntax, but always evaluate their arguments:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T140804Z" creationid="hsugawa8651" creationdate="20181119T140804Z">
        <seg>これらの演算子は、たまたま中置記法を採用しただけの通常の関数で、常に引数を評価します。.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>These are only available to the user who installed them.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T121257Z" creationid="hsugawa8651" creationdate="20181118T121257Z">
        <seg>これらは、ユーザがインストールしたユーザのみが使用できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>These are sometimes called "mutating" or "in-place" functions because they are intended to produce changes in their arguments after the function is called, not just return a value.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T033941Z" creationid="hsugawa8651" creationdate="20181119T033832Z">
        <seg>これらの関数は、関数が呼び出された際に戻り値を返すだけでなく引数に変更を加えるため、「mutating」または「in-place」と呼ばれています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>These can likewise be used to write string literals:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T081420Z" creationid="hsugawa8651" creationdate="20181120T081420Z">
        <seg>れらは同様に文字列リテラルを書くために使用することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>These characters are standardized
together with a mapping to integer values between 0 and 127 by the &lt;x7/&gt;ASCII&lt;x8/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T075450Z" creationid="hsugawa8651" creationdate="20181120T075450Z">
        <seg>これらの文字は、ASCII 規格 において、0から127の番号をそれぞれ割り振られて標準化されています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>These composite environments are called &lt;x1/&gt;environment stacks&lt;x2/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T121407Z" creationid="hsugawa8651" creationdate="20181118T121407Z">
        <seg>これらの複合環境は、&lt;x1/&gt;環境スタック&lt;x2/&gt;と呼ばれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>These examples are hopefully helpful to illustrate how generated functions work, both in the definition
end and at the call site; however, &lt;x1/&gt;don't copy them&lt;x2/&gt;, for the following reasons:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T032054Z" creationid="hsugawa8651" creationdate="20181116T032054Z">
        <seg>これらの例は、定義された関数がどのように機能するかを説明するために役立つことが望まれます。 ただし、次の理由により、&lt;x1/&gt;はコピーされません。&lt;x/&gt;:&lt;x1/&gt;&lt;x2/&gt;&lt;x2/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>These files may also be called &lt;x5/&gt;JuliaProject.toml&lt;x6/&gt; and &lt;x7/&gt;JuliaManifest.toml&lt;x8/&gt;, in which case &lt;x9/&gt;Project.toml&lt;x10/&gt; and &lt;x11/&gt;Manifest.toml&lt;x12/&gt; are ignored.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T121052Z" creationid="hsugawa8651" creationdate="20181118T121052Z">
        <seg>これらのファイルは、&lt;x5/&gt;JuliaProject.トミル&lt;x6/&gt;および&lt;x7/&gt;JuliaManifest.トミル&lt;x8/&gt;と呼ばれます。この場合、&lt;x9/&gt;Project.トミル&lt;x10/&gt;と&lt;x11/&gt;マニフェスト.トミル&lt;x12/&gt;は無視されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>These functions are included in the &lt;x1/&gt;Base.Operators&lt;x2/&gt; module even though they do not have operator-like
names.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T130330Z" creationid="hsugawa8651" creationdate="20181120T130330Z">
        <seg>こういった関数は、名前は演算子らしくなくても、&lt;x1/&gt;Base.Operators&lt;x2/&gt; モジュールに含まれています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>These functions are useful in &lt;x1/&gt;Numeric Comparisons&lt;x2/&gt; to avoid overhead from unnecessary
&lt;x3/&gt;&lt;x4/&gt;&lt;x5/&gt;(@ref conversion-and-promotion).</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T041303Z" creationid="hsugawa8651" creationdate="20181112T112023Z">
        <seg>これらの関数は、 時の不要な &lt;x3/&gt;&lt;x4/&gt;&lt;x5/&gt;(@ref conversion-and-promotion).の オーバーヘッドを回避する際に有効です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>These have not all been assigned intelligible meanings yet, nor are they necessarily
interpretable by applications, but all of these values are considered to be valid Unicode characters.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T080431Z" creationid="hsugawa8651" creationdate="20181120T080431Z">
        <seg>これら全てのコードポイントに記号が割り当てられているわけではなく、また必ずしもアプリケーションによっては解釈できないものもありますが、 これら全てのコードポイントは有効なUnicode文字としてみなされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>These loops are both exited early by using &lt;c3&gt;break&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T142403Z" creationid="hsugawa8651" creationdate="20181119T142403Z">
        <seg>これらのループを早い段階で終了するには、共に、&lt;c3&gt;break&lt;/c3&gt;を使用します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>These loops are both exited early by using &lt;x7/&gt;break&lt;x8/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T124514Z" creationid="hsugawa8651" creationdate="20181118T124514Z">
        <seg>これらのループは両方とも、&lt;x7/&gt;ブレーク&lt;x8/&gt;を使用して早期に終了されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>These map
directly onto numeric types and operations that are natively supported on modern computers, thus
allowing Julia to take full advantage of computational resources.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T032313Z" creationid="hsugawa8651" creationdate="20181109T225049Z">
        <seg>これにより、Juliaは演算処理のリソースを最大限活用することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>These map directly onto numeric types and operations that are natively supported on modern computers, thus allowing Julia to take full advantage of computational resources.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T184456Z" creationid="hsugawa8651" creationdate="20181118T184456Z">
        <seg>これらのマップ 現代のコンピューターでネイティブにサポートされている数値型や操作に直接 ジュリアが計算資源を最大限に活用できるようにすることです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>These mathematical
operations are defined over as broad a class of numerical values as permit sensible definitions,
including integers, floating-point numbers, rationals, and complex numbers,
wherever such definitions make sense.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T065440Z" creationid="hsugawa8651" creationdate="20181114T030759Z">
        <seg>れらの数学的演算子は、 整数、浮動小数点数、有理数、およびそれらの複合などを許容可能な定義として、 幅広い数値クラスとして定義されています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>These may be used as follows:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T224831Z" creationid="hsugawa8651" creationdate="20181109T224831Z">
        <seg>これらは次のように使用できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>These operations
generally work correctly as a fallback for any specific array implementation.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T160310Z" creationid="hsugawa8651" creationdate="20181109T160310Z">
        <seg>これらの操作 一般的には、特定のアレイ実装のフォールバックとして正しく動作します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>These operators cannot be functions
since &lt;x5/&gt;Short-Circuit Evaluation&lt;x6/&gt; requires that their operands are not evaluated before evaluation
of the operator.) Accordingly, you can also apply them using parenthesized argument lists, just
as you would any other function:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T130059Z" creationid="hsugawa8651" creationdate="20181120T102458Z">
        <seg>これらの演算子は関数たりえません。 というのは、短絡評価&lt;x5/&gt;Short-Circuit Evaluation&lt;x6/&gt;は被演算子が評価されていなくても、演算の評価をおこなうからです。） したがって、演算子は、他の関数と同様に、括弧でくくった引数のリストに対して、適用することがきます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>These rules allow broadcasting to keep the sparse representation for operations that result
in one or two dimensional outputs, but produce an &lt;x7/&gt;Array&lt;x8/&gt; for any other dimensionality.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T131914Z" creationid="hsugawa8651" creationdate="20181113T131914Z">
        <seg>これらのルールにより、ブロードキャストを実行して、操作のスパース表現を維持することができます。 1次元または2次元の出力では、他の次元に対して&lt;x7/&gt;配列&lt;x8/&gt;を生成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>These rules indicate that the combination of a &lt;x1/&gt;SparseVecStyle&lt;x2/&gt; with 0- or 1-dimensional arrays
yields another &lt;x3/&gt;SparseVecStyle&lt;x4/&gt;, that its combination with a 2-dimensional array
yields a &lt;x5/&gt;SparseMatStyle&lt;x6/&gt;, and anything of higher dimensionality falls back to the dense arbitrary-dimensional framework.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T131922Z" creationid="hsugawa8651" creationdate="20181113T131922Z">
        <seg>これらの規則は、&lt;x1/&gt;SparseVecStyle&lt;x2/&gt;と0次元あるいは1次元の配列との組み合わせを示している。 2次元配列との組合せにより、別の&lt;x3/&gt;SparseVecStyle&lt;x4/&gt;を生成する。 は、&lt;x5/&gt;SparseMatStyle&lt;x6/&gt;を生成し、高い次元のすべては、密な任意の次元フレームワークに戻ります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>These statements also make the module named &lt;x7/&gt;X&lt;x8/&gt;, which results from loading the package code, available within the module where the import statement occurs.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T152809Z" creationid="hsugawa8651" creationdate="20181117T152809Z">
        <seg>これらのステートメントは、インポート・ステートメントが発生するモジュール内で使用可能なパッケージ・コードをロードした結果として、&lt;x7/&gt;X&lt;x8/&gt;という名前のモジュールを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>These three kinds of environment each serve a different purpose:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T152934Z" creationid="hsugawa8651" creationdate="20181117T152934Z">
        <seg>これら3種類の環境は、それぞれ異なる目的で提供されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>These two modalities are identified by Julia as &lt;x5/&gt;IndexLinear()&lt;x6/&gt; and &lt;x7/&gt;IndexCartesian()&lt;x8/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T022712Z" creationid="hsugawa8651" creationdate="20181113T022712Z">
        <seg>これらの2つの方法は、Juliaによって&lt;x5/&gt;IndexLinear()&lt;x6/&gt;および&lt;x7/&gt;IndexCartesian()&lt;x8/&gt;と同定されている。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>These values are &lt;c0&gt;2.0^-23&lt;/c0&gt; and &lt;c1&gt;2.0^-52&lt;/c1&gt; as &lt;a2&gt;&lt;c3&gt;Float32&lt;/c3&gt;&lt;/a2&gt; and &lt;a4&gt;&lt;c5&gt;Float64&lt;/c5&gt;&lt;/a4&gt; values, respectively.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T191028Z" creationid="hsugawa8651" creationdate="20181118T191028Z">
        <seg>これらの値は&lt;c0&gt;2.0^-23&lt;/c0&gt;と&lt;c1&gt;2.0^-52&lt;/c1&gt;であり、&lt;a2&gt;&lt;c3&gt;Float32&lt;/c3&gt;&lt;/a2&gt;および&lt;a4&gt;&lt;c5&gt;Float64&lt;/c5&gt;&lt;/a4&gt;の値である。 それぞれ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>These values are &lt;x1/&gt;2.0^-23&lt;x2/&gt; and &lt;x3/&gt;2.0^-52&lt;x4/&gt; as &lt;x5/&gt;`Float32`&lt;x6/&gt; and &lt;x7/&gt;`Float64`&lt;x8/&gt; values,
respectively.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T034348Z" creationid="hsugawa8651" creationdate="20181112T111157Z">
        <seg>これらはそれぞれ &lt;x5/&gt;`Float32`&lt;x6/&gt; および &lt;x7/&gt;`Float64`&lt;x8/&gt;  値として&lt;x1/&gt;2.0^-23&lt;x2/&gt;および &lt;x3/&gt;2.0^-52&lt;x4/&gt;  と なります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>They are equal to each other but have different binary representations, as
can be seen using the &lt;x3/&gt;`bitstring`&lt;x4/&gt; function:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T110747Z" creationid="hsugawa8651" creationdate="20181112T110747Z">
        <seg>これらは互いに等しいが、バイナリ表現は異なっている。 は、&lt;x3/&gt;`bitstring'&lt;x4/&gt;関数を使用して表示されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>They are equal to each other but have different binary representations, as
can be seen using the &lt;x3/&gt;bits&lt;x4/&gt; function: :</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T033859Z" creationid="hsugawa8651" creationdate="20181119T235247Z">
        <seg>この2つの0は同じ値ですが、&lt;x3/&gt;bits&lt;x4/&gt; 関数を使用した際に見られるように、それぞれ異なるバイナリ表現を持ちます。:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>They are equal to each other but have different binary representations, as can be seen using the &lt;a1&gt;&lt;c2&gt;bitstring&lt;/c2&gt;&lt;/a1&gt; function:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T190705Z" creationid="hsugawa8651" creationdate="20181118T190705Z">
        <seg>これらは互いに等しいが、バイナリ表現は異なっている。 は、&lt;a1&gt;&lt;c2&gt;bitstring&lt;/c2&gt;&lt;/a1&gt;関数を使用して表示されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>They can
contain &lt;x1/&gt;"&lt;x2/&gt; symbols without escaping.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T083528Z" creationid="hsugawa8651" creationdate="20181120T083214Z">
        <seg>これらはエスケープなしで　&lt;x1/&gt;"&lt;x2/&gt; 記号を含めることができます。 </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>They can also be created anonymously, without being given a name, using either of these
syntaxes:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T130451Z" creationid="hsugawa8651" creationdate="20181120T130451Z">
        <seg>また、以下の構文のいずれかを使用して、名前をつけずに無名で、生成することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>They can be used as arguments, and they can be returned as
values.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T130446Z" creationid="hsugawa8651" creationdate="20181120T130446Z">
        <seg> 関数の引数としても、戻り値としても使うことができます。 </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>They can be used similarly to &lt;x2/&gt;Array{Bool}&lt;x3/&gt; arrays (which store one byte per boolean value),
and can be converted to/from the latter via &lt;x4/&gt;Array(bitarray)&lt;x5/&gt; and &lt;x6/&gt;BitArray(array)&lt;x7/&gt;, respectively.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T160451Z" creationid="hsugawa8651" creationdate="20181109T160451Z">
        <seg>これらは、&lt;x2/&gt;Array{Bool}&lt;x3/&gt;配列(ブール値ごとに1バイトを格納する)と同様に使用できます。 また、&lt;x4/&gt;アレイ(bitarray)&lt;x5/&gt;および&lt;x6/&gt;BitArray(配列)&lt;x7/&gt;を介して、後者との間で変換を行うことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>They need not be of the same type, so long as they are each numeric values.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T012816Z" creationid="hsugawa8651" creationdate="20181120T012816Z">
        <seg>それらがそれぞれ数値である限り、同じ型である必要はありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>They produce an unsigned integer of the same size as the unsigned literal
would do, with the two's complement of the value:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T225518Z" creationid="hsugawa8651" creationdate="20181109T225518Z">
        <seg>これらは符号なしのリテラルと同じサイズの符号なし整数を生成します。 2年代の価値を補完することができます</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>They produce an unsigned integer of the same size as the unsigned literal would do, with the two's complement of the value:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T185610Z" creationid="hsugawa8651" creationdate="20181118T185610Z">
        <seg>これらは符号なしのリテラルと同じサイズの符号なし整数を生成します。 2年代の価値を補完することができます</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>They represent a collection
of scalar indices that each span &lt;x3/&gt;N&lt;x4/&gt; dimensions, enabling a form of indexing
that is sometimes referred to as pointwise indexing.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T155651Z" creationid="hsugawa8651" creationdate="20181109T155651Z">
        <seg>コレクションを表します。 各スパン&lt;x3/&gt;N&lt;x4/&gt;の各次元を使用可能にするスカラー指数のことで、索引の形式が可能になります。 ポイントワイズインデックスと呼ばれることもあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>They therefore must take the form of a literal tuple, not a variable,
and cannot reference local variables.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T151224Z" creationid="hsugawa8651" creationdate="20181117T151224Z">
        <seg>したがって、それらは変数ではなく、リテラル・タプルの形をとる必要があります。 ローカル変数を参照できません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Third"</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T150455Z" creationid="hsugawa8651" creationdate="20181117T150455Z">
        <seg>Third"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This
is because &lt;x5/&gt;(Cstring)&lt;x6/&gt; is just the expression &lt;x7/&gt;Cstring&lt;x8/&gt; surrounded by parentheses, rather than
a 1-tuple containing &lt;x9/&gt;Cstring&lt;x10/&gt;:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T224100Z" creationid="hsugawa8651" creationdate="20181109T224100Z">
        <seg>これ &lt;x5/&gt;(Cstring)&lt;x6/&gt;は、&lt;x7/&gt;Cstring&lt;x8/&gt;で囲まれた括弧で囲まれた表現であり &lt;x9/&gt;Cstring&lt;x10/&gt;:を含む1組のタプル</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This
separation is typically quite natural.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T155835Z" creationid="hsugawa8651" creationdate="20181117T155835Z">
        <seg>これ 分離は、典型的には非常に自然なものである。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This
will construct a 1-d array with element type &lt;x3/&gt;T&lt;x4/&gt;, initialized to contain elements &lt;x5/&gt;A&lt;x6/&gt;, &lt;x7/&gt;B&lt;x8/&gt;, &lt;x9/&gt;C&lt;x10/&gt;,
etc.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154702Z" creationid="hsugawa8651" creationdate="20181109T154702Z">
        <seg>これ 要素タイプ&lt;x3/&gt;T&lt;x4/&gt;を持つ1dアレイを構築し、要素&lt;x5/&gt;A&lt;x6/&gt;、&lt;x7/&gt;B&lt;x8/&gt;、&lt;x9/&gt;C&lt;x10/&gt;を含むように初期化します。 その他。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This &lt;x4/&gt;Squares&lt;x5/&gt; sequence is starting to look
more and more like a vector as we've added behaviors to it.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T113152Z" creationid="hsugawa8651" creationdate="20181112T113152Z">
        <seg>この&lt;x4/&gt;Squares&lt;x5/&gt;シーケンスが開始され始めています。 これは、ビヘイビアを追加したときのベクトルに似ています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This UUID identifies which &lt;x13/&gt;Priv&lt;x14/&gt; package to load and use when the main application evaluates &lt;x15/&gt;import Priv&lt;x16/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T121110Z" creationid="hsugawa8651" creationdate="20181118T121110Z">
        <seg>このUUIDは、メインアプリケーションが&lt;x15/&gt;インポートPriv&lt;x16/&gt;を評価するときにロードおよび使用する&lt;x13/&gt;Priv&lt;x14/&gt;パッケージを識別します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This allows custom array implementations to
provide their own &lt;x23/&gt;copyto!&lt;x24/&gt; specialization to customize and
optimize broadcasting.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T131547Z" creationid="hsugawa8651" creationdate="20181113T131547Z">
        <seg>これにより、カスタム・アレイの実装が可能になります。 独自の&lt;x23/&gt;copyto!&lt;x24/&gt;特殊化を提供してカスタマイズし 放送を最適化する。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This allows describing "the set of method definitions visible to a given runtime environment"
as a single number, or "world age".</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T021208Z" creationid="hsugawa8651" creationdate="20181120T021155Z">
        <seg>これにより、「実行時環境から見えるメソッド定義の集合」を、単一の数値「世界世代」として記述することができます。 </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This allows for efficient
indexing into strings by the byte index of an encoded representation rather than by a character
index, which cannot be implemented both efficiently and simply for variable-width encodings of
Unicode strings.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T080115Z" creationid="hsugawa8651" creationdate="20181120T080115Z">
        <seg>これは、Unicode文字列 の可変幅のエンコードに対して効率的かつシンプルに実装できない文字列インデックスではなく、エンコードされた表現のバイトインデックスによる文字列 への効率的なインデックスを可能にします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This allows sophisticated code generation without
extra build steps, and also allows true Lisp-style macros operating at the level of &lt;x1/&gt;abstract syntax trees&lt;x2/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T115138Z" creationid="hsugawa8651" creationdate="20181118T115138Z">
        <seg>これにより、高度なコード生成が可能になります。 追加のビルドステップで、&lt;x1/&gt;抽象構文ツリー&lt;x2/&gt;のレベルで動作する真のLispスタイルのマクロが可能になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This allows, for example, passing an &lt;x2/&gt;argv&lt;x3/&gt; pointer array of type
&lt;x4/&gt;Vector{String}&lt;x5/&gt; to an argument of type &lt;x6/&gt;Ptr{Ptr{Cchar}}&lt;x7/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T150834Z" creationid="hsugawa8651" creationdate="20181117T150834Z">
        <seg>これにより、例えば、&lt;x2/&gt;argv&lt;x3/&gt;ポインタ配列を通過させることができる。 &lt;x4/&gt;Vector{String}&lt;x5/&gt;は、&lt;x6/&gt;Ptr{Ptr{Cchar}}&lt;x7/&gt;の型を引数にします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This also means that you can assign and pass around
operators such as &lt;x1/&gt;`+()`&lt;x2/&gt; and &lt;x3/&gt;`*()`&lt;x4/&gt; just like you would with other function values:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T130139Z" creationid="hsugawa8651" creationdate="20181120T130139Z">
        <seg>そのため、 &lt;x1/&gt;`+()`&lt;x2/&gt;や &lt;x3/&gt;`*()`&lt;x4/&gt;といった演算子も、他の関数値と同様に、代入や受け渡しを、行うことができます。.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This applies not only to
arrays and other mutable objects which are normally heap-allocated, but also to
scalar values such as integers and floats which are normally stack-allocated and
commonly passed in registers when using C or Julia calling conventions.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T223829Z" creationid="hsugawa8651" creationdate="20181109T223829Z">
        <seg>これは 通常はヒープ割り当てされた配列やその他のmutableオブジェクトですが 通常スタック割り当てされた整数や浮動小数点のようなスカラー値 一般的には、CまたはJuliaの呼び出し規約を使用するときにレジスタで渡されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This argument will be evaluated at compile-time, when the containing method is defined.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T223844Z" creationid="hsugawa8651" creationdate="20181109T223844Z">
        <seg>この引数は、containingメソッドが定義された時にコンパイル時に評価されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This automatic provision of constructors is equivalent to the following explicit declaration:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T123915Z" creationid="hsugawa8651" creationdate="20181118T123915Z">
        <seg>コンストラクタの自動プロビジョニングは、次の明示的な宣言に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This avoids the need to continually check for &lt;x1/&gt;null&lt;x2/&gt; values.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T123751Z" creationid="hsugawa8651" creationdate="20181118T123751Z">
        <seg>これにより、&lt;x1/&gt;null&lt;x2/&gt;の値を連続的にチェックする必要がなくなります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This basic framework is extensible in three major ways:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T131021Z" creationid="hsugawa8651" creationdate="20181113T131021Z">
        <seg>この基本的なフレームワークは、次の3つの主要な方法で拡張できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This behavior is based on the observation that when one uses unsigned hex literals for integer
values, one typically is using them to represent a fixed numeric byte sequence, rather than just
an integer value.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T032841Z" creationid="hsugawa8651" creationdate="20181109T225343Z">
        <seg>この動作は、整数値に符号なし16進リテラルを使用する際、ただの整数ではなく、 通常固定された数値のバイト列を表すという傾向に基づいています。

</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This behavior is based on the observation that when one uses unsigned hex literals for integer values, one typically is using them to represent a fixed numeric byte sequence, rather than just an integer value.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T185310Z" creationid="hsugawa8651" creationdate="20181118T185310Z">
        <seg>この動作は、整数に対して符号なしの16進数のリテラルを使用する場合の観察結果に基づいています。 値は通常、固定された数値バイトシーケンスを表すために使用されます。 整数値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This behavior is frequently used in Julia to form an alternative to very short &lt;c0&gt;if&lt;/c0&gt; statements.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T140408Z" creationid="hsugawa8651" creationdate="20181119T140408Z">
        <seg>Juliaでは、非常に短い&lt;c0&gt;if&lt;/c0&gt;文の代わりに、短絡評価が頻繁に利用されます。 
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This behavior is frequently used in Julia to form an alternative to very short &lt;x1/&gt;if&lt;x2/&gt; statements.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T230359Z" creationid="hsugawa8651" creationdate="20181109T230359Z">
        <seg>この動作は、&lt;x2/&gt;ステートメントの場合、非常に短い&lt;x1/&gt;の代替を形成するために、Juliaで頻繁に使用されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This behavior occurs when the first &lt;x5/&gt;`ccall`&lt;x6/&gt; argument contains references
to non-constants, such as local variables, function arguments, or non-constant globals.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T152327Z" creationid="hsugawa8651" creationdate="20181117T152327Z">
        <seg>この振る舞いは、最初の&lt;x5/&gt;`ccall'&lt;x6/&gt;引数が参照を含んでいるときに発生します。 ローカル変数、関数引数、非定数グローバルなどの非定数に指定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This call will attempt to infer type information from the
keys and values (i.e. this example creates a &lt;x2/&gt;Dict{String, Int64}&lt;x3/&gt;).</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T032114Z" creationid="hsugawa8651" creationdate="20181114T032114Z">
        <seg>この呼び出しは、以下のようなタイプ情報を推測しようとします。 キーと値(すなわち、この例では、&lt;x2/&gt;Dict{String,Int64}&lt;x3/&gt;を作成します)。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This can be accomplished with the &lt;c2&gt;break&lt;/c2&gt; keyword:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T142222Z" creationid="hsugawa8651" creationdate="20181119T142222Z">
        <seg> これは&lt;c2&gt;break&lt;/c2&gt;キーワードで実現できます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This can be accomplished with the &lt;x5/&gt;break&lt;x6/&gt; keyword:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T124502Z" creationid="hsugawa8651" creationdate="20181118T124502Z">
        <seg>これは、&lt;x5/&gt;break&lt;x6/&gt;キーワードを使用して実行できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This can be done with the syntax &lt;x3/&gt;$(xs...)&lt;x4/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T115436Z" creationid="hsugawa8651" creationdate="20181118T115436Z">
        <seg>これは、構文&lt;x3/&gt;$(xs...)&lt;x4/&gt;で行うことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This can be especially useful when targeting unusual platforms such as GPGPUs.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T152449Z" creationid="hsugawa8651" creationdate="20181117T152449Z">
        <seg>これは、GPGPUsなどの特殊なプラットフォームをターゲットにする場合に特に役立ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This can be expressed much more simply with &lt;x1/&gt;&lt;x2/&gt;&lt;x3/&gt;(@ref man-vectorized)
and by combining it with a normal integer index (instead of extracting the
first &lt;x4/&gt;page&lt;x5/&gt; from &lt;x6/&gt;A&lt;x7/&gt; as a separate step).</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T115833Z" creationid="hsugawa8651" creationdate="20181114T161052Z">
        <seg>これは、&lt;x1/&gt;&lt;x2/&gt;&lt;x3/&gt;(@ref man-vectorized)ではるかに簡単に表現することができます。 そして、それを通常の整数インデックスと組み合わせることで( 最初の&lt;x4/&gt;ページ&lt;x6/&gt;&lt;x6/&gt;から個別のステップとして&lt;x7/&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This can be expressed much more simply with &lt;x1/&gt;&lt;x2/&gt;&lt;x3/&gt;(@ref man-vectorized)
and by combining it with a normal integer index (instead of extracting the
first &lt;x4/&gt;page&lt;x5/&gt; from &lt;x6/&gt;A&lt;x7/&gt; as a separate step). It can even be combined with a &lt;x8/&gt;:&lt;x9/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T135028Z" creationid="hsugawa8651" creationdate="20181117T135028Z">
        <seg>これは、&lt;x1/&gt;&lt;x2/&gt;&lt;x3/&gt;(@ref manベクトル化)ではるかに簡単に表現することができます。 そして、それを通常の整数インデックスと組み合わせることで( 最初の&lt;x4/&gt;ページ&lt;x6/&gt;&lt;x6/&gt;から別のステップとして&lt;x7/&gt;。また、&lt;x8/&gt;:&lt;x9/&gt;と組み合わせることもできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This can happen when one of their dependencies is shadowed by a version in an earlier environment in the stack.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T121433Z" creationid="hsugawa8651" creationdate="20181118T121433Z">
        <seg>これは、その依存関係の一つが、スタック内の以前の環境でバージョンによって影付けされている場合に発生する可能性があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This catch-all is less specific than any other possible method definition for a pair of parameter
values, so it will only be called on pairs of arguments to which no other method definition applies.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T014134Z" creationid="hsugawa8651" creationdate="20181120T014134Z">
        <seg>この全捕捉は、どの引数のペアに対する他のメソッド定義よりも特化していないため、他のメソッド定義が適用されない引数のペアに対してのみ呼び出されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This code will be common to both versions, and is run-time code in both versions
(it will be quoted and returned as an expression from the generated version).</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T032411Z" creationid="hsugawa8651" creationdate="20181116T032411Z">
        <seg>このコードは両方のバージョンに共通で、両方のバージョンで実行されるランタイム・コードです。 (これは、生成されたバージョンからの式として引用され、返されます)。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This condition
is relaxed for incrementally-loaded precompiled modules to allow calling any function in the module.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T032238Z" creationid="hsugawa8651" creationdate="20181116T032238Z">
        <seg>この状態 は、モジュール内の任意の関数を呼び出し可能にするために、段階的にロードされたプリコンパイル済みモジュールに対して、リラックスされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This construction avoids the multiplication and addition operations.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T123452Z" creationid="hsugawa8651" creationdate="20181118T123452Z">
        <seg>この構成により、乗算と加算演算が回避されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This constructor will be invoked by the syntax &lt;x1/&gt;SummedArray(a)&lt;x2/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T124306Z" creationid="hsugawa8651" creationdate="20181118T124306Z">
        <seg>このコンストラクタは、構文&lt;x1/&gt;SummedArray(a)&lt;x2/&gt;によって呼び出されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This converts
the return value to the specified type.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T101854Z" creationid="hsugawa8651" creationdate="20181120T101854Z">
        <seg>これで、返り値を指定の型に変換できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This could be written more concisely using the ternary operator.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T135346Z" creationid="hsugawa8651" creationdate="20181109T230116Z">
        <seg>これは三項演算子を使ってより簡潔に書くことができます。 </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This creates a function taking one argument &lt;x1/&gt;x&lt;x2/&gt; and returning the value of the polynomial &lt;x3/&gt;x^2 +
2x - 1&lt;x4/&gt; at that value.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T130541Z" creationid="hsugawa8651" creationdate="20181120T130541Z">
        <seg>このような構文で、1つの引数 &lt;x1/&gt;x&lt;x2/&gt;、 戻り値が多項式&lt;x3/&gt;x^2 +
2x - 1&lt;x4/&gt;になる関数が生成されます。 </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This declaration has the same effect as the earlier definition of the &lt;x1/&gt;Foo&lt;x2/&gt; type without an explicit
inner constructor method.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T155814Z" creationid="hsugawa8651" creationdate="20181117T155814Z">
        <seg>この宣言は、明示的には&lt;x1/&gt;Foo&lt;x2/&gt;タイプの以前の定義と同じ効果を持っています。 インナーコンストラクタメソッド。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This declaration makes constructor calls without explicit type parameters, like &lt;x9/&gt;Point(1,2)&lt;x10/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T123943Z" creationid="hsugawa8651" creationdate="20181118T123943Z">
        <seg>この宣言は、&lt;x9/&gt;ポイント(1,2)&lt;x10/&gt;のような明示的なタイプパラメータなしのコンストラクタ呼び出しを行います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This dependency &lt;x1/&gt;graph&lt;x2/&gt; represented as a dictionary, looks like this:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T121132Z" creationid="hsugawa8651" creationdate="20181118T121132Z">
        <seg>この依存性&lt;x1/&gt;グラフ&lt;x2/&gt;は辞書として表され、次のようになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This distinction determines which scalar indexing methods the type must define.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T094519Z" creationid="hsugawa8651" creationdate="20181118T094519Z">
        <seg>この区別によって、タイプが定義するスカラー・インデックス・メソッドが決まります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This does not occur when Julia code is run in other ways.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T032923Z" creationid="hsugawa8651" creationdate="20181109T225348Z">
        <seg>この処理は、Juliaコードがその他の方法で実行された場合には実施されません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This error indicates that the conditional was of the wrong type: &lt;a0&gt;&lt;c1&gt;Int64&lt;/c1&gt;&lt;/a0&gt; rather than the required &lt;a2&gt;&lt;c3&gt;Bool&lt;/c3&gt;&lt;/a2&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T134917Z" creationid="hsugawa8651" creationdate="20181119T134917Z">
        <seg>このエラーは、条件式の型が誤りであることを示しています。 &lt;a0&gt;&lt;c1&gt;Int64&lt;/c1&gt;&lt;/a0&gt; は、要求される&lt;a2&gt;&lt;c3&gt;Bool&lt;/c3&gt;&lt;/a2&gt;に適合しません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This error indicates that the conditional was of the wrong type: &lt;x1/&gt;`Int64`&lt;x2/&gt; rather
than the required &lt;x3/&gt;`Bool`&lt;x4/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T230041Z" creationid="hsugawa8651" creationdate="20181109T230041Z">
        <seg>このエラーは、条件が間違ったタイプであることを示しています:&lt;x1/&gt;`Int64`&lt;x2/&gt;。 必要な&lt;x3/&gt;`Bool'&lt;x4/&gt;よりも多くなります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This example first allocates an array of bytes, then calls the C library function &lt;x1/&gt;gethostname&lt;x2/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T133842Z" creationid="hsugawa8651" creationdate="20181117T133842Z">
        <seg>この例ではまず、バイトの配列を割り当て、次にCライブラリ関数&lt;x1/&gt;gethostname&lt;x2/&gt;を呼び出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This example highlights the general principle that the adjacent representable floating-point numbers
also have adjacent binary integer representations.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T034747Z" creationid="hsugawa8651" creationdate="20181118T120352Z">
        <seg>この例では、隣接する浮動小数点数は隣接する二進整数を持つという一般的な原則を表しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This example highlights the general principle that the adjacent representable floating-point numbers also have adjacent binary integer representations.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T191452Z" creationid="hsugawa8651" creationdate="20181118T191452Z">
        <seg>この例では、隣接する表現可能浮動小数点数を示す一般的な原理が強調されています。 また、隣接するバイナリ整数表現もあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This example map includes three different kinds of package locations:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T121246Z" creationid="hsugawa8651" creationdate="20181118T121246Z">
        <seg>このマップには、次の3種類のパッケージ位置が含まれています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This experimental interface supports Julia's multi-threading capabilities.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T032154Z" creationid="hsugawa8651" creationdate="20181114T032154Z">
        <seg>この実験インターフェースは、Juliaのマルチスレッド機能をサポートしています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This expression constructs a name using &lt;x1/&gt;string&lt;x2/&gt;, then substitutes this name into a new &lt;x3/&gt;`ccall`&lt;x4/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T152307Z" creationid="hsugawa8651" creationdate="20181117T152307Z">
        <seg>この表現は&lt;x1/&gt;ストリング&lt;x2/&gt;を使用して名前を作成し、次にこの名前を新しい&lt;x3/&gt;`ccall'&lt;x4/&gt;に置き換えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This form can be used to call C library
functions, functions in the Julia runtime, or functions in an application linked to Julia.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T223802Z" creationid="hsugawa8651" creationdate="20181109T223802Z">
        <seg>このフォームを使用してCライブラリを呼び出すことができます。 関数、Juliaランタイム内の関数、またはJuliaにリンクされたアプリケーションの関数です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This function definition applies only to calls where &lt;x1/&gt;x&lt;x2/&gt; and &lt;x3/&gt;y&lt;x4/&gt; are both values of type
&lt;x5/&gt;`Float64`&lt;x6/&gt;:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T012445Z" creationid="hsugawa8651" creationdate="20181120T012426Z">
        <seg>この関数定義は、xとyの値の型が両方ともFloat64である呼び出しにだけ、適用されます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This function is intentionally similar
to the behavior of &lt;x7/&gt;`getindex`&lt;x8/&gt; and &lt;x9/&gt;`setindex!`&lt;x10/&gt; (e.g. &lt;x11/&gt;[]&lt;x12/&gt; access syntax).</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T152531Z" creationid="hsugawa8651" creationdate="20181117T152531Z">
        <seg>この関数は意図的に似ています &lt;x7/&gt;`getindex'&lt;x8/&gt;および&lt;x9/&gt;`setindex!`&lt;x10/&gt;(例:&lt;x11/&gt;[]&lt;x12/&gt;アクセス構文)の動作です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This function will always return an &lt;x1/&gt;Int8&lt;x2/&gt; regardless of the types of &lt;x3/&gt;x&lt;x4/&gt; and &lt;x5/&gt;y&lt;x6/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T102012Z" creationid="hsugawa8651" creationdate="20181120T102012Z">
        <seg>この関数は、&lt;x3/&gt;x&lt;x4/&gt;と &lt;x5/&gt;y&lt;x6/&gt;の型によらず、いつでも &lt;x1/&gt;Int8&lt;x2/&gt; の値を返す。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This guarantees that all objects of the declared type must come into
existence by a call to one of the inner constructor methods provided with the type, thereby giving
some degree of enforcement of a type's invariants.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T155804Z" creationid="hsugawa8651" creationdate="20181117T155804Z">
        <seg>これにより、宣言されたタイプのすべてのオブジェクトが、次のように指定されることが保証されます。 型で提供される内部コンストラクタメソッドの一つを呼び出して存在することによって タイプの不変度のある程度の強制。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This has the exact same effect as the previous definition of &lt;x1/&gt;foo&lt;x2/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T101533Z" creationid="hsugawa8651" creationdate="20181112T101533Z">
        <seg>これは、&lt;x1/&gt;foo&lt;x2/&gt;の前の定義とまったく同じ効果を持っています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This includes
&lt;x6/&gt;`Colon`&lt;x7/&gt; (&lt;x8/&gt;:&lt;x9/&gt;) to select all indices within the entire dimension,
ranges of the form &lt;x10/&gt;a:c&lt;x11/&gt; or &lt;x12/&gt;a:b:c&lt;x13/&gt; to select contiguous or strided
subsections, and arrays of booleans to select elements at their &lt;x14/&gt;true&lt;x15/&gt; indices.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T155120Z" creationid="hsugawa8651" creationdate="20181109T155120Z">
        <seg>これには &lt;x6/&gt;「コロン」&lt;x7/&gt;(&lt;x8/&gt;:&lt;x9/&gt;)は、次元全体のすべてのインデックスを選択するために使用されます。 &lt;x10/&gt;a:c&lt;x11/&gt;または&lt;x12/&gt;a:b:c&lt;x13/&gt;to select連続またはストライドされたものを選択するための範囲 サブセクションは、&lt;x14/&gt;真の&lt;x15/&gt;インデックスで選択要素を選択するためのブール演算の配列です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This includes:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T155518Z" creationid="hsugawa8651" creationdate="20181109T155518Z">
        <seg>これには次のものが含まれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This is
invisible to users as it is immediately realized through a call to &lt;x11/&gt;copy&lt;x12/&gt;, but it is this container
that provides the basis for broadcast's extensibility for authors of custom types.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T131523Z" creationid="hsugawa8651" creationdate="20181113T131523Z">
        <seg>これは &lt;x11/&gt;コピー&lt;x12/&gt;の呼び出しによってすぐに実現されるため、ユーザには見えませんが、このコンテナはこのコンテナです。 は、カスタム・タイプの作成者にとって、ブロードキャストの拡張性の基礎を提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This is a powerful construct: both exception handling and
cooperative multitasking are implemented in Julia using tasks.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T225749Z" creationid="hsugawa8651" creationdate="20181109T225749Z">
        <seg>これは強力な構成であり、例外処理とも呼ばれます。 タスクを使用して、Juliaで協調的マルチタスクを実装します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This is a powerful construct: both exception handling and cooperative multitasking are implemented in Julia using tasks.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T133404Z" creationid="hsugawa8651" creationdate="20181119T133404Z">
        <seg>タスクは、強力な制御構造で、Juliaでは、例外処理や協調的マルチタスクの実装に、使われています。 </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This is a somewhat contrived example since we could produce the same behavior more clearly by
negating the condition and placing the &lt;x1/&gt;println&lt;x2/&gt; call inside the &lt;x3/&gt;if&lt;x4/&gt; block.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T124524Z" creationid="hsugawa8651" creationdate="20181118T124524Z">
        <seg>これは、同じ振る舞いをより明確に生成することができるので、多少工夫された例です。 &lt;x4/&gt;ブロックが&lt;x4/&gt;ブロックの場合には、&lt;x/&gt;println&lt;x2/&gt;の呼び出しを&lt;x3/&gt;の内部に配置します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This is a somewhat contrived example since we could produce the same behavior more clearly by negating the condition and placing the &lt;c0&gt;println&lt;/c0&gt; call inside the &lt;c1&gt;if&lt;/c1&gt; block.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T142715Z" creationid="hsugawa8651" creationdate="20181119T142521Z">
        <seg>これは不自然な例です。というのも、条件式を否定して&lt;c1&gt;if&lt;/c1&gt;ブロック内に&lt;c0&gt;println&lt;/c0&gt;の呼び出しを置いた方が、同じ動作をより明確に書けるからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This is a very common pattern throughout Julia Base: a small set of required methods
define an informal interface that enable many fancier behaviors.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T112840Z" creationid="hsugawa8651" creationdate="20181112T112840Z">
        <seg>これは、Julia Base全体で非常に一般的なパターンです。必要なメソッドの集合です。 多くのファン的な振る舞いを可能にするインフォーマルなインターフェースを定義します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This is accomplished by dividing the given numerator and
denominator values by their greatest common divisor, computed using the &lt;x7/&gt;gcd&lt;x8/&gt; function.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T124123Z" creationid="hsugawa8651" creationdate="20181118T124123Z">
        <seg>これは、与えられた分子を分割することによって達成される。 分母値は、&lt;x7/&gt;gcd&lt;x8/&gt;関数を使用して計算され、最大公約数によって計算されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This is accomplished just by making an appropriate call with
&lt;x1/&gt;`ccall`&lt;x2/&gt; syntax, which looks like an ordinary function call.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T160544Z" creationid="hsugawa8651" creationdate="20181109T160544Z">
        <seg>これは、適切な呼び出しを行うことによって実現されます。 &lt;x1/&gt;`ccall'&lt;x2/&gt;構文は、通常の関数呼び出しのように見えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This is again determined by the computed broadcast style.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T131550Z" creationid="hsugawa8651" creationdate="20181113T131550Z">
        <seg>これは、計算されたブロードキャスト・スタイルによって再度決定されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This is because argument parsing in shebang
is platform-dependent and not well-specified.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181110T024923Z" creationid="hsugawa8651" creationdate="20181110T024923Z">
        <seg>これは、シェバンの引数の構文解析が はプラットフォーム依存であり、よく指定されていません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This is different than traditional
object-oriented languages, where dispatch occurs based only on the first argument, which often
has a special argument syntax, and is sometimes implied rather than explicitly written as an argument.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T011442Z" creationid="hsugawa8651" creationdate="20181120T011442Z">
        <seg>これは、従来のオブジェクト指向言語とは異なります。従来のオブジェクト指向言語では、通常は最初の引数のみに基づいてディスパッチが行われ、最初の引数を特別視して引数に見えないような構文を持つものもあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This is fine if a named function effecting the transform one wants already exists to pass as the
first argument to &lt;x1/&gt;`map()`&lt;x2/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T130650Z" creationid="hsugawa8651" creationdate="20181120T130650Z">
        <seg>配列に対して実行したい変換が、名前つきの関数として存在していて、&lt;x1/&gt;`map()`&lt;x2/&gt;の1番目の引数に使える場合は、問題ありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This is how the name &lt;x9/&gt;Priv&lt;x10/&gt; can refer to different packages in the main project than it does in one of its package's dependencies, which allows for duplicate names in the package ecosystem.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T121140Z" creationid="hsugawa8651" creationdate="20181118T121140Z">
        <seg>これは、&lt;x9/&gt;Priv&lt;x10/&gt;という名前が、パッケージの依存関係の一つとは異なるパッケージをメイン・プロジェクトで参照できるため、パッケージ・エコシステム内で重複する名前を使用することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This is just a special kind of 32-bit primitive type whose numeric
value represents a Unicode code point.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T075915Z" creationid="hsugawa8651" creationdate="20181120T075915Z">
        <seg>これは数値がUnicodeコードポイントを表す特殊な種類の32ビットのビット型です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This is key to Julia's ability to statically infer and compile code to run fast,
without the usual JIT tricks and overhead.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T020859Z" creationid="hsugawa8651" creationdate="20181120T020859Z">
        <seg>これは、Juliaが静的にコードを推論しコンパイルする際に、通常のJITトリックやオーバーヘッドがなくてすむ鍵となります。 </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This is more readable and convenient and equivalent to the above string concatenation -- the system
rewrites this apparent single string literal into a concatenation of string literals with variables.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T082834Z" creationid="hsugawa8651" creationdate="20181120T082834Z">
        <seg>この方法は呼びやすくかつ便利です。システムが単一文字リテラルを変数と文字列リテラルの連結に書き換えるので、上記の文字列連結と動作は変わりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This is referred to as &lt;x5/&gt;quoting&lt;x6/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T115338Z" creationid="hsugawa8651" creationdate="20181118T115338Z">
        <seg>これは&lt;x5/&gt;引用符&lt;x6/&gt;と呼ばれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This is such
an important part of the operation that it is stored as the first type parameter of the
&lt;x25/&gt;Broadcasted&lt;x26/&gt; type, allowing for dispatch and specialization.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T131554Z" creationid="hsugawa8651" creationdate="20181113T131554Z">
        <seg>これは の最初のタイプパラメータとして格納される操作の重要な部分です。 &lt;x25/&gt;ブロードキャストされた&lt;x26/&gt;タイプで、ディスパッチと特殊化を可能にします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This is the list of reserved keywords in Julia:
&lt;x1/&gt;baremodule&lt;x2/&gt;, &lt;x3/&gt;begin&lt;x4/&gt;, &lt;x5/&gt;break&lt;x6/&gt;, &lt;x7/&gt;catch&lt;x8/&gt;, &lt;x9/&gt;const&lt;x10/&gt;, &lt;x11/&gt;continue&lt;x12/&gt;, &lt;x13/&gt;do&lt;x14/&gt;,
&lt;x15/&gt;else&lt;x16/&gt;, &lt;x17/&gt;elseif&lt;x18/&gt;, &lt;x19/&gt;end&lt;x20/&gt;, &lt;x21/&gt;export&lt;x22/&gt;, &lt;x23/&gt;false&lt;x24/&gt;, &lt;x25/&gt;finally&lt;x26/&gt;, &lt;x27/&gt;for&lt;x28/&gt;, &lt;x29/&gt;function&lt;x30/&gt;,
&lt;x31/&gt;global&lt;x32/&gt;, &lt;x33/&gt;if&lt;x34/&gt;, &lt;x35/&gt;import&lt;x36/&gt;, &lt;x37/&gt;let&lt;x38/&gt;, &lt;x39/&gt;local&lt;x40/&gt;, &lt;x41/&gt;macro&lt;x42/&gt;, &lt;x43/&gt;module&lt;x44/&gt;, &lt;x45/&gt;quote&lt;x46/&gt;,
&lt;x47/&gt;return&lt;x48/&gt;, &lt;x49/&gt;struct&lt;x50/&gt;, &lt;x51/&gt;true&lt;x52/&gt;, &lt;x53/&gt;try&lt;x54/&gt;, &lt;x55/&gt;using&lt;x56/&gt;, &lt;x57/&gt;while&lt;x58/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181110T041738Z" creationid="hsugawa8651" creationdate="20181110T041738Z">
        <seg>This is the list of reserved keywords in Julia:
&lt;x1/&gt;baremodule&lt;x2/&gt;, &lt;x3/&gt;begin&lt;x4/&gt;, &lt;x5/&gt;break&lt;x6/&gt;, &lt;x7/&gt;catch&lt;x8/&gt;, &lt;x9/&gt;const&lt;x10/&gt;, &lt;x11/&gt;continue&lt;x12/&gt;, &lt;x13/&gt;do&lt;x14/&gt;,
&lt;x15/&gt;else&lt;x16/&gt;, &lt;x17/&gt;elseif&lt;x18/&gt;, &lt;x19/&gt;end&lt;x20/&gt;, &lt;x21/&gt;export&lt;x22/&gt;, &lt;x23/&gt;false&lt;x24/&gt;, &lt;x25/&gt;finally&lt;x26/&gt;, &lt;x27/&gt;for&lt;x28/&gt;, &lt;x29/&gt;function&lt;x30/&gt;,
&lt;x31/&gt;global&lt;x32/&gt;, &lt;x33/&gt;if&lt;x34/&gt;, &lt;x35/&gt;import&lt;x36/&gt;, &lt;x37/&gt;let&lt;x38/&gt;, &lt;x39/&gt;local&lt;x40/&gt;, &lt;x41/&gt;macro&lt;x42/&gt;, &lt;x43/&gt;module&lt;x44/&gt;, &lt;x45/&gt;quote&lt;x46/&gt;,
&lt;x47/&gt;return&lt;x48/&gt;, &lt;x49/&gt;struct&lt;x50/&gt;, &lt;x51/&gt;true&lt;x52/&gt;, &lt;x53/&gt;try&lt;x54/&gt;, &lt;x55/&gt;using&lt;x56/&gt;, &lt;x57/&gt;while&lt;x58/&gt;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This is the same behavior found in Scheme, most Lisps,
Python, Ruby and Perl, among other dynamic languages.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T125459Z" creationid="hsugawa8651" creationdate="20181110T025715Z">
        <seg>こうした挙動は,Scheme,Lispの大部分,Python,Ruby,Perl,その他の動的言語と同様です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This is useful for defining strings within code that is indented.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T083239Z" creationid="hsugawa8651" creationdate="20181120T083228Z">
        <seg>これはインデントされたコード内 の文字列を定義するのに便利です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This is useful to
hide a stacktrace (which contains non-permanent references to lines
of julia code) when the doctest shows that an exception is thrown,
for example:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T020038Z" creationid="hsugawa8651" creationdate="20181116T020038Z">
        <seg>This is useful to
hide a stacktrace (which contains non-permanent references to lines
of julia code) when the doctest shows that an exception is thrown,
for example:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This is wasteful when dimensions get large, so Julia provides &lt;x1/&gt;`broadcast`&lt;x2/&gt;, which expands
singleton dimensions in array arguments to match the corresponding dimension in the other array
without using extra memory, and applies the given function elementwise:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T161257Z" creationid="hsugawa8651" creationdate="20181114T161257Z">
        <seg>次元が大きくなると無駄になります。したがって、Juliaは&lt;x1/&gt;'ブロードキャスト''&lt;x2/&gt;を提供します。これは拡張されます。 配列引数内の単一の次元を、他の配列内の対応する次元に一致させます。 は、余分なメモリを使用せず、指定された関数要素を適用します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This kind of definition of function behavior by dispatch is quite common -- idiomatic, even --
in Julia.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T020050Z" creationid="hsugawa8651" creationdate="20181120T020050Z">
        <seg>Juliaでは、このようにディスパッチを使って関数の動作を定義するのは、まったく普通であって、慣用的でさえあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This kind of environment was the only kind that existed in Julia 0.6 and earlier.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T152925Z" creationid="hsugawa8651" creationdate="20181117T152925Z">
        <seg>この種の環境は、ジュリア0.6以前に存在していた唯一の種であった。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This kind of quoting does not yet have syntax, but is represented internally
as an object of type &lt;x5/&gt;QuoteNode&lt;x6/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T165227Z" creationid="hsugawa8651" creationdate="20181118T165227Z">
        <seg>この種の引用符はまだ構文はありませんが、内部的に表現されています &lt;x5/&gt;QuoteNode&lt;x6/&gt;型のオブジェクトとして使用されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This kind of syntax is convenient for data processing, but in other languages vectorization
is also often required for performance: if loops are slow, the "vectorized" version of a function
can call fast library code written in a low-level language.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T120055Z" creationid="hsugawa8651" creationdate="20181118T120055Z">
        <seg>この種の構文はデータ処理に便利ですが、その他の言語ではベクトル化されています。 また、パフォーマンスには多くの場合、ループが必要となります。ループが低速である場合、関数の「ベクトル化」バージョンが必要です。 は、低レベル言語で記述された高速ライブラリコードを呼び出すことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This leverages a fallback implementation of &lt;x1/&gt;copyto!&lt;x2/&gt; that converts the wrapper into a
&lt;x3/&gt;Broadcasted{Nothing}&lt;x4/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T131702Z" creationid="hsugawa8651" creationdate="20181113T131702Z">
        <seg>これは、ラッパーを変換する&lt;x1/&gt;copyto!&lt;x2/&gt;のフォールバック実装を活用します。 &lt;x3/&gt;ブロードキャスト{なし}&lt;x4/&gt;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This makes it simple to relocate a subtree of source files.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T152720Z" creationid="hsugawa8651" creationdate="20181117T152720Z">
        <seg>これによって、ソースファイルのサブツリーを簡単に再配置することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This makes writing polynomial expressions
much cleaner:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T040152Z" creationid="hsugawa8651" creationdate="20181112T111727Z">
        <seg>これにより多項式をより明確に記載することができます。:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This manifest file describes a possible complete dependency graph for the &lt;x1/&gt;App&lt;x2/&gt; project:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T121119Z" creationid="hsugawa8651" creationdate="20181118T121119Z">
        <seg>このマニフェストファイルは、&lt;x1/&gt;アプリケーション&lt;x2/&gt;プロジェクトの完全な依存関係グラフを記述しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This may sound like a strange restriction,
but remember that since C is not a dynamic language like Julia,
its functions can only accept argument types with a statically-known, fixed signature.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T151227Z" creationid="hsugawa8651" creationdate="20181117T151227Z">
        <seg>これは奇妙な制限のように聞こえるかもしれませんが でもCはジュリアのようなダイナミックな言語ではないので その関数は、静的に既知の固定署名を持つ引数型の引数型のみを受け入れることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This means that
&lt;x1/&gt;@cfunction&lt;x2/&gt;-generated pointers cannot be used in calls where WINAPI expects &lt;x3/&gt;stdcall&lt;x4/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T153957Z" creationid="hsugawa8651" creationdate="20181109T153957Z">
        <seg>つまり &lt;x1/&gt;@cfunction&lt;x2/&gt;-生成されたポインタは、WINAPIが&lt;x3/&gt;stdcall&lt;x4/&gt;を想定している呼び出しでは使用できません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This means that calling &lt;x1/&gt;f()&lt;x2/&gt; is equivalent to calling &lt;x3/&gt;f(1,2)&lt;x4/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T023203Z" creationid="hsugawa8651" creationdate="20181120T023132Z">
        <seg>これは、f()の呼び出しとf(1,2)の呼び出しは同等なことを意味します。 </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This means that multiple independent parties can maintain both public and private packages and registries of them, and that projects can depend on a mix of public and private packages from different registries.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T152823Z" creationid="hsugawa8651" creationdate="20181117T152823Z">
        <seg>これは、複数の独立した当事者が、パブリック・パッケージとプライベート・パッケージの両方を維持することができること、およびプロジェクトが異なるレジストリーからのパブリック・パッケージとプライベート・パッケージの混在に依存することを意味します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This means that new variables
defined inside the &lt;x2/&gt;if&lt;x3/&gt; clauses can be used after the &lt;x4/&gt;if&lt;x5/&gt; block, even if they weren't defined
before.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T225918Z" creationid="hsugawa8651" creationdate="20181109T225918Z">
        <seg>つまり、新しい変数は &lt;x4/&gt;の場合は&lt;x/&gt;の範囲内で、&lt;x4/&gt;の場合は&lt;x4/&gt;の範囲内で定義されていても、定義されていない場合でも定義されます。 の前にあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This means that new variables defined inside the &lt;c1&gt;if&lt;/c1&gt; clauses can be used after the &lt;c2&gt;if&lt;/c2&gt; block, even if they weren't defined before.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T134519Z" creationid="hsugawa8651" creationdate="20181119T134443Z">
        <seg>これは、&lt;c1&gt;if&lt;/c1&gt;句の中で定義した新しい変数が、&lt;c2&gt;if&lt;/c2&gt;ブロックの後ろで使えるということです。 たとえifブロックの前で定義していなくてもよいのです。 </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This means that not every
byte index into a UTF-8 string is necessarily a valid index for a character.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T081525Z" creationid="hsugawa8651" creationdate="20181120T081525Z">
        <seg>これは、必ずしも全てのUTF-8文字列のインデックスバイトが文字に対して有効なインデックスではないことを意味します。 </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This means that programs making heavy use of generated functions might be impossible to
statically compile.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T032346Z" creationid="hsugawa8651" creationdate="20181116T032346Z">
        <seg>つまり、生成された関数を大量に使用するプログラムは不可能である可能性があります。 静的にコンパイルします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This means that the path to this &lt;x14/&gt;Priv&lt;x15/&gt; package will be &lt;x16/&gt;packages/Priv/HDkr/src/Priv.jl&lt;x17/&gt; in one of the package depots.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T121220Z" creationid="hsugawa8651" creationdate="20181118T121220Z">
        <seg>これは、この&lt;x14/&gt;Priv&lt;x15/&gt;パッケージへのパスが、パッケージデポの一つで&lt;x16/&gt;パッケージ/Priv/HDkr/src/Priv.jl&lt;x17/&gt;になることを意味します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This means we must also define a corresponding &lt;x1/&gt;similar&lt;x2/&gt; method:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T131420Z" creationid="hsugawa8651" creationdate="20181113T131420Z">
        <seg>これはまた、対応する&lt;x1/&gt;類似の&lt;x2/&gt;の方法を定義する必要があることを意味します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This means, for example, that
&lt;x9/&gt;1 / 2im&lt;x10/&gt; equals &lt;x11/&gt;-0.5im&lt;x12/&gt; and &lt;x13/&gt;6 // 2(2 + 1)&lt;x14/&gt; equals &lt;x15/&gt;1 // 1&lt;x16/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T111830Z" creationid="hsugawa8651" creationdate="20181112T111830Z">
        <seg>これは例えば &lt;x9/&gt;1/2im&lt;x10/&gt;=&lt;x11/&gt;-0.5im&lt;x12/&gt;6//2(2 + 1)&lt;x14/&gt;=&lt;x15/&gt;=&lt;x15/&gt;1//1&lt;x16/&gt;となります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This mechanism can be implemented easily by custom exception types following the way &lt;x1/&gt;`UndefVarError`&lt;x2/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T124654Z" creationid="hsugawa8651" creationdate="20181118T124654Z">
        <seg>このメカニズムは、&lt;x1/&gt;`UndefVarError'&lt;x2/&gt;のように、カスタム例外タイプによって容易に実装することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This method definition applies to any pair of arguments that are instances of &lt;x1/&gt;`Number`&lt;x2/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T012802Z" creationid="hsugawa8651" creationdate="20181120T012802Z">
        <seg>このメソッド定義は&lt;x1/&gt;`Number`&lt;x2/&gt;のインスタンスである任意の引数のペアに適用されます。 </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This method uses the &lt;x1/&gt;`convert`&lt;x2/&gt; function to explicitly convert &lt;x3/&gt;x&lt;x4/&gt; to &lt;x5/&gt;`Float64`&lt;x6/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T124007Z" creationid="hsugawa8651" creationdate="20181118T124007Z">
        <seg>この方法は&lt;x1/&gt;変換&lt;x2/&gt;関数を使用して&lt;x3/&gt;x&lt;x4/&gt;を明示的に&lt;x/&gt;「Float64」&lt;x6/&gt;に変換する。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This model is a
good fit for mathematical programming, where it is unnatural for the
first argument to "own" an operation as in traditional object-oriented
dispatch.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T183905Z" creationid="hsugawa8651" creationdate="20181118T183905Z">
        <seg>このモデルは数値計算にとても適しています。 従来のオブジェクト指向ディスパッチのように、第一引数が演算子を「所有」するのは不自然です。 
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This model is a
good fit for mathematical programming, where it is unnatural for the
first argument to “own” an operation as in traditional object-oriented
dispatch.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T082414Z" creationid="hsugawa8651" creationdate="20181118T082414Z">
        <seg>このモデルは数値計算にとても適しています。 従来のオブジェクト指向ディスパッチのように、第一引数が演算子を「所有」するのは不自然です。 
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This model is a good fit for mathematical programming, where it is unnatural for the first argument to "own" an operation as in traditional object-oriented dispatch.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T182612Z" creationid="hsugawa8651" creationdate="20181118T182612Z">
        <seg>このモデルは数値計算にとても適しています。 従来のオブジェクト指向ディスパッチのように、第一引数が演算子を「所有」するのは不自然です。 
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This monotonically increasing value tracks each method definition operation.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T021200Z" creationid="hsugawa8651" creationdate="20181120T021135Z">
        <seg> この単調に増加する値は、各メソッド定義の操作を追跡します。 
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This much was already mentioned briefly when
composite types were introduced.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T155626Z" creationid="hsugawa8651" creationdate="20181117T155626Z">
        <seg>このことは、すでに簡単に述べた。 複合型が導入されました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This normalized form for a ratio of integers is unique, so equality of rational values can be
tested by checking for equality of the numerator and denominator.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T123536Z" creationid="hsugawa8651" creationdate="20181118T123536Z">
        <seg>整数の比率に対する正規化された形式は固有であるため、合理的な値の同等性は 分子と分母の等価性を確認することによって試験されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This object can be iterated to produce values on demand, instead of allocating
an array and storing them in advance (see &lt;x1/&gt;Iteration&lt;x2/&gt;).</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154927Z" creationid="hsugawa8651" creationdate="20181109T154927Z">
        <seg>このオブジェクトを反復して、必要に応じて必要に応じて値を生成することができます。 配列とそれを事前に格納する(&lt;x1/&gt;Iteration&lt;x2/&gt;を参照)。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This output tells us that &lt;x1/&gt;f&lt;x2/&gt; is a function object with two methods.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T014023Z" creationid="hsugawa8651" creationdate="20181120T013951Z">
        <seg>この出力は、fが2つのメソッドを持つ関数オブジェクトであることを示しています。 </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This possibility is unavoidable since these entities do not coordinate and may not even know about each other.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T152835Z" creationid="hsugawa8651" creationdate="20181117T152835Z">
        <seg>この可能性は、これらのエンティティが調整されておらず、互いに認識されていない可能性があるため、避けられません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This project file implies the following &lt;x1/&gt;roots&lt;x2/&gt; map, if it was represented by a Julia dictionary:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T121105Z" creationid="hsugawa8651" creationdate="20181118T121105Z">
        <seg>このプロジェクトファイルは、次の&lt;x1/&gt;ルート&lt;x2/&gt;マップを意味しています。これは、Julia辞書によって表されている場合です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This reflects the characteristics of the underlying arithmetic of integers as implemented on modern
computers.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T033220Z" creationid="hsugawa8651" creationdate="20181112T110518Z">
        <seg>これは現代のコンピュータで実行される基本演算の特性を反映しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This setting will cause &lt;x1/&gt;eachindex&lt;x2/&gt; iteration over a &lt;x3/&gt;MyArray&lt;x4/&gt; to use integers.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T161200Z" creationid="hsugawa8651" creationdate="20181114T161200Z">
        <seg>この設定により、&lt;x3/&gt;MyArray&lt;x4/&gt;では&lt;x1/&gt;エアチンデス&lt;x2/&gt;反復が行われ、整数を使用することになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This setting will cause &lt;x1/&gt;eachindex&lt;x2/&gt; iteration over a &lt;x3/&gt;MyArray&lt;x4/&gt; to use integers. If you don't
specify this trait, the default value &lt;x5/&gt;IndexCartesian()&lt;x6/&gt; is used.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T135132Z" creationid="hsugawa8651" creationdate="20181117T135132Z">
        <seg>この設定により、&lt;x1/&gt;MyArray&lt;x4/&gt;では&lt;x1/&gt;エアチンデス&lt;x2/&gt;の繰り返しが行われ、整数を使用することはできません。 この特性を指定します。デフォルト値&lt;x5/&gt;IndexCartesian()&lt;x6/&gt;は使用されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This sort of eager operation is directly supported by a bit
of indirection; instead of directly constructing &lt;x5/&gt;Broadcasted&lt;x6/&gt; objects, Julia lowers the
fused expression &lt;x7/&gt;x .* (x .+ 1)&lt;x8/&gt; to &lt;x9/&gt;Broadcast.broadcasted(*, x, Broadcast.broadcasted(+, x, 1))&lt;x10/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T131609Z" creationid="hsugawa8651" creationdate="20181113T131609Z">
        <seg>この種の意欲的な操作は、直接的にサポートされています。 indirection;&lt;x5/&gt;ブロードキャスト&lt;x6/&gt;オブジェクトを直接構築するのではなく、Juliaは次のように説明します。 融合式&lt;x7/&gt;x.*(x .+ 1)&lt;x8/&gt;から&lt;x9/&gt;ブロードキャスト放送(*,x,ブロードキャスト.ブロードキャスト(+, x, 1))&lt;x10/&gt;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This style is preferred, since it allows the compiler to make more decisions and compile
programs in more ways, and since normal code is more readable than code-generating code.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T032419Z" creationid="hsugawa8651" creationdate="20181116T032419Z">
        <seg>このスタイルは、コンパイラーがより多くの決定とコンパイルを行うことができるので、このスタイルは好ましいです。 プログラムはより多くの方法で実行され、通常のコードはコード生成コードよりも読みやすくなります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This supports the full range of &lt;x3/&gt;Unicode&lt;x4/&gt; characters via
the &lt;x5/&gt;UTF-8&lt;x6/&gt; encoding.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T075727Z" creationid="hsugawa8651" creationdate="20181120T075727Z">
        <seg>これは、UTF-8 エンコーディング下で 全ての Unicode をサポートします。 </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This syntax is particularly useful with the terse single-line function definition form introduced
in &lt;x1/&gt;Functions&lt;x2/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T225818Z" creationid="hsugawa8651" creationdate="20181109T225818Z">
        <seg>この構文は、簡潔な単一行関数定義フォームが導入された場合に特に有用です。 &lt;x1/&gt;の関数&lt;x2/&gt;である。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This syntax is particularly useful with the terse single-line function definition form introduced in &lt;a0&gt;Functions&lt;/a0&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T133739Z" creationid="hsugawa8651" creationdate="20181119T133718Z">
        <seg>この構文は、&lt;a0&gt;Functions&lt;/a0&gt; の章で紹介した、簡潔で単一行の関数定義方式と一緒に使うと、特に便利です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This type may appear innocuous enough, until one considers how to construct an instance of it.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T155845Z" creationid="hsugawa8651" creationdate="20181117T155845Z">
        <seg>このタイプは、インスタンスの作成方法を考慮するまでは、十分に無害である可能性があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This use of &lt;x3/&gt;...&lt;x4/&gt; for combining many different arguments into a single
argument is called slurping:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181110T025239Z" creationid="hsugawa8651" creationdate="20181110T025239Z">
        <seg>&lt;x3/&gt;.&lt;x4/&gt;を使用して、さまざまな引数を一つに組み合わせて使用します。 引数はsluffingと呼ばれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This value is simply the return value of the last executed statement in the branch that was chosen,
so</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T230023Z" creationid="hsugawa8651" creationdate="20181109T230023Z">
        <seg>この値は、選択された分岐内の最後に実行された文の戻り値です。 だから</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This value is simply the return value of the last executed statement in the branch that was chosen, so</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T134659Z" creationid="hsugawa8651" creationdate="20181119T134659Z">
        <seg>この値は、単純に、分岐の中から選択されて、最後に実行された文の戻り値です。.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This value represents invalid operators and not
operators of lowest precedence.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T031014Z" creationid="hsugawa8651" creationdate="20181114T031014Z">
        <seg>この値は無効な演算子を表しています。 優先順位の低い演算子です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This variable can only be used
with corresponding input type declaration &lt;x3/&gt;Ref{Cdouble}&lt;x4/&gt;, since its memory is allocated and managed
by Julia, not C. The implicit call to &lt;x5/&gt;`Base.cconvert(Ref{Cdouble}, result_array)`&lt;x6/&gt; unpacks
the Julia pointer to a Julia array data structure into a form understandable by C.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T152159Z" creationid="hsugawa8651" creationdate="20181117T152159Z">
        <seg>この変数は 対応する入力タイプ宣言&lt;x3/&gt;Ref{Cdouble}&lt;x4/&gt;であり、そのメモリは割り当てられ、管理されているため &lt;x5/&gt;'Base.チコンベルト(Ref{Cdouble},result_array)`&lt;x6/&gt;unpacksを暗黙的に呼び出すことはできません。 Juliaの配列データ構造体へのJuliaポインタで、Cによって理解可能な形式に変換されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This way, the address values obtained from pointer arithmetic do not depend
on the element types of pointers.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T152619Z" creationid="hsugawa8651" creationdate="20181117T152619Z">
        <seg>このようにして、ポインタ演算から得られたアドレス値は依存しない。 ポインタのエレメント・タイプを指定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This wrapper throws an exception clearly indicating the problem if the caller tries to get a non-existent
environment variable:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T224133Z" creationid="hsugawa8651" creationdate="20181109T224133Z">
        <seg>このラッパーは、呼び出し者が存在しないことを示す問題を明確に示す例外をスローします。 環境変数:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Those arguments may themselves be more nested
&lt;x3/&gt;Broadcasted&lt;x4/&gt; containers, forming a large expression tree to be evaluated.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T131508Z" creationid="hsugawa8651" creationdate="20181113T131508Z">
        <seg>これらの引数自体がネストされている可能性があります。 &lt;x3/&gt;ブロードキャスト&lt;x4/&gt;コンテナで、評価対象となる大きな表現ツリーを形成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Those keywords are not allowed to be used as variable names.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181110T041751Z" creationid="hsugawa8651" creationdate="20181110T041742Z">
        <seg>これらのキーワードは、変数名として使用することはできません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Though most code can be written in Julia, there are many high-quality, mature libraries for numerical
computing already written in C and Fortran.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T160533Z" creationid="hsugawa8651" creationdate="20181109T160533Z">
        <seg>ほとんどのコードはJuliaで書くことができますが、多くの場合、高品質で成熟したライブラリがあります。 CとFortranではすでに作成されています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Though most code can be written in Julia, there are many high-quality, mature libraries for numerical
computing already written in C and Fortran. To allow easy use of this existing code, Julia makes
it simple and efficient to call C and Fortran functions. Julia has a "no boilerplate" philosophy:
functions can be called directly from Julia without any "glue" code, code generation, or compilation
-- even from the interactive prompt. This is accomplished just by making an appropriate call with
&lt;x1/&gt;`ccall`&lt;x2/&gt; syntax, which looks like an ordinary function call.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T133701Z" creationid="hsugawa8651" creationdate="20181117T133701Z">
        <seg>ほとんどのコードはJuliaで書くことができますが、多くの場合、高品質で成熟したライブラリがあります。 この既存のコードを簡単に使用できるようにするために、JuliaはCとFortranに既に記述されています。 CとFortranの関数を呼び出すことは簡単で効率的です。Juliaは「ボイラープレートなし」の哲学を持っています。 関数は、"glue"コード、コード生成、コンパイルなしで、Juliaから直接呼び出すことができます。 --対話型プロンプトからでも、適切な呼び出しを行うことで &lt;x1/&gt;`ccall'&lt;x2/&gt;構文は、通常の関数呼び出しのように見えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Thread-safety</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T152621Z" creationid="hsugawa8651" creationdate="20181117T152621Z">
        <seg>スレッドセーフ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Thus far, we have presented only examples of functions defined
with a single method, applicable to all types of arguments.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T005942Z" creationid="hsugawa8651" creationdate="20181120T005942Z">
        <seg>ここまでで例示した関数は、単一のメソッドで定義されたものだけで、すべての型の引数に適用可能です。 </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Thus we have the identity that &lt;x4/&gt;length(s) &lt;= endof(s)&lt;x5/&gt;,
since each character in a string must have its own index.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T081806Z" creationid="hsugawa8651" creationdate="20181120T081806Z">
        <seg>したがって、文字列内のそれぞれの文字は固有のインデックスを持つため、  &lt;x4/&gt;length(s) &lt;= endof(s)&lt;x5/&gt;を使用して識別ができます。 </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Thus we have the identity that &lt;x4/&gt;length(s) &lt;= lastindex(s)&lt;x5/&gt;,
since each character in a string must have its own index.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T100726Z" creationid="hsugawa8651" creationdate="20181120T100726Z">
        <seg>したがって、文字列内のそれぞれの文字は固有のインデックスを持つため、  &lt;x4/&gt;length(s) &lt;= endof(s)&lt;x5/&gt;を使用して識別ができます。 </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Thus,
overall, this defines a boolean function that checks whether its two arguments are of the same
type:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T020011Z" creationid="hsugawa8651" creationdate="20181120T020011Z">
        <seg> したがって、これは全体として、2つの引数が同じ型であるかどうかを検査するブール関数の定義になっています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Thus, although the &lt;x1/&gt;⊘&lt;x2/&gt; operator usually returns an instance of &lt;x3/&gt;OurRational&lt;x4/&gt;, if either
of its arguments are complex integers, it will return an instance of &lt;x5/&gt;Complex{OurRational}&lt;x6/&gt; instead.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T124221Z" creationid="hsugawa8651" creationdate="20181118T124221Z">
        <seg>したがって、&lt;x1/&gt;θ&lt;x2/&gt;演算子は通常、&lt;x3/&gt;OurRational&lt;x4/&gt;のインスタンスを返すが、どちらか一方であれば の引数は複雑な整数で、&lt;x5/&gt;Complex{OurRational}&lt;x6/&gt;のインスタンスを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Thus, arithmetic with Julia integers is actually a form of &lt;x1/&gt;modular arithmetic&lt;x2/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T033247Z" creationid="hsugawa8651" creationdate="20181112T110521Z">
        <seg>このように、Juliaにおける整数の演算は、 &lt;x1/&gt;合同算術&lt;x2/&gt; の 形をとります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Thus, in both of these
cases, an error occurs since the left-hand value is not a function.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T040554Z" creationid="hsugawa8651" creationdate="20181112T111854Z">
        <seg>上記の例では、左辺の値が関数ではないため、エラーが発生します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Thus, the
overall behavior of a function is a patchwork of the behaviors of its various method definitions.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T010019Z" creationid="hsugawa8651" creationdate="20181120T010019Z">
        <seg> したがって、関数の全体的な動作は、さまざまなメソッド定義の動作のパッチワークです。 </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Thus, the two method definitions above, taken together, define the
behavior for &lt;x1/&gt;f&lt;x2/&gt; over all pairs of instances of the abstract type &lt;x3/&gt;Number&lt;x4/&gt; -- but with a different
behavior specific to pairs of &lt;x5/&gt;`Float64`&lt;x6/&gt; values.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T013006Z" creationid="hsugawa8651" creationdate="20181120T013006Z">
        <seg> したがって、上の2つのメソッド定義が一緒になって、抽象型Numberのインスタンスのペアすべてに対してfの動作を定義しますが、値Float64のペアに固有の動作は異なります。 </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Thus, the value of &lt;x2/&gt;a&lt;x3/&gt; when the expression is evaluated no longer matters: the
value in the expression is already &lt;x4/&gt;1&lt;x5/&gt;, independent of whatever the value of &lt;x6/&gt;a&lt;x7/&gt; might be.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T165307Z" creationid="hsugawa8651" creationdate="20181118T165307Z">
        <seg>したがって、発現が評価されなくなったときの&lt;x2/&gt;a&lt;x3/&gt;の値は、以下のようになる。 式の値は&lt;x6/&gt;1&lt;x5/&gt;であり、&lt;x6/&gt;a&lt;x7/&gt;の値とは無関係である。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Thus, we can define a catch-all method for &lt;x7/&gt;f&lt;x8/&gt; like so:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T014120Z" creationid="hsugawa8651" creationdate="20181120T014120Z">
        <seg>したがって、fの全捕捉メソッドを以下のように定義することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Thus, we can utilize generated functions to move the iteration to compile-time; in compiler parlance,
we use generated functions to manually unroll the loop.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T032314Z" creationid="hsugawa8651" creationdate="20181116T032314Z">
        <seg>このように、生成された関数を利用して反復をコンパイル時に移動させることができます。コンパイラの文法では 生成された関数を使用してループを手動でアンロールします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Thus, we only loop &lt;x1/&gt;once per type&lt;x2/&gt;, in this case
once per &lt;x3/&gt;N&lt;x4/&gt; (except in edge cases where the function is generated more than once - see disclaimer
above).</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T032339Z" creationid="hsugawa8651" creationdate="20181116T032339Z">
        <seg>したがって、我々は、&lt;x2/&gt;のタイプごとに&lt;x1/&gt;をループするだけである。この場合には &lt;x3/&gt;N&lt;x4/&gt;(関数が生成される関数が複数回生成されるエッジを除く)&lt;x3/&gt;で一度1回指定します。 )。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Thus, while the implicit type parameter constructors provided by default in Julia are fairly strict,
it is possible to make them behave in a more relaxed but sensible manner quite easily.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T124048Z" creationid="hsugawa8651" creationdate="20181118T124048Z">
        <seg>したがって、デフォルトでは、Juliaで提供されている暗黙的なタイプのパラメータコンストラクタは、かなり厳密ですが よりリラックスした、より合理的な方法で、より簡単に行動することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Thus, you can interpolate any expression into a string using parentheses:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T082908Z" creationid="hsugawa8651" creationdate="20181120T082908Z">
        <seg>したがって、括弧を使用して任意の式を文字列に補間することができます。:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To
achieve this, Julia builds upon the lineage of
mathematical programming languages, but also borrows much from popular
dynamic languages, including &lt;a2&gt;Lisp&lt;/a2&gt;, &lt;a3&gt;Perl&lt;/a3&gt;, &lt;a4&gt;Python&lt;/a4&gt;, &lt;a5&gt;Lua&lt;/a5&gt;, and &lt;a6&gt;Ruby&lt;/a6&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T081924Z" creationid="hsugawa8651" creationdate="20181118T081727Z">
        <seg>このことを実現するために、Juliaは数値計算言語の系譜を踏まえつつも、 &lt;a2&gt;Lisp&lt;/a2&gt; 、 &lt;a3&gt;Perl&lt;/a3&gt; 、 &lt;a4&gt;Python&lt;/a4&gt; 、 &lt;a5&gt;Lua&lt;/a5&gt; 、そして &lt;a6&gt;Ruby&lt;/a6&gt; などの広く使われている動的言語からも多くのアイデアを得ています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To
achieve this, Julia builds upon the lineage of
mathematical programming languages, but also borrows much from popular
dynamic languages, including `Lisp
&lt;https://en.wikipedia.org/wiki/Lisp_(programming_language)&gt;`_, `Perl
&lt;https://en.wikipedia.org/wiki/Perl_(programming_language)&gt;`_, `Python
&lt;https://en.wikipedia.org/wiki/Python_(programming_language)&gt;`_, `Lua
&lt;https://en.wikipedia.org/wiki/Lua_(programming_language)&gt;`_, and `Ruby
&lt;https://en.wikipedia.org/wiki/Ruby_(programming_language)&gt;`_.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T183807Z" creationid="hsugawa8651" creationdate="20181118T183807Z">
        <seg>このことを実現するために、Juliaは数値計算言語の系譜を踏まえつつも、 `Lisp
&lt;https://en.wikipedia.org/wiki/Lisp_(programming_language)&gt;`_ 、  `Perl
&lt;https://en.wikipedia.org/wiki/Perl_(programming_language)&gt;`_、 `Python
&lt;https://en.wikipedia.org/wiki/Python_(programming_language)&gt;`_、`Lua
&lt;https://en.wikipedia.org/wiki/Lua_(programming_language)&gt;`_、そして `Ruby
&lt;https://en.wikipedia.org/wiki/Ruby_(programming_language)&gt;`_ などの広く使われている動的言語からも多くのアイデアを得ています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To accomplish this within a &lt;x1/&gt;`ccall`&lt;x2/&gt;, you need to first
encapsulate the value inside a &lt;x3/&gt;`Ref{T}`&lt;x4/&gt; of the appropriate type.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T151827Z" creationid="hsugawa8651" creationdate="20181117T151827Z">
        <seg>&lt;x1/&gt;'ccall'&lt;x2/&gt;の中でこれを達成するためには、まず 該当するタイプの&lt;x3/&gt;'Ref{T}&lt;x4/&gt;の内部に値をカプセル化します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To achieve this, Julia builds upon the lineage of mathematical programming languages, but also borrows much from popular dynamic languages, including &lt;a2&gt;Lisp&lt;/a2&gt;, &lt;a3&gt;Perl&lt;/a3&gt;, &lt;a4&gt;Python&lt;/a4&gt;, &lt;a5&gt;Lua&lt;/a5&gt;, and &lt;a6&gt;Ruby&lt;/a6&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T182445Z" creationid="hsugawa8651" creationdate="20181118T182445Z">
        <seg>このことを実現するために、Juliaは数値計算言語の系譜を踏まえつつも、 &lt;a2&gt;Lisp&lt;/a2&gt; 、 &lt;a3&gt;Perl&lt;/a3&gt; 、 &lt;a4&gt;Python&lt;/a4&gt; 、 &lt;a5&gt;Lua&lt;/a5&gt; 、そして &lt;a6&gt;Ruby&lt;/a6&gt; などの広く使われている動的言語からも多くのアイデアを得ています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To actually support
reverse-order iteration, however, an iterator
type &lt;x2/&gt;T&lt;x3/&gt; needs to implement &lt;x4/&gt;iterate&lt;x5/&gt; for &lt;x6/&gt;Iterators.Reverse{T}&lt;x7/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T112942Z" creationid="hsugawa8651" creationdate="20181112T112942Z">
        <seg>実際にサポートするには 逆の順序で反復される反復 &lt;x2/&gt;T&lt;x3/&gt;は&lt;x6/&gt;反復子に&lt;x4/&gt;反復&lt;x5/&gt;を実装する必要があります。逆{T}&lt;x7/&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To allow computations with arbitrary-precision integers and floating point numbers, Julia wraps
the &lt;x1/&gt;GNU Multiple Precision Arithmetic Library (GMP)&lt;x2/&gt; and the &lt;x3/&gt;GNU MPFR Library&lt;x4/&gt;,
respectively.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T035644Z" creationid="hsugawa8651" creationdate="20181112T111540Z">
        <seg>任意精度の整数と浮動小数点数の計算を可能にするため、Juliaは &lt;x1/&gt;GNU Multiple Precision Arithmetic Library (GMP)&lt;x2/&gt; および &lt;x3/&gt;GNU MPFR Library&lt;x4/&gt; に対応しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To allow easy use of this existing code, Julia makes
it simple and efficient to call C and Fortran functions.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T160536Z" creationid="hsugawa8651" creationdate="20181109T160536Z">
        <seg>この既存のコードを簡単に利用できるようにするために、Juliaは CとFortranの関数を呼び出すことは簡単で効率的です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To allow for the creation of incompletely initialized objects, Julia allows the &lt;x1/&gt;`new`&lt;x2/&gt; function
to be called with fewer than the number of fields that the type has, returning an object with
the unspecified fields uninitialized.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T155857Z" creationid="hsugawa8651" creationdate="20181117T155857Z">
        <seg>不完全に初期化されたオブジェクトを作成できるようにするために、Juliaは&lt;x1/&gt;"new`&lt;x2/&gt;関数を許可します。 は、型が持つフィールド数よりも少ない数で呼び出され、オブジェクトを使用してオブジェクトを返します。 未指定のフィールドが初期化されていません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To construct a different string value, you construct a new string from parts of other strings.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T075948Z" creationid="hsugawa8651" creationdate="20181120T075948Z">
        <seg>異なる文字列の値を作成したい場合は、他の文字列の一部から新しく作成するのが良いでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To define a function with multiple methods, one simply defines the function multiple times, with
different numbers and types of arguments.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T012916Z" creationid="hsugawa8651" creationdate="20181120T012916Z">
        <seg>複数のメソッドを持つ関数を定義するには、単に複数回の関数の定義を、数と型の異なる引数に対して、行うだけです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To do this, create an &lt;x3/&gt;&lt;x4/&gt;&lt;x5/&gt;(@ref Base.AsyncCondition) object and &lt;x6/&gt;`wait`&lt;x7/&gt; on it:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T152628Z" creationid="hsugawa8651" creationdate="20181117T152628Z">
        <seg>これを行うには、&lt;x3/&gt;&lt;x4/&gt;&lt;x5/&gt;(@ref Base.AsyncCondition)オブジェクトを作成し、&lt;x6/&gt;`wait`&lt;x7/&gt;を次のようにします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To do this, we can define a fussy version of the &lt;x1/&gt;`sqrt`&lt;x2/&gt; function that raises an error
if its argument is negative:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T124716Z" creationid="hsugawa8651" creationdate="20181118T124716Z">
        <seg>これを行うには、エラーを起こす&lt;x1/&gt;`sqqrt&lt;x2/&gt;関数のファジーなバージョンを定義することができます。 引数が負の値である場合:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To enable convenient vectorization of mathematical and other operations,
Julia &lt;x1/&gt;&lt;x2/&gt;&lt;x3/&gt;(@ref man-vectorized) &lt;x4/&gt;f.(args...)&lt;x5/&gt;, e.g. &lt;x6/&gt;sin.(x)&lt;x7/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T155933Z" creationid="hsugawa8651" creationdate="20181109T155933Z">
        <seg>数学的およびその他の操作を便利にベクトル化することを可能にするために Julia&lt;x1/&gt;&lt;x2/&gt;&lt;x3/&gt;(@ref man vectorized)&lt;x4/&gt;f.(args.…)&lt;x6/&gt;sin.(x)&lt;x7/&gt;sin.(x)&lt;x7/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To evaluate expressions written in a source file &lt;c0&gt;&lt;s1&gt;file.jl&lt;/s1&gt;&lt;/c0&gt;, write
&lt;c2&gt;&lt;s3&gt;include("file.jl")&lt;/s3&gt;&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T084142Z" creationid="hsugawa8651" creationdate="20181118T084017Z">
        <seg>&lt;c0&gt;&lt;s1&gt;file.jl&lt;/s1&gt;&lt;/c0&gt; というソースファイルに書かれた式を評価するには、&lt;c2&gt;&lt;s3&gt; include("file.jl")&lt;/s3&gt;&lt;/c2&gt; と書きます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To evaluate expressions written in a source file &lt;c0&gt;file.jl&lt;/c0&gt;, write &lt;c1&gt;include("file.jl")&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T181449Z" creationid="hsugawa8651" creationdate="20181118T173518Z">
        <seg>&lt;c0&gt;file.jl&lt;/c0&gt;というソースファイルに書かれた式を評価するには、&lt;c1&gt;include("file.jl")&lt;/c1&gt; と書きます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To evaluate expressions written in a source file &lt;x1/&gt;file.jl&lt;x2/&gt;, write &lt;x3/&gt;include("file.jl")&lt;x4/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T091641Z" creationid="hsugawa8651" creationdate="20181114T031403Z">
        <seg>&lt;x1/&gt;file.jl&lt;x2/&gt;というソースファイルに書かれた式を評価するには、&lt;x3/&gt; include("file.jl")&lt;x4/&gt; と書きます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To exit the interactive session, type &lt;c0&gt;&lt;s1&gt;^D&lt;/s1&gt;&lt;/c0&gt; — the control key
together with the &lt;c2&gt;&lt;s3&gt;d&lt;/s3&gt;&lt;/c2&gt; key or type &lt;c4&gt;&lt;s5&gt;quit()&lt;/s5&gt;&lt;/c4&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T175133Z" creationid="hsugawa8651" creationdate="20181118T083847Z">
        <seg>インタラクティブ・セッションを終了するには、&lt;c0&gt;&lt;s1&gt;^D&lt;/s1&gt;&lt;/c0&gt; — コントロールキー&lt;c2&gt;&lt;s3&gt;^&lt;/s3&gt;&lt;/c2&gt;と &lt;c2&gt;&lt;s3&gt;d&lt;/s3&gt;&lt;c2&gt; キーを同時に押す — もしくは、 &lt;c4&gt;&lt;s5&gt;quit()&lt;/s5&gt;&lt;/c4&gt;と入力してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To exit the interactive session, type &lt;c0&gt;CTRL-D&lt;/c0&gt; (press the Control/&lt;c1&gt;^&lt;/c1&gt; key together with the &lt;c2&gt;d&lt;/c2&gt; key), or type &lt;c3&gt;exit()&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T181322Z" creationid="hsugawa8651" creationdate="20181118T173433Z">
        <seg>インタラクティブ・セッションを終了するには、&lt;c0&gt;CTRL-D&lt;/c0&gt;— コントロールキー &lt;c1&gt;^&lt;/c1&gt;と &lt;c2&gt;d&lt;/c2&gt; キーを同時に押す — もしくは、 &lt;c3&gt;exit()&lt;/c3&gt; と入力してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To exit the interactive session, type &lt;x1/&gt;CTRL-D&lt;x2/&gt; (press the Control/&lt;x3/&gt;^&lt;x4/&gt; key together with the &lt;x5/&gt;d&lt;x6/&gt; key), or type
&lt;x7/&gt;exit()&lt;x8/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T091430Z" creationid="hsugawa8651" creationdate="20181109T224304Z">
        <seg>インタラクティブ・セッションを終了するには、&lt;x1/&gt;^D&lt;x2/&gt; — コントロールキー&lt;x3/&gt;^&lt;x4/&gt;と &lt;x5/&gt;d&lt;x6/&gt; キーを同時に押す — もしくは、 &lt;x7/&gt;quit()&lt;s8/&gt; と入力してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To exit the interactive session, type &lt;x1/&gt;^D&lt;x2/&gt; -- the control key together with the &lt;x3/&gt;d&lt;x4/&gt; key on a blank
line -- or type &lt;x5/&gt;quit()&lt;x6/&gt; followed by the return or enter key.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T000958Z" creationid="hsugawa8651" creationdate="20181120T000958Z">
        <seg>インタラクティブ・セッションを終了するには、&lt;x1/&gt;^D&lt;x2/&gt; — コントロールキー &lt;x3/&gt;d&lt;x4/&gt; キーを同時に押す — もしくは、 &lt;x5/&gt;quit()&lt;x6/&gt;と入力してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To exit the interactive session, type &lt;x1/&gt;^D&lt;x2/&gt; -- the control key together with the &lt;x3/&gt;d&lt;x4/&gt; key or type
&lt;x5/&gt;quit()&lt;x6/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T000634Z" creationid="hsugawa8651" creationdate="20181120T000634Z">
        <seg>インタラクティブ・セッションを終了するには、&lt;x1/&gt;^D&lt;x2/&gt; — コントロールキー &lt;x3/&gt;d&lt;x4/&gt; キーを同時に押す — もしくは、 &lt;x5/&gt;quit()&lt;x6/&gt;と入力してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To explicitly specify types
use the syntax &lt;x4/&gt;Dict{KeyType,ValueType}(...)&lt;x5/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T041745Z" creationid="hsugawa8651" creationdate="20181112T041745Z">
        <seg>タイプを明示的に指定するには 構文&lt;x4/&gt;Dict{KeyType,ValueType}(...)&lt;x5/&gt;を使用します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To facilitate chaining, the operator associates from right to left.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T135521Z" creationid="hsugawa8651" creationdate="20181109T230200Z">
        <seg>連鎖を利用する時は、演算子の結合順は右から左です。 
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To facilitate using many different implementations of the same concept smoothly, functions need
not be defined all at once, but can rather be defined piecewise by providing specific behaviors
for certain combinations of argument types and counts.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T005920Z" creationid="hsugawa8651" creationdate="20181120T005920Z">
        <seg>同じ概念の異なる多くの実装を、円滑に利用するためには、関数すべてを一度に定義する必要はなくて、引数の型と個数の組み合わせごとに、特定の動作を指定して、区分的に定義できます。 </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To find out what the signatures
of those methods are, use the &lt;x3/&gt;`methods()`&lt;x4/&gt; function:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T014028Z" creationid="hsugawa8651" creationdate="20181120T014017Z">
        <seg>これらのメソッドのシグネチャを調べるには、methods()関数を使用します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To include a CR in a string, use an explicit escape &lt;x5/&gt;\r&lt;x6/&gt;; for example,
you can enter the literal string &lt;x7/&gt;"a CRLF line ending\r\n"&lt;x8/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T083714Z" creationid="hsugawa8651" creationdate="20181120T083714Z">
        <seg>文字列にCRを含めるためには、明示的に &lt;x5/&gt;\r&lt;x6/&gt;でエスケープを使用してください。例えば、文字列リテラル &lt;x7/&gt;"a CRLF line ending\r\n"&lt;x8/&gt;を入力することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To include a literal &lt;x1/&gt;$&lt;x2/&gt; in a string literal, escape it with a backslash:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T083032Z" creationid="hsugawa8651" creationdate="20181120T083032Z">
        <seg>文字列リテラルにリテラル &lt;x1/&gt;$&lt;x2/&gt; を含める場合は、バックスラッシュを使ってエスケープする必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To look for an element in a sequence, you must use &lt;x5/&gt;`in()`&lt;x6/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T083923Z" creationid="hsugawa8651" creationdate="20181120T083923Z">
        <seg>文字リテラルを使って文字列ないの要素を探すためには&lt;x5/&gt;`in()`&lt;x6/&gt;を使用する必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To make common numeric formulae and expressions clearer, Julia allows variables to be immediately
preceded by a numeric literal, implying multiplication.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T111730Z" creationid="hsugawa8651" creationdate="20181112T111730Z">
        <seg>一般的な数式や式をより明確にするために、Juliaは変数をすぐに使用できるようにします。 先行する数値リテラルは、乗算を意味します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To make common numeric formulas and expressions clearer, Julia allows variables to be immediately
preceded by a numeric literal, implying multiplication.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T040140Z" creationid="hsugawa8651" creationdate="20181119T235755Z">
        <seg>一般的な数値式や表現をより明確にするため、Juliaでは乗算の数値リテラルが変数を 先行することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To opt into this behavior, &lt;x7/&gt;Squares&lt;x8/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T113053Z" creationid="hsugawa8651" creationdate="20181112T113053Z">
        <seg>この動作を選択するには、&lt;x7/&gt;Squares&lt;x8/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To override these defaults, you can define a custom &lt;x1/&gt;BroadcastStyle&lt;x2/&gt; for your object:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T131132Z" creationid="hsugawa8651" creationdate="20181113T131132Z">
        <seg>これらの既定値をオーバーライドするには、オブジェクトに対してカスタム&lt;x1/&gt;BroadcastStyle&lt;x2/&gt;を定義できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To pass an array &lt;x1/&gt;A&lt;x2/&gt; as a pointer of a different type &lt;x3/&gt;without&lt;x4/&gt; converting the data beforehand
(for example, to pass a &lt;x5/&gt;Float64&lt;x6/&gt; array to a function that operates on uninterpreted bytes), you
can declare the argument as &lt;x7/&gt;Ptr{Cvoid}&lt;x8/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T140855Z" creationid="hsugawa8651" creationdate="20181117T140855Z">
        <seg>データを事前に変換することなく、異なるタイプ&lt;x3/&gt;のポインタとして配列&lt;x1/&gt;A&lt;x2/&gt;を通過させること。 (例えば、&lt;x5/&gt;Float64&lt;x6/&gt;アレイを、解釈されていないバイトで動作する関数に渡すために) は、引数を&lt;x7/&gt;Ptr{Cvoid}&lt;x8/&gt;として宣言することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To reduce the need for these
verbose calls to &lt;x1/&gt;`string()`&lt;x2/&gt; or repeated multiplications, Julia allows interpolation into string literals
using &lt;x3/&gt;$&lt;x4/&gt;, as in Perl:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T082817Z" creationid="hsugawa8651" creationdate="20181120T082817Z">
        <seg>これらの冗長な&lt;x1/&gt;`string()`&lt;x2/&gt;  もしくは * の呼び出しの機会を減らすために、JuliaはPerlのように&lt;x3/&gt;$&lt;x4/&gt; を使用して文字列リテラルに補間を行うことができます。:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To run a certain code before terminating a Julia script,
which may or may not be caused by CTRL-C, use &lt;x5/&gt;`atexit`&lt;x6/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181110T024910Z" creationid="hsugawa8651" creationdate="20181110T024910Z">
        <seg>Juliaスクリプトを終了する前に特定のコードを実行するには、次の手順を実行します。 これは、CTRL-Cによって引き起こされることもないこともあれば、引き起こされることもないことがあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To run code in a file non-interactively, you can give it as the first
argument to the &lt;c0&gt;&lt;s1&gt;julia&lt;/s1&gt;&lt;/c0&gt; command:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T175251Z" creationid="hsugawa8651" creationdate="20181118T084022Z">
        <seg>ファイルに書かれたコードをインタラクティブではない方法で実行するには、以下のようにファイル名を&lt;c0&gt;&lt;s1&gt;julia&lt;/s1&gt;&lt;/c0&gt;コマンドの第1引数とします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To run code in a file non-interactively, you can give it as the first argument to the &lt;c0&gt;julia&lt;/c0&gt; command:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T181500Z" creationid="hsugawa8651" creationdate="20181118T173521Z">
        <seg>ファイルに書かれたコードをインタラクティブではない方法で実行するには、以下のようにファイル名を &lt;c0&gt;julia&lt;/c0&gt;コマンドの第1引数とします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To run code in a file non-interactively, you can give it as the first argument to the &lt;x1/&gt;julia&lt;x2/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T091703Z" creationid="hsugawa8651" creationdate="20181109T224323Z">
        <seg>ファイルに書かれたコードをインタラクティブではない方法で実行するには、以下のようにファイル名を&lt;x1/&gt;julia&lt;x2/&gt;コマンドの第1引数とします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To see the various ways we can pass dimensions to these constructors, consider the following examples:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154524Z" creationid="hsugawa8651" creationdate="20181109T154524Z">
        <seg>これらのコンストラクタに次元を渡すことができるさまざまな方法を確認するには、次の例を考慮してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To solve this problem, the language provides syntax for writing normal, non-generated
alternative implementations of generated functions.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T032351Z" creationid="hsugawa8651" creationdate="20181116T032351Z">
        <seg>この問題を解決するために、言語は、生成されていない通常の言語を記述するための構文を提供します。 生成された関数の代替実装。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To sort an array in-place, use the "bang" version of the sort function:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T063731Z" creationid="hsugawa8651" creationdate="20181112T044840Z">
        <seg>配列をインプレイスにソートするには、ソート関数の「bang」バージョンを使用します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To that end, we implement our own rational number type
&lt;x1/&gt;OurRational&lt;x2/&gt;, similar to Julia's built-in &lt;x3/&gt;`Rational`&lt;x4/&gt; type, defined in
&lt;x5/&gt;`rational.jl`&lt;x6/&gt;:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T124100Z" creationid="hsugawa8651" creationdate="20181118T124100Z">
        <seg>そのためには、独自の数値型を実装します。 &lt;x1/&gt;OurRational&lt;x2/&gt;は、Juliaの組み込み&lt;x3/&gt;の「Rational」&lt;x4/&gt;タイプと似ています。 &lt;x5/&gt;`合理的な.jl'&lt;x6/&gt;:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To use module functions, use &lt;x1/&gt;import Module&lt;x2/&gt; to import the module, and &lt;x3/&gt;Module.fn(x)&lt;x4/&gt; to use the
functions.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181110T041713Z" creationid="hsugawa8651" creationdate="20181110T041659Z">
        <seg>モジュール関数を使用するには、&lt;x1/&gt;インポートモジュール&lt;x2/&gt;を使用してモジュールをインポートし、&lt;x3/&gt;モジュール.fn(x)&lt;x4/&gt;を使用して 関数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Trailing whitespace is left unaltered.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T083205Z" creationid="hsugawa8651" creationdate="20181120T083205Z">
        <seg>末尾の空白は変更されません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Trigonometric and hyperbolic functions</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T100112Z" creationid="hsugawa8651" creationdate="20181118T100112Z">
        <seg>三角関数と双曲線関数</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Triple-Quoted String Literals</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T094337Z" creationid="hsugawa8651" creationdate="20181120T094337Z">
        <seg>三重にクォートされた文字列リテラル</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Triple-quoted strings are also dedented to the level of
the least-indented line.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T083319Z" creationid="hsugawa8651" creationdate="20181120T083221Z">
        <seg>3つのダブルクオーテーションで囲まれた文字列は、最もインデントされていない行合わせでインデントします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Try sqrt(Complex(x)).</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T123428Z" creationid="hsugawa8651" creationdate="20181118T123428Z">
        <seg>sqrt(complex(x))を試してみてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Trying to construct a &lt;x1/&gt;`NaN`&lt;x2/&gt; rational value, however, is invalid:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T123650Z" creationid="hsugawa8651" creationdate="20181118T123650Z">
        <seg>しかし、&lt;x1/&gt;「NaN」&lt;x2/&gt;合理的値を構築しようとすることは、無効である。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Tuple&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T041603Z" creationid="hsugawa8651" creationdate="20181112T041603Z">
        <seg>Tuple&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Two other handy string functions are &lt;x1/&gt;`repeat()`&lt;x2/&gt; and &lt;x3/&gt;`join()`&lt;x4/&gt;:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T083955Z" creationid="hsugawa8651" creationdate="20181120T083955Z">
        <seg>その他の2つの便利な文字列関数は  &lt;x1/&gt;`repeat()`&lt;x2/&gt; および&lt;x3/&gt;`join()`&lt;x4/&gt;関数です。:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Two-dimensional &lt;a0&gt;&lt;c1&gt;DenseArray&lt;/c1&gt;&lt;/a0&gt; with elements of type &lt;c2&gt;T&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131340Z" creationid="hsugawa8651" creationdate="20181119T131340Z">
        <seg>Two-dimensional &lt;a0&gt;&lt;c1&gt;DenseArray&lt;/c1&gt;&lt;/a0&gt; with elements of type &lt;c2&gt;T&lt;/c2&gt;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Type</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T120314Z" creationid="hsugawa8651" creationdate="20181118T120314Z">
        <seg>タイプ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Type &lt;x1/&gt;VecElement{T}&lt;x2/&gt; is intended for building libraries of SIMD operations.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T063637Z" creationid="hsugawa8651" creationdate="20181114T063637Z">
        <seg>タイプ&lt;x1/&gt;VecElement{T}&lt;x2/&gt;はSIMD演算のライブラリを構築することを目的としている。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Type Correspondences:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T150612Z" creationid="hsugawa8651" creationdate="20181117T150612Z">
        <seg>タイプ対応:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Type Parameters</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T151219Z" creationid="hsugawa8651" creationdate="20181117T151219Z">
        <seg>タイプパラメータ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Type and position of these arguments in the list are compiler
specific, where compiler vendors usually default to using &lt;x5/&gt;Csize_t&lt;x6/&gt; as type and append the hidden
arguments at the end of the argument list.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T151047Z" creationid="hsugawa8651" creationdate="20181117T151047Z">
        <seg>リストにこれらの引数を入力して配置するには、コンパイラを使用します。 特定の場合、コンパイラ・ベンダーは通常、&lt;x5/&gt;Csize_t&lt;x6/&gt;をタイプとして使用し、非表示を追加します。 引数リストの最後にある引数を指定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Type relations</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181110T041840Z" creationid="hsugawa8651" creationdate="20181110T041840Z">
        <seg>Type relations</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Typed array initializers</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T134637Z" creationid="hsugawa8651" creationdate="20181117T134637Z">
        <seg>型化された配列初期化装置</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Types and functions
described here might (and likely will) change in the future.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T032156Z" creationid="hsugawa8651" creationdate="20181114T032156Z">
        <seg>タイプと機能 ここで説明することは将来的に変化する可能性があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Typically, Julia is able to compile "generic" versions of functions that will work for any
arguments, but with generated functions this is impossible.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T032348Z" creationid="hsugawa8651" creationdate="20181116T032348Z">
        <seg>一般的に、Juliaは、すべての関数の「汎用」バージョンをコンパイルできます。 引数は生成されますが、生成された関数を使用することはできません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>T{ }&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T063131Z" creationid="hsugawa8651" creationdate="20181114T063131Z">
        <seg>T{ }&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>T{A}&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T150639Z" creationid="hsugawa8651" creationdate="20181117T150639Z">
        <seg>T{A}&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>UInt8&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T150904Z" creationid="hsugawa8651" creationdate="20181117T150904Z">
        <seg>UInt8&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>UTF-8 is a variable-width encoding, meaning that not all characters are encoded
in the same number of bytes.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T081459Z" creationid="hsugawa8651" creationdate="20181120T081459Z">
        <seg>UTF-8は可変幅のエンコードであり、 全ての文字が同じバイト数でエンコードされるわけではありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Unary</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T165004Z" creationid="hsugawa8651" creationdate="20181118T165004Z">
        <seg>単項演算</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Unary arithmetic -- &lt;x1/&gt;-&lt;x2/&gt;, &lt;x3/&gt;+&lt;x4/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T161212Z" creationid="hsugawa8651" creationdate="20181114T161212Z">
        <seg>単項算術--&lt;x1/&gt;-&lt;x2/&gt;,&lt;x3/&gt;+&lt;x4/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Under the name &lt;x1/&gt;f&lt;x2/&gt;, the function does not support infix notation, however.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T130208Z" creationid="hsugawa8651" creationdate="20181120T130208Z">
        <seg>かしながら、&lt;x1/&gt;f&lt;x2/&gt; のような名前の関数は、中置記法に対応していません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Understanding how Julia answers these questions is key to understanding package loading.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T152818Z" creationid="hsugawa8651" creationdate="20181117T152818Z">
        <seg>Juliaがこれらの質問に答えることを理解することは、パッケージのロードを理解する上で重要です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Understanding how interpolation works in these cases can be a bit tricky.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T115445Z" creationid="hsugawa8651" creationdate="20181118T115445Z">
        <seg>これらの場合に補間がどのように機能するかを理解することは、少し厄介です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Unicode Input&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T234945Z" creationid="hsugawa8651" creationdate="20181119T234945Z">
        <seg>Unicode入力&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Unicode and UTF-8</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T094221Z" creationid="hsugawa8651" creationdate="20181120T094221Z">
        <seg>Unicode と UTF-8</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Unicode names (in UTF-8 encoding) are allowed:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T032527Z" creationid="hsugawa8651" creationdate="20181119T032527Z">
        <seg>Unicode（UTF-8）の変数名を使用することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Unicode&lt;x1/&gt; standard
tackles the complexities of what exactly a character is, and is generally accepted as the definitive
standard addressing this problem.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T075628Z" creationid="hsugawa8651" creationdate="20181120T075628Z">
        <seg> Unicode 規格は、ある文字が一体何なのかという複雑な問題に取り組んでおり、また、 この問題に対処する決定的な規格として一般的に認識されています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Union type of &lt;a0&gt;&lt;c1&gt;Vector{T}&lt;/c1&gt;&lt;/a0&gt; and &lt;a2&gt;&lt;c3&gt;Matrix{T}&lt;/c3&gt;&lt;/a2&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131316Z" creationid="hsugawa8651" creationdate="20181119T131316Z">
        <seg>Union type of &lt;a0&gt;&lt;c1&gt;Vector{T}&lt;/c1&gt;&lt;/a0&gt; and &lt;a2&gt;&lt;c3&gt;Matrix{T}&lt;/c3&gt;&lt;/a2&gt;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Unlike &lt;x1/&gt;E&lt;x2/&gt;, which is equivalent to &lt;x3/&gt;e&lt;x4/&gt; in numeric literals for historical reasons, &lt;x5/&gt;F&lt;x6/&gt; is just another
letter and does not behave like &lt;x7/&gt;f&lt;x8/&gt; in numeric literals.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T111951Z" creationid="hsugawa8651" creationdate="20181112T111951Z">
        <seg>歴史的理由から、数値リテラルで&lt;x3/&gt;e&lt;x4/&gt;と等価な&lt;x1/&gt;E&lt;x2/&gt;とは異なり、&lt;x5/&gt;F&lt;x6/&gt;は単に別個のものである。 文字は数値リテラルで&lt;x7/&gt;f&lt;x8/&gt;のように動作しません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Unlike C, MATLAB, Perl, Python, and Ruby -- but like Java, and a few other stricter, typed languages
-- it is an error if the value of a conditional expression is anything but &lt;x1/&gt;true&lt;x2/&gt; or &lt;x3/&gt;false&lt;x4/&gt;:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T230035Z" creationid="hsugawa8651" creationdate="20181109T230035Z">
        <seg>Cとは異なり、MATLAB、Perl、Python、Rubyなどですが、Javaと同様に、さらに厳密なタイプの言語もあります。 --条件式の値が&lt;x1/&gt;真&lt;x2/&gt;または&lt;x3/&gt;false&lt;x4/&gt;以外の値である場合はエラーになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Unlike C, MATLAB, Perl, Python, and Ruby – but like Java, and a few other stricter, typed languages – it is an error if the value of a conditional expression is anything but &lt;c0&gt;true&lt;/c0&gt; or &lt;c1&gt;false&lt;/c1&gt;:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T134844Z" creationid="hsugawa8651" creationdate="20181119T134844Z">
        <seg>条件式の値が、&lt;c0&gt;true&lt;/c0&gt; か &lt;c1&gt;false&lt;/c1&gt; 以外の値だと、エラーが発生します。 この仕様は、C、MATLAB、PerlやPython、Rubyとは異なりますが、Javaなどの厳格な型付け言語と同等です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Unlike most languages, with the &lt;x1/&gt;notable exception of Python&lt;x2/&gt;,
comparisons can be arbitrarily chained:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T065109Z" creationid="hsugawa8651" creationdate="20181114T030712Z">
        <seg>&lt;x1/&gt;Pythonのような例外&lt;x2/&gt; を 除く、ほとんどの言語とは異なり、比較は任意に連続して使用することができます。

</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Unnamed structs
are not possible in the translation to Julia.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T151146Z" creationid="hsugawa8651" creationdate="20181117T151146Z">
        <seg>名前のない構造体 ジュリアへの翻訳では不可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Unobtrusive yet powerful type system</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T082831Z" creationid="hsugawa8651" creationdate="20181118T082831Z">
        <seg>控えめかつ強力な型システム
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Unsigned integers are input and output using the &lt;c0&gt;0x&lt;/c0&gt; prefix and hexadecimal (base 16) digits &lt;c1&gt;0-9a-f&lt;/c1&gt; (the capitalized digits &lt;c2&gt;A-F&lt;/c2&gt; also work for input).</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T185258Z" creationid="hsugawa8651" creationdate="20181118T185258Z">
        <seg>符号なし整数は、&lt;c0&gt;0x&lt;/c0&gt; プレフィックスおよび16進数(base16)桁を使用して入力および出力されます。 &lt;c1&gt;0-9a-f&lt;/c1&gt;(大文字の数字 &lt;c2&gt;A-F&lt;/c2&gt;も入力に有効です)。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Unsigned integers are input and output using the &lt;x1/&gt;0x&lt;x2/&gt; prefix and hexadecimal (base 16) digits
&lt;x3/&gt;0-9a-f&lt;x4/&gt; (the capitalized digits &lt;x5/&gt;A-F&lt;x6/&gt; also work for input).</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T032817Z" creationid="hsugawa8651" creationdate="20181109T225306Z">
        <seg>符号なし整数は、 &lt;x1/&gt;0x&lt;x2/&gt; プレフィックスおよび16進数の &lt;x3/&gt;0-9a-f &lt;x4/&gt;（大文字の &lt;x5/&gt;A-F&lt;x6/&gt; は入力時のみ使用可能）を 使用して入力および出力されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Until now, we have, in our examples, defined only functions with a single method having unconstrained
argument types.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T012151Z" creationid="hsugawa8651" creationdate="20181120T012151Z">
        <seg>今までの例では、引数に型の制約がない、単一のメソッドしかない関数しか定義していませんでした。 </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Updating operators</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T095301Z" creationid="hsugawa8651" creationdate="20181118T095301Z">
        <seg>更新演算子</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Upon return, the contents of &lt;x1/&gt;width&lt;x2/&gt; and &lt;x3/&gt;range&lt;x4/&gt; can be retrieved (if they were changed by &lt;x5/&gt;foo&lt;x6/&gt;)
by &lt;x7/&gt;width[]&lt;x8/&gt; and &lt;x9/&gt;range[]&lt;x10/&gt;; that is, they act like zero-dimensional arrays.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T151836Z" creationid="hsugawa8651" creationdate="20181117T151836Z">
        <seg>返されると、&lt;x1/&gt;の幅&lt;x2/&gt;と&lt;x3/&gt;の範囲&lt;x4/&gt;の内容が検索される(&lt;x5/&gt;foo&lt;x6/&gt;によって変更された場合)。 &lt;x7/&gt;幅[]&lt;x8/&gt;と&lt;x9/&gt;の範囲[]&lt;x10/&gt;;すなわち、それらは0次元配列のように作用する。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use dot operators like &lt;x3/&gt;.==&lt;x4/&gt; for elementwise comparisons.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T160015Z" creationid="hsugawa8651" creationdate="20181109T160015Z">
        <seg>&lt;x3/&gt;.==&lt;x4/&gt;のようなドット演算子を、要素的比較のために使用します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use native code from system image if available</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T224652Z" creationid="hsugawa8651" creationdate="20181109T224652Z">
        <seg>使用可能な場合は、システムイメージからネイティブコードを使用します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use the first such directory that exists.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T121203Z" creationid="hsugawa8651" creationdate="20181118T121203Z">
        <seg>最初に存在するディレクトリを使用します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>User-defined types are as fast and compact as built-ins</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T082721Z" creationid="hsugawa8651" creationdate="20181118T082639Z">
        <seg>コンパクトで組み込み型と同等の速度を持つユーザー定義型</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Using a non-boolean value anywhere except
for the last entry in a conditional chain is an error:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T230812Z" creationid="hsugawa8651" creationdate="20181109T230812Z">
        <seg>非ブール値を使用する場合は 条件付きチェーンの最後のエントリはエラーになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Using a non-boolean value anywhere except for the last entry in a conditional chain is an error:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T140930Z" creationid="hsugawa8651" creationdate="20181119T140930Z">
        <seg>条件式の連鎖で、最終項以外で、非ブール値を使用するとエラーになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Using an index less than 1 or greater than &lt;x1/&gt;end&lt;x2/&gt; raises an error:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T081204Z" creationid="hsugawa8651" creationdate="20181120T081204Z">
        <seg>1よりも小さい、または&lt;x1/&gt;end&lt;x2/&gt;よりも大きい値のインデックスを使用した場合、エラーが出力されます。:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Utility Collections</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T043134Z" creationid="hsugawa8651" creationdate="20181112T043134Z">
        <seg>Utility Collections</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Value returned by &lt;x1/&gt;IteratorEltype(IterType)&lt;x2/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T112335Z" creationid="hsugawa8651" creationdate="20181112T112335Z">
        <seg>&lt;x1/&gt;IteratorEltypeによって返される値&lt;x/&gt;(IterType)&lt;x2/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Value returned by &lt;x1/&gt;IteratorSize(IterType)&lt;x2/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T112254Z" creationid="hsugawa8651" creationdate="20181112T112254Z">
        <seg>&lt;x1/&gt;IteratorSizeによって返される値&lt;x/&gt;(IterType)&lt;x2/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Values can be converted to &lt;a0&gt;&lt;c1&gt;Float32&lt;/c1&gt;&lt;/a0&gt; easily:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T190425Z" creationid="hsugawa8651" creationdate="20181118T190425Z">
        <seg>値を&lt;x1/&gt;`Float32'&lt;x2/&gt;に変換することは容易にできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Values can be converted to &lt;x1/&gt;`Float32`&lt;x2/&gt; easily:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T033646Z" creationid="hsugawa8651" creationdate="20181118T120339Z">
        <seg>値は簡単に &lt;x1/&gt;`Float32`&lt;x2/&gt; に変換することが可能です。:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Values can be specified as any iterable object, but
will commonly be ranges like &lt;x7/&gt;1:n&lt;x8/&gt; or &lt;x9/&gt;2:(n-1)&lt;x10/&gt;, or explicit arrays of values like &lt;x11/&gt;[1.2, 3.4, 5.7]&lt;x12/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154811Z" creationid="hsugawa8651" creationdate="20181109T154811Z">
        <seg>値は、任意のオブジェクトとして指定することができますが は一般的に&lt;x7/&gt;1:n&lt;x8/&gt;または&lt;x9/&gt;2:(n-1)&lt;x10/&gt;、または&lt;x11/&gt;[1.2、3.4、5.7]&lt;x12/&gt;のような明示的な値の配列である。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Values which cannot be stored in &lt;c2&gt;UInt128&lt;/c2&gt; cannot be written as such literals.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T185400Z" creationid="hsugawa8651" creationdate="20181118T185400Z">
        <seg>&lt;x5/&gt;UInt128&lt;x6/&gt;に格納できない値は、そのようなリテラルとは書くことができません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Values which cannot be stored in &lt;x5/&gt;UInt128&lt;x6/&gt; cannot be written as such literals.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T225510Z" creationid="hsugawa8651" creationdate="20181109T225510Z">
        <seg>&lt;x5/&gt;UInt128&lt;x6/&gt;に格納できない値は、そのようなリテラルとは書くことができません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Variable names are case-sensitive, and have no semantic meaning (that is, the language will not treat variables differently based on their names).</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T032459Z" creationid="hsugawa8651" creationdate="20181119T032459Z">
        <seg>変数名は大文字と小文字が区別され、言語的な意味を持ちません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Variable names must begin with a letter (A-Z or a-z), underscore, or a subset of Unicode code points greater than 00A0; in particular, &lt;a0&gt;Unicode character categories&lt;/a0&gt; Lu/Ll/Lt/Lm/Lo/Nl (letters), Sc/So (currency and other symbols), and a few other letter-like characters (e.g. a subset of the Sm math symbols) are allowed.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T033028Z" creationid="hsugawa8651" creationdate="20181119T033028Z">
        <seg>変数名は、文字（AからZまたはaからz）、アンダースコア、もしくは00A0よりも大きなUnicodeの サブセットの符号点である必要があります。特に、Unicode文字カテゴリ のLu/Ll/Lt/Lm/Lo/Nl （文字）、 Sc/So（通貨とその他の記号）、その他の記号（Sm数学記号のサブセットなど）を使用することができます。 ！や数字（0から9とNd･Noカテゴリ内のその他の記号）、その他のUnicode符号点 （発音区別符号およびその他の修飾文字（Mn/Mc/Me/Skカテゴリ）、句読点コネクタ（Pcカテゴリ）、 プライム記号、その他の文字）を使用することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Variables&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T234401Z" creationid="hsugawa8651" creationdate="20181119T234401Z">
        <seg>変数&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Various types of iterable containers will be introduced and discussed in later sections of the
manual (see, e.g., &lt;x1/&gt;&lt;x2/&gt;&lt;x3/&gt;(@ref man-multi-dim-arrays)).</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T124450Z" creationid="hsugawa8651" creationdate="20181118T124450Z">
        <seg>次のセクションでは、さまざまなタイプの定義可能なコンテナが導入され、議論されています。 マニュアル(例えば、&lt;x1/&gt;&lt;x2/&gt;&lt;x3/&gt;(@ref man multi dim arrays))を参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Various types of iterable containers will be introduced and discussed in later sections of the manual (see, e.g., &lt;a0&gt;Multi-dimensional Arrays&lt;/a0&gt;).</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T142153Z" creationid="hsugawa8651" creationdate="20181119T142153Z">
        <seg>さまざまなタイプのイテラブル・コンテナについて、マニュアルの後ろの章で紹介・検討します（&lt;a0&gt;多次元配列&lt;/a0&gt;参照）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Vector&lt;x1/&gt; (a.k.a.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T063243Z" creationid="hsugawa8651" creationdate="20181114T063243Z">
        <seg>Vector&lt;x1/&gt; (a.k.a.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Vectors and multidimensional arrays of integers</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T155522Z" creationid="hsugawa8651" creationdate="20181109T155522Z">
        <seg>整数のベクトルおよび多次元配列</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Vector{Int}&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T150643Z" creationid="hsugawa8651" creationdate="20181117T150643Z">
        <seg>Vector{Int}&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Vector{T} = Array{T,1}</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T022032Z" creationid="hsugawa8651" creationdate="20181116T022032Z">
        <seg>Vector{T} = Array{T,1}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Versioning</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T150115Z" creationid="hsugawa8651" creationdate="20181117T150115Z">
        <seg>Versioning</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Very few operations are implemented specifically for &lt;x15/&gt;Array&lt;x16/&gt; beyond those that are required
for all &lt;x17/&gt;AbstractArray&lt;x18/&gt;s; much of the array library is implemented in a generic
manner that allows all custom arrays to behave similarly.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T160424Z" creationid="hsugawa8651" creationdate="20181109T160424Z">
        <seg>&lt;x15/&gt;アレイ&lt;x16/&gt;に対しては、必要な動作を超えて実装されているオペレーションはほとんどありません。 すべての&lt;x17/&gt;AbstractArray&lt;x18/&gt;;アレイライブラリの多くは一般的に実装されています。 すべてのカスタム・アレイが同じように動作するようにする方法です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Warning: do not implement these methods if the underlying storage is not actually strided, as it
may lead to incorrect results or segmentation faults.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T083508Z" creationid="hsugawa8651" creationdate="20181113T083508Z">
        <seg>警告:基礎となるストレージが実際にはストライドされていない場合は、これらのメソッドを実装しないでください。 誤った結果やセグメント化の障害につながる可能性があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>We also know the number of elements in our sequence, so
we can extend &lt;x7/&gt;`length`&lt;x8/&gt;, too:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T094310Z" creationid="hsugawa8651" creationdate="20181118T094310Z">
        <seg>また、シーケンス内のエレメント数も知っています。 &lt;x7/&gt;の長さ&lt;x8/&gt;を拡張することもできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>We believe there are many good reasons to prefer dynamic
languages for these applications, and we do not expect their use to
diminish.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T081351Z" creationid="hsugawa8651" creationdate="20181118T081351Z">
        <seg> 私達はこの分野で動的言語を用いることにたくさんの利点があることを理解していますし、動的言語が使われないようにしたいわけでもありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>We believe there are many good reasons to prefer dynamic languages for these applications, and we do not expect their use to diminish.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T182303Z" creationid="hsugawa8651" creationdate="20181118T182303Z">
        <seg> 私達はこの分野で動的言語を用いることにたくさんの利点があることを理解していますし、動的言語が使われないようにしたいわけでもありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>We can expose this as an indexing expression &lt;x5/&gt;S[i]&lt;x6/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T113049Z" creationid="hsugawa8651" creationdate="20181112T113049Z">
        <seg>これは、インデックス表現&lt;x5/&gt;S[i]&lt;x6/&gt;として公開することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>We can iterate over all the elements:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T112506Z" creationid="hsugawa8651" creationdate="20181112T112506Z">
        <seg>すべての要素を繰り返し処理することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>We can use many of the builtin methods that work with iterables,
like &lt;x1/&gt;`in`&lt;x2/&gt;, or &lt;x3/&gt;`mean`&lt;x4/&gt; and &lt;x5/&gt;`std`&lt;x6/&gt; from the
&lt;x7/&gt;Statistics&lt;x8/&gt; standard library module:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T094125Z" creationid="hsugawa8651" creationdate="20181118T094125Z">
        <seg>iterablesで動作する組み込みメソッドの多くを使うことができます。 &lt;x2/&gt;の&lt;x1/&gt;、&lt;x/&gt;、&lt;x3/&gt;、&lt;x4/&gt;、&lt;x6/&gt;'のように &lt;x7/&gt;統計情報&lt;x8/&gt;標準ライブラリモジュール:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>We can verify that this constructor works and constructs objects that are, in fact, self-referential:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T155908Z" creationid="hsugawa8651" creationdate="20181117T155908Z">
        <seg>このコンストラクタが動作し、実際には自己参照であるオブジェクトを構成していることを確認できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>We have already seen a function &lt;x1/&gt;f(::Expr...) -&gt; Expr&lt;x2/&gt; in a previous section.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T101555Z" creationid="hsugawa8651" creationdate="20181120T101555Z">
        <seg>私達は、前の説で、関数&lt;x1/&gt;f(::Expr...) -&gt; Expr&lt;x2/&gt;を見てきました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>We have already seen one example of a function returning &lt;x1/&gt;Expr&lt;x2/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T165322Z" creationid="hsugawa8651" creationdate="20181118T165322Z">
        <seg>私たちはすでに、&lt;x1/&gt;Expr&lt;x2/&gt;を返す関数の一例を見てきました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>We know that the elements in a &lt;x1/&gt;Squares&lt;x2/&gt; sequence will always be &lt;x3/&gt;Int&lt;x4/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T112536Z" creationid="hsugawa8651" creationdate="20181112T112536Z">
        <seg>&lt;x1/&gt;2乗&lt;x2/&gt;の配列内の要素は常に&lt;x3/&gt;Int&lt;x4/&gt;であることがわかる。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>We should mention here that this is far from a complete picture of defining functions.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T105929Z" creationid="hsugawa8651" creationdate="20181112T105929Z">
        <seg>ここでは、関数を定義する完全な全体像とは程遠いことを説明しておきましょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>What happens if &lt;x1/&gt;import Zebra&lt;x2/&gt; is evaluated in the main &lt;x3/&gt;App&lt;x4/&gt; code base?</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T121142Z" creationid="hsugawa8651" creationdate="20181118T121142Z">
        <seg>メイン&lt;x3/&gt;App&lt;x4/&gt;のコードベースで、Zebra&lt;x2/&gt;のインポートが評価された場合はどうなりますか?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>What happens next?&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T115154Z" creationid="hsugawa8651" creationdate="20181118T115154Z">
        <seg>What happens next?&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>What's really going on here is that &lt;x1/&gt;Point&lt;x2/&gt;, &lt;x3/&gt;Point{Float64}&lt;x4/&gt; and &lt;x5/&gt;Point{Int64}&lt;x6/&gt; are all different
constructor functions.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T123903Z" creationid="hsugawa8651" creationdate="20181118T123903Z">
        <seg>ここでは、&lt;x1/&gt;点&lt;x2/&gt;、&lt;x3/&gt;点{Float64}&lt;x4/&gt;および&lt;x5/&gt;点{Int64}&lt;x6/&gt;がすべて異なっていることを示している。 コンストラクタ関数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>What&lt;x1/&gt; package is &lt;x2/&gt;X&lt;x3/&gt; in this context?</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T152815Z" creationid="hsugawa8651" creationdate="20181117T152815Z">
        <seg>この文脈では&lt;x1/&gt;パッケージは&lt;x2/&gt;X&lt;x3/&gt;であるか?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When &lt;x1/&gt;@sayhello&lt;x2/&gt; is entered in the REPL, the expression executes immediately, thus we only see the
evaluation result:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T001302Z" creationid="hsugawa8651" creationdate="20181120T001302Z">
        <seg>When &lt;x1/&gt;@sayhello&lt;x2/&gt; is entered in the REPL, the expression executes immediately, thus we only see the
evaluation result:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When Julia encounters &lt;x5/&gt;import X&lt;x6/&gt; in the main project, it looks up the identity of &lt;x7/&gt;X&lt;x8/&gt; as &lt;x9/&gt;roots[:X]&lt;x10/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T121004Z" creationid="hsugawa8651" creationdate="20181118T121004Z">
        <seg>Juliaが主プロジェクトでX&lt;x6/&gt;のインポートX&lt;x6/&gt;を検出すると、&lt;x7/&gt;X&lt;x8/&gt;のアイデンティティを&lt;x9/&gt;の根[:X]&lt;x10/&gt;として検索します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When Julia sees &lt;x9/&gt;import X&lt;x10/&gt; in the code of the package whose UUID is &lt;x11/&gt;context&lt;x12/&gt;, it looks up the identity of &lt;x13/&gt;X&lt;x14/&gt; as &lt;x15/&gt;graph[context][:X]&lt;x16/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T121014Z" creationid="hsugawa8651" creationdate="20181118T121014Z">
        <seg>そのUUIDが&lt;x12/&gt;のコンテキスト&lt;x12/&gt;であるパッケージのコードで、Juliaがx&lt;x9/&gt;インポートX&lt;x10/&gt;を見ると、&lt;x13/&gt;X&lt;x14/&gt;のアイデンティティを&lt;x15/&gt;グラフ[コンテキスト][x16/&gt;]として検索します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When a file is run as the main script using &lt;x1/&gt;julia file.jl&lt;x2/&gt; one might want to activate extra
functionality like command line argument handling.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181110T024843Z" creationid="hsugawa8651" creationdate="20181110T024843Z">
        <seg>&lt;x1/&gt;juliaファイルを使用して、ファイルがメイン・スクリプトとして実行される場合、&lt;x1/&gt;juliaファイル.jl&lt;x2/&gt;を使用して追加のファイルをアクティブ化する必要があります コマンドライン引数の処理などの機能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When a function is applied to a particular
tuple of arguments, the most specific method applicable to those arguments is applied.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T010007Z" creationid="hsugawa8651" creationdate="20181120T010007Z">
        <seg>関数が特定の引数の組に適用されるとき、それらの引数に適用可能なものから最も特化したメソッドが適用されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When a scalar value is passed with &lt;x1/&gt;&amp;&lt;x2/&gt; as an argument of type &lt;x3/&gt;Ptr{T}&lt;x4/&gt;, the value will first be
converted to type &lt;x5/&gt;T&lt;x6/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T151905Z" creationid="hsugawa8651" creationdate="20181117T151905Z">
        <seg>&lt;x3/&gt;Ptr{T}&lt;x4/&gt;の引数として&lt;x1/&gt;&amp;&lt;x2/&gt;とスカラー値を渡すと、まず値が次のようになります。 &lt;x5/&gt;T&lt;x6/&gt;に変換されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When an array is passed to C as a &lt;x1/&gt;Ptr{T}&lt;x2/&gt; argument, it is not reinterpret-cast: Julia requires
that the element type of the array matches &lt;x3/&gt;T&lt;x4/&gt;, and the address of the first element is passed.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T134502Z" creationid="hsugawa8651" creationdate="20181117T134502Z">
        <seg>配列が&lt;x1/&gt;Ptr{T}&lt;x2/&gt;引数としてCに渡されるとき、キャストは再解釈されません:Juliaが必要とする 配列のエレメント・タイプが&lt;x3/&gt;T&lt;x4/&gt;と一致し、最初のエレメントのアドレスが渡されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When an unexpected condition occurs, a function may be unable to return a reasonable value to
its caller.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T124550Z" creationid="hsugawa8651" creationdate="20181118T124550Z">
        <seg>予期しない状態が発生した場合、関数は妥当な値を返すことができません。 その呼び出し元。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When an unexpected condition occurs, a function may be unable to return a reasonable value to its caller.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T143108Z" creationid="hsugawa8651" creationdate="20181119T143108Z">
        <seg>予想外の状態が発生した場合、関数は呼び出しに対して、適切な値を返せないかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When both
libraries and executables are generated by LLVM, it is possible to perform whole-program optimizations
that can even optimize across this boundary, but Julia does not yet support that.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T160558Z" creationid="hsugawa8651" creationdate="20181109T160558Z">
        <seg>両方 ライブラリと実行可能ファイルはLLVMによって生成されるため、プログラム全体の最適化を実行することができます。 この境界にわたって最適化することもできますが、ジュリアはまだサポートしていません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When chaining conditionals (including &lt;x1/&gt;if&lt;x2/&gt;/&lt;x3/&gt;elseif&lt;x4/&gt;/&lt;x5/&gt;end&lt;x6/&gt;), the &lt;x7/&gt;@static&lt;x8/&gt; must be repeated for
each level (parentheses optional, but recommended for readability):</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T225006Z" creationid="hsugawa8651" creationdate="20181109T225006Z">
        <seg>&lt;x2/&gt;/&lt;x3/&gt;&lt;x6/&gt;/&lt;x5/&gt;の場合は、&lt;x7/&gt;@static&lt;x8/&gt;を繰り返す必要があります。&lt;x x/&gt;&lt;x8/&gt;&lt;x8/&gt;&lt;x6/&gt;&lt;x8/&gt;は 各レベル(オプションではありますが、読みやすさには推奨されます):</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When chaining conditionals (including if/elseif/end), the &lt;x1/&gt;@static&lt;x2/&gt; must be repeated for each
level (parentheses optional, but recommended for readability):</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T234309Z" creationid="hsugawa8651" creationdate="20181119T234309Z">
        <seg>条件を連鎖する場合 (if/elseif/endを含む)は、&lt;x7/&gt;@static&lt;x8/&gt;を各レベルで繰り返す必要があります。(括弧はオプションではありますが、読みやすさには推奨されます):</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When combined with other indexing forms and iterators
that yield &lt;x3/&gt;CartesianIndex&lt;x4/&gt;es, however, this can produce very elegant
and efficient code.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T155632Z" creationid="hsugawa8651" creationdate="20181109T155632Z">
        <seg>他のインデックス作成フォームおよびイテレータと組み合わされた場合 しかし、それは&lt;x3/&gt;CartesianIndex&lt;x4/&gt;の収量をもたらすが、これは非常にエレガントなものである。 効率的なコードです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When dealing with platform libraries, it is often necessary to provide special cases for various
platforms.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T233954Z" creationid="hsugawa8651" creationdate="20181119T233954Z">
        <seg>クロスプラットフォームアプリケーションやライブラリを記述する場合は、 オペレーティング・システム間の違いを許す必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When defining a function, one can optionally constrain the types of parameters it is applicable
to, using the &lt;x1/&gt;::&lt;x2/&gt; type-assertion operator, introduced in the section on &lt;x3/&gt;Composite Types&lt;x4/&gt;:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T012437Z" creationid="hsugawa8651" creationdate="20181120T012335Z">
        <seg>関数を定義するときには、必要に応じて、 &lt;x3/&gt;複合型&lt;x4/&gt;に関するセクションで紹介した&lt;x1/&gt;::&lt;x2/&gt;型表明演算子を使って、適用可能なパラメータの型を、制限することができます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When mirroring a struct used by-value inside another struct in C, it is imperative
that you do not attempt to manually copy the fields over, as this will not preserve the correct
field alignment.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T151142Z" creationid="hsugawa8651" creationdate="20181117T151142Z">
        <seg>Cの別の構造体内の値で使用される構造体をミラーリングする場合は、それは必須です。 フィールドを手動でコピーしないようにします。これは、正しいフィールドを保持しないためです。 フィールドの位置合わせ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When one of the operands of &lt;x12/&gt;⊘&lt;x13/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T124211Z" creationid="hsugawa8651" creationdate="20181118T124211Z">
        <seg>&lt;x12/&gt;θ&lt;x13/&gt;のオペランドの一つが</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When passing data to a &lt;x1/&gt;`ccall`&lt;x2/&gt;, it is best to avoid using the &lt;x3/&gt;`pointer`&lt;x4/&gt; function.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T152227Z" creationid="hsugawa8651" creationdate="20181117T152227Z">
        <seg>&lt;x1/&gt;"ccall"&lt;x2/&gt;"にデータを渡す場合は、&lt;x3/&gt;'ポインタ''&lt;x4/&gt;関数を使用しないことをお勧めします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When redefining a method or adding new methods,
it is important to realize that these changes don't take effect immediately.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T020851Z" creationid="hsugawa8651" creationdate="20181120T020851Z">
        <seg>メソッドの再定義や、新しいメソッドの追加は、その変更が即座に反映されない、という認識は重要です。 </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When resolving the meaning of &lt;x7/&gt;import X&lt;x8/&gt;, &lt;x9/&gt;roots&lt;x10/&gt; and &lt;x11/&gt;graph&lt;x12/&gt; are used to determine the identity of &lt;x13/&gt;X&lt;x14/&gt; and answer the question &lt;x15/&gt;"what is `X`?"&lt;x16/&gt;, while the &lt;x17/&gt;paths&lt;x18/&gt; map is used to locate the source code of &lt;x19/&gt;X&lt;x20/&gt; and answer the question &lt;x21/&gt;"where is `X`?"&lt;x22/&gt; The specific roles of the three maps are:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T120951Z" creationid="hsugawa8651" creationdate="20181118T120951Z">
        <seg>&lt;x7/&gt;インポートX&lt;x8/&gt;の意味を解決するとき、&lt;x9/&gt;&lt;x14/&gt;と&lt;x12/&gt;グラフ&lt;x12/&gt;は、&lt;x13/&gt;X&lt;x14/&gt;の識別を決定するために使用されます。&lt;x15/&gt;は、&lt;x19/&gt;のX&lt;x20/&gt;&lt;x20/&gt;と答えます。&lt;x17/&gt;&lt;x20/&gt;は、&lt;x19/&gt;X&lt;x20/&gt;のソースコードを特定するために使用されます。&lt;x3/&gt;は、&lt;x19/&gt;X20/&gt;のソースコードを検索し、質問&lt;X21/&gt;に答えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When run in interactive
mode, &lt;c6&gt;&lt;s7&gt;julia&lt;/s7&gt;&lt;/c6&gt; displays a banner and prompts the user for input.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T084338Z" creationid="hsugawa8651" creationdate="20181118T083908Z">
        <seg>インタラクティブ・モードで起動すると、 &lt;c6&gt;&lt;s7&gt;julia&lt;/s7&gt;&lt;/c6&gt; のバナーが表示され、プロンプトがユーザーの入力を待ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When run in interactive mode, &lt;c4&gt;julia&lt;/c4&gt; displays a banner and prompts the user for input.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T181339Z" creationid="hsugawa8651" creationdate="20181118T173437Z">
        <seg>インタラクティブ・モードで起動すると、 &lt;c4&gt;julia&lt;/c4&gt; のバナーが表示され、プロンプトがユーザーの入力を待ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When run in interactive mode, &lt;x7/&gt;julia&lt;x8/&gt; displays a banner and prompts the user for input.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T231750Z" creationid="hsugawa8651" creationdate="20181119T231750Z">
        <seg>インタラクティブ・モードで起動すると、 &lt;c4&gt;julia&lt;/c4&gt; のバナーが表示され、プロンプトがユーザーの入力を待ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When run in interactive mode, &lt;x9/&gt;julia&lt;x10/&gt; displays a banner and prompts the user for input.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T091404Z" creationid="hsugawa8651" creationdate="20181109T224306Z">
        <seg>インタラクティブ・モードで起動すると、 &lt;x9/&gt;julia&lt;x10/&gt; のバナーが表示され、プロンプトがユーザーの入力を待ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When strings are created using triple-quotes (&lt;x1/&gt;"""..."""&lt;x2/&gt;) they have some special behavior that
can be useful for creating longer blocks of text.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T083100Z" creationid="hsugawa8651" creationdate="20181120T083100Z">
        <seg>文字列が3つのダブルクオーテーション(&lt;x1/&gt;"""..."""&lt;x2/&gt;) they have some special behavior that)を使用して作成される場合、長いテキストを作成するのに便利な 特殊な動作をします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When such incompatibilities occur, you'll typically want to upgrade your dev tools to versions that are compatible with the main project.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T121438Z" creationid="hsugawa8651" creationdate="20181118T121438Z">
        <seg>このような互換性がない場合は、通常は開発ツールをメインプロジェクトと互換性のあるバージョンにアップグレードする必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When the array is subsequently
indexed with a multidimensional set of indices, the fallback &lt;x2/&gt;getindex(A::AbstractArray, I...)()&lt;x3/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T083148Z" creationid="hsugawa8651" creationdate="20181113T083148Z">
        <seg>アレイが次に 索引の多次元集合でインデックスを作成します。フォールバック&lt;x2/&gt;getindex(A::AbstractArray, I...)()&lt;x3/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When the current &lt;x5/&gt;this&lt;x6/&gt; object is the receiver of a method call,
it can be omitted altogether, writing just &lt;x7/&gt;meth(arg1,arg2)&lt;x8/&gt;, with &lt;x9/&gt;this&lt;x10/&gt; implied as the receiving
object.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T012140Z" creationid="hsugawa8651" creationdate="20181120T012015Z">
        <seg> &lt;x5/&gt;this&lt;x6/&gt; オブジェクトがメソッド呼び出しのレシーバである場合は省略できます。&lt;x7/&gt;meth(arg1,arg2)&lt;x8/&gt;と書くだけで、&lt;x3/&gt;this&lt;x4/&gt;は受け取るオブジェクトを暗示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When the type is implied
by the arguments to the constructor call, as in &lt;x11/&gt;Point(1,2)&lt;x12/&gt;, then the types of the
arguments must agree -- otherwise the &lt;x13/&gt;T&lt;x14/&gt; cannot be determined -- but any pair of real
arguments with matching type may be given to the generic &lt;x15/&gt;Point&lt;x16/&gt; constructor.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T123854Z" creationid="hsugawa8651" creationdate="20181118T123854Z">
        <seg>タイプが暗黙の場合 &lt;x11/&gt;Point(1,2)&lt;x12/&gt;のようにコンストラクタ呼び出しの引数によって、次のように入力されます。 引数は一致する必要があります。そうでない場合は、&lt;x13/&gt;T&lt;x14/&gt;を指定できませんが、実数のペアはすべて指定されています。 一般的な&lt;x15/&gt;Point&lt;x16/&gt;コンストラクタには、一致するタイプの引数を指定することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When this happens, modifying the code to handle non-ASCII data is straightforward.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T075603Z" creationid="hsugawa8651" creationdate="20181120T075603Z">
        <seg>この場合、非ASCIIデータを処理できるように 修正することは簡単です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When to use T, Ptr{T} and Ref{T}</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T151437Z" creationid="hsugawa8651" creationdate="20181117T151437Z">
        <seg>Tを使用する場合は、Ptr{T}およびRef{T}を使用します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When translating your fields to Julia, declare
the Julia field to be only of that type.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T151152Z" creationid="hsugawa8651" creationdate="20181117T151152Z">
        <seg>フィールドをジュリアに変換するときは、次のように宣言します。 Juliaフィールドはそのタイプのみであることを示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When used as a
function it has two possible forms, unary (single-argument) and binary.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T131120Z" creationid="hsugawa8651" creationdate="20181113T131120Z">
        <seg>使用する場合 関数は、単項(単一引数)とバイナリの2つの可能な形式を持つことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When used recursively, &lt;x1/&gt;isbits&lt;x2/&gt; types are stored inline.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T151137Z" creationid="hsugawa8651" creationdate="20181117T151137Z">
        <seg>再帰的に使用される場合、&lt;x1/&gt;イスビトス&lt;x2/&gt;タイプはインラインに格納される。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When writing a generator expression with multiple dimensions inside an argument list, parentheses
are needed to separate the generator from subsequent arguments:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154940Z" creationid="hsugawa8651" creationdate="20181109T154940Z">
        <seg>引数リスト内に複数の次元を持つジェネレータ式を記述する場合は、括弧を使用します。 ジェネレータを次の引数から分離する必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When writing cross-platform applications or libraries, it is often necessary to allow for
differences between operating systems.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T093219Z" creationid="hsugawa8651" creationdate="20181109T224823Z">
        <seg>クロスプラットフォームアプリケーションやライブラリを記述する場合は、 オペレーティング・システム間の違いを許す必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When you created &lt;x11/&gt;Priv&lt;x12/&gt;, there was no public package by that name.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T152852Z" creationid="hsugawa8651" creationdate="20181117T152852Z">
        <seg>&lt;x11/&gt;Priv&lt;x12/&gt;を作成すると、その名前ではパブリックパッケージは作成されませんでした。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When you pass this &lt;x5/&gt;Ref&lt;x6/&gt; object
as an argument, Julia will automatically pass a C pointer to the encapsulated data:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T151830Z" creationid="hsugawa8651" creationdate="20181117T151830Z">
        <seg>この&lt;x5/&gt;Ref&lt;x6/&gt;オブジェクトを渡すと 引数として、Juliaは自動的にCポインタをカプセル化されたデータに渡します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When your broadcast operation involves several arguments, individual argument styles get
combined to determine a single &lt;x1/&gt;DestStyle&lt;x2/&gt; that controls the type of the output container.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T131249Z" creationid="hsugawa8651" creationdate="20181113T131249Z">
        <seg>ブロードキャスト操作に複数の引数が含まれる場合、個々の引数スタイルは次のようになります。 結合して、出力コンテナのタイプを制御する単一の&lt;x1/&gt;DestStyle&lt;x2/&gt;を決定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Whenever a free monoid is not commutative, the operation is
typically represented as &lt;x13/&gt;\cdot&lt;x14/&gt;, &lt;x15/&gt;*&lt;x16/&gt;, or a similar symbol, rather than &lt;x17/&gt;+&lt;x18/&gt;, which as stated usually
implies commutativity.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T082706Z" creationid="hsugawa8651" creationdate="20181120T082706Z">
        <seg>自由モノイドが非可換である時、連結演算子は、しばしば可換の状態であることを表す時に用いられる&lt;x17/&gt;+&lt;x18/&gt;よりも &lt;x13/&gt;\cdot&lt;x14/&gt; や &lt;x15/&gt;*&lt;x16/&gt; 、その他の類似した記号で表されることが多いです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Whenever you have created a pointer to Julia data, you must ensure the original data exists until
you are done with using the pointer.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T152241Z" creationid="hsugawa8651" creationdate="20181117T152241Z">
        <seg>Juliaデータへのポインタを作成したときは必ず、元のデータが存在することを確認する必要があります。 ポインタを使用して終了します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Whenever you subtype &lt;x1/&gt;AbstractArrayStyle&lt;x2/&gt;, you also need to define rules for combining
dimensionalities, by creating a constructor for your style that takes a &lt;x3/&gt;Val(N)&lt;x4/&gt; argument.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T131857Z" creationid="hsugawa8651" creationdate="20181113T131857Z">
        <seg>&lt;x1/&gt;AbstractArrayStyle&lt;x2/&gt;をサブタイプ化する場合は必ず、結合するルールを定義する必要があります。 &lt;x3/&gt;Val(N)&lt;x4/&gt;引数を取るスタイルのコンストラクタを作成することによって、次元性を実現します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Where&lt;x1/&gt; can that &lt;x2/&gt;X&lt;x3/&gt; package be found?</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T152817Z" creationid="hsugawa8651" creationdate="20181117T152817Z">
        <seg>&lt;x1/&gt;は&lt;x2/&gt;X&lt;x3/&gt;パッケージが存在する可能性がある。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Whether these Unicode characters are displayed as escapes or shown as special characters depends
on your terminal's locale settings and its support for Unicode.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T081438Z" creationid="hsugawa8651" creationdate="20181120T081438Z">
        <seg>これらのUnicode文字がエスケープとして出力されるか特殊な文字として出力されるかは、あなたの端末のロケール設定とそのUnicodeのサポート の状況に依存します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Which packages can "see" each other as dependencies depends on whether they contain project files, and if they do, on what appears in those project files' &lt;x9/&gt;[deps]&lt;x10/&gt; sections.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T121303Z" creationid="hsugawa8651" creationdate="20181118T121303Z">
        <seg>依存性として互いに「見える」パッケージは、プロジェクトファイルがプロジェクトファイルを含んでいるかどうかに依存しているか、それらがプロジェクトファイルの&lt;x9/&gt;[deps]&lt;x10/&gt;セクションに表示されるかによって異なります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>While &lt;x1/&gt;*&lt;x2/&gt; may seem like a surprising choice to users of languages that provide &lt;x3/&gt;+&lt;x4/&gt; for string
concatenation, this use of &lt;x5/&gt;*&lt;x6/&gt; has precedent in mathematics, particularly in abstract algebra.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T082206Z" creationid="hsugawa8651" creationdate="20181120T082206Z">
        <seg>&lt;x3/&gt;+&lt;x4/&gt; を文字列連結の記述としている言語の使用者にとっては Juliaが&lt;x1/&gt;*&lt;x2/&gt; をそれとするのは奇抜に見えるかもしれませんが、 この &lt;x5/&gt;*&lt;x6/&gt;の使われ方は数学、特に抽象代数学においては一般的です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>While Julia imposes few restrictions on valid names, it has become useful to adopt the following conventions:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T033614Z" creationid="hsugawa8651" creationdate="20181119T033614Z">
        <seg>Juliaは有効な名前に制限をほとんど課していませんが、次の規則を採用すると便利です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>While outer constructor methods succeed in addressing the problem of providing additional convenience
methods for constructing objects, they fail to address the other two use cases mentioned in the
introduction of this chapter: enforcing invariants, and allowing construction of self-referential
objects.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T155732Z" creationid="hsugawa8651" creationdate="20181117T155732Z">
        <seg>外部コンストラクタのメソッドは、追加の利便性を提供する問題に対処することに成功しています。 オブジェクトを構築するためのメソッドです。これらのメソッドは、次の2つのユースケースに対応しています。 この章の導入:インバリアントの適用、自己参照の可能化 オブジェクトを選択します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>While the casual programmer need not explicitly use types or multiple
dispatch, they are the core unifying features of Julia: functions are
defined on different combinations of argument types, and applied by
dispatching to the most specific matching definition.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T082337Z" creationid="hsugawa8651" creationdate="20181118T082337Z">
        <seg>カジュアルプログラマは型や多重ディスパッチを明示的に使う必要はありませんが、これらはJuliaの基礎となる機能です。 関数はさまざまな引数の組み合わせに対して定義され、実行時には最も当てはまる定義が適用されます。 
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>While the casual programmer need not explicitly use types or multiple dispatch, they are the core unifying features of Julia: functions are defined on different combinations of argument types, and applied by dispatching to the most specific matching definition.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T182609Z" creationid="hsugawa8651" creationdate="20181118T182609Z">
        <seg>カジュアルプログラマは型や多重ディスパッチを明示的に使う必要はありませんが、これらはJuliaの基礎となる機能です。 関数はさまざまな引数の組み合わせに対して定義され、実行時には最も当てはまる定義が適用されます。 
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>While this behaviour is fixed for some compilers (GNU),
others &lt;x7/&gt;optionally&lt;x8/&gt; permit placing hidden arguments directly after the character argument (Intel,PGI).</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T151051Z" creationid="hsugawa8651" creationdate="20181117T151051Z">
        <seg>この動作は、いくつかのコンパイラ(GNU)では修正されています。 他の&lt;x7/&gt;オプション&lt;x8/&gt;は、文字引数(インテル、PGI)の直後に、非表示の引数を直接配置することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>While this can be inconvenient when you are developing new code, there's an excellent workaround.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181110T024734Z" creationid="hsugawa8651" creationdate="20181110T024734Z">
        <seg>これは、新しいコードを開発する際に不便な場合がありますが、優れた回避策があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>While this is starting to support more of the &lt;x1/&gt;&lt;x2/&gt;&lt;x3/&gt;(@ref man-array-indexing),
there's still quite a number of behaviors missing.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T094342Z" creationid="hsugawa8651" creationdate="20181118T094342Z">
        <seg>これは、&lt;x1/&gt;&lt;x2/&gt;&lt;x3/&gt;(@ref man array indexing)のより多くのサポートを開始しています。 まだ多くの行動が失われています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>While we can rely upon generic implementations, we can also extend specific methods where we know
there is a simpler algorithm.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T112745Z" creationid="hsugawa8651" creationdate="20181112T112745Z">
        <seg>一般的な実装に依存することもできますが、特定の方法を拡張することもできます。 より単純なアルゴリズムがあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>While you are allowed to create objects with uninitialized fields, any access to an uninitialized
reference is an immediate error:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T123745Z" creationid="hsugawa8651" creationdate="20181118T123745Z">
        <seg>初期化されていないフィールドを持つオブジェクトを作成することが許可されている間に、初期化されていないオブジェクトへのアクセス権がある 参照は即時エラーです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>William Kahan&lt;x1/&gt;, commonly known as the "Father
of Floating-Point".</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T035540Z" creationid="hsugawa8651" creationdate="20181120T035540Z">
        <seg></seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>With &lt;x3/&gt;`start()`&lt;x4/&gt; and &lt;x5/&gt;`endof()`&lt;x6/&gt;, can be used to iterate
through the characters in &lt;x7/&gt;str&lt;x8/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T084200Z" creationid="hsugawa8651" creationdate="20181120T084200Z">
        <seg>&lt;x3/&gt;`start()`&lt;x4/&gt; や &lt;x5/&gt;`endof()`&lt;x6/&gt;と併用することで、 &lt;x7/&gt;str&lt;x8/&gt;内の文字を反復処理することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>With only &lt;x1/&gt;`iterate`&lt;x2/&gt; definition, the &lt;x3/&gt;Squares&lt;x4/&gt; type is already pretty powerful.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T112503Z" creationid="hsugawa8651" creationdate="20181112T112503Z">
        <seg>&lt;x1/&gt;'reiterate''&lt;x2/&gt;定義では、&lt;x3/&gt;Squares&lt;x4/&gt;タイプはすでにかなり強力です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>With this method definition what was previously a &lt;x2/&gt;`MethodError`&lt;x3/&gt; now
successfully creates a point of type &lt;x4/&gt;Point{Float64}&lt;x5/&gt;:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T124015Z" creationid="hsugawa8651" creationdate="20181118T124015Z">
        <seg>この方法の定義では、以前は&lt;x2/&gt;'MethodError''&lt;x3/&gt;であった。 は、&lt;x4/&gt;ポイント{Float64}&lt;x5/&gt;のポイントを作成します。&lt;x4/&gt;&lt;x/&gt;:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>With this method definition, the &lt;x5/&gt;Point&lt;x6/&gt; constructor promotes its arguments the same way that
numeric operators like &lt;x7/&gt;`+`&lt;x8/&gt; do, and works for all kinds of real numbers:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T124040Z" creationid="hsugawa8651" creationdate="20181118T124040Z">
        <seg>このメソッド定義では、&lt;x5/&gt;ポイント&lt;x6/&gt;コンストラクタは、引数を同じ方法でプロモートします。 &lt;x7/&gt;`+`&lt;x8/&gt;のような数値演算子は、すべての種類の実数に対して動作します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>With this syntax, iterables may still refer to outer loop variables; e.g. &lt;x1/&gt;for i = 1:n, j = 1:i&lt;x2/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T124534Z" creationid="hsugawa8651" creationdate="20181118T124534Z">
        <seg>この構文では、iterablesは依然として外部ループ変数を参照することができます。例えば、i=1:n、j=1:i&lt;x2/&gt;のような&lt;x1/&gt;です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Without any explicitly provided inner constructors, the declaration of the composite type &lt;x11/&gt;Point{T&lt;:Real}&lt;x12/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T123908Z" creationid="hsugawa8651" creationdate="20181118T123908Z">
        <seg>明示的に提供された内部コンストラクタがない場合、複合型&lt;x11/&gt;ポイント{T&lt;:Real}&lt;x12/&gt;の宣言</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Without any specifier, the platform-default C calling convention is used.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T152420Z" creationid="hsugawa8651" creationdate="20181117T152420Z">
        <seg>指定されていない場合は、プラットフォームデフォルトのC呼び出し規約が使用されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Without parentheses, the expression &lt;x1/&gt;f&lt;x2/&gt; refers to the function object, and can be passed around
like any value:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T125305Z" creationid="hsugawa8651" creationdate="20181110T025632Z">
        <seg>括弧をつけない式&lt;x1/&gt;f&lt;x2/&gt;は、関数オブジェクトを表し、他の値と同じように受け渡しができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Without the &lt;c0&gt;break&lt;/c0&gt; keyword, the above &lt;c1&gt;while&lt;/c1&gt; loop would never terminate on its own, and the &lt;c2&gt;for&lt;/c2&gt; loop would iterate up to 1000.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T142339Z" creationid="hsugawa8651" creationdate="20181119T142339Z">
        <seg>&lt;c0&gt;break&lt;/c0&gt;キーワードがなければ、上記の&lt;c1&gt;while&lt;/c1&gt;ループは決して自身で終了することはなく、&lt;c2&gt;for&lt;/c2&gt;ループは1000まで繰り返されます。 </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Without the &lt;x1/&gt;break&lt;x2/&gt; keyword, the above &lt;x3/&gt;while&lt;x4/&gt; loop would never terminate on its own, and the &lt;x5/&gt;for&lt;x6/&gt; loop would iterate up to 1000.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T124513Z" creationid="hsugawa8651" creationdate="20181118T124513Z">
        <seg>&lt;x1/&gt;ブレーク&lt;x2/&gt;キーワードがないと、&lt;x4/&gt;ループは自身では終了せず、&lt;x6/&gt;ループの&lt;x5/&gt;は1000まで繰り返されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Word separation can be indicated by underscores (&lt;c0&gt;'_'&lt;/c0&gt;), but use of underscores is discouraged unless the name would be hard to read otherwise.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T033641Z" creationid="hsugawa8651" creationdate="20181119T033641Z">
        <seg>単語の区切りはアンダースコア（&lt;c0&gt;'_'&lt;/c0&gt;）で表すことができますが、変数名が読みにくい場合の除き使用は推奨されていません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Working with &lt;x1/&gt;Broadcasted&lt;x2/&gt; objects</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T164850Z" creationid="hsugawa8651" creationdate="20181118T164850Z">
        <seg>&lt;x1/&gt;ブロードキャストされた&lt;x2/&gt;オブジェクトの操作</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>X = A[I_1, I_2, ..., I_n]</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T160712Z" creationid="hsugawa8651" creationdate="20181114T160712Z">
        <seg>X = A[I_1, I_2, ..., I_n]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>X = getindex(A, I_1, I_2, ..., I_n)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T155300Z" creationid="hsugawa8651" creationdate="20181109T155300Z">
        <seg>X = getindex(A, I_1, I_2, ..., I_n)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>X = sin(cos(Y)) &lt;x2/&gt; equivalent to X .= sin.(cos.(Y))
4-element Array{Float64,1}:
  0.5143952585235492
 -0.4042391538522658
 -0.8360218615377305
 -0.6080830096407656</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181110T030245Z" creationid="hsugawa8651" creationdate="20181110T030245Z">
        <seg>X = sin(cos(Y)) &lt;x2/&gt; equivalent to X .= sin.(cos.(Y))
4-element Array{Float64,1}:
  0.5143952585235492
 -0.4042391538522658
 -0.8360218615377305
 -0.6080830096407656</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>X[i] = v&lt;x1/&gt;, indexed assignment</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T113006Z" creationid="hsugawa8651" creationdate="20181112T113006Z">
        <seg>X[i] = v&lt;x1/&gt;, indexed assignment</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>X[i]&lt;x1/&gt;, indexed element access</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T112959Z" creationid="hsugawa8651" creationdate="20181112T112959Z">
        <seg>X[i]&lt;x1/&gt;, indexed element access</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You (or someone else) can also provide additional outer constructor methods at any later point, but
once a type is declared, there is no way to add more inner constructor methods.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T155800Z" creationid="hsugawa8651" creationdate="20181117T155800Z">
        <seg>また、別の時点で外部コンストラクタのメソッドを追加することもできます。 タイプが宣言されると、インナー・コンストラクタ・メソッドを追加する方法はありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You are responsible for implementing the
broadcasting shape rules yourself, but this may be helpful in limited situations.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T131727Z" creationid="hsugawa8651" creationdate="20181113T131727Z">
        <seg>あなたは 放送の形状ルールは自分自身であるが、これは限られた状況では役に立つかもしれない。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can also combine dot operations with function chaining using &lt;x1/&gt;`|&gt;`&lt;x2/&gt;, as in this example:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T105918Z" creationid="hsugawa8651" creationdate="20181112T105918Z">
        <seg>また、次の例のように、ドット操作を&lt;x1/&gt;`&lt;x2/&gt;を使って関数連鎖と組み合わせることもできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can also extract a substring using range indexing:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T100435Z" creationid="hsugawa8651" creationdate="20181120T081218Z">
        <seg>範囲のインデックスを使用することで、文字列の一部分を抽出できます。:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can also find the numerical precedence for any given operator via the built-in function &lt;x1/&gt;Base.operator_precedence&lt;x2/&gt;, where higher numbers take precedence:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T030952Z" creationid="hsugawa8651" creationdate="20181114T030952Z">
        <seg>また、組み込み関数&lt;x1/&gt;Base.operator_precedence&lt;x2/&gt;を使用して、任意の演算子の優先順位を検索することもできます。ここでは、より高い数値が優先されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can also return multiple values via an explicit usage of the &lt;x1/&gt;return&lt;x2/&gt; keyword:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T101528Z" creationid="hsugawa8651" creationdate="20181112T101528Z">
        <seg>また、&lt;x1/&gt;return&lt;x2/&gt;キーワードを明示的に使用して、複数の値を返すこともできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can convert a &lt;x1/&gt;Char&lt;x2/&gt; to its integer value, i.e. code point, easily:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T080229Z" creationid="hsugawa8651" creationdate="20181120T080229Z">
        <seg>&lt;x1/&gt;Char&lt;x2/&gt;  を整数値（コードポイント）へと簡単に変換することができます。:q</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can convert an
integer value back to a &lt;x5/&gt;Char&lt;x6/&gt; just as easily:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T080305Z" creationid="hsugawa8651" creationdate="20181120T080305Z">
        <seg>また、整数値を簡単に &lt;x5/&gt;Char&lt;x6/&gt;  へと変換し直すこともできます。:
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can do comparisons and a limited amount of arithmetic with &lt;x1/&gt;Char&lt;x2/&gt; values:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T080741Z" creationid="hsugawa8651" creationdate="20181120T080741Z">
        <seg>&lt;x1/&gt;Char&lt;x2/&gt;値を使用して限定的な算術演算や Char 同士の比較を行うことができます。:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can easily convert a &lt;x1/&gt;Char&lt;x2/&gt; to its integer value, i.e. code point:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T095602Z" creationid="hsugawa8651" creationdate="20181120T095602Z">
        <seg>&lt;x1/&gt;Char&lt;x2/&gt;  を整数値、すなわち、コードポイントへ簡単に変換できます。:q</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can easily experiment in the same way with the associativity and precedence of various combinations
of &lt;x1/&gt;&amp;&amp;&lt;x2/&gt; and &lt;x3/&gt;||&lt;x4/&gt; operators.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T230405Z" creationid="hsugawa8651" creationdate="20181109T230405Z">
        <seg>さまざまな組み合わせのアソシエティビティと優先順位によって、同じ方法で簡単に実験することができます。 &lt;x1/&gt;&amp;&amp;&lt;x2/&gt;および&lt;x3/&gt;&lt;x4/&gt;演算子のことです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can easily experiment in the same way with the associativity and precedence of various combinations of &lt;c0&gt;&amp;&amp;&lt;/c0&gt; and &lt;c1&gt;||&lt;/c1&gt; operators.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T140346Z" creationid="hsugawa8651" creationdate="20181119T140346Z">
        <seg>同様の手法で、&lt;c0&gt;&amp;&amp;&lt;/c0&gt;と&lt;c1&gt;||&lt;/c1&gt;の演算子のさまざまな組み合わせに対して、結合性と優先順位を簡単に試すことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can easily see which methods exist for a function by entering the function object itself in
an interactive session:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T013922Z" creationid="hsugawa8651" creationdate="20181120T013922Z">
        <seg>対話セッションで関数オブジェクト自体を入力すると、関数にどんなメソッドが存在するかを簡単に確認できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can easily sort in reverse order as well:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T150310Z" creationid="hsugawa8651" creationdate="20181117T150310Z">
        <seg>逆順でも簡単にソートできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can get a near approximation of a &lt;x1/&gt;union&lt;x2/&gt; if you know, a priori, the field that will have
the greatest size (potentially including padding).</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T151150Z" creationid="hsugawa8651" creationdate="20181117T151150Z">
        <seg>&lt;x1/&gt;の近似を知ることができるのなら、それは&lt;x x/&gt;&lt;x2/&gt;の近似値を得ることができる。 最大サイズ(パディングを含む可能性があります)。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can input any Unicode character in single quotes using &lt;x1/&gt;\u&lt;x2/&gt; followed by up to four hexadecimal
digits or &lt;x3/&gt;\U&lt;x4/&gt; followed by up to eight hexadecimal digits (the longest valid value only requires
six):</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T080553Z" creationid="hsugawa8651" creationdate="20181120T080553Z">
        <seg>シングルクオーテンションで囲まれたエリアの中では、&lt;x1/&gt;\u&lt;x2/&gt; に続けて最大4桁の16進数を入力するか、&lt;x3/&gt;\U&lt;x4/&gt;に続けて最大8桁の16進数（6桁から有効）を入力することで、 Unicode文字を入力することができます。:

</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can lexicographically compare strings using the standard comparison operators:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T083723Z" creationid="hsugawa8651" creationdate="20181120T083723Z">
        <seg>文字列を標準比較演算子を使用して比較できます。:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can pass incomplete objects to other functions from inner constructors to delegate their completion:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T123812Z" creationid="hsugawa8651" creationdate="20181118T123812Z">
        <seg>不完全なオブジェクトを内部コンストラクタから他の関数に渡して、その完了を委任することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can perform all the standard arithmetic operations with complex numbers:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T123048Z" creationid="hsugawa8651" creationdate="20181118T123048Z">
        <seg>複雑な数値を使用して、すべての標準算術演算を実行できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can perform arithmetic and other operations with &lt;x1/&gt;`end`&lt;x2/&gt;, just like
a normal value:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T100401Z" creationid="hsugawa8651" creationdate="20181120T100401Z">
        <seg>通常の値と同様に、&lt;x1/&gt;`end`&lt;x2/&gt;を用いて、算術演算やその他の処理を行うことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can perform arithmetic and other operations with &lt;x5/&gt;end&lt;x6/&gt;, just like
a normal value:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T081129Z" creationid="hsugawa8651" creationdate="20181120T081129Z">
        <seg>&lt;x5/&gt;end&lt;x6/&gt; は通常の値と同様に、算術演算やその他の処理を行うことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can push an environment including development tools onto the stack and they will be available from the REPL and scripts but not from inside packages.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T120943Z" creationid="hsugawa8651" creationdate="20181118T120943Z">
        <seg>開発ツールを含む環境をスタックにプッシュすることができ、REPLとスクリプトから入手できますが、内部パッケージからは利用できません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can search for the index of a particular character using the &lt;x1/&gt;`search()`&lt;x2/&gt; function:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T083747Z" creationid="hsugawa8651" creationdate="20181120T083747Z">
        <seg>&lt;x1/&gt;`search()`&lt;x2/&gt; 関数を使用して特定の文字のインデックスを検索することができます。:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can start the search for a character at a given offset by providing a third argument:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T083752Z" creationid="hsugawa8651" creationdate="20181120T083752Z">
        <seg>3番目の引数を指定することで指定されたオフセットで文字の検索をすることができます。:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can use the &lt;x1/&gt;`contains()`&lt;x2/&gt; function to check if a substring is contained in a string:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T083815Z" creationid="hsugawa8651" creationdate="20181120T083815Z">
        <seg>&lt;x1/&gt;`contains()`&lt;x2/&gt; 関数を使用して、文字列に部分文字列が含まれているか確認することができます。:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can't import the type names into &lt;x1/&gt;Main&lt;x2/&gt; and then expect
to be able to redefine them there, but you can use the module name to resolve the scope.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181110T024742Z" creationid="hsugawa8651" creationdate="20181110T024742Z">
        <seg>&lt;x1/&gt;メイン&lt;x2/&gt;にはタイプ名をインポートできないので、次のように入力することはできません。 で再定義することができますが、このモジュール名を使用してスコープを解決することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You could also add a zero-argument &lt;x1/&gt;Foo&lt;x2/&gt; constructor method that supplies default values for both
of the &lt;x3/&gt;bar&lt;x4/&gt; and &lt;x5/&gt;baz&lt;x6/&gt; fields:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T155715Z" creationid="hsugawa8651" creationdate="20181117T155715Z">
        <seg>また、0つの引数&lt;x1/&gt;Foo&lt;x2/&gt;コンストラクタメソッドを追加して、両方のデフォルト値を指定することもできます。 &lt;x3/&gt;bar&lt;x4/&gt;および&lt;x5/&gt;baz&lt;x6/&gt;の各フィールドのうち、以下のようになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You do not need to write binary &lt;x1/&gt;BroadcastStyle&lt;x2/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T131836Z" creationid="hsugawa8651" creationdate="20181113T131836Z">
        <seg>バイナリの&lt;x1/&gt;BroadcastStyle&lt;x2/&gt;を書く必要はありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You may define your own exceptions in the following way:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T124617Z" creationid="hsugawa8651" creationdate="20181118T124617Z">
        <seg>次の方法で独自の例外を定義することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You may want to try this for yourself to see how it works.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T021053Z" creationid="hsugawa8651" creationdate="20181120T021053Z">
        <seg>これがどのように動作するかを見るために自身で試してみたいと思うかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You might want broadcasting to preserve the &lt;x1/&gt;char&lt;x2/&gt; "metadata." First we define</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T131414Z" creationid="hsugawa8651" creationdate="20181113T131414Z">
        <seg>&lt;x1/&gt;char&lt;x2/&gt;"メタデータを保存するためにブロードキャストを行うことができます。まず、次のように定義します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You must be
careful in this case to ensure that the object was always visible to the garbage collector (pointers
do not count, but the new reference does) to ensure the memory is not prematurely freed.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T152541Z" creationid="hsugawa8651" creationdate="20181117T152541Z">
        <seg>あなたは この場合は、オブジェクトが常にガーベッジ・コレクターに表示されるように注意する必要があります。 メモリが初期解放されていないことを確認するために、この新しい参照はカウントしませんが、新しい参照は必要ありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You must ensure that this return object is kept alive until all uses of it are done.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T152342Z" creationid="hsugawa8651" creationdate="20181117T152342Z">
        <seg>この戻りオブジェクトは、すべての使用が完了するまで生きていることを確認する必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You refer to the
&lt;x5/&gt;Foo&lt;x6/&gt; symbols by their qualified names &lt;x7/&gt;Foo.bar&lt;x8/&gt; etc.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181110T025154Z" creationid="hsugawa8651" creationdate="20181110T025154Z">
        <seg>ここでは &lt;x5/&gt;Foo&lt;x6/&gt;記号は、それらの修飾名&lt;x7/&gt;Foo.bar&lt;x8/&gt;などで表されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You should also specialize &lt;x3/&gt;`similar`&lt;x4/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T094540Z" creationid="hsugawa8651" creationdate="20181118T094540Z">
        <seg>また、&lt;x3/&gt;`similar`&lt;x4/&gt;を特化する必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You'll either need a new interactive session instance or a different variable
name to test this:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T231201Z" creationid="hsugawa8651" creationdate="20181109T231201Z">
        <seg>新しい対話型セッション・インスタンスまたは別の変数が必要です。 テストする名前:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You'll either need a new interactive session instance or a different variable name to test this:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T141654Z" creationid="hsugawa8651" creationdate="20181119T141654Z">
        <seg> これを試すには、新規の対話セッションか、別の変数名が必要です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>[    ]&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T063120Z" creationid="hsugawa8651" creationdate="20181114T063120Z">
        <seg>[    ]&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>[,]&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T063035Z" creationid="hsugawa8651" creationdate="20181114T063035Z">
        <seg>[,]&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>[...]</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T014308Z" creationid="hsugawa8651" creationdate="20181120T014308Z">
        <seg>[...]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>[;]&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T063106Z" creationid="hsugawa8651" creationdate="20181114T063106Z">
        <seg>[;]&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>[A B C ...]&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181110T025839Z" creationid="hsugawa8651" creationdate="20181110T025839Z">
        <seg>[A B C ...]&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>[A B; C D; ...]&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181110T025852Z" creationid="hsugawa8651" creationdate="20181110T025852Z">
        <seg>[A B; C D; ...]&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>[A; B; C; ...]&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181110T025846Z" creationid="hsugawa8651" creationdate="20181110T025846Z">
        <seg>[A; B; C; ...]&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>[[Priv]] &lt;x1/&gt; the private one
deps = ["Pub", "Zebra"]
uuid = "ba13f791-ae1d-465a-978b-69c3ad90f72b"
path = "deps/Priv"

[[Priv]] &lt;x2/&gt; the public one
uuid = "2d15fe94-a1f7-436c-a4d8-07a9a496e01c"
git-tree-sha1 = "1bf63d3be994fe83456a03b874b409cfd59a6373"
version = "0.1.5"

[[Pub]]
uuid = "c07ecb7d-0dc9-4db7-8803-fadaaeaf08e1"
git-tree-sha1 = "9ebd50e2b0dd1e110e842df3b433cb5869b0dd38"
version = "2.1.4"

  [Pub.deps]
  Priv = "2d15fe94-a1f7-436c-a4d8-07a9a496e01c"
  Zebra = "f7a24cb4-21fc-4002-ac70-f0e3a0dd3f62"

[[Zebra]]
uuid = "f7a24cb4-21fc-4002-ac70-f0e3a0dd3f62"
git-tree-sha1 = "e808e36a5d7173974b90a15a353b564f3494092f"
version = "3.4.2"</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T015908Z" creationid="hsugawa8651" creationdate="20181116T015908Z">
        <seg>[[Priv]] &lt;x1/&gt; the private one
deps = ["Pub", "Zebra"]
uuid = "ba13f791-ae1d-465a-978b-69c3ad90f72b"
path = "deps/Priv"

[[Priv]] &lt;x2/&gt; the public one
uuid = "2d15fe94-a1f7-436c-a4d8-07a9a496e01c"
git-tree-sha1 = "1bf63d3be994fe83456a03b874b409cfd59a6373"
version = "0.1.5"

[[Pub]]
uuid = "c07ecb7d-0dc9-4db7-8803-fadaaeaf08e1"
git-tree-sha1 = "9ebd50e2b0dd1e110e842df3b433cb5869b0dd38"
version = "2.1.4"

  [Pub.deps]
  Priv = "2d15fe94-a1f7-436c-a4d8-07a9a496e01c"
  Zebra = "f7a24cb4-21fc-4002-ac70-f0e3a0dd3f62"

[[Zebra]]
uuid = "f7a24cb4-21fc-4002-ac70-f0e3a0dd3f62"
git-tree-sha1 = "e808e36a5d7173974b90a15a353b564f3494092f"
version = "3.4.2"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>\&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T063012Z" creationid="hsugawa8651" creationdate="20181114T063012Z">
        <seg>\&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>\|&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T032327Z" creationid="hsugawa8651" creationdate="20181114T032327Z">
        <seg>\|&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>\|&gt;&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T165050Z" creationid="hsugawa8651" creationdate="20181118T165050Z">
        <seg>\|&gt;&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>\|\|&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T032330Z" creationid="hsugawa8651" creationdate="20181114T032330Z">
        <seg>\|\|&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>^&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T032311Z" creationid="hsugawa8651" creationdate="20181114T032311Z">
        <seg>^&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>` ` &lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T063522Z" creationid="hsugawa8651" creationdate="20181114T063522Z">
        <seg>` ` &lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`!=`&lt;x1/&gt;, &lt;x2/&gt;&lt;x3/&gt;&lt;x4/&gt;(@ref !=)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T132703Z" creationid="hsugawa8651" creationdate="20181113T132703Z">
        <seg>`!=`&lt;x1/&gt;, &lt;x2/&gt;&lt;x3/&gt;&lt;x4/&gt;(@ref !=)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`&lt;=`&lt;x1/&gt;, &lt;x2/&gt;&lt;x3/&gt;&lt;x4/&gt;(@ref &lt;=)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T030437Z" creationid="hsugawa8651" creationdate="20181114T030437Z">
        <seg>`&lt;=`&lt;x1/&gt;, &lt;x2/&gt;&lt;x3/&gt;&lt;x4/&gt;(@ref &lt;=)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`&lt;`&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T132713Z" creationid="hsugawa8651" creationdate="20181113T132713Z">
        <seg>`&lt;`&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`==`&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T132659Z" creationid="hsugawa8651" creationdate="20181113T132659Z">
        <seg>`==`&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`&gt;=`&lt;x1/&gt;, &lt;x2/&gt;&lt;x3/&gt;&lt;x4/&gt;(@ref &gt;=)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T030427Z" creationid="hsugawa8651" creationdate="20181114T030427Z">
        <seg>`&gt;=`&lt;x1/&gt;, &lt;x2/&gt;&lt;x3/&gt;&lt;x4/&gt;(@ref &gt;=)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`&gt;`&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T030422Z" creationid="hsugawa8651" creationdate="20181114T030422Z">
        <seg>`&gt;`&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`@cfunction`&lt;x1/&gt; requires three arguments: the Julia function (&lt;x2/&gt;mycompare&lt;x3/&gt;), the return type
(&lt;x4/&gt;Cint&lt;x5/&gt;), and a literal tuple of the input argument types, in this case to sort an array of &lt;x6/&gt;Cdouble&lt;x7/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T145915Z" creationid="hsugawa8651" creationdate="20181117T145915Z">
        <seg>`@cfunction&lt;x1/&gt;は3つの引数を必要とします:Julia関数(&lt;x2/&gt;ミコンパレ&lt;x3/&gt;)、戻り値のタイプ (&lt;x4/&gt;Cint&lt;x5/&gt;)と、入力引数型のリテラルタプルで、この場合は&lt;x6/&gt;Cdouble&lt;x7/&gt;の配列をソートします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`AbstractArray`&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T041605Z" creationid="hsugawa8651" creationdate="20181112T041605Z">
        <seg>`AbstractArray`&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`AbstractRange`&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T041600Z" creationid="hsugawa8651" creationdate="20181112T041600Z">
        <seg>`AbstractRange`&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`Array`&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T041650Z" creationid="hsugawa8651" creationdate="20181112T041650Z">
        <seg>`Array`&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`Array{T}(undef, dims...)`&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T064354Z" creationid="hsugawa8651" creationdate="20181114T064354Z">
        <seg>`Array{T}(undef, dims...)`&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`Base.cconvert`&lt;x1/&gt; normally just calls &lt;x2/&gt;`convert`&lt;x3/&gt;, but can be defined to return an
arbitrary new object more appropriate for passing to C.
This should be used to perform all allocations of memory that will be accessed by the C code.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T150605Z" creationid="hsugawa8651" creationdate="20181117T150605Z">
        <seg>'Base.チコンベルト'&lt;x1/&gt;は通常、&lt;x2/&gt;'convert`&lt;x3/&gt;を呼び出しますが、次のように定義することができます。 任意の新しいオブジェクトを渡すには、任意の新しいオブジェクトが必要です。 これは、Cコードによってアクセスされるメモリーのすべての割り当てを実行するために使用される必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`Base.cconvert`&lt;x1/&gt; normally just calls &lt;x2/&gt;`convert`&lt;x3/&gt;, but can be defined to return an
arbitrary new object more appropriate for passing to C.
This should be used to perform all allocations of memory that will be accessed by the C code.
For example, this is used to convert an &lt;x4/&gt;Array&lt;x5/&gt; of objects (e.g. strings) to an array of pointers.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T134302Z" creationid="hsugawa8651" creationdate="20181117T134302Z">
        <seg>'Base.チコンベルト'&lt;x1/&gt;は通常、&lt;x2/&gt;'convert`&lt;x3/&gt;を呼び出しますが、次のように定義することができます。 任意の新しいオブジェクトを渡すには、任意の新しいオブジェクトが必要です。 これは、Cコードによってアクセスされるメモリーのすべての割り当てを実行するために使用される必要があります。 たとえば、これは、オブジェクトの&lt;x4/&gt;配列&lt;x5/&gt;をポインタの配列に変換するために使用されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`Base.cconvert`&lt;x1/&gt; version.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T150829Z" creationid="hsugawa8651" creationdate="20181117T150829Z">
        <seg>`Base.cconvert`&lt;x1/&gt; version.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`Base.cconvert`&lt;x1/&gt; version. This allows, for example, passing an &lt;x2/&gt;argv&lt;x3/&gt; pointer array of type
&lt;x4/&gt;Vector{String}&lt;x5/&gt; to an argument of type &lt;x6/&gt;Ptr{Ptr{Cchar}}&lt;x7/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T140907Z" creationid="hsugawa8651" creationdate="20181117T140907Z">
        <seg>'Base.チコンベルト'&lt;x1/&gt;バージョン。これにより、例えば、&lt;x2/&gt;argv&lt;x3/&gt;ポインタ配列を渡すことができます。 &lt;x4/&gt;Vector{String}&lt;x5/&gt;は、&lt;x6/&gt;Ptr{Ptr{Cchar}}&lt;x7/&gt;の型を引数にします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`Base.unsafe_convert`&lt;x1/&gt; handles conversion to &lt;x2/&gt;`Ptr`&lt;x3/&gt; types.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T150609Z" creationid="hsugawa8651" creationdate="20181117T150609Z">
        <seg>'Base.unsafe_convert'&lt;x1/&gt;は、&lt;x2/&gt;`Ptr'&lt;x3/&gt;型への変換を処理する。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`Base.unsafe_convert`&lt;x1/&gt; handles conversion to &lt;x2/&gt;`Ptr`&lt;x3/&gt; types. It is considered unsafe because
converting an object to a native pointer can hide the object from the garbage collector, causing
it to be freed prematurely.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T134306Z" creationid="hsugawa8651" creationdate="20181117T134306Z">
        <seg>'Base.unsafe_convert'&lt;x1/&gt;は、&lt;x2/&gt;`Ptr'&lt;x3/&gt;型への変換を処理します。安全ではないと考えられます。 オブジェクトをネイティブ・ポインタに変換すると、ガーベッジ・コレクターからオブジェクトを非表示にすることができます。 早期に解放することです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`BitArray`&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T041651Z" creationid="hsugawa8651" creationdate="20181112T041651Z">
        <seg>`BitArray`&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`BitArray`&lt;x1/&gt;s are space-efficient "packed" boolean arrays, which store one bit per boolean value.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T160448Z" creationid="hsugawa8651" creationdate="20181109T160448Z">
        <seg>「BitArray」&lt;x1/&gt;は、ブール値ごとに1ビットを格納するスペース効率の高い「パックされた」ブール演算配列です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`BitArray`&lt;x1/&gt;s are space-efficient "packed" boolean arrays, which store one bit per boolean value.
They can be used similarly to &lt;x2/&gt;Array{Bool}&lt;x3/&gt; arrays (which store one byte per boolean value),
and can be converted to/from the latter via &lt;x4/&gt;Array(bitarray)&lt;x5/&gt; and &lt;x6/&gt;BitArray(array)&lt;x7/&gt;, respectively.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T135407Z" creationid="hsugawa8651" creationdate="20181117T135407Z">
        <seg>「BitArray」&lt;x1/&gt;は、ブール値ごとに1ビットを格納するスペース効率の高い「パックされた」ブール演算配列です。 これらは、&lt;x2/&gt;Array{Bool}&lt;x3/&gt;配列(ブール値ごとに1バイトを格納する)と同様に使用できます。 また、&lt;x4/&gt;アレイ(bitarray)&lt;x5/&gt;および&lt;x6/&gt;BitArray(配列)&lt;x7/&gt;を介して、後者との間で変換を行うことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`BitSet`&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T041606Z" creationid="hsugawa8651" creationdate="20181112T041606Z">
        <seg>`BitSet`&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`Bool`&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T110217Z" creationid="hsugawa8651" creationdate="20181112T110217Z">
        <seg>`Bool`&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`CartesianIndex{N}`&lt;x1/&gt;s, which behave like an &lt;x2/&gt;N&lt;x3/&gt;-tuple of integers spanning multiple dimensions (see below for more details)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T155514Z" creationid="hsugawa8651" creationdate="20181109T155514Z">
        <seg>「CartesianIndex{N}」&lt;x1/&gt;は、複数の次元を超える整数の&lt;x2/&gt;N&lt;x3/&gt;のように動作します(詳細については以下を参照)。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`Colon()`&lt;x1/&gt; (&lt;x2/&gt;:&lt;x3/&gt;), which represents all indices within an entire dimension or across the entire array</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T155540Z" creationid="hsugawa8651" creationdate="20181109T155540Z">
        <seg>「コロン()」&lt;x1/&gt;(&lt;x2/&gt;:&lt;x3/&gt;)は、全次元または配列全体にわたってすべてのインデックスを表します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`Dict`&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T041609Z" creationid="hsugawa8651" creationdate="20181112T041609Z">
        <seg>`Dict`&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`Dict`&lt;x1/&gt; is the standard dictionary.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T041718Z" creationid="hsugawa8651" creationdate="20181112T041718Z">
        <seg>「Dict」&lt;x1/&gt;は標準辞書です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`Dict`&lt;x1/&gt;s can be created by passing pair objects constructed with &lt;x2/&gt;=&gt;&lt;x3/&gt; to a &lt;x4/&gt;`Dict`&lt;x5/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T041731Z" creationid="hsugawa8651" creationdate="20181112T041731Z">
        <seg>「Dict」&lt;x1/&gt;は、&lt;x2/&gt;=&gt;&lt;x3/&gt;で構成されたペアオブジェクトを、&lt;x4/&gt;'Dict'&lt;x5/&gt;に渡すことで作成できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`ENDIAN_BOM`&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T043202Z" creationid="hsugawa8651" creationdate="20181112T043202Z">
        <seg>`ENDIAN_BOM`&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`ENV`&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T063251Z" creationid="hsugawa8651" creationdate="20181114T063251Z">
        <seg>`ENV`&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`Float16`&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T110230Z" creationid="hsugawa8651" creationdate="20181112T110230Z">
        <seg>`Float16`&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`Float32`&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T110233Z" creationid="hsugawa8651" creationdate="20181112T110233Z">
        <seg>`Float32`&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`Float64`&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T110237Z" creationid="hsugawa8651" creationdate="20181112T110237Z">
        <seg>`Float64`&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`Float64`&lt;x1/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T124011Z" creationid="hsugawa8651" creationdate="20181118T124011Z">
        <seg>`Float64`&lt;x1/&gt;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`IdDict`&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T041608Z" creationid="hsugawa8651" creationdate="20181112T041608Z">
        <seg>`IdDict`&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`IdDict`&lt;x1/&gt; is a special hash table where the keys are always object identities.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T041725Z" creationid="hsugawa8651" creationdate="20181112T041725Z">
        <seg>「IdDict」&lt;x1/&gt;は、鍵が常にオブジェクト識別子である特殊なハッシュ表です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`Inf`&lt;x1/&gt; and &lt;x2/&gt;`NaN`&lt;x3/&gt; propagate through complex numbers in the real and imaginary parts
of a complex number as described in the &lt;x4/&gt;Special floating-point values&lt;x5/&gt; section:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T123455Z" creationid="hsugawa8651" creationdate="20181118T123455Z">
        <seg>「Inf」&lt;x1/&gt;と&lt;x2/&gt;'NaN'&lt;x3/&gt;は、実部と虚部の複素数を通して伝搬する。 &lt;x4/&gt;の特殊浮動小数点値&lt;x5/&gt;セクションで記述された複雑な数値の値です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`InsertionSort`&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T064003Z" creationid="hsugawa8651" creationdate="20181114T064003Z">
        <seg>`InsertionSort`&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`Int128`&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T110206Z" creationid="hsugawa8651" creationdate="20181112T110206Z">
        <seg>`Int128`&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`Int16`&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T110129Z" creationid="hsugawa8651" creationdate="20181112T110129Z">
        <seg>`Int16`&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`Int32`&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T120320Z" creationid="hsugawa8651" creationdate="20181118T120320Z">
        <seg>`Int32`&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`Int64`&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T110156Z" creationid="hsugawa8651" creationdate="20181112T110156Z">
        <seg>`Int64`&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`Int8`&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T110036Z" creationid="hsugawa8651" creationdate="20181112T110036Z">
        <seg>`Int8`&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`Iterators.Pairs`&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T041819Z" creationid="hsugawa8651" creationdate="20181112T041819Z">
        <seg>`Iterators.Pairs`&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`Iterators.reverse(iterator)`&lt;x1/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T112900Z" creationid="hsugawa8651" creationdate="20181112T112900Z">
        <seg>`Iterators.reverse(iterator)`&lt;x1/&gt;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`Matrix{T}(I, m, n)`&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T064433Z" creationid="hsugawa8651" creationdate="20181114T064433Z">
        <seg>`Matrix{T}(I, m, n)`&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`MergeSort`&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T064007Z" creationid="hsugawa8651" creationdate="20181114T064007Z">
        <seg>`MergeSort`&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`Meta.@dump`&lt;x1/&gt;)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T015121Z" creationid="hsugawa8651" creationdate="20181116T015121Z">
        <seg>`Meta.@dump`&lt;x1/&gt;)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`NamedTuple`&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T041616Z" creationid="hsugawa8651" creationdate="20181112T041616Z">
        <seg>`NamedTuple`&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`Pair`&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T041615Z" creationid="hsugawa8651" creationdate="20181112T041615Z">
        <seg>`Pair`&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`PartialQuickSort(k)`&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T064006Z" creationid="hsugawa8651" creationdate="20181114T064006Z">
        <seg>`PartialQuickSort(k)`&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`Ptr`&lt;x1/&gt;) as a "scalar".</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T150452Z" creationid="hsugawa8651" creationdate="20181117T150450Z">
        <seg>「Ptr」&lt;x1/&gt;は「スカラー」である。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`QuickSort`&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T064004Z" creationid="hsugawa8651" creationdate="20181114T064004Z">
        <seg>`QuickSort`&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`Set`&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T041614Z" creationid="hsugawa8651" creationdate="20181112T041614Z">
        <seg>`Set`&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`UInt128`&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T110212Z" creationid="hsugawa8651" creationdate="20181112T110212Z">
        <seg>`UInt128`&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`UInt16`&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T110135Z" creationid="hsugawa8651" creationdate="20181112T110135Z">
        <seg>`UInt16`&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`UInt32`&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T110152Z" creationid="hsugawa8651" creationdate="20181112T110152Z">
        <seg>`UInt32`&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`UInt64`&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T110202Z" creationid="hsugawa8651" creationdate="20181112T110202Z">
        <seg>`UInt64`&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`UInt8`&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T110124Z" creationid="hsugawa8651" creationdate="20181112T110124Z">
        <seg>`UInt8`&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`UnitRange`&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T041602Z" creationid="hsugawa8651" creationdate="20181112T041602Z">
        <seg>`UnitRange`&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`WeakKeyDict`&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T041610Z" creationid="hsugawa8651" creationdate="20181112T041610Z">
        <seg>`WeakKeyDict`&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`WeakKeyDict`&lt;x1/&gt; is a hash table implementation where the keys are weak references to objects, and
thus may be garbage collected even when referenced in a hash table.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T032106Z" creationid="hsugawa8651" creationdate="20181114T032106Z">
        <seg>「WeakKeyDict」&lt;x1/&gt;はハッシュ表の実装で、鍵はオブジェクトへの弱い参照であり したがって、ハッシュ・テーブルで参照されている場合でも、ガーベッジ・コレクションを収集することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```jldoctest
julia&gt; div(1, 0)
ERROR: DivideError: integer division error
[...]
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T020035Z" creationid="hsugawa8651" creationdate="20181116T020035Z">
        <seg>```jldoctest
julia&gt; div(1, 0)
ERROR: DivideError: integer division error
[...]
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`abs(x)`&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T095921Z" creationid="hsugawa8651" creationdate="20181118T095921Z">
        <seg>`abs(x)`&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`abs2(x)`&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T095925Z" creationid="hsugawa8651" creationdate="20181118T095925Z">
        <seg>`abs2(x)`&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`adjoint`&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181110T025903Z" creationid="hsugawa8651" creationdate="20181110T025903Z">
        <seg>`adjoint`&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`axes(A)`&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T153250Z" creationid="hsugawa8651" creationdate="20181109T153250Z">
        <seg>`axes(A)`&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`axes(A,n)`&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T153255Z" creationid="hsugawa8651" creationdate="20181109T153255Z">
        <seg>`axes(A,n)`&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`cat(A...; dims=k)`&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T064509Z" creationid="hsugawa8651" creationdate="20181114T064509Z">
        <seg>`cat(A...; dims=k)`&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`cbrt(x)`&lt;x1/&gt;, &lt;x2/&gt;∛x&lt;x3/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T100011Z" creationid="hsugawa8651" creationdate="20181118T100011Z">
        <seg>`cbrt(x)`&lt;x1/&gt;, &lt;x2/&gt;∛x&lt;x3/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`ccall`&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T152234Z" creationid="hsugawa8651" creationdate="20181117T152234Z">
        <seg>`ccall`&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`ceil(T, x)`&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T165135Z" creationid="hsugawa8651" creationdate="20181118T165135Z">
        <seg>`ceil(T, x)`&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`ceil(x)`&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T031212Z" creationid="hsugawa8651" creationdate="20181114T031212Z">
        <seg>`ceil(x)`&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`cglobal`&lt;x1/&gt; are a symbol specification identical to that used
by &lt;x2/&gt;`ccall`&lt;x3/&gt;, and a type describing the value stored in the variable:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T152511Z" creationid="hsugawa8651" creationdate="20181117T152511Z">
        <seg>'cglobal'&lt;x1/&gt;は、使用されたものと同じシンボル仕様です。 &lt;x2/&gt;'ccall'&lt;x3/&gt;によって、変数に格納された値を記述するタイプが次のようになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`chr2ind(str,j)`&lt;x1/&gt; gives the index at which the &lt;x2/&gt;j&lt;x3/&gt;th character in &lt;x4/&gt;str&lt;x5/&gt; occurs.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T084551Z" creationid="hsugawa8651" creationdate="20181120T084551Z">
        <seg>`chr2ind(str,j)`&lt;x1/&gt; は &lt;x4/&gt;str&lt;x5/&gt;  の &lt;x2/&gt;j&lt;x3/&gt; 番目の文字が格納されているインデックスの値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`cld(x,y)`&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T095826Z" creationid="hsugawa8651" creationdate="20181118T095826Z">
        <seg>`cld(x,y)`&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`colon()`&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T130300Z" creationid="hsugawa8651" creationdate="20181120T130300Z">
        <seg>`colon()`&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`copy(A)`&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T064414Z" creationid="hsugawa8651" creationdate="20181114T064414Z">
        <seg>`copy(A)`&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`copy`&lt;x1/&gt; and other out-of-place
operations.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T150506Z" creationid="hsugawa8651" creationdate="20181117T150506Z">
        <seg>「コピー」&lt;x1/&gt;およびその他の場所 操作。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`copy`&lt;x1/&gt; and other out-of-place
operations. No matter how an &lt;x2/&gt;AbstractArray{T,N}&lt;x3/&gt; is represented internally, &lt;x4/&gt;T&lt;x5/&gt; is the type of
object returned by &lt;x6/&gt;integer&lt;x7/&gt; indexing (&lt;x8/&gt;A[1, ..., 1]&lt;x9/&gt;, when &lt;x10/&gt;A&lt;x11/&gt; is not empty) and &lt;x12/&gt;N&lt;x13/&gt; should be
the length of the tuple returned by &lt;x14/&gt;`size`&lt;x15/&gt;. For more details on defining custom
&lt;x16/&gt;AbstractArray&lt;x17/&gt; implementations, see the &lt;x18/&gt;&lt;x19/&gt;&lt;x20/&gt;(@ref man-interface-array).</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T135321Z" creationid="hsugawa8651" creationdate="20181117T135321Z">
        <seg>「コピー」&lt;x1/&gt;およびその他の場所 オペレーションは、&lt;x2/&gt;AbstractArray{T,N}&lt;x3/&gt;が内部的に表されても、&lt;x4/&gt;T&lt;x5/&gt;はタイプである。 &lt;x6/&gt;整数&lt;x7/&gt;インデックス(&lt;x8/&gt;A[1,.…,1]&lt;x9/&gt;,&lt;x10/&gt;)は&lt;x10/&gt;A&lt;x11/&gt;であり、&lt;x12/&gt;N&lt;x13/&gt;は&lt;x12/&gt;n&lt;x13/&gt;である。 &lt;x14/&gt;`size'&lt;x15/&gt;によって返されるタプルの長さ。カスタムの定義についての詳細は &lt;x16/&gt;AbstractArray&lt;x17/&gt;実装を参照してください。&lt;x18/&gt;&lt;x19/&gt;&lt;x20/&gt;(@ref man interface array)を参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`copysign(x,y)`&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T165142Z" creationid="hsugawa8651" creationdate="20181118T165142Z">
        <seg>`copysign(x,y)`&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`ctranspose()`&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T130253Z" creationid="hsugawa8651" creationdate="20181120T130253Z">
        <seg>`ctranspose()`&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`deepcopy(A)`&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T064418Z" creationid="hsugawa8651" creationdate="20181114T064418Z">
        <seg>`deepcopy(A)`&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`div(x,y)`&lt;x1/&gt;, &lt;x2/&gt;x÷y&lt;x3/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T031239Z" creationid="hsugawa8651" creationdate="20181114T031239Z">
        <seg>`div(x,y)`&lt;x1/&gt;, &lt;x2/&gt;x÷y&lt;x3/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`divrem(x,y)`&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T095850Z" creationid="hsugawa8651" creationdate="20181118T095850Z">
        <seg>`divrem(x,y)`&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`eachindex(A)`&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T153302Z" creationid="hsugawa8651" creationdate="20181109T153302Z">
        <seg>`eachindex(A)`&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`eltype(A)`&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T150349Z" creationid="hsugawa8651" creationdate="20181117T150349Z">
        <seg>`eltype(A)`&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`endof(str)`&lt;x1/&gt; gives the maximal (byte) index that can be used to index into &lt;x2/&gt;str&lt;x3/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T084019Z" creationid="hsugawa8651" creationdate="20181120T084019Z">
        <seg>`endof(str)`&lt;x1/&gt; は &lt;x2/&gt;str&lt;x3/&gt; へのインデックス付けに使用できる最大の（バイト）インデックスを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`eval`&lt;x1/&gt; and effects</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T165242Z" creationid="hsugawa8651" creationdate="20181118T165242Z">
        <seg>`eval`&lt;x1/&gt;とエフェクト</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`exp(x)`&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T100020Z" creationid="hsugawa8651" creationdate="20181118T100020Z">
        <seg>`exp(x)`&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`expm1(x)`&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T100023Z" creationid="hsugawa8651" creationdate="20181118T100023Z">
        <seg>`expm1(x)`&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`exponent(x)`&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T100055Z" creationid="hsugawa8651" creationdate="20181118T100055Z">
        <seg>'exponent(x)'&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`falses(dims...)`&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T064409Z" creationid="hsugawa8651" creationdate="20181114T064409Z">
        <seg>`falses(dims...)`&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`fill!(A, x)`&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T064438Z" creationid="hsugawa8651" creationdate="20181114T064438Z">
        <seg>`fill!(A, x)`&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`fill(x, dims...)`&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T064440Z" creationid="hsugawa8651" creationdate="20181114T064440Z">
        <seg>`fill(x, dims...)`&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`fld(x,y)`&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T031244Z" creationid="hsugawa8651" creationdate="20181114T031244Z">
        <seg>`fld(x,y)`&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`fldmod(x,y)`&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T095854Z" creationid="hsugawa8651" creationdate="20181118T095854Z">
        <seg>`fldmod(x,y)`&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`flipsign(x,y)`&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T165145Z" creationid="hsugawa8651" creationdate="20181118T165145Z">
        <seg>`flipsign(x,y)`&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`floor(T, x)`&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T031151Z" creationid="hsugawa8651" creationdate="20181114T031151Z">
        <seg>`floor(T, x)`&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`floor(x)`&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T031122Z" creationid="hsugawa8651" creationdate="20181114T031122Z">
        <seg>`floor(x)`&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`gcd(x,y...)`&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T095857Z" creationid="hsugawa8651" creationdate="20181118T095857Z">
        <seg>`gcd(x,y...)`&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`getindex`&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181110T025910Z" creationid="hsugawa8651" creationdate="20181110T025910Z">
        <seg>`getindex`&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`getindex`&lt;x1/&gt;:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T113057Z" creationid="hsugawa8651" creationdate="20181112T113057Z">
        <seg>`getindex`&lt;x1/&gt;:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`hcat()`&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T130245Z" creationid="hsugawa8651" creationdate="20181120T130245Z">
        <seg>`hcat()`&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`hcat(A...)`&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T064514Z" creationid="hsugawa8651" creationdate="20181114T064514Z">
        <seg>`hcat(A...)`&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`hcat`&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181110T025842Z" creationid="hsugawa8651" creationdate="20181110T025842Z">
        <seg>`hcat`&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`hvcat()`&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T130250Z" creationid="hsugawa8651" creationdate="20181120T130250Z">
        <seg>`hvcat()`&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`hvcat`&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181110T025855Z" creationid="hsugawa8651" creationdate="20181110T025855Z">
        <seg>`hvcat`&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`hvcat`&lt;x1/&gt; concatenates in both dimension 1 (with semicolons) and dimension 2 (with spaces).</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154644Z" creationid="hsugawa8651" creationdate="20181109T154644Z">
        <seg>「ホフカト」&lt;x1/&gt;は、次元1(セミコロン)と次元2(スペースを含む)の両方で連結されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`hvcat`&lt;x1/&gt; concatenates in both dimension 1 (with semicolons) and dimension 2 (with spaces).
Consider these examples of this syntax:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T134628Z" creationid="hsugawa8651" creationdate="20181117T134628Z">
        <seg>「ホフカト」&lt;x1/&gt;は、次元1(セミコロン)と次元2(スペースを含む)の両方で連結されます。 この構文の例を次に示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`hypot(x,y)`&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T100015Z" creationid="hsugawa8651" creationdate="20181118T100015Z">
        <seg>`hypot(x,y)`&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`ind2chr(str,i)`&lt;x1/&gt; gives the number of characters in &lt;x2/&gt;str&lt;x3/&gt; up to and including any at index
&lt;x4/&gt;i&lt;x5/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T084328Z" creationid="hsugawa8651" creationdate="20181120T084328Z">
        <seg>`ind2chr(str,i)`&lt;x1/&gt;は、文字列&lt;x2/&gt;str&lt;x3/&gt;の、インデックス1からインデックスiまでに格納されている文字数を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`isequal()`&lt;x1/&gt; considers &lt;x2/&gt;NaN&lt;x3/&gt;s equal to each other:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T064622Z" creationid="hsugawa8651" creationdate="20181120T064622Z">
        <seg>`isequal()`&lt;x1/&gt; は、&lt;x2/&gt;NaN&lt;x3/&gt; 同士は等しいと解釈します。:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`isequal(x, y)`&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T030539Z" creationid="hsugawa8651" creationdate="20181114T030539Z">
        <seg>`isequal(x, y)`&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`isequal`&lt;x1/&gt; considers &lt;x2/&gt;NaN&lt;x3/&gt;s equal to each other:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T030606Z" creationid="hsugawa8651" creationdate="20181114T030603Z">
        <seg>「isequal」&lt;x1/&gt;は、&lt;x2/&gt;NaN&lt;x3/&gt;を互いに等しいとみなします:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`isequal`&lt;x1/&gt; to determine equality.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T041722Z" creationid="hsugawa8651" creationdate="20181112T041722Z">
        <seg>等価を決定するには、「isequal」&lt;x1/&gt;を指定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`isfinite(x)`&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T030545Z" creationid="hsugawa8651" creationdate="20181114T030545Z">
        <seg>`isfinite(x)`&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`isinf(x)`&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T030549Z" creationid="hsugawa8651" creationdate="20181114T030549Z">
        <seg>`isinf(x)`&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`isnan(x)`&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T030558Z" creationid="hsugawa8651" creationdate="20181114T030558Z">
        <seg>`isnan(x)`&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`lcm(x,y...)`&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T095901Z" creationid="hsugawa8651" creationdate="20181118T095901Z">
        <seg>`lcm(x,y...)`&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`ldexp(x,n)`&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T100028Z" creationid="hsugawa8651" creationdate="20181118T100028Z">
        <seg>'ldexp(x,n)'&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`length(A)`&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T153218Z" creationid="hsugawa8651" creationdate="20181109T153218Z">
        <seg>`length(A)`&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`length(iter)`&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T112304Z" creationid="hsugawa8651" creationdate="20181112T112304Z">
        <seg>`length(iter)`&lt;x1/&gt;`length(iter)`&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`length(str)`&lt;x1/&gt; the number of characters in &lt;x2/&gt;str&lt;x3/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T084042Z" creationid="hsugawa8651" creationdate="20181120T084042Z">
        <seg>`length(str)`&lt;x1/&gt;は  &lt;x2/&gt;str&lt;x3/&gt;.の文字数を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`log(b,x)`&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T100039Z" creationid="hsugawa8651" creationdate="20181118T100039Z">
        <seg>'log(b,x)'&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`log(x)`&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T100036Z" creationid="hsugawa8651" creationdate="20181118T100036Z">
        <seg>`log(x)'&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`log10(x)`&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T100046Z" creationid="hsugawa8651" creationdate="20181118T100046Z">
        <seg>`log10(x)'&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`log1p(x)`&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T100051Z" creationid="hsugawa8651" creationdate="20181118T100051Z">
        <seg>'log1p(x)'&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`log2(x)`&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T100043Z" creationid="hsugawa8651" creationdate="20181118T100043Z">
        <seg>'log2(x)'&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`mod(x,y)`&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T095839Z" creationid="hsugawa8651" creationdate="20181114T031255Z">
        <seg>'mod(x,y)'&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`mod1(x,y)`&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T031310Z" creationid="hsugawa8651" creationdate="20181114T031310Z">
        <seg>`mod1(x,y)`&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`mod2pi(x)`&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T031316Z" creationid="hsugawa8651" creationdate="20181114T031316Z">
        <seg>`mod2pi(x)`&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`ndims(A)`&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T153230Z" creationid="hsugawa8651" creationdate="20181109T153230Z">
        <seg>`ndims(A)`&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`one(x)`&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T112015Z" creationid="hsugawa8651" creationdate="20181112T112015Z">
        <seg>`one(x)`&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`ones(T, dims...)`&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T064400Z" creationid="hsugawa8651" creationdate="20181114T064400Z">
        <seg>`ones(T, dims...)`&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`parse`&lt;x1/&gt; function, which takes a string of Julia code and returns the corresponding
&lt;x2/&gt;Expr&lt;x3/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T165324Z" creationid="hsugawa8651" creationdate="20181118T165324Z">
        <seg>'parse'&lt;x1/&gt;関数は、Juliaコードの文字列を取得して、対応する &lt;x2/&gt;Expr&lt;x3/&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`push!`&lt;x1/&gt;ing each element into a &lt;x2/&gt;Vector{Any}&lt;x3/&gt;:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T112721Z" creationid="hsugawa8651" creationdate="20181112T112721Z">
        <seg>「プッシュ!」&lt;x1/&gt;各要素を&lt;x2/&gt;ベクトル{Any}&lt;x3/&gt;に押し込みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`rand(T, dims...)`&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T064427Z" creationid="hsugawa8651" creationdate="20181114T064427Z">
        <seg>`rand(T, dims...)`&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`randn(T, dims...)`&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T064430Z" creationid="hsugawa8651" creationdate="20181114T064430Z">
        <seg>`randn(T, dims...)`&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`range(start, stop=stop, length=n)`&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T064435Z" creationid="hsugawa8651" creationdate="20181114T064435Z">
        <seg>`range(start, stop=stop, length=n)`&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`reinterpret(T, A)`&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T064424Z" creationid="hsugawa8651" creationdate="20181114T064424Z">
        <seg>`reinterpret(T, A)`&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`rem(x,y)`&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T095830Z" creationid="hsugawa8651" creationdate="20181118T095830Z">
        <seg>`rem(x,y)`&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`reshape(A, dims...)`&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T064412Z" creationid="hsugawa8651" creationdate="20181114T064412Z">
        <seg>`reshape(A, dims...)`&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`round(T, x)`&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T031114Z" creationid="hsugawa8651" creationdate="20181114T031114Z">
        <seg>`round(T, x)`&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`round(x)`&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T031107Z" creationid="hsugawa8651" creationdate="20181114T031107Z">
        <seg>`round(x)`&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`setindex!`&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181110T025917Z" creationid="hsugawa8651" creationdate="20181110T025917Z">
        <seg>`setindex!`&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`setprecision()`&lt;x1/&gt; and &lt;x2/&gt;`setrounding()`&lt;x3/&gt;,
and all further calculations will take these changes in account.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T040056Z" creationid="hsugawa8651" creationdate="20181119T235748Z">
        <seg>`setprecision()`&lt;x1/&gt;および &lt;x2/&gt;`setrounding()`&lt;x3/&gt;を使用することで設定変更が可能です。設定変更後の演算は全てこの変更が反映されます。 
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`setprecision`&lt;x1/&gt; and &lt;x2/&gt;`setrounding`&lt;x3/&gt;,
and all further calculations will take these changes in account.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T111713Z" creationid="hsugawa8651" creationdate="20181112T111713Z">
        <seg>'setprecision'&lt;x1/&gt;および&lt;x2/&gt;'セロウンディング'&lt;x3/&gt; さらに計算を行うと、これらの変更は考慮されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`sign(x)`&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T095928Z" creationid="hsugawa8651" creationdate="20181118T095928Z">
        <seg>`sign(x)`&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`signbit(x)`&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T165140Z" creationid="hsugawa8651" creationdate="20181118T165140Z">
        <seg>`signbit(x)`&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`significand(x)`&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T100059Z" creationid="hsugawa8651" creationdate="20181118T100059Z">
        <seg>「significand(x)」&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`similar(A, T, dims...)`&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T064421Z" creationid="hsugawa8651" creationdate="20181114T064421Z">
        <seg>`similar(A, T, dims...)`&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`size(A)`&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T153236Z" creationid="hsugawa8651" creationdate="20181109T153236Z">
        <seg>`size(A)`&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`size(A,n)`&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T153242Z" creationid="hsugawa8651" creationdate="20181109T153242Z">
        <seg>`size(A,n)`&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`sort.jl`&lt;x1/&gt;:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T064222Z" creationid="hsugawa8651" creationdate="20181114T064222Z">
        <seg>`sort.jl`&lt;x1/&gt;:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`sqrt(x)`&lt;x1/&gt;, &lt;x2/&gt;√x&lt;x3/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T100007Z" creationid="hsugawa8651" creationdate="20181118T100007Z">
        <seg>`sqrt(x)`&lt;x1/&gt;, &lt;x2/&gt;√x&lt;x3/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`stderr`&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T043141Z" creationid="hsugawa8651" creationdate="20181112T043141Z">
        <seg>`stderr`&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`stdin`&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T043139Z" creationid="hsugawa8651" creationdate="20181112T043139Z">
        <seg>`stdin`&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`stdout`&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T043140Z" creationid="hsugawa8651" creationdate="20181112T043140Z">
        <seg>`stdout`&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`stride(A,k)`&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T064339Z" creationid="hsugawa8651" creationdate="20181114T064339Z">
        <seg>`stride(A,k)`&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`strides(A)`&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T064343Z" creationid="hsugawa8651" creationdate="20181114T064343Z">
        <seg>`strides(A)`&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`string()`&lt;x1/&gt; is the identity for &lt;x2/&gt;AbstractString&lt;x3/&gt; and &lt;x4/&gt;Char&lt;x5/&gt; values, so these are interpolated
into strings as themselves, unquoted and unescaped:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T083019Z" creationid="hsugawa8651" creationdate="20181120T083019Z">
        <seg>`string()`&lt;x1/&gt;は &lt;x2/&gt;AbstractString&lt;x3/&gt;  および &lt;x4/&gt;Char&lt;x5/&gt;値と同一です。そのため、これらはクオーテーションが付かず、 エスケープもされずにそのまま文字列に補間されます。:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`transpose()`&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T130257Z" creationid="hsugawa8651" creationdate="20181120T130257Z">
        <seg>`transpose()`&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`trues(dims...)`&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T064403Z" creationid="hsugawa8651" creationdate="20181114T064403Z">
        <seg>`trues(dims...)`&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`trunc(T, x)`&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T031229Z" creationid="hsugawa8651" creationdate="20181114T031229Z">
        <seg>`trunc(T, x)`&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`trunc(x)`&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T165138Z" creationid="hsugawa8651" creationdate="20181118T165138Z">
        <seg>`trunc(x)`&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`vcat()`&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T130248Z" creationid="hsugawa8651" creationdate="20181120T130248Z">
        <seg>`vcat()`&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`vcat(A...)`&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T064511Z" creationid="hsugawa8651" creationdate="20181114T064511Z">
        <seg>`vcat(A...)`&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`vcat`&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181110T025849Z" creationid="hsugawa8651" creationdate="20181110T025849Z">
        <seg>`vcat`&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`view`&lt;x1/&gt; function, which is called the same way as
&lt;x2/&gt;`getindex`&lt;x3/&gt; (with an array and a series of index arguments).</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T160431Z" creationid="hsugawa8651" creationdate="20181109T160431Z">
        <seg>「view」&lt;x1/&gt;関数は、以下と同じ方法で呼び出されます。 &lt;x2/&gt;`getindex'&lt;x3/&gt;(配列と一連のインデックス引数を持つ)。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`view`&lt;x1/&gt; function, which is called the same way as
&lt;x2/&gt;`getindex`&lt;x3/&gt; (with an array and a series of index arguments). The result
of &lt;x4/&gt;`view`&lt;x5/&gt; looks the same as the result of &lt;x6/&gt;`getindex`&lt;x7/&gt;, except the
data is left in place. &lt;x8/&gt;`view`&lt;x9/&gt; stores the input index vectors in a
&lt;x10/&gt;SubArray&lt;x11/&gt; object, which can later be used to index the original array
indirectly.  By putting the &lt;x12/&gt;`@views`&lt;x13/&gt; macro in front of an expression or
block of code, any &lt;x14/&gt;array[...]&lt;x15/&gt; slice in that expression will be converted to
create a &lt;x16/&gt;SubArray&lt;x17/&gt; view instead.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T135345Z" creationid="hsugawa8651" creationdate="20181117T135345Z">
        <seg>「view」&lt;x1/&gt;関数は、以下と同じ方法で呼び出されます。 &lt;x2/&gt;`getindex'&lt;x3/&gt;(配列と一連のインデックス引数を持つ)。結果 &lt;x4/&gt;'view'&lt;x5/&gt;は、&lt;x6/&gt;'getindex'&lt;x7/&gt;の結果と同じであるが データは所定の場所に残されます。&lt;x8/&gt;'view'&lt;x9/&gt;は、入力インデックスベクトルを格納します。 &lt;x10/&gt;サブアレイ&lt;x11/&gt;オブジェクトで、後でオリジナルの配列をインデックス化するために使用できます。 間接的には、&lt;x12/&gt;`@views`&lt;x13/&gt;マクロを式の前に置くか、または コードのブロック、任意の&lt;x14/&gt;配列[.]&lt;x15/&gt;スライスは、その式の中に変換されます。 代わりに&lt;x16/&gt;サブアレイを作成&lt;x17/&gt;ビューを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`zero(x)`&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T041035Z" creationid="hsugawa8651" creationdate="20181112T112005Z">
        <seg>`zero(x)`&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`zeros(T, dims...)`&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T064357Z" creationid="hsugawa8651" creationdate="20181114T064357Z">
        <seg>`zeros(T, dims...)`&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>a += b&lt;x4/&gt;) are parsed
as &lt;x5/&gt;a .= a .+ b&lt;x6/&gt;, where &lt;x7/&gt;.=&lt;x8/&gt; is a fused &lt;x9/&gt;in-place&lt;x10/&gt; assignment operation
(see the &lt;x11/&gt;&lt;x12/&gt;&lt;x13/&gt;(@ref man-vectorized)).</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T132629Z" creationid="hsugawa8651" creationdate="20181113T132629Z">
        <seg>+=b&lt;x4/&gt;)は解析されます。 &lt;x5/&gt;a.=a.+b&lt;x6/&gt;。ここで&lt;x7/&gt;=&lt;x8/&gt;は、&lt;x9/&gt;&lt;x8/&gt;であり、&lt;x7/&gt;は、&lt;x9/&gt;のインプレースである。 (&lt;x11/&gt;&lt;x12/&gt;&lt;x13/&gt;(@ref man vectorized))を参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>a &lt;x1/&gt;BitArray&lt;x2/&gt; with all values &lt;x3/&gt;false&lt;x4/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154417Z" creationid="hsugawa8651" creationdate="20181109T154417Z">
        <seg>&lt;x1/&gt;BitArray&lt;x2/&gt;であり、すべての値は&lt;x3/&gt;false&lt;x4/&gt;である。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>a &lt;x1/&gt;Symbol&lt;x2/&gt; identifying the kind of expression.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T115211Z" creationid="hsugawa8651" creationdate="20181118T115211Z">
        <seg>&lt;x1/&gt;記号&lt;x2/&gt;で、表現の種類を識別します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>a &lt;x1/&gt;`BitArray`&lt;x2/&gt; with all values &lt;x3/&gt;true&lt;x4/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T064408Z" creationid="hsugawa8651" creationdate="20181109T154402Z">
        <seg>&lt;x1/&gt;'BitArray'&lt;x2/&gt;はすべての値が&lt;x3/&gt;真&lt;x4/&gt;である</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>a = Array{Union{Int,AbstractString,Tuple,Array}}(n)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T094730Z" creationid="hsugawa8651" creationdate="20181120T094730Z">
        <seg>a = Array{Union{Int,AbstractString,Tuple,Array}}(n)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>a = Vector{Union{Int,AbstractString,Tuple,Array}}(undef, n)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T021227Z" creationid="hsugawa8651" creationdate="20181116T021227Z">
        <seg>a = Vector{Union{Int,AbstractString,Tuple,Array}}(undef, n)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>a ?</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T124349Z" creationid="hsugawa8651" creationdate="20181118T124349Z">
        <seg>a ?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>a function pointer (for example, from &lt;x1/&gt;dlsym&lt;x2/&gt;).</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T223840Z" creationid="hsugawa8651" creationdate="20181109T223840Z">
        <seg>関数ポインタ(たとえば、&lt;x1/&gt;dlsym&lt;x2/&gt;からの関数ポインタです)。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>a positive value with the magnitude of &lt;x1/&gt;x&lt;x2/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T072923Z" creationid="hsugawa8651" creationdate="20181118T095924Z">
        <seg>&lt;x1/&gt;x&lt;x2/&gt; の大きさの、正の値</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>a range expressing the valid indices along dimension &lt;x1/&gt;n&lt;x2/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154257Z" creationid="hsugawa8651" creationdate="20181109T154257Z">
        <seg>寸法&lt;x1/&gt;n&lt;x2/&gt;に沿って有効なインデックスを表現する範囲</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>a return type of &lt;x1/&gt;Ref{Any}&lt;x2/&gt; is invalid, it should either be &lt;x3/&gt;Any&lt;x4/&gt; (corresponding to &lt;x5/&gt;jl_value_t*&lt;x6/&gt;)
or &lt;x7/&gt;Ptr{Any}&lt;x8/&gt; (corresponding to &lt;x9/&gt;jl_value_t**&lt;x10/&gt;)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T151813Z" creationid="hsugawa8651" creationdate="20181117T151813Z">
        <seg>&lt;x1/&gt;Ref{Any}&lt;x2/&gt;の戻り値が無効です。&lt;x3/&gt;Any&lt;x4/&gt;(&lt;x5/&gt;jl_value_t*&lt;x6/&gt;に対応します) または&lt;x7/&gt;Ptr{Any}&lt;x8/&gt;(&lt;x9/&gt;jl_value_t**&lt;x10/&gt;に対応する)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>a tuple containing the dimensions of &lt;x1/&gt;A&lt;x2/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154246Z" creationid="hsugawa8651" creationdate="20181109T154246Z">
        <seg>&lt;x1/&gt;A&lt;x2/&gt;の次元を含むタプル</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>a tuple containing the valid indices of &lt;x1/&gt;A&lt;x2/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154254Z" creationid="hsugawa8651" creationdate="20181109T154254Z">
        <seg>&lt;x1/&gt;A&lt;x2/&gt;の有効なインデックスを含むタプル</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>a tuple of the strides in each dimension</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154309Z" creationid="hsugawa8651" creationdate="20181109T154309Z">
        <seg>各次元の上昇点の集合</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>a value greater than all finite floating-point values</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T033942Z" creationid="hsugawa8651" creationdate="20181112T110817Z">
        <seg>全ての有限の浮動小数点値よりも大きい値</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>a value less than all finite floating-point values</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T033955Z" creationid="hsugawa8651" creationdate="20181112T110835Z">
        <seg>全ての有限の浮動小数点数値よりも小さい値</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>a value not &lt;c0&gt;==&lt;/c0&gt; to any floating-point value (including itself)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T190737Z" creationid="hsugawa8651" creationdate="20181118T190737Z">
        <seg>浮動小数点値(自身を含む)に対して&lt;c0&gt;==&lt;/c0&gt;ではない値</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>a value not &lt;x1/&gt;==&lt;x2/&gt; to any floating-point value (including itself)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T034019Z" creationid="hsugawa8651" creationdate="20181112T110843Z">
        <seg>浮動小数点値以外の値</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>a value with the magnitude of &lt;x1/&gt;x&lt;x2/&gt; and the sign of &lt;x3/&gt;x*y&lt;x4/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T073227Z" creationid="hsugawa8651" creationdate="20181118T095945Z">
        <seg>&lt;x1/&gt;x&lt;x2/&gt;の大きさで、&lt;x3/&gt;x*y&lt;x4/&gt;と同じ符号を持つ値</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>a value with the magnitude of &lt;x1/&gt;x&lt;x2/&gt; and the sign of &lt;x3/&gt;y&lt;x4/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T073147Z" creationid="hsugawa8651" creationdate="20181118T095941Z">
        <seg>&lt;x1/&gt;x&lt;x2/&gt;の大きさで、&lt;x3/&gt;y&lt;x4/&gt;と同じ符号を持つ値</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>a!( )&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T032243Z" creationid="hsugawa8651" creationdate="20181114T032243Z">
        <seg>a!( )&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>a:b&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T063537Z" creationid="hsugawa8651" creationdate="20181114T063537Z">
        <seg>a:b&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>a:s:b&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T063541Z" creationid="hsugawa8651" creationdate="20181114T063541Z">
        <seg>a:s:b&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>a&lt;x1/&gt; and &lt;x2/&gt;b&lt;x3/&gt;, and &lt;x4/&gt;`maximum(a)`&lt;x5/&gt;, which finds the largest value within
&lt;x6/&gt;a&lt;x7/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T160031Z" creationid="hsugawa8651" creationdate="20181109T160031Z">
        <seg>&lt;x1/&gt;および&lt;x2/&gt;b&lt;x3/&gt;、&lt;x4/&gt;の最大値(a)&lt;x5/&gt;は、最も大きい値を示します。 &lt;x6/&gt;a&lt;x7/&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>a&lt;x1/&gt; and &lt;x2/&gt;b&lt;x3/&gt;, and &lt;x4/&gt;`maximum(a)`&lt;x5/&gt;, which finds the largest value within
&lt;x6/&gt;a&lt;x7/&gt;. The same relationship holds for &lt;x8/&gt;min.(a,b)&lt;x9/&gt; and &lt;x10/&gt;minimum(a)&lt;x11/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T135208Z" creationid="hsugawa8651" creationdate="20181117T135208Z">
        <seg>&lt;x1/&gt;および&lt;x2/&gt;b&lt;x3/&gt;、&lt;x4/&gt;の最大値(a)&lt;x5/&gt;は、最も大きい値を示します。 &lt;x6/&gt;&lt;x7/&gt;。&lt;x8/&gt;min(a,b)&lt;x9/&gt;と&lt;x10/&gt;最小(a)&lt;x11/&gt;と同じ関係が成り立つ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>a&lt;x1/&gt; at expression construction time is used as an immediate value in
the expression.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T165305Z" creationid="hsugawa8651" creationdate="20181118T165305Z">
        <seg>式の構築時の&lt;x1/&gt;は、次のように直接値として使用されます。 で指定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>a[]&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T063025Z" creationid="hsugawa8651" creationdate="20181114T063025Z">
        <seg>a[]&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>abstract type AbstractArray{T, N} end
eltype(::Type{&lt;:AbstractArray{T}}) where {T} = T</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T054127Z" creationid="hsugawa8651" creationdate="20181116T054127Z">
        <seg>abstract type AbstractArray{T, N} end
eltype(::Type{&lt;:AbstractArray{T}}) where {T} = T</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>abstract type AbstractArray{T, N} end
eltype(::Type{AbstractArray}) = Any
eltype(::Type{AbstractArray{T}}) where {T} = T
eltype(::Type{AbstractArray{T, N}}) where {T, N} = T
eltype(::Type{A}) where {A&lt;:AbstractArray} = eltype(supertype(A))</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T054135Z" creationid="hsugawa8651" creationdate="20181116T054135Z">
        <seg>abstract type AbstractArray{T, N} end
eltype(::Type{AbstractArray}) = Any
eltype(::Type{AbstractArray{T}}) where {T} = T
eltype(::Type{AbstractArray{T, N}}) where {T, N} = T
eltype(::Type{A}) where {A&lt;:AbstractArray} = eltype(supertype(A))</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>abstract type Number end
abstract type Real     &lt;: Number end
abstract type AbstractFloat &lt;: Real end
abstract type Integer  &lt;: Real end
abstract type Signed   &lt;: Integer end
abstract type Unsigned &lt;: Integer end</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T021555Z" creationid="hsugawa8651" creationdate="20181116T021555Z">
        <seg>abstract type Number end
abstract type Real     &lt;: Number end
abstract type AbstractFloat &lt;: Real end
abstract type Integer  &lt;: Real end
abstract type Signed   &lt;: Integer end
abstract type Unsigned &lt;: Integer end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>access named fields in objects/modules (calling &lt;x1/&gt;&lt;x2/&gt;&lt;x3/&gt;(@ref Base.getproperty) or &lt;x4/&gt;&lt;x5/&gt;&lt;x6/&gt;(@ref Base.setproperty!)), also prefixes elementwise function calls (calling &lt;x7/&gt;`broadcast`&lt;x8/&gt;)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T063536Z" creationid="hsugawa8651" creationdate="20181114T063536Z">
        <seg>オブジェクト/モジュールの名前付きフィールド(呼び出し&lt;x1/&gt;&lt;x2/&gt;&lt;x3/&gt;(@ref Base.getproperty)または&lt;x4/&gt;&lt;x6/&gt;&lt;x6/&gt;&lt;x6/&gt;&lt;x6/&gt;(@ref Base.setproperty!))は、要素関数呼び出し(&lt;x7/&gt;ブロードキャスト"&lt;x8/&gt;)を呼び出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>accurate &lt;x1/&gt;exp(x)-1&lt;x2/&gt; for &lt;x3/&gt;x&lt;x4/&gt; near zero</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T073533Z" creationid="hsugawa8651" creationdate="20181118T100026Z">
        <seg>0に近い &lt;x3/&gt;x&lt;x4/&gt;  に対する、 &lt;x1/&gt;exp(x)-1&lt;x2/&gt; の正確な値</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>accurate &lt;x1/&gt;log(1+x)&lt;x2/&gt; for &lt;x3/&gt;x&lt;x4/&gt; near zero</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T073820Z" creationid="hsugawa8651" creationdate="20181118T100053Z">
        <seg>0に近い &lt;x3/&gt;x&lt;x4/&gt;  に対する、正確な &lt;x1/&gt;log(1+x)&lt;x2/&gt;の値</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>accurate &lt;x1/&gt;log(beta(x,y))&lt;x2/&gt; for large &lt;x3/&gt;x&lt;x4/&gt; or &lt;x5/&gt;y&lt;x6/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T075128Z" creationid="hsugawa8651" creationdate="20181120T075128Z">
        <seg>大きな値 &lt;x3/&gt;x&lt;x4/&gt;  または &lt;x5/&gt;y&lt;x6/&gt;  に対する正確な &lt;x1/&gt;log(beta(x,y))&lt;x2/&gt;の値</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>accurate &lt;x1/&gt;log(factorial(x))&lt;x2/&gt; for large &lt;x3/&gt;x&lt;x4/&gt;; same as &lt;x5/&gt;lgamma(x+1)&lt;x6/&gt; for &lt;x7/&gt;x &gt; 1&lt;x8/&gt;, zero otherwise</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T075005Z" creationid="hsugawa8651" creationdate="20181120T075005Z">
        <seg>大きな値 &lt;x3/&gt;x&lt;x4/&gt;　に対する &lt;x1/&gt;log(factorial(x))&lt;x2/&gt;の正確な値； &lt;x7/&gt;x &gt; 1&lt;x8/&gt;に対して &lt;x5/&gt;lgamma(x+1)&lt;x6/&gt; と同じ。（でなければ0）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>accurate &lt;x1/&gt;log(gamma(x))&lt;x2/&gt; for large &lt;x3/&gt;x&lt;x4/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T074818Z" creationid="hsugawa8651" creationdate="20181120T074818Z">
        <seg>大きな値 &lt;x3/&gt;x&lt;x4/&gt; に対する  &lt;x1/&gt;log(gamma(x))&lt;x2/&gt; の正確な値</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>addone(x::Int) = x + 1                 &lt;x1/&gt; works only for Int
addone(x::Integer) = x + oneunit(x)    &lt;x2/&gt; any integer type
addone(x::Number) = x + oneunit(x)     &lt;x3/&gt; any numeric type
addone(x) = x + oneunit(x)             &lt;x4/&gt; any type supporting + and oneunit</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T094653Z" creationid="hsugawa8651" creationdate="20181120T094653Z">
        <seg>addone(x::Int) = x + 1                 &lt;x1/&gt; works only for Int
addone(x::Integer) = x + oneunit(x)    &lt;x2/&gt; any integer type
addone(x::Number) = x + oneunit(x)     &lt;x3/&gt; any numeric type
addone(x) = x + oneunit(x)             &lt;x4/&gt; any type supporting + and oneunit</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>an &lt;x1/&gt;Array&lt;x2/&gt; filled with the value &lt;x3/&gt;x&lt;x4/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T064443Z" creationid="hsugawa8651" creationdate="20181114T064443Z">
        <seg>&lt;x3/&gt;x&lt;x4/&gt;の値で満たされた&lt;x1/&gt;配列&lt;x2/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>an &lt;x1/&gt;Array&lt;x2/&gt; of all ones</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154358Z" creationid="hsugawa8651" creationdate="20181109T154358Z">
        <seg>全ての&lt;x1/&gt;アレイ&lt;x2/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>an &lt;x1/&gt;Array&lt;x2/&gt; of all zeros</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154354Z" creationid="hsugawa8651" creationdate="20181109T154354Z">
        <seg>すべてのゼロの&lt;x1/&gt;配列&lt;x2/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>an &lt;x1/&gt;Array&lt;x2/&gt; with random, iid &lt;x3/&gt;&lt;x4/&gt;&lt;x5/&gt; and uniformly distributed values in the half-open interval &lt;x6/&gt;[0, 1)&lt;x7/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154449Z" creationid="hsugawa8651" creationdate="20181109T154449Z">
        <seg>&lt;x1/&gt;配列&lt;x2/&gt;で、ランダムなiid&lt;x3/&gt;&lt;x4/&gt;&lt;x5/&gt;で、半オープン間隔&lt;x6/&gt;[0 1]&lt;x7/&gt;で均一に分布した値を示す。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>an &lt;x1/&gt;Array&lt;x2/&gt; with random, iid and standard normally distributed values</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154452Z" creationid="hsugawa8651" creationdate="20181109T154452Z">
        <seg>ランダムなiidと標準的な正規分布の値を持つ&lt;x1/&gt;配列&lt;x2/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>an array containing the same data as &lt;x1/&gt;A&lt;x2/&gt;, but with different dimensions</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154421Z" creationid="hsugawa8651" creationdate="20181109T154421Z">
        <seg>&lt;x1/&gt;A&lt;x2/&gt;と同じデータを含む配列であるが、異なる次元を含む配列</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>an array with the same binary data as &lt;x1/&gt;A&lt;x2/&gt;, but with element type &lt;x3/&gt;T&lt;x4/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154445Z" creationid="hsugawa8651" creationdate="20181109T154445Z">
        <seg>&lt;x1/&gt;A&lt;x2/&gt;と同じバイナリデータを持つ配列であるが、要素タイプ&lt;x3/&gt;T&lt;x4/&gt;である。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>an efficient iterator for visiting each position in &lt;x1/&gt;A&lt;x2/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154302Z" creationid="hsugawa8651" creationdate="20181109T154302Z">
        <seg>&lt;x1/&gt;A&lt;x2/&gt;の各位置を訪問するための効率的なイテレータ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>an uninitialized array of the same type as &lt;x1/&gt;A&lt;x2/&gt; (dense, sparse, etc.), but with the specified element type and dimensions.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154439Z" creationid="hsugawa8651" creationdate="20181109T154439Z">
        <seg>&lt;x1/&gt;A&lt;x2/&gt;(密、疎等)と同じタイプの初期化されていない配列ですが、指定されたエレメントタイプとディメンションがあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>an uninitialized array of the same type as &lt;x1/&gt;A&lt;x2/&gt; (dense, sparse, etc.), but with the specified element type and dimensions. The second and third arguments are both optional, defaulting to the element type and dimensions of &lt;x3/&gt;A&lt;x4/&gt; if omitted.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T134523Z" creationid="hsugawa8651" creationdate="20181117T134523Z">
        <seg>&lt;x1/&gt;A&lt;x2/&gt;(密、疎など)と同じタイプの初期化されていない配列ですが、指定された要素タイプと次元があります。2番目と3番目の引数は両方ともオプションで、&lt;x/&gt;A&lt;x4/&gt;の要素タイプと次元は省略されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>an uninitialized dense &lt;x1/&gt;`Array`&lt;x2/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154351Z" creationid="hsugawa8651" creationdate="20181109T154351Z">
        <seg>初期化されていない密な&lt;x1/&gt;`配列"&lt;x2/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>and can cause especial headaches with &lt;x1/&gt;&lt;x2/&gt;&lt;x3/&gt;(@ref man-multi-dim-arrays):</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T030531Z" creationid="hsugawa8651" creationdate="20181114T030531Z">
        <seg>また、&lt;x1/&gt;&lt;x2/&gt;&lt;x3/&gt;(@ref man multi dim arrayS)で特別な頭痛を引き起こす可能性があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>and can cause especial headaches with &lt;x1/&gt;Arrays&lt;x2/&gt;:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T064414Z" creationid="hsugawa8651" creationdate="20181120T064414Z">
        <seg>これは、 配列&lt;x1/&gt;Arrays&lt;x2/&gt;と共に理解に苦しむものかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>and compare how these results differ:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T015720Z" creationid="hsugawa8651" creationdate="20181116T015720Z">
        <seg>and compare how these results differ:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>and digits (0-9 and other characters in categories Nd/No), as well as other Unicode code points: diacritics and other modifying marks (categories Mn/Mc/Me/Sk), some punctuation connectors (category Pc), primes, and a few other characters.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T033302Z" creationid="hsugawa8651" creationdate="20181119T033302Z">
        <seg>！や数字（0から9とNd･Noカテゴリ内のその他の記号）、その他のUnicode符号点 （発音区別符号およびその他の修飾文字（Mn/Mc/Me/Skカテゴリ）、句読点コネクタ（Pcカテゴリ）、 プライム記号、その他の文字）を使用することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>and gets &lt;x1/&gt;2d15fe94-a1f7-436c-a4d8-07a9a496e01c&lt;x2/&gt;, which indicates that in the context of the &lt;x3/&gt;Pub&lt;x4/&gt; package, &lt;x5/&gt;import Priv&lt;x6/&gt; refers to the public &lt;x7/&gt;Priv&lt;x8/&gt; package, rather than the private one which the app depends on directly.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T121138Z" creationid="hsugawa8651" creationdate="20181118T121138Z">
        <seg>&lt;x1/&gt;2d15fe94-a1f7-436c-a4d8-07a9a496e01c&lt;x2/&gt;を取得します。&lt;x3/&gt;Pub&lt;x4/&gt;パッケージのコンテキストでは、&lt;x5/&gt;Import Priv&lt;x6/&gt;は、アプリケーションが直接依存するプライベートではなく、public&lt;x7/&gt;Priv&lt;x8/&gt;パッケージを指します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>and then&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T124403Z" creationid="hsugawa8651" creationdate="20181118T124403Z">
        <seg>そして&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>argument value must be a valid Julia object</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T151536Z" creationid="hsugawa8651" creationdate="20181117T151533Z">
        <seg>引数の値は有効なJuliaオブジェクトでなければなりません</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>argument value must be a valid Julia object (or &lt;x1/&gt;C_NULL&lt;x2/&gt;)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T151546Z" creationid="hsugawa8651" creationdate="20181117T151546Z">
        <seg>引数の値は有効なジュリアオブジェクトでなければなりません(または&lt;x1/&gt;C_NULL&lt;x2/&gt;)。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>argument value will be copied (passed by value)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T151515Z" creationid="hsugawa8651" creationdate="20181117T151515Z">
        <seg>引数の値がコピーされます(値によって渡されます)。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>argument value will be copied (returned by-value)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T151802Z" creationid="hsugawa8651" creationdate="20181117T151802Z">
        <seg>引数の値がコピーされます(値によって返されます)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>argument value will be copied if it is an &lt;x1/&gt;isbits&lt;x2/&gt; type otherwise, the value must be a valid Julia
object</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T151556Z" creationid="hsugawa8651" creationdate="20181117T151556Z">
        <seg>引数の値は、&lt;x1/&gt;イスビトス&lt;x2/&gt;の場合はコピーされます。それ以外の場合は、有効なジュリアである必要があります。 オブジェクト</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>arithmetic shift&lt;x1/&gt; right</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T063731Z" creationid="hsugawa8651" creationdate="20181118T095241Z">
        <seg>算術右桁送り</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>array indexing (calling &lt;x1/&gt;`getindex`&lt;x2/&gt; or &lt;x3/&gt;`setindex!`&lt;x4/&gt;)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T063044Z" creationid="hsugawa8651" creationdate="20181114T063044Z">
        <seg>array indexing (calling &lt;x1/&gt;`getindex`&lt;x2/&gt; or &lt;x3/&gt;`setindex!`&lt;x4/&gt;)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>as well as the negation on &lt;x1/&gt;`Bool`&lt;x2/&gt; types:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T063332Z" creationid="hsugawa8651" creationdate="20181118T095038Z">
        <seg>&lt;x1/&gt;`Bool`&lt;x2/&gt;(@ref) 型の否定形についても同様。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>at the end of a function name, &lt;x1/&gt;!&lt;x2/&gt; is used as a convention to indicate that a function modifies its argument(s)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T032245Z" creationid="hsugawa8651" creationdate="20181114T032245Z">
        <seg>関数名の最後に、&lt;x1/&gt;!&lt;x2/&gt;は関数がその引数を変更することを示す規則として使用されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>axes(A)&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T022510Z" creationid="hsugawa8651" creationdate="20181113T022510Z">
        <seg>axes(A)&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>b : c</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T124352Z" creationid="hsugawa8651" creationdate="20181118T124352Z">
        <seg>b : c</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>backslash operator</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T150256Z" creationid="hsugawa8651" creationdate="20181117T150256Z">
        <seg>バックスラッシュ演算子</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>bar(x::Integer) = x ^ 2&lt;x1/&gt; will do the same thing, but it is both simpler and faster.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T032213Z" creationid="hsugawa8651" creationdate="20181116T032213Z">
        <seg>bar(x::Integer)=x^2&lt;x1/&gt;は同じことを行いますが、どちらもより単純で速くなります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>base 10 logarithm of &lt;x1/&gt;x&lt;x2/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T073740Z" creationid="hsugawa8651" creationdate="20181118T100049Z">
        <seg>10 を底とした &lt;x1/&gt;x&lt;x2/&gt;の対数</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>base 2 logarithm of &lt;x1/&gt;x&lt;x2/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T073725Z" creationid="hsugawa8651" creationdate="20181118T100045Z">
        <seg>2 を底とした &lt;x1/&gt;x&lt;x2/&gt;の対数</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>base &lt;x1/&gt;b&lt;x2/&gt; logarithm of &lt;x3/&gt;x&lt;x4/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T073656Z" creationid="hsugawa8651" creationdate="20181118T100041Z">
        <seg>&lt;x1/&gt;b&lt;x2/&gt;  を底とした &lt;x3/&gt;x&lt;x4/&gt;の対数</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>begin multi-line comment (these are nestable)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T032254Z" creationid="hsugawa8651" creationdate="20181114T032254Z">
        <seg>複数行コメントを開始します(これらはnestableです)。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>begin single line comment</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T032249Z" creationid="hsugawa8651" creationdate="20181114T032249Z">
        <seg>単一行コメントを開始する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>beta function&lt;x1/&gt; at &lt;x2/&gt;x,y&lt;x3/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T075028Z" creationid="hsugawa8651" creationdate="20181120T075028Z">
        <seg>&lt;x2/&gt;x,y&lt;x3/&gt; に対する ベータ関数</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>binary exponent of &lt;x1/&gt;x&lt;x2/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T073856Z" creationid="hsugawa8651" creationdate="20181118T100057Z">
        <seg>2の &lt;x1/&gt;x&lt;x2/&gt;乗</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>binary minus</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T063152Z" creationid="hsugawa8651" creationdate="20181113T132019Z">
        <seg>２項減算</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>binary plus</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T063148Z" creationid="hsugawa8651" creationdate="20181113T132007Z">
        <seg>２項加算</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>binary significand (a.k.a.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T074032Z" creationid="hsugawa8651" creationdate="20181118T100100Z">
        <seg></seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>bitwise and</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T063632Z" creationid="hsugawa8651" creationdate="20181113T132241Z">
        <seg>ビット毎の論理積</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>bitwise not</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T063625Z" creationid="hsugawa8651" creationdate="20181118T095145Z">
        <seg>ビット毎の論理否定</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>bitwise not operator</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T150254Z" creationid="hsugawa8651" creationdate="20181117T150254Z">
        <seg>ビット単位の演算子</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>bitwise or</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T063637Z" creationid="hsugawa8651" creationdate="20181113T132250Z">
        <seg>ビット毎の論理和</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>bitwise xor (exclusive or)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T063655Z" creationid="hsugawa8651" creationdate="20181113T132300Z">
        <seg>ビット単位のXOR (排他的論理和)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>bitwise xor operator</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T150247Z" creationid="hsugawa8651" creationdate="20181117T150247Z">
        <seg>ビット単位のXOR演算子</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>bool&lt;x1/&gt; (only in C++)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T150906Z" creationid="hsugawa8651" creationdate="20181117T150906Z">
        <seg>bool&lt;x1/&gt; (only in C++)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>break&lt;x1/&gt; statement inside such a loop exits the entire nest of loops, not just the inner one.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T124536Z" creationid="hsugawa8651" creationdate="20181118T124536Z">
        <seg>このようなループ内のbreak&lt;x1/&gt;ステートメントは、内部だけではなくループのネスト全体を終了させます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>broadcast(f, args...)&lt;x1/&gt;, providing a convenient syntax to broadcast any function
(&lt;x2/&gt;&lt;x3/&gt;&lt;x4/&gt;(@ref man-vectorized)).</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T115833Z" creationid="hsugawa8651" creationdate="20181114T161321Z">
        <seg>ブロードキャスト(f,args.)&lt;x1/&gt;は、任意の関数をブロードキャストするための便利な構文を提供します。 (&lt;x2/&gt;&lt;x3/&gt;&lt;x4/&gt;(@ref man-vectorized))。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>broadcast(f, args...)&lt;x1/&gt;, providing a convenient syntax to broadcast any function
(&lt;x2/&gt;&lt;x3/&gt;&lt;x4/&gt;(@ref man-vectorized)). Nested "dot calls" &lt;x5/&gt;f.(...)&lt;x6/&gt; (including calls to &lt;x7/&gt;.+&lt;x8/&gt; etcetera)
&lt;x9/&gt;&lt;x10/&gt;&lt;x11/&gt;(@ref man-dot-operators) into a single &lt;x12/&gt;broadcast&lt;x13/&gt; call.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T135258Z" creationid="hsugawa8651" creationdate="20181117T135258Z">
        <seg>ブロードキャスト(f,args.)&lt;x1/&gt;は、任意の関数をブロードキャストするための便利な構文を提供します。 (&lt;x2/&gt;&lt;x3/&gt;&lt;x4/&gt;(@ref man vectorized))ネストされた"ドットコール"&lt;x5/&gt;f.(...)&lt;x6/&gt;(&lt;x7/&gt;.+&lt;x8/&gt;eteteraへの呼び出しを含む) &lt;x9/&gt;&lt;x10/&gt;&lt;x11/&gt;(@ref man dot演算子)は、単一の&lt;x12/&gt;ブロードキャスト・&lt;x13/&gt;コールに対して使用されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>broadcasted(::DefaultArrayStyle{1}, ::typeof(-), r::OrdinalRange) = range(-first(r), step=-step(r), length=length(r))</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T131627Z" creationid="hsugawa8651" creationdate="20181113T131627Z">
        <seg>broadcasted(::DefaultArrayStyle{1}, ::typeof(-), r::OrdinalRange) = range(-first(r), step=-step(r), length=length(r))</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>but</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T083140Z" creationid="hsugawa8651" creationdate="20181120T083140Z">
        <seg>しかし</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>ccall
Core.Intrinsics.cglobal
Base.@cfunction
Base.CFunction
Base.unsafe_convert
Base.cconvert
Base.unsafe_load
Base.unsafe_store!</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181110T042025Z" creationid="hsugawa8651" creationdate="20181110T042025Z">
        <seg>ccall
Core.Intrinsics.cglobal
Base.@cfunction
Base.CFunction
Base.unsafe_convert
Base.cconvert
Base.unsafe_load
Base.unsafe_store!</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>ccall using a threadpool (Experimental)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T044702Z" creationid="hsugawa8651" creationdate="20181112T044702Z">
        <seg>ccall using a threadpool (Experimental)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>ccall( (@static is_windows() ?</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T000656Z" creationid="hsugawa8651" creationdate="20181120T000656Z">
        <seg>ccall( (@static is_windows() ?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>ccall("llvm.nvvm.read.ptx.sreg.tid.x", llvmcall, Int32, ())</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T152453Z" creationid="hsugawa8651" creationdate="20181117T152453Z">
        <seg>ccall("llvm.nvvm.read.ptx.sreg.tid.x", llvmcall, Int32, ())</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>ccall((:foo, "libfoo"), Cvoid, (Int32, Float64),
      Base.unsafe_convert(Int32, Base.cconvert(Int32, x)),
      Base.unsafe_convert(Float64, Base.cconvert(Float64, y)))</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T022718Z" creationid="hsugawa8651" creationdate="20181116T022718Z">
        <seg>ccall((:foo, "libfoo"), Cvoid, (Int32, Float64),
      Base.unsafe_convert(Int32, Base.cconvert(Int32, x)),
      Base.unsafe_convert(Float64, Base.cconvert(Float64, y)))</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>ccall((:foo, "libfoo"), Cvoid, (Int32, Float64), x, y)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T022714Z" creationid="hsugawa8651" creationdate="20181116T022714Z">
        <seg>ccall((:foo, "libfoo"), Cvoid, (Int32, Float64), x, y)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>ccall((@static Sys.iswindows() ?</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T031926Z" creationid="hsugawa8651" creationdate="20181114T031926Z">
        <seg>ccall((@static Sys.iswindows() ?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>ccall(sym, ...) &lt;x3/&gt; Use the pointer `sym` instead of the (symbol, library) tuple (remaining arguments are the same).</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T152406Z" creationid="hsugawa8651" creationdate="20181117T152406Z">
        <seg>ccall(sym, ...)&lt;x3/&gt;(シンボル、ライブラリ)タプルの代わりにポインタ`sym'を使用します(残りの引数は同じです)。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>ccall&lt;x1/&gt; / &lt;x2/&gt;@cfunction&lt;x3/&gt; argument translation guide</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T151500Z" creationid="hsugawa8651" creationdate="20181117T151500Z">
        <seg>ccall&lt;x1/&gt;/&lt;x2/&gt;@cfunction&lt;x3/&gt;引数変換ガイド</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>ccall&lt;x1/&gt; / &lt;x2/&gt;@cfunction&lt;x3/&gt; return type translation guide</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T151737Z" creationid="hsugawa8651" creationdate="20181117T151734Z">
        <seg>ccall&lt;x1/&gt;/&lt;x2/&gt;@cfunction&lt;x3/&gt;return type translation guide</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>ceiling division; quotient rounded towards &lt;x1/&gt;+Inf&lt;x2/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T071850Z" creationid="hsugawa8651" creationdate="20181118T095829Z">
        <seg>天井整商; &lt;x1/&gt;+Inf&lt;x2/&gt; に向かって丸めた商</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>changes &lt;x1/&gt;true&lt;x2/&gt; to &lt;x3/&gt;false&lt;x4/&gt; and vice versa</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T063426Z" creationid="hsugawa8651" creationdate="20181113T132157Z">
        <seg>&lt;x1/&gt;true&lt;x2/&gt;を&lt;x3/&gt;false&lt;x4/&gt;に変える。または、その逆。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>char*&lt;x1/&gt; to a C routine that does not assume NUL termination (e.g. because you pass an explicit
string length), or if you know for certain that your Julia string does not contain NUL and want
to skip the check, you can use &lt;x2/&gt;Ptr{UInt8}&lt;x3/&gt; as the argument type.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T150952Z" creationid="hsugawa8651" creationdate="20181117T150952Z">
        <seg>char*&lt;x1/&gt;はNUL終了を想定していないCルーチンに対して(例えば明示的なものを渡すなど) 文字列の長さ)、またはJulia文字列にNULが含まれていないことがわかっている場合は このチェックをスキップするには、引数のタイプとして&lt;x2/&gt;Ptr{UInt8}&lt;x3/&gt;を使用できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>clock&lt;x1/&gt; takes no arguments and returns an &lt;x2/&gt;`Int32`&lt;x3/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T224034Z" creationid="hsugawa8651" creationdate="20181109T224034Z">
        <seg>クロック&lt;x1/&gt;は引数を取らず、&lt;x2/&gt;`Int32`&lt;x3/&gt;を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>clock&lt;x1/&gt; takes no arguments and returns an &lt;x2/&gt;`Int32`&lt;x3/&gt;. One common gotcha is that a 1-tuple must be
written with a trailing comma. For example, to call the &lt;x4/&gt;getenv&lt;x5/&gt; function to get a pointer to
the value of an environment variable, one makes a call like this:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T134117Z" creationid="hsugawa8651" creationdate="20181117T134117Z">
        <seg>clock&lt;x1/&gt;は引数を取らず、&lt;x2/&gt;`Int32`&lt;x3/&gt;を返します。1つの一般的なgotchaは1タプルを必要とします。 は、次のように記述されます。たとえば、&lt;x4/&gt;getenv&lt;x5/&gt;関数を呼び出してポインタを取得するには、次のようにカンマで区切ります。 環境変数の値は、次のような呼び出しを行います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>complex transpose operator Aᴴ</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T063021Z" creationid="hsugawa8651" creationdate="20181114T063021Z">
        <seg>複素転置演算子Aᴴ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>complex(float(x))</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T021143Z" creationid="hsugawa8651" creationdate="20181116T021143Z">
        <seg>complex(float(x))</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>complexfunction(arg::Int) = ...
complexfunction(arg::Any) = complexfunction(convert(Int, arg))

matmul(a::T, b::T) = ...
matmul(a, b) = matmul(promote(a, b)...)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T054308Z" creationid="hsugawa8651" creationdate="20181116T054308Z">
        <seg>complexfunction(arg::Int) = ...
complexfunction(arg::Any) = complexfunction(convert(Int, arg))

matmul(a::T, b::T) = ...
matmul(a, b) = matmul(promote(a, b)...)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>concatenate input arrays along dimension(s) &lt;x1/&gt;k&lt;x2/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154549Z" creationid="hsugawa8651" creationdate="20181109T154549Z">
        <seg>次元に沿って入力配列を連結する&lt;x1/&gt;k&lt;x2/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>cond = Base.AsyncCondition()
wait(cond)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T152629Z" creationid="hsugawa8651" creationdate="20181117T152629Z">
        <seg>cond = Base.AsyncCondition()
wait(cond)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>const m128 = NTuple{4,VecElement{Float32}}

function add(a::m128, b::m128)
    (VecElement(a[1].value+b[1].value),
     VecElement(a[2].value+b[2].value),
     VecElement(a[3].value+b[3].value),
     VecElement(a[4].value+b[4].value))
end

triple(c::m128) = add(add(c,c),c)

code_native(triple,(m128,))</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T044828Z" creationid="hsugawa8651" creationdate="20181112T044828Z">
        <seg>const m128 = NTuple{4,VecElement{Float32}}

function add(a::m128, b::m128)
    (VecElement(a[1].value+b[1].value),
     VecElement(a[2].value+b[2].value),
     VecElement(a[3].value+b[3].value),
     VecElement(a[4].value+b[4].value))
end

triple(c::m128) = add(add(c,c),c)

code_native(triple,(m128,))</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>const m256 = NTuple{8, VecElement{Float32}}

a = m256(ntuple(i -&gt; VecElement(sin(Float32(i))), 8))
b = m256(ntuple(i -&gt; VecElement(cos(Float32(i))), 8))

function call_dist(a::m256, b::m256)
    ccall((:dist, "libdist"), m256, (m256, m256), a, b)
end

println(call_dist(a,b))</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T151326Z" creationid="hsugawa8651" creationdate="20181117T151326Z">
        <seg>const m256 = NTuple{8, VecElement{Float32}}

a = m256(ntuple(i -&gt; VecElement(sin(Float32(i))), 8))
b = m256(ntuple(i -&gt; VecElement(cos(Float32(i))), 8))

function call_dist(a::m256, b::m256)
    ccall((:dist, "libdist"), m256, (m256, m256), a, b)
end

println(call_dist(a,b))</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>copy &lt;x1/&gt;A&lt;x2/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T064416Z" creationid="hsugawa8651" creationdate="20181109T154430Z">
        <seg>copy &lt;x1/&gt;A&lt;x2/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>copy &lt;x1/&gt;A&lt;x2/&gt;, recursively copying its elements</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154435Z" creationid="hsugawa8651" creationdate="20181109T154435Z">
        <seg>&lt;x1/&gt;A&lt;x2/&gt;をコピーして、その要素を再帰的にコピーする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>copyto!(dest, bc::Broadcasted{DestStyle})</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T131647Z" creationid="hsugawa8651" creationdate="20181113T131647Z">
        <seg>copyto!(dest, bc::Broadcasted{DestStyle})</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>copyto!(dest::DestType, bc::Broadcasted{Nothing})</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T131658Z" creationid="hsugawa8651" creationdate="20181113T131658Z">
        <seg>copyto!(dest::DestType, bc::Broadcasted{Nothing})</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>cube root of &lt;x1/&gt;x&lt;x2/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T073235Z" creationid="hsugawa8651" creationdate="20181118T100014Z">
        <seg>&lt;x1/&gt;x&lt;x2/&gt;の立方根</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>currently unsupported by &lt;x1/&gt;@cfunction&lt;x2/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T151722Z" creationid="hsugawa8651" creationdate="20181117T151722Z">
        <seg>現在は&lt;x1/&gt;@cfunction&lt;x2/&gt;によってサポートされていません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>defalg(v::AbstractArray) = MergeSort
defalg(v::AbstractArray{&lt;:Number}) = QuickSort</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T064228Z" creationid="hsugawa8651" creationdate="20181114T064228Z">
        <seg>defalg(v::AbstractArray) = MergeSort
defalg(v::AbstractArray{&lt;:Number}) = QuickSort</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>defined in terms of scalar &lt;x1/&gt;getindex&lt;x2/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T164736Z" creationid="hsugawa8651" creationdate="20181118T164736Z">
        <seg>スカラー&lt;x1/&gt;getindex&lt;x2/&gt;の観点から定義されている</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>defined in terms of scalar &lt;x1/&gt;setindex!&lt;x2/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T022349Z" creationid="hsugawa8651" creationdate="20181113T022349Z">
        <seg>スカラー&lt;x1/&gt;setindex!&lt;x2/&gt;の観点から定義されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>delimit character literals</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T063521Z" creationid="hsugawa8651" creationdate="20181114T063521Z">
        <seg>文字リテラルを区切る</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>delimit external process (command) specifications</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T063525Z" creationid="hsugawa8651" creationdate="20181114T063525Z">
        <seg>外部プロセス(コマンド)仕様の境界指定</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>delimit string literals</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T063507Z" creationid="hsugawa8651" creationdate="20181114T063507Z">
        <seg>文字列リテラルを区切る</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>den::T&lt;x1/&gt; indicate that the data held in a &lt;x2/&gt;OurRational{T}&lt;x3/&gt; object are a pair of integers of type
&lt;x4/&gt;T&lt;x5/&gt;, one representing the rational value's numerator and the other representing its denominator.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T124115Z" creationid="hsugawa8651" creationdate="20181118T124115Z">
        <seg>den::T&lt;x1/&gt;は、&lt;x2/&gt;OurRational{T}&lt;x3/&gt;オブジェクトに保持されたデータが、型の整数のペアであることを示します。 &lt;x4/&gt;T&lt;x5/&gt;。有理値の分子を表し、もう一方は分母を表します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>depends on how this parameter is used, first translate this to the intended pointer type, then
determine the Julia equivalent using the remaining rules in this list</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T151525Z" creationid="hsugawa8651" creationdate="20181117T151525Z">
        <seg>このパラメータがどのように使用されるかによって異なります。まず、このパラメータを目的のポインタ・タイプに変換します。 このリストの残りのルールを使用して、Julia equivalentを決定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>desc : desc == "" ?</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T022220Z" creationid="hsugawa8651" creationdate="20181116T022220Z">
        <seg>desc : desc == "" ?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>dest&lt;x1/&gt; or the specific subtype of &lt;x2/&gt;bc&lt;x3/&gt;,
to avoid ambiguities between packages we recommend the following convention.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T131641Z" creationid="hsugawa8651" creationdate="20181113T131641Z">
        <seg>dest&lt;x1/&gt;または&lt;x2/&gt;bc&lt;x3/&gt;の特定のサブタイプ パッケージ間の曖昧さを避けるために、次の規則が推奨されています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>dims&lt;x1/&gt; argument (ordinarily a &lt;x2/&gt;Dims&lt;x3/&gt; size-tuple) can accept &lt;x4/&gt;AbstractUnitRange&lt;x5/&gt; objects,
perhaps range-types &lt;x6/&gt;Ind&lt;x7/&gt; of your own design.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T083418Z" creationid="hsugawa8651" creationdate="20181113T083418Z">
        <seg>&lt;x1/&gt;引数(通常は&lt;x2/&gt;Dimms&lt;x3/&gt;サイズのタプル)は&lt;x4/&gt;AbstractUnitRange&lt;x5/&gt;オブジェクトを受け入れることができます。 独自の設計では、おそらく範囲のタイプは&lt;x6/&gt;Ind&lt;x7/&gt;です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>divide</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T094914Z" creationid="hsugawa8651" creationdate="20181113T132049Z">
        <seg>除算</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>does&lt;x1/&gt; appear in the manifest file.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T121146Z" creationid="hsugawa8651" creationdate="20181118T121146Z">
        <seg>&lt;x1/&gt;はマニフェストファイルに表示されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>double&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T110238Z" creationid="hsugawa8651" creationdate="20181112T110238Z">
        <seg>double&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>eltype(::Type{AbstractArray{T, N} where {T&lt;:S, N&lt;:M}}) where {M, S} = Any
eltype(::Type{AbstractArray{T, N} where {T&lt;:S}}) where {N, S} = Any
eltype(::Type{AbstractArray{T, N} where {N&lt;:M}}) where {M, T} = T
eltype(::Type{AbstractArray{T, N}}) where {T, N} = T
eltype(::Type{A}) where {A &lt;: AbstractArray} = eltype(supertype(A))</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T054140Z" creationid="hsugawa8651" creationdate="20181116T054140Z">
        <seg>eltype(::Type{AbstractArray{T, N} where {T&lt;:S, N&lt;:M}}) where {M, S} = Any
eltype(::Type{AbstractArray{T, N} where {T&lt;:S}}) where {N, S} = Any
eltype(::Type{AbstractArray{T, N} where {N&lt;:M}}) where {M, T} = T
eltype(::Type{AbstractArray{T, N}}) where {T, N} = T
eltype(::Type{A}) where {A &lt;: AbstractArray} = eltype(supertype(A))</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>eltype(IterType)&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T112156Z" creationid="hsugawa8651" creationdate="20181112T112156Z">
        <seg>eltype(IterType)&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>eltype_wrong(::Type{A}) where {A&lt;:AbstractArray} = A.parameters[1]</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T054146Z" creationid="hsugawa8651" creationdate="20181116T054146Z">
        <seg>eltype_wrong(::Type{A}) where {A&lt;:AbstractArray} = A.parameters[1]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>end
end
using Bar</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181110T025208Z" creationid="hsugawa8651" creationdate="20181110T025208Z">
        <seg>end
end
using Bar</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>end
mycompare (generic function with 1 method)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T133233Z" creationid="hsugawa8651" creationdate="20181117T133233Z">
        <seg>end
mycompare (generic function with 1 method)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>end multi-line comment</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T032303Z" creationid="hsugawa8651" creationdate="20181114T032303Z">
        <seg>複数行コメント</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>equality</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T064058Z" creationid="hsugawa8651" creationdate="20181118T095405Z">
        <seg>等しい</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>equivalent to &lt;x1/&gt;--code-coverage=user&lt;x2/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T224802Z" creationid="hsugawa8651" creationdate="20181109T224802Z">
        <seg>&lt;x1/&gt;--code coverage=user&lt;x2/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>equivalent to &lt;x1/&gt;--track-allocation=user&lt;x2/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T224807Z" creationid="hsugawa8651" creationdate="20181109T224807Z">
        <seg>&lt;x1/&gt;に相当する--トラック割り当て=ユーザ&lt;x2/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>equivalent to &lt;x1/&gt;rem(x,y)&lt;x2/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T063312Z" creationid="hsugawa8651" creationdate="20181113T132147Z">
        <seg>&lt;x1/&gt;rem(x,y)&lt;x2/&gt;と同等</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>equivalent to &lt;x1/&gt;y / x&lt;x2/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T063230Z" creationid="hsugawa8651" creationdate="20181113T132124Z">
        <seg>&lt;x1/&gt;y/x&lt;x2/&gt;と同等</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>error("out of order") : new(x,y)
       end</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T155746Z" creationid="hsugawa8651" creationdate="20181117T155746Z">
        <seg>error("out of order") : new(x,y)
       end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>eval&lt;x1/&gt; only operates at the top level,
so within this expression local variables will not be available (unless their values are substituted
with &lt;x2/&gt;$&lt;x3/&gt;).</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T152309Z" creationid="hsugawa8651" creationdate="20181117T152309Z">
        <seg>eval&lt;x1/&gt;は最上位レベルでのみ動作します。 この式では、ローカル変数は使用できません(値が代入されない限り)。 &lt;x2/&gt;$&lt;x3/&gt;となります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>ex : msgs[1]
           msg = string(msg_body)
           return :($ex ?</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T015439Z" creationid="hsugawa8651" creationdate="20181116T015439Z">
        <seg>ex : msgs[1]
           msg = string(msg_body)
           return :($ex ?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>exp(-x) : throw(DomainError(x, "argument must be nonnegative"))
f (generic function with 1 method)

julia&gt; f(1)
0.36787944117144233

julia&gt; f(-1)
ERROR: DomainError with -1:
argument must be nonnegative
Stacktrace:
 [1] f(::Int64) at ./none:1</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T124633Z" creationid="hsugawa8651" creationdate="20181118T124633Z">
        <seg>exp(-x) : throw(DomainError(x, "argument must be nonnegative"))
f (generic function with 1 method)

julia&gt; f(1)
0.36787944117144233

julia&gt; f(-1)
ERROR: DomainError with -1:
argument must be nonnegative
Stacktrace:
 [1] f(::Int64) at ./none:1</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>expm1, log1p, erfc&lt;x1/&gt;,
and &lt;x2/&gt;hypot&lt;x3/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T074421Z" creationid="hsugawa8651" creationdate="20181118T100107Z">
        <seg>expm1、 log1p、erfc および hypot に関するJohn D. Cookのブログ記事を参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>exponent operator</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T032314Z" creationid="hsugawa8651" creationdate="20181114T032314Z">
        <seg>指数演算子</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>f(a,b) = a+2b
f(a) = f(a,2)
f() = f(1,2)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T054330Z" creationid="hsugawa8651" creationdate="20181116T054330Z">
        <seg>f(a,b) = a+2b
f(a) = f(a,2)
f() = f(1,2)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>f(a::Int,b::Int) = a-2b</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T054335Z" creationid="hsugawa8651" creationdate="20181116T054335Z">
        <seg>f(a::Int,b::Int) = a-2b</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>f(a=1,b=2) = a+2b</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T054328Z" creationid="hsugawa8651" creationdate="20181116T054328Z">
        <seg>f(a=1,b=2) = a+2b</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>f(x, y::Int) = 1
f(x::Int, y) = 2</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T054405Z" creationid="hsugawa8651" creationdate="20181116T054405Z">
        <seg>f(x, y::Int) = 1
f(x::Int, y) = 2</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>f(x::A, y) = _fA(x, y)
f(x::B, y) = _fB(x, y)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T054442Z" creationid="hsugawa8651" creationdate="20181116T054442Z">
        <seg>f(x::A, y) = _fA(x, y)
f(x::B, y) = _fB(x, y)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>f(x::A, y::A) = ...
f(x, y) = f(g(x), g(y))</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T054432Z" creationid="hsugawa8651" creationdate="20181116T054432Z">
        <seg>f(x::A, y::A) = ...
f(x, y) = f(g(x), g(y))</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>f(x::A, y::A) = ...
f(x::A, y::B) = ...
f(x::B, y::A) = ...
f(x::B, y::B) = ...</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T054430Z" creationid="hsugawa8651" creationdate="20181116T054430Z">
        <seg>f(x::A, y::A) = ...
f(x::A, y::B) = ...
f(x::B, y::A) = ...
f(x::B, y::B) = ...</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>f(x::Int, y::Int) = 3</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T054407Z" creationid="hsugawa8651" creationdate="20181116T054407Z">
        <seg>f(x::Int, y::Int) = 3</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>f(x::NTuple{N,Int}) where {N} = 1
f(x::NTuple{N,Float64}) where {N} = 2</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T054413Z" creationid="hsugawa8651" creationdate="20181116T054413Z">
        <seg>f(x::NTuple{N,Int}) where {N} = 1
f(x::NTuple{N,Float64}) where {N} = 2</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>f(x::T, y::T) where {T} = ...
f(x, y) = f(promote(x, y)...)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T054439Z" creationid="hsugawa8651" creationdate="20181116T054439Z">
        <seg>f(x::T, y::T) where {T} = ...
f(x, y) = f(promote(x, y)...)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>f(x::Tuple{}) = 3</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T054426Z" creationid="hsugawa8651" creationdate="20181116T054426Z">
        <seg>f(x::Tuple{}) = 3</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>f.(args...)&lt;x1/&gt; calls are &lt;x2/&gt;fused&lt;x3/&gt; into a single &lt;x4/&gt;broadcast&lt;x5/&gt; loop.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T120132Z" creationid="hsugawa8651" creationdate="20181118T120132Z">
        <seg>f.(args.…)&lt;x1/&gt;コールは、&lt;x2/&gt;の融合&lt;x3/&gt;を単一の&lt;x4/&gt;ブロードキャスト・&lt;x5/&gt;ループに&lt;x2/&gt;融合させます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>f.(args...)&lt;x1/&gt; calls are encountered.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T120141Z" creationid="hsugawa8651" creationdate="20181118T120141Z">
        <seg>f.(args.)&lt;x1/&gt;呼び出しが検出されました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>f&lt;x1/&gt; and &lt;x2/&gt;args&lt;x3/&gt;, describing the function and argument list, respectively.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T131342Z" creationid="hsugawa8651" creationdate="20181113T131342Z">
        <seg>f&lt;x1/&gt;と&lt;x2/&gt;args&lt;x3/&gt;は、関数と引数リストをそれぞれ記述しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>false : even(n - 1);

julia&gt; even(3)
false

julia&gt; odd(3)
true</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T022336Z" creationid="hsugawa8651" creationdate="20181116T022336Z">
        <seg>false : even(n - 1);

julia&gt; even(3)
false

julia&gt; odd(3)
true</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>false&lt;x1/&gt; (0)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T110221Z" creationid="hsugawa8651" creationdate="20181112T110221Z">
        <seg>false&lt;x1/&gt; (0)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>fill the array &lt;x1/&gt;A&lt;x2/&gt; with the value &lt;x3/&gt;x&lt;x4/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154507Z" creationid="hsugawa8651" creationdate="20181109T154507Z">
        <seg>&lt;x3/&gt;x&lt;x4/&gt;の値を持つ配列&lt;x1/&gt;A&lt;x2/&gt;を配列に埋め込みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>firstindex(X)&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T001115Z" creationid="hsugawa8651" creationdate="20181120T001115Z">
        <seg>firstindex(X)&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>fix_combining_chars(char) : "$char")
        end
        push!(entries, [
            join(code_points, " + "), join(characters),
            join(inputs, ", "), join(unicode_names, " + ")
        ])
    end
    return Markdown.Table(entries, [:l, :l, :l, :l])
end

table_entries(
    tab_completions(
        REPL.REPLCompletions.latex_symbols,
        REPL.REPLCompletions.emoji_symbols
    ),
    unicode_data()
)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T022233Z" creationid="hsugawa8651" creationdate="20181116T022233Z">
        <seg>fix_combining_chars(char) : "$char")
        end
        push!(entries, [
            join(code_points, " + "), join(characters),
            join(inputs, ", "), join(unicode_names, " + ")
        ])
    end
    return Markdown.Table(entries, [:l, :l, :l, :l])
end

table_entries(
    tab_completions(
        REPL.REPLCompletions.latex_symbols,
        REPL.REPLCompletions.emoji_symbols
    ),
    unicode_data()
)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>floored division; quotient rounded towards &lt;x1/&gt;-Inf&lt;x2/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T071821Z" creationid="hsugawa8651" creationdate="20181118T095825Z">
        <seg>床整商; &lt;x1/&gt;-Inf&lt;x2/&gt; に向かって丸めた商</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>foo(::Type{MyType}) = ...
foo(::MyType) = foo(MyType)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T021333Z" creationid="hsugawa8651" creationdate="20181116T021333Z">
        <seg>foo(::Type{MyType}) = ...
foo(::MyType) = foo(MyType)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>foo(x::Real) = ...</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T021327Z" creationid="hsugawa8651" creationdate="20181116T021327Z">
        <seg>foo(x::Real) = ...</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>foo(x::T) where {T&lt;:Real} = ...</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T021324Z" creationid="hsugawa8651" creationdate="20181116T021324Z">
        <seg>foo(x::T) where {T&lt;:Real} = ...</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>for (f, op) in ((:add, :+), (:subtract, :-), (:multiply, :*), (:divide, :/))
    @eval begin
        $f(a,b) = $op(a,b)
    end
end
@doc "`add(a,b)` adds `a` and `b` together" add
@doc "`subtract(a,b)` subtracts `b` from `a`" subtract</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T020128Z" creationid="hsugawa8651" creationdate="20181116T020128Z">
        <seg>for (f, op) in ((:add, :+), (:subtract, :-), (:multiply, :*), (:divide, :/))
    @eval begin
        $f(a,b) = $op(a,b)
    end
end
@doc "`add(a,b)` adds `a` and `b` together" add
@doc "`subtract(a,b)` subtracts `b` from `a`" subtract</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>for a in A
    &lt;x1/&gt; Do something with the element a
end

for i in eachindex(A)
    &lt;x2/&gt; Do something with i and/or A[i]
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T155827Z" creationid="hsugawa8651" creationdate="20181109T155827Z">
        <seg>for a in A
    &lt;x1/&gt; Do something with the element a
end

for i in eachindex(A)
    &lt;x2/&gt; Do something with i and/or A[i]
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>for i in iter   &lt;x1/&gt; or  "for i = iter"
    &lt;x2/&gt; body
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181110T042045Z" creationid="hsugawa8651" creationdate="20181110T042045Z">
        <seg>for i in iter   &lt;x1/&gt; or  "for i = iter"
    &lt;x2/&gt; body
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>for line = lines
    m = match(r"^\s*(?:&lt;x1/&gt;|$)", line)
    if m === nothing
        &lt;x2/&gt; non-comment
    else
        &lt;x3/&gt; comment
    end
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T015629Z" creationid="hsugawa8651" creationdate="20181116T015629Z">
        <seg>for line = lines
    m = match(r"^\s*(?:&lt;x1/&gt;|$)", line)
    if m === nothing
        &lt;x2/&gt; non-comment
    else
        &lt;x3/&gt; comment
    end
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>for op = (:sin, :cos, :tan, :log, :exp)
    @eval Base.$op(a::MyNumber) = MyNumber($op(a.x))
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T015604Z" creationid="hsugawa8651" creationdate="20181116T015604Z">
        <seg>for op = (:sin, :cos, :tan, :log, :exp)
    @eval Base.$op(a::MyNumber) = MyNumber($op(a.x))
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>for op = (:sin, :cos, :tan, :log, :exp)
    eval(:(Base.$op(a::MyNumber) = MyNumber($op(a.x))))
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T015602Z" creationid="hsugawa8651" creationdate="20181116T015602Z">
        <seg>for op = (:sin, :cos, :tan, :log, :exp)
    eval(:(Base.$op(a::MyNumber) = MyNumber($op(a.x))))
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>for op = (:sin, :cos, :tan, :log, :exp)
    eval(quote
        Base.$op(a::MyNumber) = MyNumber($op(a.x))
    end)
end
&lt;x1/&gt; output</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T015540Z" creationid="hsugawa8651" creationdate="20181116T015540Z">
        <seg>for op = (:sin, :cos, :tan, :log, :exp)
    eval(quote
        Base.$op(a::MyNumber) = MyNumber($op(a.x))
    end)
end
&lt;x1/&gt; output</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>free(ptr)&lt;x1/&gt; when the returned &lt;x2/&gt;Array&lt;x3/&gt; object is finalized.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T152608Z" creationid="hsugawa8651" creationdate="20181117T152608Z">
        <seg>返された&lt;x2/&gt;アレイ&lt;x3/&gt;オブジェクトがファイナライズされたときに、フリー(ptr)&lt;x1/&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>from the REPL&lt;x1/&gt; work as expected,
being able to both see and call the new definition of &lt;x2/&gt;newfun&lt;x3/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T021034Z" creationid="hsugawa8651" creationdate="20181120T021034Z">
        <seg>newfunへの REPLからの今後の呼び出しは、期待通りに動作し、newfunの新しい定義を参照して呼び出すことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>function Base.similar(bc::Broadcast.Broadcasted{Broadcast.ArrayStyle{ArrayAndChar}}, ::Type{ElType}) where ElType
    &lt;x1/&gt; Scan the inputs for the ArrayAndChar:
    A = find_aac(bc)
    &lt;x2/&gt; Use the char field of A to create the output
    ArrayAndChar(similar(Array{ElType}, axes(bc)), A.char)
end

"`A = find_aac(As)` returns the first ArrayAndChar among the arguments."
find_aac(bc::Base.Broadcast.Broadcasted) = find_aac(bc.args)
find_aac(args::Tuple) = find_aac(find_aac(args[1]), Base.tail(args))
find_aac(x) = x
find_aac(a::ArrayAndChar, rest) = a
find_aac(::Any, rest) = find_aac(rest)
&lt;x3/&gt; output
find_aac (generic function with 5 methods)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T131423Z" creationid="hsugawa8651" creationdate="20181113T131423Z">
        <seg>function Base.similar(bc::Broadcast.Broadcasted{Broadcast.ArrayStyle{ArrayAndChar}}, ::Type{ElType}) where ElType
    &lt;x1/&gt; Scan the inputs for the ArrayAndChar:
    A = find_aac(bc)
    &lt;x2/&gt; Use the char field of A to create the output
    ArrayAndChar(similar(Array{ElType}, axes(bc)), A.char)
end

"`A = find_aac(As)` returns the first ArrayAndChar among the arguments."
find_aac(bc::Base.Broadcast.Broadcasted) = find_aac(bc.args)
find_aac(args::Tuple) = find_aac(find_aac(args[1]), Base.tail(args))
find_aac(x) = x
find_aac(a::ArrayAndChar, rest) = a
find_aac(::Any, rest) = find_aac(rest)
&lt;x3/&gt; output
find_aac (generic function with 5 methods)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>function Date(y::Int64, m::Int64=1, d::Int64=1)
    err = validargs(Date, y, m, d)
    err === nothing || throw(err)
    return Date(UTD(totaldays(y, m, d)))
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181110T030121Z" creationid="hsugawa8651" creationdate="20181110T030121Z">
        <seg>function Date(y::Int64, m::Int64=1, d::Int64=1)
    err = validargs(Date, y, m, d)
    err === nothing || throw(err)
    return Date(UTD(totaldays(y, m, d)))
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>function compute_dot(DX::Vector{Float64}, DY::Vector{Float64})
    @assert length(DX) == length(DY)
    n = length(DX)
    incx = incy = 1
    product = ccall((:ddot_, "libLAPACK"),
                    Float64,
                    (Ref{Int32}, Ptr{Float64}, Ref{Int32}, Ptr{Float64}, Ref{Int32}),
                    n, DX, incx, DY, incy)
    return product
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T151848Z" creationid="hsugawa8651" creationdate="20181117T151848Z">
        <seg>function compute_dot(DX::Vector{Float64}, DY::Vector{Float64})
    @assert length(DX) == length(DY)
    n = length(DX)
    incx = incy = 1
    product = ccall((:ddot_, "libLAPACK"),
                    Float64,
                    (Ref{Int32}, Ptr{Float64}, Ref{Int32}, Ptr{Float64}, Ref{Int32}),
                    n, DX, incx, DY, incy)
    return product
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>function double!(a::AbstractArray{&lt;:Number})
    for i = 1:endof(a)
        a[i] *= 2
    end
    return a
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T094712Z" creationid="hsugawa8651" creationdate="20181120T094712Z">
        <seg>function double!(a::AbstractArray{&lt;:Number})
    for i = 1:endof(a)
        a[i] *= 2
    end
    return a
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>function double!(a::AbstractArray{&lt;:Number})
    for i = firstindex(a):lastindex(a)
        a[i] *= 2
    end
    return a
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T021222Z" creationid="hsugawa8651" creationdate="20181116T021222Z">
        <seg>function double!(a::AbstractArray{&lt;:Number})
    for i = firstindex(a):lastindex(a)
        a[i] *= 2
    end
    return a
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>function double(a::AbstractArray{&lt;:Number})
    for i = 1:endof(a)
        a[i] *= 2
    end
    return a
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T094709Z" creationid="hsugawa8651" creationdate="20181120T094709Z">
        <seg>function double(a::AbstractArray{&lt;:Number})
    for i = 1:endof(a)
        a[i] *= 2
    end
    return a
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>function double(a::AbstractArray{&lt;:Number})
    for i = firstindex(a):lastindex(a)
        a[i] *= 2
    end
    return a
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T021219Z" creationid="hsugawa8651" creationdate="20181116T021219Z">
        <seg>function double(a::AbstractArray{&lt;:Number})
    for i = firstindex(a):lastindex(a)
        a[i] *= 2
    end
    return a
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>function f(;x::Int=1)
    &lt;x1/&gt;
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181110T030145Z" creationid="hsugawa8651" creationdate="20181110T030145Z">
        <seg>function f(;x::Int=1)
    &lt;x1/&gt;
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>function f(x, a=b, b=1)
    &lt;x1/&gt;
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181110T030205Z" creationid="hsugawa8651" creationdate="20181110T030205Z">
        <seg>function f(x, a=b, b=1)
    &lt;x1/&gt;
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>function f(x; y)
    &lt;x1/&gt;
end
f(3, y=5) &lt;x2/&gt; ok, y is assigned
f(3)      &lt;x3/&gt; throws UndefKeywordError(:y)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181110T030153Z" creationid="hsugawa8651" creationdate="20181110T030153Z">
        <seg>function f(x; y)
    &lt;x1/&gt;
end
f(3, y=5) &lt;x2/&gt; ok, y is assigned
f(3)      &lt;x3/&gt; throws UndefKeywordError(:y)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>function f(x; y=0, kwargs...)
    &lt;x1/&gt;
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181110T030148Z" creationid="hsugawa8651" creationdate="20181110T030148Z">
        <seg>function f(x; y=0, kwargs...)
    &lt;x1/&gt;
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>function foo(a,b)
    return a+b, a*b
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181110T030038Z" creationid="hsugawa8651" creationdate="20181110T030038Z">
        <seg>function foo(a,b)
    return a+b, a*b
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>function foo(x, y)
    x = Int(x); y = Int(y)
    ...
end
foo(x, y)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T021210Z" creationid="hsugawa8651" creationdate="20181116T021210Z">
        <seg>function foo(x, y)
    x = Int(x); y = Int(y)
    ...
end
foo(x, y)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>function foo(x::Int, y::Int)
    ...
end
foo(Int(x), Int(y))</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T021214Z" creationid="hsugawa8651" creationdate="20181116T021214Z">
        <seg>function foo(x::Int, y::Int)
    ...
end
foo(Int(x), Int(y))</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>function g(x,y)
    return x * y
    x + y
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181110T025734Z" creationid="hsugawa8651" creationdate="20181110T025734Z">
        <seg>function g(x,y)
    return x * y
    x + y
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>function getenv(var::AbstractString)
    val = ccall((:getenv, "libc"),
                Cstring, (Cstring,), var)
    if val == C_NULL
        error("getenv: undefined variable: ", var)
    end
    unsafe_string(val)
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T224118Z" creationid="hsugawa8651" creationdate="20181109T224118Z">
        <seg>function getenv(var::AbstractString)
    val = ccall((:getenv, "libc"),
                Cstring, (Cstring,), var)
    if val == C_NULL
        error("getenv: undefined variable: ", var)
    end
    unsafe_string(val)
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>function gethostname()
    hostname = Vector{UInt8}(undef, 128)
    ccall((:gethostname, "libc"), Int32,
          (Ptr{UInt8}, Csize_t),
          hostname, sizeof(hostname))
    hostname[end] = 0; &lt;x1/&gt; ensure null-termination
    return unsafe_string(pointer(hostname))
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T022628Z" creationid="hsugawa8651" creationdate="20181116T022628Z">
        <seg>function gethostname()
    hostname = Vector{UInt8}(undef, 128)
    ccall((:gethostname, "libc"), Int32,
          (Ptr{UInt8}, Csize_t),
          hostname, sizeof(hostname))
    hostname[end] = 0; &lt;x1/&gt; ensure null-termination
    return unsafe_string(pointer(hostname))
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>function getindex(A::AbstractArray{T,N}, indices::Vararg{Number,N}) where {T,N}</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T054322Z" creationid="hsugawa8651" creationdate="20181116T054322Z">
        <seg>function getindex(A::AbstractArray{T,N}, indices::Vararg{Number,N}) where {T,N}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>function matmul(a::AbstractMatrix, b::AbstractMatrix)
    op = (ai, bi) -&gt; ai * bi + ai * bi

    &lt;x1/&gt; this is insufficient because it assumes `one(eltype(a))` is constructable:
    &lt;x2/&gt; R = typeof(op(one(eltype(a)), one(eltype(b))))

    &lt;x3/&gt; this fails because it assumes `a[1]` exists and is representative of all elements of the array
    &lt;x4/&gt; R = typeof(op(a[1], b[1]))

    &lt;x5/&gt; this is incorrect because it assumes that `+` calls `promote_type`
    &lt;x6/&gt; but this is not true for some types, such as Bool:
    &lt;x7/&gt; R = promote_type(ai, bi)

    &lt;x8/&gt; this is wrong, since depending on the return value
    &lt;x9/&gt; of type-inference is very brittle (as well as not being optimizable):
    &lt;x10/&gt; R = Base.return_types(op, (eltype(a), eltype(b)))

    &lt;x11/&gt; but, finally, this works:
    R = promote_op(op, eltype(a), eltype(b))
    &lt;x12/&gt; although sometimes it may give a larger type than desired
    &lt;x13/&gt; it will always give a correct type

    output = similar(b, R, (size(a, 1), size(b, 2)))
    if size(a, 2) &gt; 0
        for j in 1:size(b, 2)
            for i in 1:size(b, 1)
                &lt;x14/&gt; here we don't use `ab = zero(R)`,
                &lt;x15/&gt; since `R` might be `Any` and `zero(Any)` is not defined
                &lt;x16/&gt; we also must declare `ab::R` to make the type of `ab` constant in the loop,
                &lt;x17/&gt; since it is possible that typeof(a * b) != typeof(a * b + a * b) == R
                ab::R = a[i, 1] * b[1, j]
                for k in 2:size(a, 2)
                    ab += a[i, k] * b[k, j]
                end
                output[i, j] = ab
            end
        end
    end
    return output
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T054234Z" creationid="hsugawa8651" creationdate="20181116T054234Z">
        <seg>function matmul(a::AbstractMatrix, b::AbstractMatrix)
    op = (ai, bi) -&gt; ai * bi + ai * bi

    &lt;x1/&gt; this is insufficient because it assumes `one(eltype(a))` is constructable:
    &lt;x2/&gt; R = typeof(op(one(eltype(a)), one(eltype(b))))

    &lt;x3/&gt; this fails because it assumes `a[1]` exists and is representative of all elements of the array
    &lt;x4/&gt; R = typeof(op(a[1], b[1]))

    &lt;x5/&gt; this is incorrect because it assumes that `+` calls `promote_type`
    &lt;x6/&gt; but this is not true for some types, such as Bool:
    &lt;x7/&gt; R = promote_type(ai, bi)

    &lt;x8/&gt; this is wrong, since depending on the return value
    &lt;x9/&gt; of type-inference is very brittle (as well as not being optimizable):
    &lt;x10/&gt; R = Base.return_types(op, (eltype(a), eltype(b)))

    &lt;x11/&gt; but, finally, this works:
    R = promote_op(op, eltype(a), eltype(b))
    &lt;x12/&gt; although sometimes it may give a larger type than desired
    &lt;x13/&gt; it will always give a correct type

    output = similar(b, R, (size(a, 1), size(b, 2)))
    if size(a, 2) &gt; 0
        for j in 1:size(b, 2)
            for i in 1:size(b, 1)
                &lt;x14/&gt; here we don't use `ab = zero(R)`,
                &lt;x15/&gt; since `R` might be `Any` and `zero(Any)` is not defined
                &lt;x16/&gt; we also must declare `ab::R` to make the type of `ab` constant in the loop,
                &lt;x17/&gt; since it is possible that typeof(a * b) != typeof(a * b + a * b) == R
                ab::R = a[i, 1] * b[1, j]
                for k in 2:size(a, 2)
                    ab += a[i, k] * b[k, j]
                end
                output[i, j] = ab
            end
        end
    end
    return output
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>function myfilter(A, kernel, ::Replicate)
    Apadded = replicate_edges(A, size(kernel))
    myfilter(Apadded, kernel)  &lt;x1/&gt; now perform the "real" computation
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T054456Z" creationid="hsugawa8651" creationdate="20181116T054456Z">
        <seg>function myfilter(A, kernel, ::Replicate)
    Apadded = replicate_edges(A, size(kernel))
    myfilter(Apadded, kernel)  &lt;x1/&gt; now perform the "real" computation
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>function myplus(x,y)
    x+y
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T021608Z" creationid="hsugawa8651" creationdate="20181116T021608Z">
        <seg>function myplus(x,y)
    x+y
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>function myplus(x::Int,y::Int)
    x+y
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T021612Z" creationid="hsugawa8651" creationdate="20181116T021612Z">
        <seg>function myplus(x::Int,y::Int)
    x+y
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>function norm(p::Point{&lt;:Real})
    sqrt(p.x^2 + p.y^2)
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T021803Z" creationid="hsugawa8651" creationdate="20181116T021803Z">
        <seg>function norm(p::Point{&lt;:Real})
    sqrt(p.x^2 + p.y^2)
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>function norm(p::Point{Real})
    sqrt(p.x^2 + p.y^2)
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T095115Z" creationid="hsugawa8651" creationdate="20181120T095115Z">
        <seg>function norm(p::Point{Real})
    sqrt(p.x^2 + p.y^2)
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>function open(f::Function, args...)
    io = open(args...)
    try
        f(io)
    finally
        close(io)
    end
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181110T030220Z" creationid="hsugawa8651" creationdate="20181110T030220Z">
        <seg>function open(f::Function, args...)
    io = open(args...)
    try
        f(io)
    finally
        close(io)
    end
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>function plot(x, y; style="solid", width=1, color="black")
    &lt;x1/&gt;
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181110T030138Z" creationid="hsugawa8651" creationdate="20181110T030138Z">
        <seg>function plot(x, y; style="solid", width=1, color="black")
    &lt;x1/&gt;
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>function qsort(a::Vector{T}, cmp) where T
    isbits(T) || throw(ArgumentError("this method can only qsort isbits arrays"))
    callback = @cfunction $cmp Cint (Ref{T}, Ref{T})
    &lt;x1/&gt; Here, `callback` isa Base.CFunction, which will be converted to Ptr{Cvoid}
    &lt;x2/&gt; (and protected against finalization) by the ccall
    ccall(:qsort, Cvoid, (Ptr{T}, Csize_t, Csize_t, Ptr{Cvoid}),
        a, length(a), Base.elsize(a), callback)
    &lt;x3/&gt; We could instead use:
    &lt;x4/&gt;    GC.@preserve callback begin
    &lt;x5/&gt;        use(Base.unsafe_convert(Ptr{Cvoid}, callback))
    &lt;x6/&gt;    end
    &lt;x7/&gt; if we needed to use it outside of a `ccall`
    return a
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T152345Z" creationid="hsugawa8651" creationdate="20181117T152345Z">
        <seg>function qsort(a::Vector{T}, cmp) where T
    isbits(T) || throw(ArgumentError("this method can only qsort isbits arrays"))
    callback = @cfunction $cmp Cint (Ref{T}, Ref{T})
    &lt;x1/&gt; Here, `callback` isa Base.CFunction, which will be converted to Ptr{Cvoid}
    &lt;x2/&gt; (and protected against finalization) by the ccall
    ccall(:qsort, Cvoid, (Ptr{T}, Csize_t, Csize_t, Ptr{Cvoid}),
        a, length(a), Base.elsize(a), callback)
    &lt;x3/&gt; We could instead use:
    &lt;x4/&gt;    GC.@preserve callback begin
    &lt;x5/&gt;        use(Base.unsafe_convert(Ptr{Cvoid}, callback))
    &lt;x6/&gt;    end
    &lt;x7/&gt; if we needed to use it outside of a `ccall`
    return a
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>function sinc(x)::Float64
    if x == 0
        return 1
    end
    return sin(pi*x)/(pi*x)
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T021540Z" creationid="hsugawa8651" creationdate="20181116T021540Z">
        <seg>function sinc(x)::Float64
    if x == 0
        return 1
    end
    return sin(pi*x)/(pi*x)
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>function sub2ind_gen(dims::NTuple{N}, I::Integer...) where N
    if N != length(I)
        throw(ArgumentError("Number of dimensions must match number of indices."))
    end
    if @generated
        ex = :(I[$N] - 1)
        for i = (N - 1):-1:1
            ex = :(I[$i] - 1 + dims[$i] * $ex)
        end
        return :($ex + 1)
    else
        ind = I[N] - 1
        for i = (N - 1):-1:1
            ind = I[i] - 1 + dims[i]*ind
        end
        return ind + 1
    end
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T032354Z" creationid="hsugawa8651" creationdate="20181116T032354Z">
        <seg>function sub2ind_gen(dims::NTuple{N}, I::Integer...) where N
    if N != length(I)
        throw(ArgumentError("Number of dimensions must match number of indices."))
    end
    if @generated
        ex = :(I[$N] - 1)
        for i = (N - 1):-1:1
            ex = :(I[$i] - 1 + dims[$i] * $ex)
        end
        return :($ex + 1)
    else
        ind = I[N] - 1
        for i = (N - 1):-1:1
            ind = I[i] - 1 + dims[i]*ind
        end
        return ind + 1
    end
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>g(x::A) = x</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T054437Z" creationid="hsugawa8651" creationdate="20181116T054437Z">
        <seg>g(x::A) = x</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>g., &lt;x7/&gt;√√-a&lt;x8/&gt; as &lt;x9/&gt;√(√(-a))&lt;x10/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T030932Z" creationid="hsugawa8651" creationdate="20181114T030932Z">
        <seg>g., &lt;x7/&gt;√√-a&lt;x8/&gt; as &lt;x9/&gt;√(√(-a))&lt;x10/&gt;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>gamma function&lt;x1/&gt; at &lt;x2/&gt;x&lt;x3/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T074825Z" creationid="hsugawa8651" creationdate="20181120T074740Z">
        <seg> &lt;x2/&gt;x&lt;x3/&gt; に対する ガンマ関数n&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>getenv&lt;x1/&gt; C library function is wrapped in the following Julia function,
which is a simplified version of the actual definition from &lt;x2/&gt;`env.jl`&lt;x3/&gt;:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T224115Z" creationid="hsugawa8651" creationdate="20181109T224115Z">
        <seg>getenv&lt;x1/&gt;Cライブラリ関数は、次のJulia関数にラップされています。 これは、&lt;x2/&gt;'env.jl'&lt;x3/&gt;からの実際の定義の簡略化されたバージョンです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>getindex(A, I...)&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T113332Z" creationid="hsugawa8651" creationdate="20181112T113332Z">
        <seg>getindex(A, I...)&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>getindex(A, I::Vararg{Int, N})&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T113231Z" creationid="hsugawa8651" creationdate="20181112T113231Z">
        <seg>getindex(A, I::Vararg{Int, N})&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>getindex(A, i::Int)&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T113222Z" creationid="hsugawa8651" creationdate="20181112T113222Z">
        <seg>getindex(A, i::Int)&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>getindex(A::ArrayType, i::Int)&lt;x1/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T022831Z" creationid="hsugawa8651" creationdate="20181113T022831Z">
        <seg>getindex(A::ArrayType, i::Int)&lt;x1/&gt;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>getindex(X, i)&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T112956Z" creationid="hsugawa8651" creationdate="20181112T112956Z">
        <seg>getindex(X, i)&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>getindex(x::NativeType, i) = unsafe_load(x.p, i)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T094811Z" creationid="hsugawa8651" creationdate="20181120T094811Z">
        <seg>getindex(x::NativeType, i) = unsafe_load(x.p, i)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>graph = Dict{UUID,Dict{Symbol,UUID}}(
    &lt;x1/&gt; Bobcat:
    UUID("85ad11c7-31f6-5d08-84db-0a4914d4cadf") =&gt; Dict{Symbol,UUID}(
        :Cobra =&gt; UUID("4725e24d-f727-424b-bca0-c4307a3456fa"),
        :Dingo =&gt; UUID("7a7925be-828c-4418-bbeb-bac8dfc843bc"),
    ),
    &lt;x2/&gt; Cobra:
    UUID("4725e24d-f727-424b-bca0-c4307a3456fa") =&gt; Dict{Symbol,UUID}(
        :Dingo =&gt; UUID("7a7925be-828c-4418-bbeb-bac8dfc843bc"),
    ),
    &lt;x3/&gt; Dingo:
    UUID("7a7925be-828c-4418-bbeb-bac8dfc843bc") =&gt; Dict{Symbol,UUID}(),
)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T015950Z" creationid="hsugawa8651" creationdate="20181116T015950Z">
        <seg>graph = Dict{UUID,Dict{Symbol,UUID}}(
    &lt;x1/&gt; Bobcat:
    UUID("85ad11c7-31f6-5d08-84db-0a4914d4cadf") =&gt; Dict{Symbol,UUID}(
        :Cobra =&gt; UUID("4725e24d-f727-424b-bca0-c4307a3456fa"),
        :Dingo =&gt; UUID("7a7925be-828c-4418-bbeb-bac8dfc843bc"),
    ),
    &lt;x2/&gt; Cobra:
    UUID("4725e24d-f727-424b-bca0-c4307a3456fa") =&gt; Dict{Symbol,UUID}(
        :Dingo =&gt; UUID("7a7925be-828c-4418-bbeb-bac8dfc843bc"),
    ),
    &lt;x3/&gt; Dingo:
    UUID("7a7925be-828c-4418-bbeb-bac8dfc843bc") =&gt; Dict{Symbol,UUID}(),
)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>graph = Dict{UUID,Dict{Symbol,UUID}}(
    &lt;x1/&gt; Priv – the private one:
    UUID("ba13f791-ae1d-465a-978b-69c3ad90f72b") =&gt; Dict{Symbol,UUID}(
        :Pub   =&gt; UUID("c07ecb7d-0dc9-4db7-8803-fadaaeaf08e1"),
        :Zebra =&gt; UUID("f7a24cb4-21fc-4002-ac70-f0e3a0dd3f62"),
    ),
    &lt;x2/&gt; Priv – the public one:
    UUID("2d15fe94-a1f7-436c-a4d8-07a9a496e01c") =&gt; Dict{Symbol,UUID}(),
    &lt;x3/&gt; Pub:
    UUID("c07ecb7d-0dc9-4db7-8803-fadaaeaf08e1") =&gt; Dict{Symbol,UUID}(
        :Priv  =&gt; UUID("2d15fe94-a1f7-436c-a4d8-07a9a496e01c"),
        :Zebra =&gt; UUID("f7a24cb4-21fc-4002-ac70-f0e3a0dd3f62"),
    ),
    &lt;x4/&gt; Zebra:
    UUID("f7a24cb4-21fc-4002-ac70-f0e3a0dd3f62") =&gt; Dict{Symbol,UUID}(),
)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T015916Z" creationid="hsugawa8651" creationdate="20181116T015916Z">
        <seg>graph = Dict{UUID,Dict{Symbol,UUID}}(
    &lt;x1/&gt; Priv – the private one:
    UUID("ba13f791-ae1d-465a-978b-69c3ad90f72b") =&gt; Dict{Symbol,UUID}(
        :Pub   =&gt; UUID("c07ecb7d-0dc9-4db7-8803-fadaaeaf08e1"),
        :Zebra =&gt; UUID("f7a24cb4-21fc-4002-ac70-f0e3a0dd3f62"),
    ),
    &lt;x2/&gt; Priv – the public one:
    UUID("2d15fe94-a1f7-436c-a4d8-07a9a496e01c") =&gt; Dict{Symbol,UUID}(),
    &lt;x3/&gt; Pub:
    UUID("c07ecb7d-0dc9-4db7-8803-fadaaeaf08e1") =&gt; Dict{Symbol,UUID}(
        :Priv  =&gt; UUID("2d15fe94-a1f7-436c-a4d8-07a9a496e01c"),
        :Zebra =&gt; UUID("f7a24cb4-21fc-4002-ac70-f0e3a0dd3f62"),
    ),
    &lt;x4/&gt; Zebra:
    UUID("f7a24cb4-21fc-4002-ac70-f0e3a0dd3f62") =&gt; Dict{Symbol,UUID}(),
)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>graph[UUID("c07ecb7d-0dc9-4db7-8803-fadaaeaf08e1")][:Priv]</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T015922Z" creationid="hsugawa8651" creationdate="20181116T015922Z">
        <seg>graph[UUID("c07ecb7d-0dc9-4db7-8803-fadaaeaf08e1")][:Priv]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>greater than</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T030425Z" creationid="hsugawa8651" creationdate="20181114T030425Z">
        <seg>より大きい</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>greater than or equal to</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T030448Z" creationid="hsugawa8651" creationdate="20181114T030448Z">
        <seg>以上</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>greatest positive common divisor of &lt;x1/&gt;x&lt;x2/&gt;, &lt;x3/&gt;y&lt;x4/&gt;,...</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T072842Z" creationid="hsugawa8651" creationdate="20181118T095900Z">
        <seg>&lt;x1/&gt;x&lt;x2/&gt; 、&lt;x3/&gt;y&lt;x4/&gt; 、...の正の最大公約数</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>gsl_permutation&lt;x1/&gt;,
that has no internal fields and whose sole purpose is to be placed in the type parameter of a
&lt;x2/&gt;Ptr&lt;x3/&gt; type.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T152044Z" creationid="hsugawa8651" creationdate="20181117T152044Z">
        <seg>gsl remutation&lt;x1/&gt; は、内部フィールドを持たず、その唯一の目的は &lt;x2/&gt;Ptr&lt;x3/&gt;型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>half&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T110231Z" creationid="hsugawa8651" creationdate="20181112T110231Z">
        <seg>half&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>hn = Vector{UInt8}(undef, 256)
err = ccall(:gethostname, stdcall, Int32, (Ptr{UInt8}, UInt32), hn, length(hn))</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T152443Z" creationid="hsugawa8651" creationdate="20181117T152436Z">
        <seg>hn=Vector{UInt8}(undef,256) err=ccall(:gethostname,stdcall,Int32,(Ptr{UInt8},UInt32),hn,長さ(hn))</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>http://www.fileformat.info/info/unicode/category/index.htm</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T033442Z" creationid="hsugawa8651" creationdate="20181119T033442Z">
        <seg>http://www.fileformat.info/info/unicode/category/index.htm</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.6.3/css/font-awesome.min.css</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T003031Z" creationid="hsugawa8651" creationdate="20181119T003031Z">
        <seg>https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.6.3/css/font-awesome.min.css</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>https://cdnjs.cloudflare.com/ajax/libs/highlight.js/9.12.0/styles/default.min.css</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T003033Z" creationid="hsugawa8651" creationdate="20181119T003033Z">
        <seg>https://cdnjs.cloudflare.com/ajax/libs/highlight.js/9.12.0/styles/default.min.css</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>https://cdnjs.cloudflare.com/ajax/libs/normalize/4.2.0/normalize.min.css</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T072221Z" creationid="hsugawa8651" creationdate="20181119T072221Z">
        <seg>https://cdnjs.cloudflare.com/ajax/libs/normalize/4.2.0/normalize.min.css</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>https://docs.julialang.org/en/v1/base/arrays/index.html</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T072219Z" creationid="hsugawa8651" creationdate="20181119T072219Z">
        <seg>https://docs.julialang.org/en/v1/base/arrays/index.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>https://github.com/JuliaLang/julia/blob/6b2d211d22288ef7e66fc0f5bd21d8db952f28ba/base/abstractarray.jl#L108-L120</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131716Z" creationid="hsugawa8651" creationdate="20181119T131716Z">
        <seg>https://github.com/JuliaLang/julia/blob/6b2d211d22288ef7e66fc0f5bd21d8db952f28ba/base/abstractarray.jl#L108-L120</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>https://github.com/JuliaLang/julia/blob/6b2d211d22288ef7e66fc0f5bd21d8db952f28ba/base/abstractarray.jl#L145-L158</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131806Z" creationid="hsugawa8651" creationdate="20181119T131806Z">
        <seg>https://github.com/JuliaLang/julia/blob/6b2d211d22288ef7e66fc0f5bd21d8db952f28ba/base/abstractarray.jl#L145-L158</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>https://github.com/JuliaLang/julia/blob/6b2d211d22288ef7e66fc0f5bd21d8db952f28ba/base/abstractarray.jl#L167-L202</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131818Z" creationid="hsugawa8651" creationdate="20181119T131818Z">
        <seg>https://github.com/JuliaLang/julia/blob/6b2d211d22288ef7e66fc0f5bd21d8db952f28ba/base/abstractarray.jl#L167-L202</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>https://github.com/JuliaLang/julia/blob/6b2d211d22288ef7e66fc0f5bd21d8db952f28ba/base/abstractarray.jl#L18-L37</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131728Z" creationid="hsugawa8651" creationdate="20181119T131728Z">
        <seg>https://github.com/JuliaLang/julia/blob/6b2d211d22288ef7e66fc0f5bd21d8db952f28ba/base/abstractarray.jl#L18-L37</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>https://github.com/JuliaLang/julia/blob/6b2d211d22288ef7e66fc0f5bd21d8db952f28ba/base/abstractarray.jl#L311-L323</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131930Z" creationid="hsugawa8651" creationdate="20181119T131930Z">
        <seg>https://github.com/JuliaLang/julia/blob/6b2d211d22288ef7e66fc0f5bd21d8db952f28ba/base/abstractarray.jl#L311-L323</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>https://github.com/JuliaLang/julia/blob/6b2d211d22288ef7e66fc0f5bd21d8db952f28ba/base/abstractarray.jl#L326-L341</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131923Z" creationid="hsugawa8651" creationdate="20181119T131923Z">
        <seg>https://github.com/JuliaLang/julia/blob/6b2d211d22288ef7e66fc0f5bd21d8db952f28ba/base/abstractarray.jl#L326-L341</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>https://github.com/JuliaLang/julia/blob/6b2d211d22288ef7e66fc0f5bd21d8db952f28ba/base/abstractarray.jl#L40-L54</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131743Z" creationid="hsugawa8651" creationdate="20181119T131743Z">
        <seg>https://github.com/JuliaLang/julia/blob/6b2d211d22288ef7e66fc0f5bd21d8db952f28ba/base/abstractarray.jl#L40-L54</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>https://github.com/JuliaLang/julia/blob/6b2d211d22288ef7e66fc0f5bd21d8db952f28ba/base/abstractarray.jl#L5-L11</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T192818Z" creationid="hsugawa8651" creationdate="20181118T192818Z">
        <seg>https://github.com/JuliaLang/julia/blob/6b2d211d22288ef7e66fc0f5bd21d8db952f28ba/base/abstractarray.jl#L5-L11</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>https://github.com/JuliaLang/julia/blob/6b2d211d22288ef7e66fc0f5bd21d8db952f28ba/base/abstractarray.jl#L529-L570</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131603Z" creationid="hsugawa8651" creationdate="20181119T131603Z">
        <seg>https://github.com/JuliaLang/julia/blob/6b2d211d22288ef7e66fc0f5bd21d8db952f28ba/base/abstractarray.jl#L529-L570</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>https://github.com/JuliaLang/julia/blob/6b2d211d22288ef7e66fc0f5bd21d8db952f28ba/base/abstractarray.jl#L594-L615</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131628Z" creationid="hsugawa8651" creationdate="20181119T131628Z">
        <seg>https://github.com/JuliaLang/julia/blob/6b2d211d22288ef7e66fc0f5bd21d8db952f28ba/base/abstractarray.jl#L594-L615</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>https://github.com/JuliaLang/julia/blob/6b2d211d22288ef7e66fc0f5bd21d8db952f28ba/base/abstractarray.jl#L60-L72</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131735Z" creationid="hsugawa8651" creationdate="20181119T131735Z">
        <seg>https://github.com/JuliaLang/julia/blob/6b2d211d22288ef7e66fc0f5bd21d8db952f28ba/base/abstractarray.jl#L60-L72</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>https://github.com/JuliaLang/julia/blob/6b2d211d22288ef7e66fc0f5bd21d8db952f28ba/base/array.jl#L17-L22</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T192828Z" creationid="hsugawa8651" creationdate="20181118T192828Z">
        <seg>https://github.com/JuliaLang/julia/blob/6b2d211d22288ef7e66fc0f5bd21d8db952f28ba/base/array.jl#L17-L22</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>https://github.com/JuliaLang/julia/blob/6b2d211d22288ef7e66fc0f5bd21d8db952f28ba/base/array.jl#L25-L30</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T192838Z" creationid="hsugawa8651" creationdate="20181118T192838Z">
        <seg>https://github.com/JuliaLang/julia/blob/6b2d211d22288ef7e66fc0f5bd21d8db952f28ba/base/array.jl#L25-L30</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>https://github.com/JuliaLang/julia/blob/6b2d211d22288ef7e66fc0f5bd21d8db952f28ba/base/array.jl#L33-L37</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T192845Z" creationid="hsugawa8651" creationdate="20181118T192845Z">
        <seg>https://github.com/JuliaLang/julia/blob/6b2d211d22288ef7e66fc0f5bd21d8db952f28ba/base/array.jl#L33-L37</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>https://github.com/JuliaLang/julia/blob/6b2d211d22288ef7e66fc0f5bd21d8db952f28ba/base/array.jl#L344-L364</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131427Z" creationid="hsugawa8651" creationdate="20181119T131427Z">
        <seg>https://github.com/JuliaLang/julia/blob/6b2d211d22288ef7e66fc0f5bd21d8db952f28ba/base/array.jl#L344-L364</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>https://github.com/JuliaLang/julia/blob/6b2d211d22288ef7e66fc0f5bd21d8db952f28ba/base/array.jl#L404-L423</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131539Z" creationid="hsugawa8651" creationdate="20181119T131539Z">
        <seg>https://github.com/JuliaLang/julia/blob/6b2d211d22288ef7e66fc0f5bd21d8db952f28ba/base/array.jl#L404-L423</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>https://github.com/JuliaLang/julia/blob/6b2d211d22288ef7e66fc0f5bd21d8db952f28ba/base/array.jl#L429-L446</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131436Z" creationid="hsugawa8651" creationdate="20181119T131436Z">
        <seg>https://github.com/JuliaLang/julia/blob/6b2d211d22288ef7e66fc0f5bd21d8db952f28ba/base/array.jl#L429-L446</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>https://github.com/JuliaLang/julia/blob/6b2d211d22288ef7e66fc0f5bd21d8db952f28ba/base/array.jl#L449-L466</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131443Z" creationid="hsugawa8651" creationdate="20181119T131443Z">
        <seg>https://github.com/JuliaLang/julia/blob/6b2d211d22288ef7e66fc0f5bd21d8db952f28ba/base/array.jl#L449-L466</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>https://github.com/JuliaLang/julia/blob/6b2d211d22288ef7e66fc0f5bd21d8db952f28ba/base/array.jl#L45-L49</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T192901Z" creationid="hsugawa8651" creationdate="20181118T192901Z">
        <seg>https://github.com/JuliaLang/julia/blob/6b2d211d22288ef7e66fc0f5bd21d8db952f28ba/base/array.jl#L45-L49</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>https://github.com/JuliaLang/julia/blob/6b2d211d22288ef7e66fc0f5bd21d8db952f28ba/base/array.jl#L52-L57</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131130Z" creationid="hsugawa8651" creationdate="20181119T131130Z">
        <seg>https://github.com/JuliaLang/julia/blob/6b2d211d22288ef7e66fc0f5bd21d8db952f28ba/base/array.jl#L52-L57</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>https://github.com/JuliaLang/julia/blob/6b2d211d22288ef7e66fc0f5bd21d8db952f28ba/base/array.jl#L60-L65</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131211Z" creationid="hsugawa8651" creationdate="20181119T131211Z">
        <seg>https://github.com/JuliaLang/julia/blob/6b2d211d22288ef7e66fc0f5bd21d8db952f28ba/base/array.jl#L60-L65</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>https://github.com/JuliaLang/julia/blob/6b2d211d22288ef7e66fc0f5bd21d8db952f28ba/base/array.jl#L67-L71</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131319Z" creationid="hsugawa8651" creationdate="20181119T131319Z">
        <seg>https://github.com/JuliaLang/julia/blob/6b2d211d22288ef7e66fc0f5bd21d8db952f28ba/base/array.jl#L67-L71</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>https://github.com/JuliaLang/julia/blob/6b2d211d22288ef7e66fc0f5bd21d8db952f28ba/base/array.jl#L74-L79</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131327Z" creationid="hsugawa8651" creationdate="20181119T131327Z">
        <seg>https://github.com/JuliaLang/julia/blob/6b2d211d22288ef7e66fc0f5bd21d8db952f28ba/base/array.jl#L74-L79</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>https://github.com/JuliaLang/julia/blob/6b2d211d22288ef7e66fc0f5bd21d8db952f28ba/base/array.jl#L82-L86</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131335Z" creationid="hsugawa8651" creationdate="20181119T131335Z">
        <seg>https://github.com/JuliaLang/julia/blob/6b2d211d22288ef7e66fc0f5bd21d8db952f28ba/base/array.jl#L82-L86</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>https://github.com/JuliaLang/julia/blob/6b2d211d22288ef7e66fc0f5bd21d8db952f28ba/base/array.jl#L89-L93</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131343Z" creationid="hsugawa8651" creationdate="20181119T131343Z">
        <seg>https://github.com/JuliaLang/julia/blob/6b2d211d22288ef7e66fc0f5bd21d8db952f28ba/base/array.jl#L89-L93</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>https://github.com/JuliaLang/julia/blob/6b2d211d22288ef7e66fc0f5bd21d8db952f28ba/base/array.jl#L96-L100</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131349Z" creationid="hsugawa8651" creationdate="20181119T131349Z">
        <seg>https://github.com/JuliaLang/julia/blob/6b2d211d22288ef7e66fc0f5bd21d8db952f28ba/base/array.jl#L96-L100</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>https://github.com/JuliaLang/julia/blob/6b2d211d22288ef7e66fc0f5bd21d8db952f28ba/base/arraymath.jl#L5-L26</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131916Z" creationid="hsugawa8651" creationdate="20181119T131916Z">
        <seg>https://github.com/JuliaLang/julia/blob/6b2d211d22288ef7e66fc0f5bd21d8db952f28ba/base/arraymath.jl#L5-L26</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>https://github.com/JuliaLang/julia/blob/6b2d211d22288ef7e66fc0f5bd21d8db952f28ba/base/bitarray.jl#L356-L368</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131528Z" creationid="hsugawa8651" creationdate="20181119T131528Z">
        <seg>https://github.com/JuliaLang/julia/blob/6b2d211d22288ef7e66fc0f5bd21d8db952f28ba/base/bitarray.jl#L356-L368</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>https://github.com/JuliaLang/julia/blob/6b2d211d22288ef7e66fc0f5bd21d8db952f28ba/base/bitarray.jl#L36-L56</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131507Z" creationid="hsugawa8651" creationdate="20181119T131507Z">
        <seg>https://github.com/JuliaLang/julia/blob/6b2d211d22288ef7e66fc0f5bd21d8db952f28ba/base/bitarray.jl#L36-L56</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>https://github.com/JuliaLang/julia/blob/6b2d211d22288ef7e66fc0f5bd21d8db952f28ba/base/bitarray.jl#L374-L386</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131522Z" creationid="hsugawa8651" creationdate="20181119T131522Z">
        <seg>https://github.com/JuliaLang/julia/blob/6b2d211d22288ef7e66fc0f5bd21d8db952f28ba/base/bitarray.jl#L374-L386</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>https://github.com/JuliaLang/julia/blob/6b2d211d22288ef7e66fc0f5bd21d8db952f28ba/base/bitarray.jl#L509-L536</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131515Z" creationid="hsugawa8651" creationdate="20181119T131515Z">
        <seg>https://github.com/JuliaLang/julia/blob/6b2d211d22288ef7e66fc0f5bd21d8db952f28ba/base/bitarray.jl#L509-L536</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>https://github.com/JuliaLang/julia/blob/6b2d211d22288ef7e66fc0f5bd21d8db952f28ba/base/bitarray.jl#L7-L11</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131449Z" creationid="hsugawa8651" creationdate="20181119T131449Z">
        <seg>https://github.com/JuliaLang/julia/blob/6b2d211d22288ef7e66fc0f5bd21d8db952f28ba/base/bitarray.jl#L7-L11</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>https://github.com/JuliaLang/julia/blob/6b2d211d22288ef7e66fc0f5bd21d8db952f28ba/base/broadcast.jl#L626-L701</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T132218Z" creationid="hsugawa8651" creationdate="20181119T132218Z">
        <seg>https://github.com/JuliaLang/julia/blob/6b2d211d22288ef7e66fc0f5bd21d8db952f28ba/base/broadcast.jl#L626-L701</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>https://github.com/JuliaLang/julia/blob/6b2d211d22288ef7e66fc0f5bd21d8db952f28ba/base/docs/basedocs.jl#L1381-L1394</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131142Z" creationid="hsugawa8651" creationdate="20181119T131142Z">
        <seg>https://github.com/JuliaLang/julia/blob/6b2d211d22288ef7e66fc0f5bd21d8db952f28ba/base/docs/basedocs.jl#L1381-L1394</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>https://github.com/JuliaLang/julia/blob/6b2d211d22288ef7e66fc0f5bd21d8db952f28ba/base/docs/basedocs.jl#L1397-L1411</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131152Z" creationid="hsugawa8651" creationdate="20181119T131152Z">
        <seg>https://github.com/JuliaLang/julia/blob/6b2d211d22288ef7e66fc0f5bd21d8db952f28ba/base/docs/basedocs.jl#L1397-L1411</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>https://github.com/JuliaLang/julia/blob/6b2d211d22288ef7e66fc0f5bd21d8db952f28ba/base/docs/basedocs.jl#L1414-L1428</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131201Z" creationid="hsugawa8651" creationdate="20181119T131201Z">
        <seg>https://github.com/JuliaLang/julia/blob/6b2d211d22288ef7e66fc0f5bd21d8db952f28ba/base/docs/basedocs.jl#L1414-L1428</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>https://github.com/JuliaLang/julia/blob/6b2d211d22288ef7e66fc0f5bd21d8db952f28ba/base/docs/basedocs.jl#L1431-L1443</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131220Z" creationid="hsugawa8651" creationdate="20181119T131220Z">
        <seg>https://github.com/JuliaLang/julia/blob/6b2d211d22288ef7e66fc0f5bd21d8db952f28ba/base/docs/basedocs.jl#L1431-L1443</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>https://github.com/JuliaLang/julia/blob/6b2d211d22288ef7e66fc0f5bd21d8db952f28ba/base/docs/basedocs.jl#L1446-L1460</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131301Z" creationid="hsugawa8651" creationdate="20181119T131301Z">
        <seg>https://github.com/JuliaLang/julia/blob/6b2d211d22288ef7e66fc0f5bd21d8db952f28ba/base/docs/basedocs.jl#L1446-L1460</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>https://github.com/JuliaLang/julia/blob/6b2d211d22288ef7e66fc0f5bd21d8db952f28ba/base/docs/basedocs.jl#L1463-L1477</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131311Z" creationid="hsugawa8651" creationdate="20181119T131311Z">
        <seg>https://github.com/JuliaLang/julia/blob/6b2d211d22288ef7e66fc0f5bd21d8db952f28ba/base/docs/basedocs.jl#L1463-L1477</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>https://github.com/JuliaLang/julia/blob/6b2d211d22288ef7e66fc0f5bd21d8db952f28ba/base/docs/basedocs.jl#L1480-L1503</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T192912Z" creationid="hsugawa8651" creationdate="20181118T192912Z">
        <seg>https://github.com/JuliaLang/julia/blob/6b2d211d22288ef7e66fc0f5bd21d8db952f28ba/base/docs/basedocs.jl#L1480-L1503</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>https://github.com/JuliaLang/julia/blob/6b2d211d22288ef7e66fc0f5bd21d8db952f28ba/base/docs/basedocs.jl#L1506-L1526</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T192921Z" creationid="hsugawa8651" creationdate="20181118T192921Z">
        <seg>https://github.com/JuliaLang/julia/blob/6b2d211d22288ef7e66fc0f5bd21d8db952f28ba/base/docs/basedocs.jl#L1506-L1526</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>https://github.com/JuliaLang/julia/blob/6b2d211d22288ef7e66fc0f5bd21d8db952f28ba/base/docs/basedocs.jl#L1530-L1550</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T192935Z" creationid="hsugawa8651" creationdate="20181118T192935Z">
        <seg>https://github.com/JuliaLang/julia/blob/6b2d211d22288ef7e66fc0f5bd21d8db952f28ba/base/docs/basedocs.jl#L1530-L1550</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>https://github.com/JuliaLang/julia/blob/6b2d211d22288ef7e66fc0f5bd21d8db952f28ba/base/docs/basedocs.jl#L1553-L1568</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131111Z" creationid="hsugawa8651" creationdate="20181119T131111Z">
        <seg>https://github.com/JuliaLang/julia/blob/6b2d211d22288ef7e66fc0f5bd21d8db952f28ba/base/docs/basedocs.jl#L1553-L1568</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>https://github.com/JuliaLang/julia/blob/6b2d211d22288ef7e66fc0f5bd21d8db952f28ba/base/docs/basedocs.jl#L1571-L1586</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131119Z" creationid="hsugawa8651" creationdate="20181119T131119Z">
        <seg>https://github.com/JuliaLang/julia/blob/6b2d211d22288ef7e66fc0f5bd21d8db952f28ba/base/docs/basedocs.jl#L1571-L1586</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>https://github.com/JuliaLang/julia/blob/6b2d211d22288ef7e66fc0f5bd21d8db952f28ba/base/docs/basedocs.jl#L1909-L1920</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131400Z" creationid="hsugawa8651" creationdate="20181119T131400Z">
        <seg>https://github.com/JuliaLang/julia/blob/6b2d211d22288ef7e66fc0f5bd21d8db952f28ba/base/docs/basedocs.jl#L1909-L1920</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>https://github.com/JuliaLang/julia/blob/6b2d211d22288ef7e66fc0f5bd21d8db952f28ba/base/docs/basedocs.jl#L1923-L1927</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131406Z" creationid="hsugawa8651" creationdate="20181119T131406Z">
        <seg>https://github.com/JuliaLang/julia/blob/6b2d211d22288ef7e66fc0f5bd21d8db952f28ba/base/docs/basedocs.jl#L1923-L1927</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>https://github.com/JuliaLang/julia/blob/6b2d211d22288ef7e66fc0f5bd21d8db952f28ba/base/docs/basedocs.jl#L1930-L1934</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131412Z" creationid="hsugawa8651" creationdate="20181119T131412Z">
        <seg>https://github.com/JuliaLang/julia/blob/6b2d211d22288ef7e66fc0f5bd21d8db952f28ba/base/docs/basedocs.jl#L1930-L1934</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>https://github.com/JuliaLang/julia/blob/6b2d211d22288ef7e66fc0f5bd21d8db952f28ba/base/docs/basedocs.jl#L1937-L1941</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131417Z" creationid="hsugawa8651" creationdate="20181119T131417Z">
        <seg>https://github.com/JuliaLang/julia/blob/6b2d211d22288ef7e66fc0f5bd21d8db952f28ba/base/docs/basedocs.jl#L1937-L1941</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>https://github.com/JuliaLang/julia/blob/6b2d211d22288ef7e66fc0f5bd21d8db952f28ba/base/essentials.jl#L385-L415</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T193032Z" creationid="hsugawa8651" creationdate="20181118T193032Z">
        <seg>https://github.com/JuliaLang/julia/blob/6b2d211d22288ef7e66fc0f5bd21d8db952f28ba/base/essentials.jl#L385-L415</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>https://github.com/JuliaLang/julia/blob/6b2d211d22288ef7e66fc0f5bd21d8db952f28ba/base/indices.jl#L31-L41</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131905Z" creationid="hsugawa8651" creationdate="20181119T131905Z">
        <seg>https://github.com/JuliaLang/julia/blob/6b2d211d22288ef7e66fc0f5bd21d8db952f28ba/base/indices.jl#L31-L41</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>https://github.com/JuliaLang/julia/blob/6b2d211d22288ef7e66fc0f5bd21d8db952f28ba/base/indices.jl#L44-L69</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131837Z" creationid="hsugawa8651" creationdate="20181119T131837Z">
        <seg>https://github.com/JuliaLang/julia/blob/6b2d211d22288ef7e66fc0f5bd21d8db952f28ba/base/indices.jl#L44-L69</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>https://github.com/JuliaLang/julia/blob/6b2d211d22288ef7e66fc0f5bd21d8db952f28ba/base/multidimensional.jl#L759-L790</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T131547Z" creationid="hsugawa8651" creationdate="20181119T131547Z">
        <seg>https://github.com/JuliaLang/julia/blob/6b2d211d22288ef7e66fc0f5bd21d8db952f28ba/base/multidimensional.jl#L759-L790</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>https://github.com/JuliaLang/julia/blob/6b2d211d22288ef7e66fc0f5bd21d8db952f28ba/base/reflection.jl#L131-L144</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T193007Z" creationid="hsugawa8651" creationdate="20181118T193007Z">
        <seg>https://github.com/JuliaLang/julia/blob/6b2d211d22288ef7e66fc0f5bd21d8db952f28ba/base/reflection.jl#L131-L144</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>https://github.com/JuliaLang/julia/blob/6b2d211d22288ef7e66fc0f5bd21d8db952f28ba/base/reflection.jl#L396-L400</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T193051Z" creationid="hsugawa8651" creationdate="20181118T193051Z">
        <seg>https://github.com/JuliaLang/julia/blob/6b2d211d22288ef7e66fc0f5bd21d8db952f28ba/base/reflection.jl#L396-L400</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>https://github.com/JuliaLang/julia/blob/6b2d211d22288ef7e66fc0f5bd21d8db952f28ba/base/reflection.jl#L424-L450</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T193043Z" creationid="hsugawa8651" creationdate="20181118T193043Z">
        <seg>https://github.com/JuliaLang/julia/blob/6b2d211d22288ef7e66fc0f5bd21d8db952f28ba/base/reflection.jl#L424-L450</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>https://github.com/JuliaLang/julia/blob/d789231e9985537686052db9b2314c0d51656308/base/iterators.jl#L110-L132</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T192229Z" creationid="hsugawa8651" creationdate="20181118T192229Z">
        <seg>https://github.com/JuliaLang/julia/blob/d789231e9985537686052db9b2314c0d51656308/base/iterators.jl#L110-L132</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>https://github.com/JuliaLang/julia/blob/d789231e9985537686052db9b2314c0d51656308/base/iterators.jl#L339-L367</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T192215Z" creationid="hsugawa8651" creationdate="20181118T192215Z">
        <seg>https://github.com/JuliaLang/julia/blob/d789231e9985537686052db9b2314c0d51656308/base/iterators.jl#L339-L367</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>https://github.com/JuliaLang/julia/blob/d789231e9985537686052db9b2314c0d51656308/base/iterators.jl#L455-L468</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T192241Z" creationid="hsugawa8651" creationdate="20181118T192241Z">
        <seg>https://github.com/JuliaLang/julia/blob/d789231e9985537686052db9b2314c0d51656308/base/iterators.jl#L455-L468</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>https://github.com/JuliaLang/julia/blob/d789231e9985537686052db9b2314c0d51656308/base/iterators.jl#L513-L528</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T192253Z" creationid="hsugawa8651" creationdate="20181118T192253Z">
        <seg>https://github.com/JuliaLang/julia/blob/d789231e9985537686052db9b2314c0d51656308/base/iterators.jl#L513-L528</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>https://github.com/JuliaLang/julia/blob/d789231e9985537686052db9b2314c0d51656308/base/iterators.jl#L550-L575</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T192305Z" creationid="hsugawa8651" creationdate="20181118T192305Z">
        <seg>https://github.com/JuliaLang/julia/blob/d789231e9985537686052db9b2314c0d51656308/base/iterators.jl#L550-L575</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>https://github.com/JuliaLang/julia/blob/d789231e9985537686052db9b2314c0d51656308/base/iterators.jl#L607-L631</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T192314Z" creationid="hsugawa8651" creationdate="20181118T192314Z">
        <seg>https://github.com/JuliaLang/julia/blob/d789231e9985537686052db9b2314c0d51656308/base/iterators.jl#L607-L631</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>https://github.com/JuliaLang/julia/blob/d789231e9985537686052db9b2314c0d51656308/base/iterators.jl#L661-L675</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T192324Z" creationid="hsugawa8651" creationdate="20181118T192324Z">
        <seg>https://github.com/JuliaLang/julia/blob/d789231e9985537686052db9b2314c0d51656308/base/iterators.jl#L661-L675</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>https://github.com/JuliaLang/julia/blob/d789231e9985537686052db9b2314c0d51656308/base/iterators.jl#L700-L717</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T192336Z" creationid="hsugawa8651" creationdate="20181118T192336Z">
        <seg>https://github.com/JuliaLang/julia/blob/d789231e9985537686052db9b2314c0d51656308/base/iterators.jl#L700-L717</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>https://github.com/JuliaLang/julia/blob/d789231e9985537686052db9b2314c0d51656308/base/iterators.jl#L734-L748</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T192348Z" creationid="hsugawa8651" creationdate="20181118T192348Z">
        <seg>https://github.com/JuliaLang/julia/blob/d789231e9985537686052db9b2314c0d51656308/base/iterators.jl#L734-L748</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>https://github.com/JuliaLang/julia/blob/d789231e9985537686052db9b2314c0d51656308/base/iterators.jl#L856-L872</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T192404Z" creationid="hsugawa8651" creationdate="20181118T192404Z">
        <seg>https://github.com/JuliaLang/julia/blob/d789231e9985537686052db9b2314c0d51656308/base/iterators.jl#L856-L872</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>https://github.com/JuliaLang/julia/blob/d789231e9985537686052db9b2314c0d51656308/base/iterators.jl#L984-L1035</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T192203Z" creationid="hsugawa8651" creationdate="20181118T192203Z">
        <seg>https://github.com/JuliaLang/julia/blob/d789231e9985537686052db9b2314c0d51656308/base/iterators.jl#L984-L1035</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>https://github.com/JuliaLang/julia/blob/master/doc/src/base/arrays.md</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T130841Z" creationid="hsugawa8651" creationdate="20181119T130841Z">
        <seg>https://github.com/JuliaLang/julia/blob/master/doc/src/base/arrays.md</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>https://github.com/JuliaLang/julia/blob/master/doc/src/base/iterators.md</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T192134Z" creationid="hsugawa8651" creationdate="20181118T192134Z">
        <seg>https://github.com/JuliaLang/julia/blob/master/doc/src/base/iterators.md</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>hypotenuse of right-angled triangle with other sides of length &lt;x1/&gt;x&lt;x2/&gt; and &lt;x3/&gt;y&lt;x4/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T073412Z" creationid="hsugawa8651" creationdate="20181118T100018Z">
        <seg>長さ &lt;x1/&gt;x&lt;x2/&gt; and &lt;x3/&gt;y&lt;x4/&gt;の辺を持つ直角三角形の斜辺</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>if (a == b)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T021308Z" creationid="hsugawa8651" creationdate="20181116T021308Z">
        <seg>if (a == b)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>if &lt;x1/&gt;T&lt;x2/&gt; is an &lt;x3/&gt;enum&lt;x4/&gt;, the argument type should be equivalent to &lt;x5/&gt;Cint&lt;x6/&gt; or &lt;x7/&gt;Cuint&lt;x8/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T151512Z" creationid="hsugawa8651" creationdate="20181117T151512Z">
        <seg>&lt;x1/&gt;T&lt;x2/&gt;が&lt;x3/&gt;enum&lt;x4/&gt;の場合、引数のタイプは&lt;x5/&gt;Cint&lt;x6/&gt;または&lt;x7/&gt;Cuint&lt;x8/&gt;と同等である必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>if Int === Int64
    const UInt = UInt64
else
    const UInt = UInt32
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T022042Z" creationid="hsugawa8651" creationdate="20181116T022042Z">
        <seg>if Int === Int64
    const UInt = UInt64
else
    const UInt = UInt32
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>if Sys.iswindows()
    some_complicated_thing(a)
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T001535Z" creationid="hsugawa8651" creationdate="20181120T001535Z">
        <seg>if Sys.iswindows()
    some_complicated_thing(a)
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>if Sys.iswindows()
    windows_specific_thing(a)
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T224833Z" creationid="hsugawa8651" creationdate="20181109T224833Z">
        <seg>if Sys.iswindows()
    windows_specific_thing(a)
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>if a == b</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T021303Z" creationid="hsugawa8651" creationdate="20181116T021303Z">
        <seg>if a == b</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>if condition()
    "..."
    f(x) = x
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T020140Z" creationid="hsugawa8651" creationdate="20181116T020140Z">
        <seg>if condition()
    "..."
    f(x) = x
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>if is_windows()
    some_complicated_thing(a)
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T234027Z" creationid="hsugawa8651" creationdate="20181119T234027Z">
        <seg>if is_windows()
    some_complicated_thing(a)
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>if v"0.2" &lt;= VERSION &lt; v"0.3-"
    &lt;x1/&gt; do something specific to 0.2 release series
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T021112Z" creationid="hsugawa8651" creationdate="20181116T021112Z">
        <seg>if v"0.2" &lt;= VERSION &lt; v"0.3-"
    &lt;x1/&gt; do something specific to 0.2 release series
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>if x &lt; y
    println("x is less than y")
elseif x &gt; y
    println("x is greater than y")
else
    println("x is equal to y")
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T225839Z" creationid="hsugawa8651" creationdate="20181109T225839Z">
        <seg>if x &lt; y
    println("x is less than y")
elseif x &gt; y
    println("x is greater than y")
else
    println("x is equal to y")
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>if&lt;x1/&gt; blocks also return a value, which may seem unintuitive to users coming from many other languages.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T230019Z" creationid="hsugawa8651" creationdate="20181109T230019Z">
        <seg>もし&lt;x1/&gt;ブロックが値を返すと、他の多くの言語から来るユーザーにとって直感的ではないように思えるかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>if&lt;x1/&gt; blocks are "leaky", i.e. they do not introduce a local scope.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T225914Z" creationid="hsugawa8651" creationdate="20181109T225914Z">
        <seg>&lt;x1/&gt;ブロックが「リーク」である場合、すなわち、ローカルスコープを導入しない。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>if_true : if_false&lt;x2/&gt;)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T063208Z" creationid="hsugawa8651" creationdate="20181114T063208Z">
        <seg>if_true : if_false&lt;x2/&gt;)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>import Foo
function bar(...)
    &lt;x1/&gt; ... refer to Foo symbols via Foo.baz ...
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181110T025140Z" creationid="hsugawa8651" creationdate="20181110T025140Z">
        <seg>import Foo
function bar(...)
    &lt;x1/&gt; ... refer to Foo symbols via Foo.baz ...
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>in C:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T151157Z" creationid="hsugawa8651" creationdate="20181117T151157Z">
        <seg>C:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>in Julia:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T151205Z" creationid="hsugawa8651" creationdate="20181117T151200Z">
        <seg>ジュリア:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>include("mynewcode.jl")              &lt;x1/&gt; this defines a module MyModule
obj1 = MyModule.ObjConstructor(a, b)
obj2 = MyModule.somefunction(obj1)
&lt;x2/&gt; Got an error.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181110T024750Z" creationid="hsugawa8651" creationdate="20181110T024750Z">
        <seg>include("mynewcode.jl")              &lt;x1/&gt; this defines a module MyModule
obj1 = MyModule.ObjConstructor(a, b)
obj2 = MyModule.somefunction(obj1)
&lt;x2/&gt; Got an error.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>index an entire dimension (firstindex:lastindex), see &lt;x1/&gt;`Colon`&lt;x2/&gt;)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T063546Z" creationid="hsugawa8651" creationdate="20181114T063546Z">
        <seg>索引全体(firstindex:lastindex)をインデックス化します。&lt;x1/&gt;`コロン`&lt;x2/&gt;を参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>indicates that &lt;x1/&gt;Tuple&lt;x2/&gt; "wins" over zero-dimensional arrays (the output container will be a tuple).</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T131755Z" creationid="hsugawa8651" creationdate="20181113T131755Z">
        <seg>&lt;x1/&gt;タプル&lt;x2/&gt;"が0次元配列に対して(出力コンテナはタプルになります)"勝ち"であることを示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>indicates the sign of &lt;x1/&gt;x&lt;x2/&gt;, returning -1, 0, or +1</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T073033Z" creationid="hsugawa8651" creationdate="20181118T095931Z">
        <seg>&lt;x1/&gt;x&lt;x2/&gt; の符号を示し、 -1、 0、 または +1を返す</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>indicates whether the sign bit is on (true) or off (false)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T073040Z" creationid="hsugawa8651" creationdate="20181118T095936Z">
        <seg>符号ビットがオン（true）またはオフ（false）であるかを示す</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>inequality</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T064108Z" creationid="hsugawa8651" creationdate="20181118T095427Z">
        <seg>異なる</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>input = convert(AbstractArray{Eltype}, input)
output = similar(input, Eltype)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T054157Z" creationid="hsugawa8651" creationdate="20181116T054157Z">
        <seg>input = convert(AbstractArray{Eltype}, input)
output = similar(input, Eltype)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>integer divide</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T094927Z" creationid="hsugawa8651" creationdate="20181113T132104Z">
        <seg>整商</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>inverse divide</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T094941Z" creationid="hsugawa8651" creationdate="20181118T094941Z">
        <seg>左除算</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>invoke macro &lt;x1/&gt;m&lt;x2/&gt;; followed by space-separated expressions</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T032235Z" creationid="hsugawa8651" creationdate="20181114T032229Z">
        <seg>呼び出しマクロ&lt;x1/&gt;m&lt;x2/&gt;;それに続く空間的に区切られた式</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>io = IOBuffer()
Base.banner(io)
banner = String(take!(io))
import Markdown
Markdown.parse("```\n\$ julia\n\n$(banner)\njulia&gt; 1 + 2\n3\n\njulia&gt; ans\n3\n```")</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T224257Z" creationid="hsugawa8651" creationdate="20181109T224257Z">
        <seg>io = IOBuffer()
Base.banner(io)
banner = String(take!(io))
import Markdown
Markdown.parse("```\n\$ julia\n\n$(banner)\njulia&gt; 1 + 2\n3\n\njulia&gt; ans\n3\n```")</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>is equivalent to</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T083123Z" creationid="hsugawa8651" creationdate="20181120T083123Z">
        <seg>は以下と同等です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>is translated into:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181110T042111Z" creationid="hsugawa8651" creationdate="20181110T042111Z">
        <seg>は次のように変換されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>isequal()&lt;x1/&gt; can also be used to distinguish signed zeros:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T064640Z" creationid="hsugawa8651" creationdate="20181120T064640Z">
        <seg>isequal()&lt;x1/&gt; は符号付き0を区別するためにも使用することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>isequal&lt;x1/&gt; can also be used to distinguish signed zeros:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T030613Z" creationid="hsugawa8651" creationdate="20181114T030613Z">
        <seg>isequal&lt;x1/&gt; can also be used to distinguish signed zeros:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>iterate(iter)&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T112056Z" creationid="hsugawa8651" creationdate="20181112T112056Z">
        <seg>iterate(iter)&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>iterate(iter, state)&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T112106Z" creationid="hsugawa8651" creationdate="20181112T112106Z">
        <seg>iterate(iter, state)&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>iterate&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T164740Z" creationid="hsugawa8651" creationdate="20181118T164740Z">
        <seg>繰り返し&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>jl_value_t**&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T151537Z" creationid="hsugawa8651" creationdate="20181117T151537Z">
        <seg>jl_value_t**&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>jl_value_t*&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T151529Z" creationid="hsugawa8651" creationdate="20181117T151529Z">
        <seg>jl_value_t*&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>jl_value_t*&lt;x1/&gt; pointers, as &lt;x2/&gt;Ptr{Cvoid}&lt;x3/&gt;, by calling &lt;x4/&gt;`pointer_from_objref(v)`&lt;x5/&gt;.)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T152556Z" creationid="hsugawa8651" creationdate="20181117T152556Z">
        <seg>jl_value_t*&lt;x2/&gt;ポインタは&lt;x2/&gt;Ptr{Cvoid}&lt;x3/&gt;、&lt;x4/&gt;'ポインタ_from_objref(v)`&lt;x5/&gt;を呼び出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia -L _init.jl</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T022550Z" creationid="hsugawa8651" creationdate="20181116T022550Z">
        <seg>julia -L _init.jl</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia [switches] -- [programfile] [args...]</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T224522Z" creationid="hsugawa8651" creationdate="20181109T224522Z">
        <seg>julia [switches] -- [programfile] [args...]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia [switches] -- [programfile] [args...]
 -v, --version             Display version information
 -h, --help                Print this message

 -J, --sysimage &lt;x1/&gt;     Start up with the given system image file
 --precompiled={yes|no}    Use precompiled code from system image if available
 --compilecache={yes|no}   Enable/disable incremental precompilation of modules
 -H, --home &lt;x2/&gt;          Set location of `julia` executable
 --startup-file={yes|no}   Load &lt;x3/&gt;/.juliarc.jl
 --handle-signals={yes|no} Enable or disable Julia's default signal handlers

 -e, --eval &lt;x4/&gt;         Evaluate &lt;x5/&gt;
 -E, --print &lt;x6/&gt;        Evaluate and show &lt;x7/&gt;
 -L, --load &lt;x8/&gt;         Load &lt;x9/&gt; immediately on all processors

 -p, --procs {N|auto}      Integer value N launches N additional local worker processes
                           "auto" launches as many workers as the number of local cores
 --machinefile &lt;x10/&gt;      Run processes on hosts listed in &lt;x11/&gt;

 -i                        Interactive mode; REPL runs and isinteractive() is true
 -q, --quiet               Quiet startup (no banner)
 --color={yes|no}          Enable or disable color text
 --history-file={yes|no}   Load or save history

 --compile={yes|no|all|min}Enable or disable JIT compiler, or request exhaustive compilation
 -C, --cpu-target &lt;x12/&gt; Limit usage of cpu features up to &lt;x13/&gt;
 -O, --optimize={0,1,2,3}  Set the optimization level (default is 2 if unspecified or 3 if specified as -O)
 -g, -g &lt;x14/&gt;            Enable / Set the level of debug info generation (default is 1 if unspecified or 2 if specified as -g)
 --inline={yes|no}         Control whether inlining is permitted (overrides functions declared as @inline)
 --check-bounds={yes|no}   Emit bounds checks always or never (ignoring declarations)
 --math-mode={ieee,fast}   Disallow or enable unsafe floating point optimizations (overrides @fastmath declaration)

 --depwarn={yes|no|error}  Enable or disable syntax and method deprecation warnings ("error" turns warnings into errors)

 --output-o name           Generate an object file (including system image data)
 --output-ji name          Generate a system image data file (.ji)
 --output-bc name          Generate LLVM bitcode (.bc)
 --output-incremental=no   Generate an incremental output file (rather than complete)

 --code-coverage={none|user|all}, --code-coverage
                           Count executions of source lines (omitting setting is equivalent to "user")
 --track-allocation={none|user|all}, --track-allocation
                           Count bytes allocated by each source line</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T233851Z" creationid="hsugawa8651" creationdate="20181119T233851Z">
        <seg>julia [switches] -- [programfile] [args...]
 -v, --version             Display version information
 -h, --help                Print this message

 -J, --sysimage &lt;x1/&gt;     Start up with the given system image file
 --precompiled={yes|no}    Use precompiled code from system image if available
 --compilecache={yes|no}   Enable/disable incremental precompilation of modules
 -H, --home &lt;x2/&gt;          Set location of `julia` executable
 --startup-file={yes|no}   Load &lt;x3/&gt;/.juliarc.jl
 --handle-signals={yes|no} Enable or disable Julia's default signal handlers

 -e, --eval &lt;x4/&gt;         Evaluate &lt;x5/&gt;
 -E, --print &lt;x6/&gt;        Evaluate and show &lt;x7/&gt;
 -L, --load &lt;x8/&gt;         Load &lt;x9/&gt; immediately on all processors

 -p, --procs {N|auto}      Integer value N launches N additional local worker processes
                           "auto" launches as many workers as the number of local cores
 --machinefile &lt;x10/&gt;      Run processes on hosts listed in &lt;x11/&gt;

 -i                        Interactive mode; REPL runs and isinteractive() is true
 -q, --quiet               Quiet startup (no banner)
 --color={yes|no}          Enable or disable color text
 --history-file={yes|no}   Load or save history

 --compile={yes|no|all|min}Enable or disable JIT compiler, or request exhaustive compilation
 -C, --cpu-target &lt;x12/&gt; Limit usage of cpu features up to &lt;x13/&gt;
 -O, --optimize={0,1,2,3}  Set the optimization level (default is 2 if unspecified or 3 if specified as -O)
 -g, -g &lt;x14/&gt;            Enable / Set the level of debug info generation (default is 1 if unspecified or 2 if specified as -g)
 --inline={yes|no}         Control whether inlining is permitted (overrides functions declared as @inline)
 --check-bounds={yes|no}   Emit bounds checks always or never (ignoring declarations)
 --math-mode={ieee,fast}   Disallow or enable unsafe floating point optimizations (overrides @fastmath declaration)

 --depwarn={yes|no|error}  Enable or disable syntax and method deprecation warnings ("error" turns warnings into errors)

 --output-o name           Generate an object file (including system image data)
 --output-ji name          Generate a system image data file (.ji)
 --output-bc name          Generate LLVM bitcode (.bc)
 --output-incremental=no   Generate an incremental output file (rather than complete)

 --code-coverage={none|user|all}, --code-coverage
                           Count executions of source lines (omitting setting is equivalent to "user")
 --track-allocation={none|user|all}, --track-allocation
                           Count bytes allocated by each source line</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt;      :(a + b*c + 1)       ==
       Meta.parse("a + b*c + 1") ==
       Expr(:call, :+, :a, Expr(:call, :*, :b, :c), 1)
true</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T015123Z" creationid="hsugawa8651" creationdate="20181116T015123Z">
        <seg>julia&gt;      :(a + b*c + 1)       ==
       Meta.parse("a + b*c + 1") ==
       Expr(:call, :+, :a, Expr(:call, :*, :b, :c), 1)
true</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; """
         Hello,
         world."""
"Hello,\nworld."</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T020857Z" creationid="hsugawa8651" creationdate="20181116T020857Z">
        <seg>julia&gt; """
         Hello,
         world."""
"Hello,\nworld."</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; """    This
         is
           a test"""
"    This\nis\n  a test"</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T020837Z" creationid="hsugawa8651" creationdate="20181116T020837Z">
        <seg>julia&gt; """    This
         is
           a test"""
"    This\nis\n  a test"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; "$greet, $whom.\n"
"Hello, world.\n"</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T020804Z" creationid="hsugawa8651" creationdate="20181116T020804Z">
        <seg>julia&gt; "$greet, $whom.\n"
"Hello, world.\n"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; "1 + 2 = $(1 + 2)"
"1 + 2 = 3"</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T020810Z" creationid="hsugawa8651" creationdate="20181116T020810Z">
        <seg>julia&gt; "1 + 2 = $(1 + 2)"
"1 + 2 = 3"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; "DATA\xff\u2200"
ERROR: syntax: invalid UTF-8 sequence</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T094553Z" creationid="hsugawa8651" creationdate="20181120T094553Z">
        <seg>julia&gt; "DATA\xff\u2200"
ERROR: syntax: invalid UTF-8 sequence</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; "abracadabra" &lt; "xylophone"
true

julia&gt; "abracadabra" == "xylophone"
false

julia&gt; "Hello, world." != "Goodbye, world."
true

julia&gt; "1 + 2 = 3" == "1 + 2 = $(1 + 2)"
true</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T020903Z" creationid="hsugawa8651" creationdate="20181116T020903Z">
        <seg>julia&gt; "abracadabra" &lt; "xylophone"
true

julia&gt; "abracadabra" == "xylophone"
false

julia&gt; "Hello, world." != "Goodbye, world."
true

julia&gt; "1 + 2 = 3" == "1 + 2 = $(1 + 2)"
true</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; $a + b
ERROR: syntax: "$" expression outside quote</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T015151Z" creationid="hsugawa8651" creationdate="20181116T015151Z">
        <seg>julia&gt; $a + b
ERROR: syntax: "$" expression outside quote</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; 'A' &lt; 'a'
true

julia&gt; 'A' &lt;= 'a' &lt;= 'Z'
false

julia&gt; 'A' &lt;= 'X' &lt;= 'Z'
true

julia&gt; 'x' - 'a'
23

julia&gt; 'A' + 1
'B': ASCII/Unicode U+0042 (category Lu: Letter, uppercase)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T020534Z" creationid="hsugawa8651" creationdate="20181116T020534Z">
        <seg>julia&gt; 'A' &lt; 'a'
true

julia&gt; 'A' &lt;= 'a' &lt;= 'Z'
false

julia&gt; 'A' &lt;= 'X' &lt;= 'Z'
true

julia&gt; 'x' - 'a'
23

julia&gt; 'A' + 1
'B': ASCII/Unicode U+0042 (category Lu: Letter, uppercase)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; '\u0'
'\0': ASCII/Unicode U+0000 (category Cc: Other, control)

julia&gt; '\u78'
'x': ASCII/Unicode U+0078 (category Ll: Letter, lowercase)

julia&gt; '\u2200'
'∀': Unicode U+2200 (category Sm: Symbol, math)

julia&gt; '\U10ffff'
'\U10ffff': Unicode U+10ffff (category Cn: Other, not assigned)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T020529Z" creationid="hsugawa8651" creationdate="20181116T020529Z">
        <seg>julia&gt; '\u0'
'\0': ASCII/Unicode U+0000 (category Cc: Other, control)

julia&gt; '\u78'
'x': ASCII/Unicode U+0078 (category Ll: Letter, lowercase)

julia&gt; '\u2200'
'∀': Unicode U+2200 (category Sm: Symbol, math)

julia&gt; '\U10ffff'
'\U10ffff': Unicode U+10ffff (category Cn: Other, not assigned)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; 'x'
'x': ASCII/Unicode U+0078 (category Ll: Letter, lowercase)

julia&gt; typeof(ans)
Char</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T020508Z" creationid="hsugawa8651" creationdate="20181116T020508Z">
        <seg>julia&gt; 'x'
'x': ASCII/Unicode U+0078 (category Ll: Letter, lowercase)

julia&gt; typeof(ans)
Char</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; (1+2)::AbstractFloat
ERROR: TypeError: in typeassert, expected AbstractFloat, got Int64

julia&gt; (1+2)::Int
3</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T021429Z" creationid="hsugawa8651" creationdate="20181116T021429Z">
        <seg>julia&gt; (1+2)::AbstractFloat
ERROR: TypeError: in typeassert, expected AbstractFloat, got Int64

julia&gt; (1+2)::Int
3</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; (1+2)::AbstractFloat
ERROR: TypeError: typeassert: expected AbstractFloat, got Int64

julia&gt; (1+2)::Int
3</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T094854Z" creationid="hsugawa8651" creationdate="20181120T094854Z">
        <seg>julia&gt; (1+2)::AbstractFloat
ERROR: TypeError: typeassert: expected AbstractFloat, got Int64

julia&gt; (1+2)::Int
3</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; (1, 1+1)
(1, 2)

julia&gt; (1,)
(1,)

julia&gt; x = (0.0, "hello", 6*7)
(0.0, "hello", 42)

julia&gt; x[2]
"hello"</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181110T030017Z" creationid="hsugawa8651" creationdate="20181110T030017Z">
        <seg>julia&gt; (1, 1+1)
(1, 2)

julia&gt; (1,)
(1,)

julia&gt; x = (0.0, "hello", 6*7)
(0.0, "hello", 42)

julia&gt; x[2]
"hello"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; (Cstring)
Cstring

julia&gt; (Cstring,)
(Cstring,)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T224103Z" creationid="hsugawa8651" creationdate="20181109T224103Z">
        <seg>julia&gt; (Cstring)
Cstring

julia&gt; (Cstring,)
(Cstring,)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; (typemin(Float16),typemax(Float16))
(-Inf16, Inf16)

julia&gt; (typemin(Float32),typemax(Float32))
(-Inf32, Inf32)

julia&gt; (typemin(Float64),typemax(Float64))
(-Inf, Inf)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T110853Z" creationid="hsugawa8651" creationdate="20181112T110853Z">
        <seg>julia&gt; (typemin(Float16),typemax(Float16))
(-Inf16, Inf16)

julia&gt; (typemin(Float32),typemax(Float32))
(-Inf32, Inf32)

julia&gt; (typemin(Float64),typemax(Float64))
(-Inf, Inf)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; (typemin(Int32), typemax(Int32))
(-2147483648, 2147483647)

julia&gt; for T in [Int8,Int16,Int32,Int64,Int128,UInt8,UInt16,UInt32,UInt64,UInt128]
           println("$(lpad(T,7)): [$(typemin(T)),$(typemax(T))]")
       end
   Int8: [-128,127]
  Int16: [-32768,32767]
  Int32: [-2147483648,2147483647]
  Int64: [-9223372036854775808,9223372036854775807]
 Int128: [-170141183460469231731687303715884105728,170141183460469231731687303715884105727]
  UInt8: [0,255]
 UInt16: [0,65535]
 UInt32: [0,4294967295]
 UInt64: [0,18446744073709551615]
UInt128: [0,340282366920938463463374607431768211455]</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T225534Z" creationid="hsugawa8651" creationdate="20181109T225534Z">
        <seg>julia&gt; (typemin(Int32), typemax(Int32))
(-2147483648, 2147483647)

julia&gt; for T in [Int8,Int16,Int32,Int64,Int128,UInt8,UInt16,UInt32,UInt64,UInt128]
           println("$(lpad(T,7)): [$(typemin(T)),$(typemax(T))]")
       end
   Int8: [-128,127]
  Int16: [-32768,32767]
  Int32: [-2147483648,2147483647]
  Int64: [-9223372036854775808,9223372036854775807]
 Int128: [-170141183460469231731687303715884105728,170141183460469231731687303715884105727]
  UInt8: [0,255]
 UInt16: [0,65535]
 UInt32: [0,4294967295]
 UInt64: [0,18446744073709551615]
UInt128: [0,340282366920938463463374607431768211455]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; (x-1)(x+1)
ERROR: MethodError: objects of type Int64 are not callable

julia&gt; x(x+1)
ERROR: MethodError: objects of type Int64 are not callable</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T111843Z" creationid="hsugawa8651" creationdate="20181112T111843Z">
        <seg>julia&gt; (x-1)(x+1)
ERROR: MethodError: objects of type Int64 are not callable

julia&gt; x(x+1)
ERROR: MethodError: objects of type Int64 are not callable</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; (x-1)x
6</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T111836Z" creationid="hsugawa8651" creationdate="20181112T111836Z">
        <seg>julia&gt; (x-1)x
6</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; -0.0 == 0.0
true

julia&gt; isequal(-0.0, 0.0)
false</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T030616Z" creationid="hsugawa8651" creationdate="20181114T030616Z">
        <seg>julia&gt; -0.0 == 0.0
true

julia&gt; isequal(-0.0, 0.0)
false</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; -0x2
0xfe

julia&gt; -0x0002
0xfffe</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T225522Z" creationid="hsugawa8651" creationdate="20181109T225522Z">
        <seg>julia&gt; -0x2
0xfe

julia&gt; -0x0002
0xfffe</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; 0.0 == -0.0
true

julia&gt; bits(0.0)
"0000000000000000000000000000000000000000000000000000000000000000"

julia&gt; bits(-0.0)
"1000000000000000000000000000000000000000000000000000000000000000"</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T000732Z" creationid="hsugawa8651" creationdate="20181120T000732Z">
        <seg>julia&gt; 0.0 == -0.0
true

julia&gt; bits(0.0)
"0000000000000000000000000000000000000000000000000000000000000000"

julia&gt; bits(-0.0)
"1000000000000000000000000000000000000000000000000000000000000000"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; 0.0 == -0.0
true

julia&gt; bitstring(0.0)
"0000000000000000000000000000000000000000000000000000000000000000"

julia&gt; bitstring(-0.0)
"1000000000000000000000000000000000000000000000000000000000000000"</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T110748Z" creationid="hsugawa8651" creationdate="20181112T110748Z">
        <seg>julia&gt; 0.0 == -0.0
true

julia&gt; bitstring(0.0)
"0000000000000000000000000000000000000000000000000000000000000000"

julia&gt; bitstring(-0.0)
"1000000000000000000000000000000000000000000000000000000000000000"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; 0.5f0
0.5f0

julia&gt; typeof(ans)
Float32

julia&gt; 2.5f-4
0.00025f0</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T110606Z" creationid="hsugawa8651" creationdate="20181112T110606Z">
        <seg>julia&gt; 0.5f0
0.5f0

julia&gt; typeof(ans)
Float32

julia&gt; 2.5f-4
0.00025f0</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; 0//0
ERROR: ArgumentError: invalid rational: zero(Int64)//zero(Int64)
Stacktrace:
[...]</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T123651Z" creationid="hsugawa8651" creationdate="20181118T123651Z">
        <seg>julia&gt; 0//0
ERROR: ArgumentError: invalid rational: zero(Int64)//zero(Int64)
Stacktrace:
[...]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; 0b10
0x02

julia&gt; typeof(ans)
UInt8

julia&gt; 0o010
0x08

julia&gt; typeof(ans)
UInt8

julia&gt; 0x00000000000000001111222233334444
0x00000000000000001111222233334444

julia&gt; typeof(ans)
UInt128</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T225357Z" creationid="hsugawa8651" creationdate="20181109T225357Z">
        <seg>julia&gt; 0b10
0x02

julia&gt; typeof(ans)
UInt8

julia&gt; 0o010
0x08

julia&gt; typeof(ans)
UInt8

julia&gt; 0x00000000000000001111222233334444
0x00000000000000001111222233334444

julia&gt; typeof(ans)
UInt128</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; 0x1
0x01

julia&gt; typeof(ans)
UInt8

julia&gt; 0x123
0x0123

julia&gt; typeof(ans)
UInt16

julia&gt; 0x1234567
0x01234567

julia&gt; typeof(ans)
UInt32

julia&gt; 0x123456789abcdef
0x0123456789abcdef

julia&gt; typeof(ans)
UInt64</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T000721Z" creationid="hsugawa8651" creationdate="20181120T000721Z">
        <seg>julia&gt; 0x1
0x01

julia&gt; typeof(ans)
UInt8

julia&gt; 0x123
0x0123

julia&gt; typeof(ans)
UInt16

julia&gt; 0x1234567
0x01234567

julia&gt; typeof(ans)
UInt32

julia&gt; 0x123456789abcdef
0x0123456789abcdef

julia&gt; typeof(ans)
UInt64</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; 0x1
0x01

julia&gt; typeof(ans)
UInt8

julia&gt; 0x123
0x0123

julia&gt; typeof(ans)
UInt16

julia&gt; 0x1234567
0x01234567

julia&gt; typeof(ans)
UInt32

julia&gt; 0x123456789abcdef
0x0123456789abcdef

julia&gt; typeof(ans)
UInt64

julia&gt; 0x11112222333344445555666677778888
0x11112222333344445555666677778888

julia&gt; typeof(ans)
UInt128</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T110410Z" creationid="hsugawa8651" creationdate="20181112T110410Z">
        <seg>julia&gt; 0x1
0x01

julia&gt; typeof(ans)
UInt8

julia&gt; 0x123
0x0123

julia&gt; typeof(ans)
UInt16

julia&gt; 0x1234567
0x01234567

julia&gt; typeof(ans)
UInt32

julia&gt; 0x123456789abcdef
0x0123456789abcdef

julia&gt; typeof(ans)
UInt64

julia&gt; 0x11112222333344445555666677778888
0x11112222333344445555666677778888

julia&gt; typeof(ans)
UInt128</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; 0x1p0
1.0

julia&gt; 0x1.8p3
12.0

julia&gt; 0x.4p-1
0.125

julia&gt; typeof(ans)
Float64</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T110706Z" creationid="hsugawa8651" creationdate="20181112T110706Z">
        <seg>julia&gt; 0x1p0
1.0

julia&gt; 0x1.8p3
12.0

julia&gt; 0x.4p-1
0.125

julia&gt; typeof(ans)
Float64</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; 1
1

julia&gt; 1234
1234</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T225207Z" creationid="hsugawa8651" creationdate="20181109T225207Z">
        <seg>julia&gt; 1
1

julia&gt; 1234
1234</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; 1 &amp;&amp; true
ERROR: TypeError: non-boolean (Int64) used in boolean context</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T230815Z" creationid="hsugawa8651" creationdate="20181109T230815Z">
        <seg>julia&gt; 1 &amp;&amp; true
ERROR: TypeError: non-boolean (Int64) used in boolean context</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; 1 + 2 + 3
6

julia&gt; +(1,2,3)
6</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181110T025821Z" creationid="hsugawa8651" creationdate="20181110T025821Z">
        <seg>julia&gt; 1 + 2 + 3
6

julia&gt; +(1,2,3)
6</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; 1 + 2 + 3
6

julia&gt; 1 - 2
-1

julia&gt; 3*2/12
0.5</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T132214Z" creationid="hsugawa8651" creationdate="20181113T132214Z">
        <seg>julia&gt; 1 + 2 + 3
6

julia&gt; 1 - 2
-1

julia&gt; 3*2/12
0.5</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; 1 + Inf*im
1.0 + Inf*im

julia&gt; 1 + NaN*im
1.0 + NaN*im</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T123456Z" creationid="hsugawa8651" creationdate="20181118T123456Z">
        <seg>julia&gt; 1 + Inf*im
1.0 + Inf*im

julia&gt; 1 + NaN*im
1.0 + NaN*im</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; 1 &lt; 2 &lt;= 2 &lt; 3 == 3 &gt; 2 &gt;= 1 == 1 &lt; 3 != 5
true</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T030714Z" creationid="hsugawa8651" creationdate="20181114T030714Z">
        <seg>julia&gt; 1 &lt; 2 &lt;= 2 &lt; 3 == 3 &gt; 2 &gt;= 1 == 1 &lt; 3 != 5
true</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; 1 == 1
true

julia&gt; 1 == 2
false

julia&gt; 1 != 2
true

julia&gt; 1 == 1.0
true

julia&gt; 1 &lt; 2
true

julia&gt; 1.0 &gt; 3
false

julia&gt; 1 &gt;= 1.0
true

julia&gt; -1 &lt;= 1
true

julia&gt; -1 &lt;= -1
true

julia&gt; -1 &lt;= -2
false

julia&gt; 3 &lt; -0.5
false</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T030451Z" creationid="hsugawa8651" creationdate="20181114T030451Z">
        <seg>julia&gt; 1 == 1
true

julia&gt; 1 == 2
false

julia&gt; 1 != 2
true

julia&gt; 1 == 1.0
true

julia&gt; 1 &lt; 2
true

julia&gt; 1.0 &gt; 3
false

julia&gt; 1 &gt;= 1.0
true

julia&gt; -1 &lt;= 1
true

julia&gt; -1 &lt;= -1
true

julia&gt; -1 &lt;= -2
false

julia&gt; 3 &lt; -0.5
false</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; 1.0
1.0

julia&gt; 1.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T110548Z" creationid="hsugawa8651" creationdate="20181112T110548Z">
        <seg>julia&gt; 1.0
1.0

julia&gt; 1.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; 1/Inf
0.0

julia&gt; 1/0
Inf

julia&gt; -5/0
-Inf

julia&gt; 0.000001/0
Inf

julia&gt; 0/0
NaN

julia&gt; 500 + Inf
Inf

julia&gt; 500 - Inf
-Inf

julia&gt; Inf + Inf
Inf

julia&gt; Inf - Inf
NaN

julia&gt; Inf * Inf
Inf

julia&gt; Inf / Inf
NaN

julia&gt; 0 * Inf
NaN</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T110848Z" creationid="hsugawa8651" creationdate="20181112T110848Z">
        <seg>julia&gt; 1/Inf
0.0

julia&gt; 1/0
Inf

julia&gt; -5/0
-Inf

julia&gt; 0.000001/0
Inf

julia&gt; 0/0
NaN

julia&gt; 500 + Inf
Inf

julia&gt; 500 - Inf
-Inf

julia&gt; Inf + Inf
Inf

julia&gt; Inf - Inf
NaN

julia&gt; Inf * Inf
Inf

julia&gt; Inf / Inf
NaN

julia&gt; 0 * Inf
NaN</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; 10_000, 0.000_000_005, 0xdead_beef, 0b1011_0010
(10000, 5.0e-9, 0xdeadbeef, 0xb2)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T120341Z" creationid="hsugawa8651" creationdate="20181118T120341Z">
        <seg>julia&gt; 10_000, 0.000_000_005, 0xdead_beef, 0b1011_0010
(10000, 5.0e-9, 0xdeadbeef, 0xb2)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; 2(1 - 1im)
2 - 2im

julia&gt; (2 + 3im) - 1
1 + 3im

julia&gt; (1 + 2im) + 0.5
1.5 + 2.0im

julia&gt; (2 + 3im) - 0.5im
2.0 + 2.5im

julia&gt; 0.75(1 + 2im)
0.75 + 1.5im

julia&gt; (2 + 3im) / 2
1.0 + 1.5im

julia&gt; (1 - 3im) / (2 + 2im)
-0.5 - 1.0im

julia&gt; 2im^2
-2 + 0im

julia&gt; 1 + 3/4im
1.0 - 0.75im</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T123152Z" creationid="hsugawa8651" creationdate="20181118T123152Z">
        <seg>julia&gt; 2(1 - 1im)
2 - 2im

julia&gt; (2 + 3im) - 1
1 + 3im

julia&gt; (1 + 2im) + 0.5
1.5 + 2.0im

julia&gt; (2 + 3im) - 0.5im
2.0 + 2.5im

julia&gt; 0.75(1 + 2im)
0.75 + 1.5im

julia&gt; (2 + 3im) / 2
1.0 + 1.5im

julia&gt; (1 - 3im) / (2 + 2im)
-0.5 - 1.0im

julia&gt; 2im^2
-2 + 0im

julia&gt; 1 + 3/4im
1.0 - 0.75im</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; 2(x-1)^2 - 3(x-1) + 1
3</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T111809Z" creationid="hsugawa8651" creationdate="20181112T111809Z">
        <seg>julia&gt; 2(x-1)^2 - 3(x-1) + 1
3</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; 2//3
2//3</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T123506Z" creationid="hsugawa8651" creationdate="20181118T123506Z">
        <seg>julia&gt; 2//3
2//3</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; 2//3 == 6//9
true

julia&gt; 2//3 == 9//27
false

julia&gt; 3//7 &lt; 1//2
true

julia&gt; 3//4 &gt; 2//3
true

julia&gt; 2//4 + 1//6
2//3

julia&gt; 5//12 - 1//4
1//6

julia&gt; 5//8 * 3//12
5//32

julia&gt; 6//5 / 10//7
21//25</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T123538Z" creationid="hsugawa8651" creationdate="20181118T123538Z">
        <seg>julia&gt; 2//3 == 6//9
true

julia&gt; 2//3 == 9//27
false

julia&gt; 3//7 &lt; 1//2
true

julia&gt; 3//4 &gt; 2//3
true

julia&gt; 2//4 + 1//6
2//3

julia&gt; 5//12 - 1//4
1//6

julia&gt; 5//8 * 3//12
5//32

julia&gt; 6//5 / 10//7
21//25</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; 25 in Squares(10)
true

julia&gt; using Statistics

julia&gt; mean(Squares(100))
3383.5

julia&gt; std(Squares(100))
3024.355854282583</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T112556Z" creationid="hsugawa8651" creationdate="20181112T112556Z">
        <seg>julia&gt; 25 in Squares(10)
true

julia&gt; using Statistics

julia&gt; mean(Squares(100))
3383.5

julia&gt; std(Squares(100))
3024.355854282583</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; 2^2x
64</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T111740Z" creationid="hsugawa8651" creationdate="20181112T111740Z">
        <seg>julia&gt; 2^2x
64</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; 3//5 + 1
8//5

julia&gt; 3//5 - 0.5
0.09999999999999998

julia&gt; 2//7 * (1 + 2im)
2//7 + 4//7*im

julia&gt; 2//7 * (1.5 + 2im)
0.42857142857142855 + 0.5714285714285714im

julia&gt; 3//2 / (1 + 2im)
3//10 - 3//5*im

julia&gt; 1//2 + 2im
1//2 + 2//1*im

julia&gt; 1 + 2//3im
1//1 - 2//3*im

julia&gt; 0.5 == 1//2
true

julia&gt; 0.33 == 1//3
false

julia&gt; 0.33 &lt; 1//3
true

julia&gt; 1//3 - 0.33
0.0033333333333332993</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T123657Z" creationid="hsugawa8651" creationdate="20181118T123657Z">
        <seg>julia&gt; 3//5 + 1
8//5

julia&gt; 3//5 - 0.5
0.09999999999999998

julia&gt; 2//7 * (1 + 2im)
2//7 + 4//7*im

julia&gt; 2//7 * (1.5 + 2im)
0.42857142857142855 + 0.5714285714285714im

julia&gt; 3//2 / (1 + 2im)
3//10 - 3//5*im

julia&gt; 1//2 + 2im
1//2 + 2//1*im

julia&gt; 1 + 2//3im
1//1 - 2//3*im

julia&gt; 0.5 == 1//2
true

julia&gt; 0.33 == 1//3
false

julia&gt; 0.33 &lt; 1//3
true

julia&gt; 1//3 - 0.33
0.0033333333333332993</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; 5//0
1//0

julia&gt; -3//0
-1//0

julia&gt; typeof(ans)
Rational{Int64}</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T123645Z" creationid="hsugawa8651" creationdate="20181118T123645Z">
        <seg>julia&gt; 5//0
1//0

julia&gt; -3//0
-1//0

julia&gt; typeof(ans)
Rational{Int64}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; 6//9
2//3

julia&gt; -4//8
-1//2

julia&gt; 5//-15
-1//3

julia&gt; -4//-12
1//3</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T123511Z" creationid="hsugawa8651" creationdate="20181118T123511Z">
        <seg>julia&gt; 6//9
2//3

julia&gt; -4//8
-1//2

julia&gt; 5//-15
-1//3

julia&gt; -4//-12
1//3</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; :(1 + 2)
:(1 + 2)

julia&gt; eval(ans)
3

julia&gt; ex = :(a + b)
:(a + b)

julia&gt; eval(ex)
ERROR: UndefVarError: b not defined
[...]

julia&gt; a = 1; b = 2;

julia&gt; eval(ex)
3</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T015227Z" creationid="hsugawa8651" creationdate="20181116T015227Z">
        <seg>julia&gt; :(1 + 2)
:(1 + 2)

julia&gt; eval(ans)
3

julia&gt; ex = :(a + b)
:(a + b)

julia&gt; eval(ex)
ERROR: UndefVarError: b not defined
[...]

julia&gt; a = 1; b = 2;

julia&gt; eval(ex)
3</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; :(:)
:(:)

julia&gt; :(::)
:(::)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T015112Z" creationid="hsugawa8651" creationdate="20181116T015112Z">
        <seg>julia&gt; :(:)
:(:)

julia&gt; :(::)
:(::)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; :foo
:foo

julia&gt; typeof(ans)
Symbol</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T015105Z" creationid="hsugawa8651" creationdate="20181116T015105Z">
        <seg>julia&gt; :foo
:foo

julia&gt; typeof(ans)
Symbol</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; :foo == Symbol("foo")
true

julia&gt; Symbol("func",10)
:func10

julia&gt; Symbol(:var,'_',"sym")
:var_sym</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T015109Z" creationid="hsugawa8651" creationdate="20181116T015109Z">
        <seg>julia&gt; :foo == Symbol("foo")
true

julia&gt; Symbol("func",10)
:func10

julia&gt; Symbol(:var,'_',"sym")
:var_sym</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; &lt;x1/&gt;123
-124

julia&gt; 123 &amp; 234
106

julia&gt; 123 | 234
251

julia&gt; 123 ⊻ 234
145

julia&gt; xor(123, 234)
145

julia&gt; &lt;x2/&gt;UInt32(123)
0xffffff84

julia&gt; &lt;x3/&gt;UInt8(123)
0x84</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T132330Z" creationid="hsugawa8651" creationdate="20181113T132330Z">
        <seg>julia&gt; &lt;x1/&gt;123
-124

julia&gt; 123 &amp; 234
106

julia&gt; 123 | 234
251

julia&gt; 123 ⊻ 234
145

julia&gt; xor(123, 234)
145

julia&gt; &lt;x2/&gt;UInt32(123)
0xffffff84

julia&gt; &lt;x3/&gt;UInt8(123)
0x84</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; @assert 1 == 1.0

julia&gt; @assert 1 == 0
ERROR: AssertionError: 1 == 0</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T015423Z" creationid="hsugawa8651" creationdate="20181116T015423Z">
        <seg>julia&gt; @assert 1 == 1.0

julia&gt; @assert 1 == 0
ERROR: AssertionError: 1 == 0</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; @generated function bar(x)
           if x &lt;: Integer
               return :(x ^ 2)
           else
               return :(x)
           end
       end
bar (generic function with 1 method)

julia&gt; bar(4)
16

julia&gt; bar("baz")
"baz"</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T015745Z" creationid="hsugawa8651" creationdate="20181116T015745Z">
        <seg>julia&gt; @generated function bar(x)
           if x &lt;: Integer
               return :(x ^ 2)
           else
               return :(x)
           end
       end
bar (generic function with 1 method)

julia&gt; bar(4)
16

julia&gt; bar("baz")
"baz"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; @generated function baz(x)
           if rand() &lt; .9
               return :(x^2)
           else
               return :("boo!")
           end
       end
baz (generic function with 1 method)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T015748Z" creationid="hsugawa8651" creationdate="20181116T015748Z">
        <seg>julia&gt; @generated function baz(x)
           if rand() &lt; .9
               return :(x^2)
           else
               return :("boo!")
           end
       end
baz (generic function with 1 method)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; @generated function foo(x)
           Core.println(x)
           return :(x * x)
       end
foo (generic function with 1 method)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T015657Z" creationid="hsugawa8651" creationdate="20181116T015657Z">
        <seg>julia&gt; @generated function foo(x)
           Core.println(x)
           return :(x * x)
       end
foo (generic function with 1 method)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; @generated function sub2ind_gen(dims::NTuple{N}, I::Integer...) where N
           ex = :(I[$N] - 1)
           for i = (N - 1):-1:1
               ex = :(I[$i] - 1 + dims[$i] * $ex)
           end
           return :($ex + 1)
       end
sub2ind_gen (generic function with 1 method)

julia&gt; sub2ind_gen((3, 5), 1, 2)
4</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T032317Z" creationid="hsugawa8651" creationdate="20181116T032317Z">
        <seg>julia&gt; @generated function sub2ind_gen(dims::NTuple{N}, I::Integer...) where N
           ex = :(I[$N] - 1)
           for i = (N - 1):-1:1
               ex = :(I[$i] - 1 + dims[$i] * $ex)
           end
           return :($ex + 1)
       end
sub2ind_gen (generic function with 1 method)

julia&gt; sub2ind_gen((3, 5), 1, 2)
4</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; @generated function sub2ind_gen(dims::NTuple{N}, I::Integer...) where N
           return sub2ind_gen_impl(dims, I...)
       end
sub2ind_gen (generic function with 1 method)

julia&gt; function sub2ind_gen_impl(dims::Type{T}, I...) where T &lt;: NTuple{N,Any} where N
           length(I) == N || return :(error("partial indexing is unsupported"))
           ex = :(I[$N] - 1)
           for i = (N - 1):-1:1
               ex = :(I[$i] - 1 + dims[$i] * $ex)
           end
           return :($ex + 1)
       end
sub2ind_gen_impl (generic function with 1 method)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T032322Z" creationid="hsugawa8651" creationdate="20181116T032322Z">
        <seg>julia&gt; @generated function sub2ind_gen(dims::NTuple{N}, I::Integer...) where N
           return sub2ind_gen_impl(dims, I...)
       end
sub2ind_gen (generic function with 1 method)

julia&gt; function sub2ind_gen_impl(dims::Type{T}, I...) where T &lt;: NTuple{N,Any} where N
           length(I) == N || return :(error("partial indexing is unsupported"))
           ex = :(I[$N] - 1)
           for i = (N - 1):-1:1
               ex = :(I[$i] - 1 + dims[$i] * $ex)
           end
           return :($ex + 1)
       end
sub2ind_gen_impl (generic function with 1 method)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; @generated gen1(x::Real) = f(x);

julia&gt; gen1(1)
"definition for Type{Int}"</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T015741Z" creationid="hsugawa8651" creationdate="20181116T015741Z">
        <seg>julia&gt; @generated gen1(x::Real) = f(x);

julia&gt; gen1(1)
"definition for Type{Int}"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; @macroexpand @assert a == b
:(if Main.a == Main.b
        Main.nothing
    else
        (Main.throw)((Main.AssertionError)("a == b"))
    end)

julia&gt; @macroexpand @assert a==b "a should equal b!"
:(if Main.a == Main.b
        Main.nothing
    else
        (Main.throw)((Main.AssertionError)("a should equal b!"))
    end)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T015446Z" creationid="hsugawa8651" creationdate="20181116T015446Z">
        <seg>julia&gt; @macroexpand @assert a == b
:(if Main.a == Main.b
        Main.nothing
    else
        (Main.throw)((Main.AssertionError)("a == b"))
    end)

julia&gt; @macroexpand @assert a==b "a should equal b!"
:(if Main.a == Main.b
        Main.nothing
    else
        (Main.throw)((Main.AssertionError)("a should equal b!"))
    end)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; @macroexpand @sayhello "human"
:((println)("Hello, ", "human"))</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T015313Z" creationid="hsugawa8651" creationdate="20181116T015313Z">
        <seg>julia&gt; @macroexpand @sayhello "human"
:((println)("Hello, ", "human"))</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; @noinline bad_function() = undeclared_variable
bad_function (generic function with 1 method)

julia&gt; @noinline example() = try
           bad_function()
       catch
           stacktrace()
       end
example (generic function with 1 method)

julia&gt; example()
7-element Array{Base.StackTraces.StackFrame,1}:
 example() at REPL[2]:4
 top-level scope
 eval at boot.jl:317 [inlined]
[...]</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T020411Z" creationid="hsugawa8651" creationdate="20181116T020411Z">
        <seg>julia&gt; @noinline bad_function() = undeclared_variable
bad_function (generic function with 1 method)

julia&gt; @noinline example() = try
           bad_function()
       catch
           stacktrace()
       end
example (generic function with 1 method)

julia&gt; example()
7-element Array{Base.StackTraces.StackFrame,1}:
 example() at REPL[2]:4
 top-level scope
 eval at boot.jl:317 [inlined]
[...]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; @noinline bad_function() = undeclared_variable
bad_function (generic function with 1 method)

julia&gt; @noinline example() = try
           bad_function()
       catch
           stacktrace(catch_backtrace())
       end
example (generic function with 1 method)

julia&gt; example()
8-element Array{Base.StackTraces.StackFrame,1}:
 bad_function() at REPL[1]:1
 example() at REPL[2]:2
[...]</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T020416Z" creationid="hsugawa8651" creationdate="20181116T020416Z">
        <seg>julia&gt; @noinline bad_function() = undeclared_variable
bad_function (generic function with 1 method)

julia&gt; @noinline example() = try
           bad_function()
       catch
           stacktrace(catch_backtrace())
       end
example (generic function with 1 method)

julia&gt; example()
8-element Array{Base.StackTraces.StackFrame,1}:
 bad_function() at REPL[1]:1
 example() at REPL[2]:2
[...]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; @noinline child() = error("Whoops!")
child (generic function with 1 method)

julia&gt; @noinline parent() = child()
parent (generic function with 1 method)

julia&gt; @noinline function grandparent()
           try
               parent()
           catch err
               println("ERROR: ", err.msg)
               stacktrace(catch_backtrace())
           end
       end
grandparent (generic function with 1 method)

julia&gt; grandparent()
ERROR: Whoops!</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T020419Z" creationid="hsugawa8651" creationdate="20181116T020419Z">
        <seg>julia&gt; @noinline child() = error("Whoops!")
child (generic function with 1 method)

julia&gt; @noinline parent() = child()
parent (generic function with 1 method)

julia&gt; @noinline function grandparent()
           try
               parent()
           catch err
               println("ERROR: ", err.msg)
               stacktrace(catch_backtrace())
           end
       end
grandparent (generic function with 1 method)

julia&gt; grandparent()
ERROR: Whoops!</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; @sayhello("human")
Hello, human</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T015307Z" creationid="hsugawa8651" creationdate="20181116T015307Z">
        <seg>julia&gt; @sayhello("human")
Hello, human</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; @sayhello()
Hello, world!</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T015301Z" creationid="hsugawa8651" creationdate="20181116T015301Z">
        <seg>julia&gt; @sayhello()
Hello, world!</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; A = SparseArray(Float64, 3, 3)
3×3 SparseArray{Float64,2}:
 0.0  0.0  0.0
 0.0  0.0  0.0
 0.0  0.0  0.0

julia&gt; fill!(A, 2)
3×3 SparseArray{Float64,2}:
 2.0  2.0  2.0
 2.0  2.0  2.0
 2.0  2.0  2.0

julia&gt; A[:] = 1:length(A); A
3×3 SparseArray{Float64,2}:
 1.0  4.0  7.0
 2.0  5.0  8.0
 3.0  6.0  9.0</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T083232Z" creationid="hsugawa8651" creationdate="20181113T083232Z">
        <seg>julia&gt; A = SparseArray(Float64, 3, 3)
3×3 SparseArray{Float64,2}:
 0.0  0.0  0.0
 0.0  0.0  0.0
 0.0  0.0  0.0

julia&gt; fill!(A, 2)
3×3 SparseArray{Float64,2}:
 2.0  2.0  2.0
 2.0  2.0  2.0
 2.0  2.0  2.0

julia&gt; A[:] = 1:length(A); A
3×3 SparseArray{Float64,2}:
 1.0  4.0  7.0
 2.0  5.0  8.0
 3.0  6.0  9.0</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; A = [1.0, 2.0, 3.0]
3-element Array{Float64,1}:
 1.0
 2.0
 3.0

julia&gt; sin.(A)
3-element Array{Float64,1}:
 0.8414709848078965
 0.9092974268256817
 0.1411200080598672</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181110T030231Z" creationid="hsugawa8651" creationdate="20181110T030231Z">
        <seg>julia&gt; A = [1.0, 2.0, 3.0]
3-element Array{Float64,1}:
 1.0
 2.0
 3.0

julia&gt; sin.(A)
3-element Array{Float64,1}:
 0.8414709848078965
 0.9092974268256817
 0.1411200080598672</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; A = [1.3, -2.7, 4.4, 3.1]
4-element Array{Float64,1}:
  1.3
 -2.7
  4.4
  3.1

julia&gt; ccall(:qsort, Cvoid, (Ptr{Cdouble}, Csize_t, Csize_t, Ptr{Cvoid}),
             A, length(A), sizeof(eltype(A)), mycompare_c)

julia&gt; A
4-element Array{Float64,1}:
 -2.7
  1.3
  3.1
  4.4</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T022704Z" creationid="hsugawa8651" creationdate="20181116T022704Z">
        <seg>julia&gt; A = [1.3, -2.7, 4.4, 3.1]
4-element Array{Float64,1}:
  1.3
 -2.7
  4.4
  3.1

julia&gt; ccall(:qsort, Cvoid, (Ptr{Cdouble}, Csize_t, Csize_t, Ptr{Cvoid}),
             A, length(A), sizeof(eltype(A)), mycompare_c)

julia&gt; A
4-element Array{Float64,1}:
 -2.7
  1.3
  3.1
  4.4</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; A = rand(4,3);

julia&gt; B = view(A, 1:3, 2:3);

julia&gt; for i in eachindex(B)
           @show i
       end
i = CartesianIndex(1, 1)
i = CartesianIndex(2, 1)
i = CartesianIndex(3, 1)
i = CartesianIndex(1, 2)
i = CartesianIndex(2, 2)
i = CartesianIndex(3, 2)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T155847Z" creationid="hsugawa8651" creationdate="20181109T155847Z">
        <seg>julia&gt; A = rand(4,3);

julia&gt; B = view(A, 1:3, 2:3);

julia&gt; for i in eachindex(B)
           @show i
       end
i = CartesianIndex(1, 1)
i = CartesianIndex(2, 1)
i = CartesianIndex(3, 1)
i = CartesianIndex(1, 2)
i = CartesianIndex(2, 2)
i = CartesianIndex(3, 2)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; A = reshape(1:32, 4, 4, 2);

julia&gt; A[3, 2, 1]
7

julia&gt; A[CartesianIndex(3, 2, 1)] == A[3, 2, 1] == 7
true</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T155608Z" creationid="hsugawa8651" creationdate="20181109T155608Z">
        <seg>julia&gt; A = reshape(1:32, 4, 4, 2);

julia&gt; A[3, 2, 1]
7

julia&gt; A[CartesianIndex(3, 2, 1)] == A[3, 2, 1] == 7
true</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; A = reshape(collect(1:16), (2, 2, 2, 2))
2×2×2×2 Array{Int64,4}:
[:, :, 1, 1] =
 1  3
 2  4

[:, :, 2, 1] =
 5  7
 6  8

[:, :, 1, 2] =
  9  11
 10  12

[:, :, 2, 2] =
 13  15
 14  16

julia&gt; A[1, 2, 1, 1] &lt;x1/&gt; all scalar indices
3

julia&gt; A[[1, 2], [1], [1, 2], [1]] &lt;x2/&gt; all vector indices
2×1×2×1 Array{Int64,4}:
[:, :, 1, 1] =
 1
 2

[:, :, 2, 1] =
 5
 6

julia&gt; A[[1, 2], [1], [1, 2], 1] &lt;x3/&gt; a mix of index types
2×1×2 Array{Int64,3}:
[:, :, 1] =
 1
 2

[:, :, 2] =
 5
 6</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T155139Z" creationid="hsugawa8651" creationdate="20181109T155139Z">
        <seg>julia&gt; A = reshape(collect(1:16), (2, 2, 2, 2))
2×2×2×2 Array{Int64,4}:
[:, :, 1, 1] =
 1  3
 2  4

[:, :, 2, 1] =
 5  7
 6  8

[:, :, 1, 2] =
  9  11
 10  12

[:, :, 2, 2] =
 13  15
 14  16

julia&gt; A[1, 2, 1, 1] &lt;x1/&gt; all scalar indices
3

julia&gt; A[[1, 2], [1], [1, 2], [1]] &lt;x2/&gt; all vector indices
2×1×2×1 Array{Int64,4}:
[:, :, 1, 1] =
 1
 2

[:, :, 2, 1] =
 5
 6

julia&gt; A[[1, 2], [1], [1, 2], 1] &lt;x3/&gt; a mix of index types
2×1×2 Array{Int64,3}:
[:, :, 1] =
 1
 2

[:, :, 2] =
 5
 6</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; A = reshape(collect(1:16), (2, 2, 2, 2));

julia&gt; A[[1 2; 1 2]]
2×2 Array{Int64,2}:
 1  2
 1  2

julia&gt; A[[1 2; 1 2], 1, 2, 1]
2×2 Array{Int64,2}:
 5  6
 5  6</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T155157Z" creationid="hsugawa8651" creationdate="20181109T155157Z">
        <seg>julia&gt; A = reshape(collect(1:16), (2, 2, 2, 2));

julia&gt; A[[1 2; 1 2]]
2×2 Array{Int64,2}:
 1  2
 1  2

julia&gt; A[[1 2; 1 2], 1, 2, 1]
2×2 Array{Int64,2}:
 5  6
 5  6</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; A = reshape(collect(1:2:18), (3, 3))
3×3 Array{Int64,2}:
 1   7  13
 3   9  15
 5  11  17

julia&gt; A[4]
7

julia&gt; A[[2, 5, 8]]
3-element Array{Int64,1}:
  3
  9
 15

julia&gt; A[[1 4; 3 8]]
2×2 Array{Int64,2}:
 1   7
 5  15

julia&gt; A[[]]
0-element Array{Int64,1}

julia&gt; A[1:2:5]
3-element Array{Int64,1}:
 1
 5
 9

julia&gt; A[2, :]
3-element Array{Int64,1}:
  3
  9
 15

julia&gt; A[:, 3]
3-element Array{Int64,1}:
 13
 15
 17</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T155550Z" creationid="hsugawa8651" creationdate="20181109T155550Z">
        <seg>julia&gt; A = reshape(collect(1:2:18), (3, 3))
3×3 Array{Int64,2}:
 1   7  13
 3   9  15
 5  11  17

julia&gt; A[4]
7

julia&gt; A[[2, 5, 8]]
3-element Array{Int64,1}:
  3
  9
 15

julia&gt; A[[1 4; 3 8]]
2×2 Array{Int64,2}:
 1   7
 5  15

julia&gt; A[[]]
0-element Array{Int64,1}

julia&gt; A[1:2:5]
3-element Array{Int64,1}:
 1
 5
 9

julia&gt; A[2, :]
3-element Array{Int64,1}:
  3
  9
 15

julia&gt; A[:, 3]
3-element Array{Int64,1}:
 13
 15
 17</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; A[1:2,:]
2×3 SparseArray{Float64,2}:
 1.0  4.0  7.0
 2.0  5.0  8.0</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T083241Z" creationid="hsugawa8651" creationdate="20181113T083241Z">
        <seg>julia&gt; A[1:2,:]
2×3 SparseArray{Float64,2}:
 1.0  4.0  7.0
 2.0  5.0  8.0</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; A[CartesianIndex.(axes(A, 1), axes(A, 2)), 1]
4-element Array{Int64,1}:
  1
  6
 11
 16

julia&gt; A[CartesianIndex.(axes(A, 1), axes(A, 2)), :]
4×2 Array{Int64,2}:
  1  17
  6  22
 11  27
 16  32</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T161101Z" creationid="hsugawa8651" creationdate="20181114T161101Z">
        <seg>julia&gt; A[CartesianIndex.(axes(A, 1), axes(A, 2)), 1]
4-element Array{Int64,1}:
  1
  6
 11
 16

julia&gt; A[CartesianIndex.(axes(A, 1), axes(A, 2)), :]
4×2 Array{Int64,2}:
  1  17
  6  22
 11  27
 16  32</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; A[SquaresVector(3)]
3-element SparseArray{Float64,1}:
 1.0
 4.0
 9.0

julia&gt; sum(A)
45.0</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T083334Z" creationid="hsugawa8651" creationdate="20181113T083334Z">
        <seg>julia&gt; A[SquaresVector(3)]
3-element SparseArray{Float64,1}:
 1.0
 4.0
 9.0

julia&gt; sum(A)
45.0</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; Base.eltype(::Type{Squares}) = Int &lt;x1/&gt; Note that this is defined for the type

julia&gt; Base.length(S::Squares) = S.count</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T112644Z" creationid="hsugawa8651" creationdate="20181112T112644Z">
        <seg>julia&gt; Base.eltype(::Type{Squares}) = Int &lt;x1/&gt; Note that this is defined for the type

julia&gt; Base.length(S::Squares) = S.count</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; Base.firstindex(S::Squares) = 1

julia&gt; Base.lastindex(S::Squares) = length(S)

julia&gt; Squares(23)[end]
529</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T113120Z" creationid="hsugawa8651" creationdate="20181112T113120Z">
        <seg>julia&gt; Base.firstindex(S::Squares) = 1

julia&gt; Base.lastindex(S::Squares) = length(S)

julia&gt; Squares(23)[end]
529</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; Base.getindex(S::Squares, i::Number) = S[convert(Int, i)]

julia&gt; Base.getindex(S::Squares, I) = [S[i] for i in I]

julia&gt; Squares(10)[[3,4.,5]]
3-element Array{Int64,1}:
  9
 16
 25</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T113142Z" creationid="hsugawa8651" creationdate="20181112T113142Z">
        <seg>julia&gt; Base.getindex(S::Squares, i::Number) = S[convert(Int, i)]

julia&gt; Base.getindex(S::Squares, I) = [S[i] for i in I]

julia&gt; Squares(10)[[3,4.,5]]
3-element Array{Int64,1}:
  9
 16
 25</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; Base.iterate(rS::Iterators.Reverse{Squares}, state=rS.itr.count) = state &lt; 1 ?</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T112915Z" creationid="hsugawa8651" creationdate="20181112T112915Z">
        <seg>julia&gt; Base.iterate(rS::Iterators.Reverse{Squares}, state=rS.itr.count) = state &lt; 1 ?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; Base.operator_associativity(:-), Base.operator_associativity(:+), Base.operator_associativity(:^)
(:left, :none, :right)

julia&gt; Base.operator_associativity(:⊗), Base.operator_associativity(:sin), Base.operator_associativity(:→)
(:left, :none, :right)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T031001Z" creationid="hsugawa8651" creationdate="20181114T031001Z">
        <seg>julia&gt; Base.operator_associativity(:-), Base.operator_associativity(:+), Base.operator_associativity(:^)
(:left, :none, :right)

julia&gt; Base.operator_associativity(:⊗), Base.operator_associativity(:sin), Base.operator_associativity(:→)
(:left, :none, :right)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; Base.operator_precedence(:+), Base.operator_precedence(:*), Base.operator_precedence(:.)
(11, 13, 17)

julia&gt; Base.operator_precedence(:sin), Base.operator_precedence(:+=), Base.operator_precedence(:(=))  &lt;x1/&gt; (Note the necessary parens on `:(=)`)
(0, 1, 1)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T030953Z" creationid="hsugawa8651" creationdate="20181114T030953Z">
        <seg>julia&gt; Base.operator_precedence(:+), Base.operator_precedence(:*), Base.operator_precedence(:.)
(11, 13, 17)

julia&gt; Base.operator_precedence(:sin), Base.operator_precedence(:+=), Base.operator_precedence(:(=))  &lt;x1/&gt; (Note the necessary parens on `:(=)`)
(0, 1, 1)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; Base.show(io::IO, ::MIME"text/html", z::Polar{T}) where {T} =
           println(io, "&lt;x1/&gt;Polar{$T}&lt;x2/&gt; complex number: ",
                   z.r, " &lt;x3/&gt;e&lt;x4/&gt;&lt;x5/&gt;", z.Θ, " &lt;x6/&gt;i&lt;x7/&gt;&lt;x8/&gt;")</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T022119Z" creationid="hsugawa8651" creationdate="20181116T022119Z">
        <seg>julia&gt; Base.show(io::IO, ::MIME"text/html", z::Polar{T}) where {T} =
           println(io, "&lt;x1/&gt;Polar{$T}&lt;x2/&gt; complex number: ",
                   z.r, " &lt;x3/&gt;e&lt;x4/&gt;&lt;x5/&gt;", z.Θ, " &lt;x6/&gt;i&lt;x7/&gt;&lt;x8/&gt;")</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; Base.show(io::IO, ::MIME"text/plain", z::Polar{T}) where{T} =
           print(io, "Polar{$T} complex number:\n   ", z)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T022112Z" creationid="hsugawa8651" creationdate="20181116T022112Z">
        <seg>julia&gt; Base.show(io::IO, ::MIME"text/plain", z::Polar{T}) where{T} =
           print(io, "Polar{$T} complex number:\n   ", z)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; Base.show(io::IO, z::Polar) = print(io, z.r, " * exp(", z.Θ, "im)")</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T022108Z" creationid="hsugawa8651" creationdate="20181116T022108Z">
        <seg>julia&gt; Base.show(io::IO, z::Polar) = print(io, z.r, " * exp(", z.Θ, "im)")</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; Base.sum(S::Squares) = (n = S.count; return n*(n+1)*(2n+1)÷6)

julia&gt; sum(Squares(1803))
1955361914</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T112844Z" creationid="hsugawa8651" creationdate="20181112T112844Z">
        <seg>julia&gt; Base.sum(S::Squares) = (n = S.count; return n*(n+1)*(2n+1)÷6)

julia&gt; sum(Squares(1803))
1955361914</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; BigInt(typemax(Int64)) + 1
9223372036854775808

julia&gt; parse(BigInt, "123456789012345678901234567890") + 1
123456789012345678901234567891

julia&gt; parse(BigFloat, "1.23456789012345678901")
1.234567890123456789010000000000000000000000000000000000000000000000000000000004

julia&gt; BigFloat(2.0^66) / 3
2.459565876494606882133333333333333333333333333333333333333333333333333333333344e+19

julia&gt; factorial(BigInt(40))
815915283247897734345611269596115894272000000000</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T111550Z" creationid="hsugawa8651" creationdate="20181112T111550Z">
        <seg>julia&gt; BigInt(typemax(Int64)) + 1
9223372036854775808

julia&gt; parse(BigInt, "123456789012345678901234567890") + 1
123456789012345678901234567891

julia&gt; parse(BigFloat, "1.23456789012345678901")
1.234567890123456789010000000000000000000000000000000000000000000000000000000004

julia&gt; BigFloat(2.0^66) / 3
2.459565876494606882133333333333333333333333333333333333333333333333333333333344e+19

julia&gt; factorial(BigInt(40))
815915283247897734345611269596115894272000000000</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; Char(0x110000)
'\U110000': Unicode U+110000 (category Cn: Other, not assigned)

julia&gt; isvalid(Char, 0x110000)
false</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T080703Z" creationid="hsugawa8651" creationdate="20181120T080703Z">
        <seg>julia&gt; Char(0x110000)
'\U110000': Unicode U+110000 (category Cn: Other, not assigned)

julia&gt; isvalid(Char, 0x110000)
false</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; Char(0x110000)
'\U110000': Unicode U+110000 (category In: Invalid, too high)

julia&gt; isvalid(Char, 0x110000)
false</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T020526Z" creationid="hsugawa8651" creationdate="20181116T020526Z">
        <seg>julia&gt; Char(0x110000)
'\U110000': Unicode U+110000 (category In: Invalid, too high)

julia&gt; isvalid(Char, 0x110000)
false</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; Char(120)
'x': ASCII/Unicode U+0078 (category Ll: Letter, lowercase)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T020522Z" creationid="hsugawa8651" creationdate="20181116T020522Z">
        <seg>julia&gt; Char(120)
'x': ASCII/Unicode U+0078 (category Ll: Letter, lowercase)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; Float32(-1.5)
-1.5f0

julia&gt; typeof(ans)
Float32</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T110637Z" creationid="hsugawa8651" creationdate="20181112T110637Z">
        <seg>julia&gt; Float32(-1.5)
-1.5f0

julia&gt; typeof(ans)
Float32</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; Float64 &lt;: Point
false

julia&gt; AbstractString &lt;: Point
false</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T021750Z" creationid="hsugawa8651" creationdate="20181116T021750Z">
        <seg>julia&gt; Float64 &lt;: Point
false

julia&gt; AbstractString &lt;: Point
false</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; Foo((), 23.5, 1)
ERROR: InexactError()
Stacktrace:
 [1] convert(::Type{Int64}, ::Float64) at ./float.jl:679
 [2] Foo(::Tuple{}, ::Float64, ::Int64) at ./none:2</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T095014Z" creationid="hsugawa8651" creationdate="20181120T095014Z">
        <seg>julia&gt; Foo((), 23.5, 1)
ERROR: InexactError()
Stacktrace:
 [1] convert(::Type{Int64}, ::Float64) at ./float.jl:679
 [2] Foo(::Tuple{}, ::Float64, ::Int64) at ./none:2</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; Foo((), 23.5, 1)
ERROR: InexactError: Int64(Int64, 23.5)
Stacktrace:
[...]</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T021656Z" creationid="hsugawa8651" creationdate="20181116T021656Z">
        <seg>julia&gt; Foo((), 23.5, 1)
ERROR: InexactError: Int64(Int64, 23.5)
Stacktrace:
[...]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; Foo() = Foo(0)
Foo

julia&gt; Foo()
Foo(0, 0)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T155717Z" creationid="hsugawa8651" creationdate="20181117T155717Z">
        <seg>julia&gt; Foo() = Foo(0)
Foo

julia&gt; Foo()
Foo(0, 0)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; Foo(x) = Foo(x,x)
Foo

julia&gt; Foo(1)
Foo(1, 1)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T155711Z" creationid="hsugawa8651" creationdate="20181117T155711Z">
        <seg>julia&gt; Foo(x) = Foo(x,x)
Foo

julia&gt; Foo(1)
Foo(1, 1)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; Fs = Vector{Any}(undef, 2);

julia&gt; for j = 1:2
           Fs[j] = ()-&gt;j
       end

julia&gt; Fs[1]()
1

julia&gt; Fs[2]()
2</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T022359Z" creationid="hsugawa8651" creationdate="20181116T022359Z">
        <seg>julia&gt; Fs = Vector{Any}(undef, 2);

julia&gt; for j = 1:2
           Fs[j] = ()-&gt;j
       end

julia&gt; Fs[1]()
1

julia&gt; Fs[2]()
2</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; Fs = Vector{Any}(undef, 2); i = 1;

julia&gt; while i &lt;= 2
           Fs[i] = ()-&gt;i
           global i += 1
       end

julia&gt; Fs[1]()
3

julia&gt; Fs[2]()
3</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T022345Z" creationid="hsugawa8651" creationdate="20181116T022345Z">
        <seg>julia&gt; Fs = Vector{Any}(undef, 2); i = 1;

julia&gt; while i &lt;= 2
           Fs[i] = ()-&gt;i
           global i += 1
       end

julia&gt; Fs[1]()
3

julia&gt; Fs[2]()
3</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; Fs = Vector{Any}(undef, 2); i = 1;

julia&gt; while i &lt;= 2
           let i = i
               Fs[i] = ()-&gt;i
           end
           global i += 1
       end

julia&gt; Fs[1]()
1

julia&gt; Fs[2]()
2</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T022352Z" creationid="hsugawa8651" creationdate="20181116T022352Z">
        <seg>julia&gt; Fs = Vector{Any}(undef, 2); i = 1;

julia&gt; while i &lt;= 2
           let i = i
               Fs[i] = ()-&gt;i
           end
           global i += 1
       end

julia&gt; Fs[1]()
1

julia&gt; Fs[2]()
2</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; Int('\0')
0

julia&gt; Int('\t')
9

julia&gt; Int('\n')
10

julia&gt; Int('\e')
27

julia&gt; Int('\x7f')
127

julia&gt; Int('\177')
127</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T020532Z" creationid="hsugawa8651" creationdate="20181116T020532Z">
        <seg>julia&gt; Int('\0')
0

julia&gt; Int('\t')
9

julia&gt; Int('\n')
10

julia&gt; Int('\e')
27

julia&gt; Int('\x7f')
127

julia&gt; Int('\177')
127</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; Int('\0')
0

julia&gt; Int('\t')
9

julia&gt; Int('\n')
10

julia&gt; Int('\e')
27

julia&gt; Int('\x7f')
127

julia&gt; Int('\177')
127

julia&gt; Int('\xff')
255</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T080656Z" creationid="hsugawa8651" creationdate="20181120T080656Z">
        <seg>julia&gt; Int('\0')
0

julia&gt; Int('\t')
9

julia&gt; Int('\n')
10

julia&gt; Int('\e')
27

julia&gt; Int('\x7f')
127

julia&gt; Int('\177')
127

julia&gt; Int('\xff')
255</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; Int('x')
120

julia&gt; typeof(ans)
Int64</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T020504Z" creationid="hsugawa8651" creationdate="20181116T020504Z">
        <seg>julia&gt; Int('x')
120

julia&gt; typeof(ans)
Int64</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; Int8(127)
127

julia&gt; Int8(128)
ERROR: InexactError()
Stacktrace:
 [1] Int8(::Int64) at ./sysimg.jl:77

julia&gt; Int8(127.0)
127

julia&gt; Int8(3.14)
ERROR: InexactError()
Stacktrace:
 [1] convert(::Type{Int8}, ::Float64) at ./float.jl:658
 [2] Int8(::Float64) at ./sysimg.jl:77

julia&gt; Int8(128.0)
ERROR: InexactError()
Stacktrace:
 [1] convert(::Type{Int8}, ::Float64) at ./float.jl:658
 [2] Int8(::Float64) at ./sysimg.jl:77

julia&gt; 127 % Int8
127

julia&gt; 128 % Int8
-128

julia&gt; round(Int8,127.4)
127

julia&gt; round(Int8,127.6)
ERROR: InexactError()
Stacktrace:
 [1] trunc(::Type{Int8}, ::Float64) at ./float.jl:651
 [2] round(::Type{Int8}, ::Float64) at ./float.jl:337</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T070937Z" creationid="hsugawa8651" creationdate="20181120T070937Z">
        <seg>julia&gt; Int8(127)
127

julia&gt; Int8(128)
ERROR: InexactError()
Stacktrace:
 [1] Int8(::Int64) at ./sysimg.jl:77

julia&gt; Int8(127.0)
127

julia&gt; Int8(3.14)
ERROR: InexactError()
Stacktrace:
 [1] convert(::Type{Int8}, ::Float64) at ./float.jl:658
 [2] Int8(::Float64) at ./sysimg.jl:77

julia&gt; Int8(128.0)
ERROR: InexactError()
Stacktrace:
 [1] convert(::Type{Int8}, ::Float64) at ./float.jl:658
 [2] Int8(::Float64) at ./sysimg.jl:77

julia&gt; 127 % Int8
127

julia&gt; 128 % Int8
-128

julia&gt; round(Int8,127.4)
127

julia&gt; round(Int8,127.6)
ERROR: InexactError()
Stacktrace:
 [1] trunc(::Type{Int8}, ::Float64) at ./float.jl:651
 [2] round(::Type{Int8}, ::Float64) at ./float.jl:337</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; Int8(127)
127

julia&gt; Int8(128)
ERROR: InexactError: trunc(Int8, 128)
Stacktrace:
[...]

julia&gt; Int8(127.0)
127

julia&gt; Int8(3.14)
ERROR: InexactError: Int8(Int8, 3.14)
Stacktrace:
[...]

julia&gt; Int8(128.0)
ERROR: InexactError: Int8(Int8, 128.0)
Stacktrace:
[...]

julia&gt; 127 % Int8
127

julia&gt; 128 % Int8
-128

julia&gt; round(Int8,127.4)
127

julia&gt; round(Int8,127.6)
ERROR: InexactError: trunc(Int8, 128.0)
Stacktrace:
[...]</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T031057Z" creationid="hsugawa8651" creationdate="20181114T031057Z">
        <seg>julia&gt; Int8(127)
127

julia&gt; Int8(128)
ERROR: InexactError: trunc(Int8, 128)
Stacktrace:
[...]

julia&gt; Int8(127.0)
127

julia&gt; Int8(3.14)
ERROR: InexactError: Int8(Int8, 3.14)
Stacktrace:
[...]

julia&gt; Int8(128.0)
ERROR: InexactError: Int8(Int8, 128.0)
Stacktrace:
[...]

julia&gt; 127 % Int8
127

julia&gt; 128 % Int8
-128

julia&gt; round(Int8,127.4)
127

julia&gt; round(Int8,127.6)
ERROR: InexactError: trunc(Int8, 128.0)
Stacktrace:
[...]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; IntOrString = Union{Int,AbstractString}
Union{AbstractString, Int64}

julia&gt; 1 :: IntOrString
1

julia&gt; "Hello!" :: IntOrString
"Hello!"

julia&gt; 1.0 :: IntOrString
ERROR: TypeError: typeassert: expected Union{AbstractString, Int64}, got Float64</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T095045Z" creationid="hsugawa8651" creationdate="20181120T095045Z">
        <seg>julia&gt; IntOrString = Union{Int,AbstractString}
Union{AbstractString, Int64}

julia&gt; 1 :: IntOrString
1

julia&gt; "Hello!" :: IntOrString
"Hello!"

julia&gt; 1.0 :: IntOrString
ERROR: TypeError: typeassert: expected Union{AbstractString, Int64}, got Float64</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; IntOrString = Union{Int,AbstractString}
Union{Int64, AbstractString}

julia&gt; 1 :: IntOrString
1

julia&gt; "Hello!" :: IntOrString
"Hello!"

julia&gt; 1.0 :: IntOrString
ERROR: TypeError: in typeassert, expected Union{Int64, AbstractString}, got Float64</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T021726Z" creationid="hsugawa8651" creationdate="20181116T021726Z">
        <seg>julia&gt; IntOrString = Union{Int,AbstractString}
Union{Int64, AbstractString}

julia&gt; 1 :: IntOrString
1

julia&gt; "Hello!" :: IntOrString
"Hello!"

julia&gt; 1.0 :: IntOrString
ERROR: TypeError: in typeassert, expected Union{Int64, AbstractString}, got Float64</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; Integer &lt;: Number
true

julia&gt; Integer &lt;: AbstractFloat
false</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T021604Z" creationid="hsugawa8651" creationdate="20181116T021604Z">
        <seg>julia&gt; Integer &lt;: Number
true

julia&gt; Integer &lt;: AbstractFloat
false</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; Meta.show_sexpr(ex3)
(:call, :/, (:call, :+, 4, 4), 2)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T015101Z" creationid="hsugawa8651" creationdate="20181116T015101Z">
        <seg>julia&gt; Meta.show_sexpr(ex3)
(:call, :/, (:call, :+, 4, 4), 2)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; NaN == NaN
false

julia&gt; NaN != NaN
true

julia&gt; NaN &lt; NaN
false

julia&gt; NaN &gt; NaN
false</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T030512Z" creationid="hsugawa8651" creationdate="20181114T030512Z">
        <seg>julia&gt; NaN == NaN
false

julia&gt; NaN != NaN
true

julia&gt; NaN &lt; NaN
false

julia&gt; NaN &gt; NaN
false</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; NamedTuple{(:a, :b),Tuple{Float32, String}}((1,""))
(a = 1.0f0, b = "")

julia&gt; NamedTuple{(:a, :b)}((1,""))
(a = 1, b = "")</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T021939Z" creationid="hsugawa8651" creationdate="20181116T021939Z">
        <seg>julia&gt; NamedTuple{(:a, :b),Tuple{Float32, String}}((1,""))
(a = 1.0f0, b = "")

julia&gt; NamedTuple{(:a, :b)}((1,""))
(a = 1, b = "")</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; OrderedPair(1, 2)
OrderedPair(1, 2)

julia&gt; OrderedPair(2,1)
ERROR: out of order
Stacktrace:
 [1] error at ./error.jl:33 [inlined]
 [2] OrderedPair(::Int64, ::Int64) at ./none:4
 [3] top-level scope</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T155751Z" creationid="hsugawa8651" creationdate="20181117T155751Z">
        <seg>julia&gt; OrderedPair(1, 2)
OrderedPair(1, 2)

julia&gt; OrderedPair(2,1)
ERROR: out of order
Stacktrace:
 [1] error at ./error.jl:33 [inlined]
 [2] OrderedPair(::Int64, ::Int64) at ./none:4
 [3] top-level scope</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; Point(1,2.5)
ERROR: MethodError: no method matching Point(::Int64, ::Float64)
Closest candidates are:
  Point(::T, !Matched::T) where T at none:2</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T021819Z" creationid="hsugawa8651" creationdate="20181116T021819Z">
        <seg>julia&gt; Point(1,2.5)
ERROR: MethodError: no method matching Point(::Int64, ::Float64)
Closest candidates are:
  Point(::T, !Matched::T) where T at none:2</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; Point(1,2.5)
Point{Float64}(1.0, 2.5)

julia&gt; typeof(ans)
Point{Float64}</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T124016Z" creationid="hsugawa8651" creationdate="20181118T124016Z">
        <seg>julia&gt; Point(1,2.5)
Point{Float64}(1.0, 2.5)

julia&gt; typeof(ans)
Point{Float64}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; Point(1.0,2.0)
Point{Float64}(1.0, 2.0)

julia&gt; typeof(ans)
Point{Float64}

julia&gt; Point(1,2)
Point{Int64}(1, 2)

julia&gt; typeof(ans)
Point{Int64}</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T021816Z" creationid="hsugawa8651" creationdate="20181116T021816Z">
        <seg>julia&gt; Point(1.0,2.0)
Point{Float64}(1.0, 2.0)

julia&gt; typeof(ans)
Point{Float64}

julia&gt; Point(1,2)
Point{Int64}(1, 2)

julia&gt; typeof(ans)
Point{Int64}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; Point(1.5,2)
ERROR: MethodError: no method matching Point(::Float64, ::Int64)
Closest candidates are:
  Point(::T&lt;:Real, !Matched::T&lt;:Real) where T&lt;:Real at none:1</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T124024Z" creationid="hsugawa8651" creationdate="20181118T124024Z">
        <seg>julia&gt; Point(1.5,2)
ERROR: MethodError: no method matching Point(::Float64, ::Int64)
Closest candidates are:
  Point(::T&lt;:Real, !Matched::T&lt;:Real) where T&lt;:Real at none:1</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; Point(1.5,2)
Point{Float64}(1.5, 2.0)

julia&gt; Point(1,1//2)
Point{Rational{Int64}}(1//1, 1//2)

julia&gt; Point(1.0,1//2)
Point{Float64}(1.0, 0.5)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T124041Z" creationid="hsugawa8651" creationdate="20181118T124041Z">
        <seg>julia&gt; Point(1.5,2)
Point{Float64}(1.5, 2.0)

julia&gt; Point(1,1//2)
Point{Rational{Int64}}(1//1, 1//2)

julia&gt; Point(1.0,1//2)
Point{Float64}(1.0, 0.5)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; Point(x::Int64, y::Float64) = Point(convert(Float64,x),y);</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T124004Z" creationid="hsugawa8651" creationdate="20181118T124004Z">
        <seg>julia&gt; Point(x::Int64, y::Float64) = Point(convert(Float64,x),y);</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; Point(x::Real, y::Real) = Point(promote(x,y)...);</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T124034Z" creationid="hsugawa8651" creationdate="20181118T124034Z">
        <seg>julia&gt; Point(x::Real, y::Real) = Point(promote(x,y)...);</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; Pointy{Float64}
Pointy{Float64}

julia&gt; Pointy{Real}
Pointy{Real}

julia&gt; Pointy{AbstractString}
ERROR: TypeError: Pointy: in T, expected T&lt;:Real, got Type{AbstractString}

julia&gt; Pointy{1}
ERROR: TypeError: Pointy: in T, expected T&lt;:Real, got Int64</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T095205Z" creationid="hsugawa8651" creationdate="20181120T095205Z">
        <seg>julia&gt; Pointy{Float64}
Pointy{Float64}

julia&gt; Pointy{Real}
Pointy{Real}

julia&gt; Pointy{AbstractString}
ERROR: TypeError: Pointy: in T, expected T&lt;:Real, got Type{AbstractString}

julia&gt; Pointy{1}
ERROR: TypeError: Pointy: in T, expected T&lt;:Real, got Int64</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; Pointy{Float64}
Pointy{Float64}

julia&gt; Pointy{Real}
Pointy{Real}

julia&gt; Pointy{AbstractString}
ERROR: TypeError: in Pointy, in T, expected T&lt;:Real, got Type{AbstractString}

julia&gt; Pointy{1}
ERROR: TypeError: in Pointy, in T, expected T&lt;:Real, got Int64</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T021901Z" creationid="hsugawa8651" creationdate="20181116T021901Z">
        <seg>julia&gt; Pointy{Float64}
Pointy{Float64}

julia&gt; Pointy{Real}
Pointy{Real}

julia&gt; Pointy{AbstractString}
ERROR: TypeError: in Pointy, in T, expected T&lt;:Real, got Type{AbstractString}

julia&gt; Pointy{1}
ERROR: TypeError: in Pointy, in T, expected T&lt;:Real, got Int64</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; Pointy{Float64} &lt;: Pointy{&lt;:Real}
true

julia&gt; Pointy{Real} &lt;: Pointy{&gt;:Int}
true</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T021844Z" creationid="hsugawa8651" creationdate="20181116T021844Z">
        <seg>julia&gt; Pointy{Float64} &lt;: Pointy{&lt;:Real}
true

julia&gt; Pointy{Real} &lt;: Pointy{&gt;:Int}
true</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; Pointy{Float64} &lt;: Pointy{Real}
false

julia&gt; Pointy{Real} &lt;: Pointy{Float64}
false</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T021833Z" creationid="hsugawa8651" creationdate="20181116T021833Z">
        <seg>julia&gt; Pointy{Float64} &lt;: Pointy{Real}
false

julia&gt; Pointy{Real} &lt;: Pointy{Float64}
false</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; Pointy{Int64} &lt;: Pointy
true

julia&gt; Pointy{1} &lt;: Pointy
true</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T021826Z" creationid="hsugawa8651" creationdate="20181116T021826Z">
        <seg>julia&gt; Pointy{Int64} &lt;: Pointy
true

julia&gt; Pointy{1} &lt;: Pointy
true</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; Point{Float64}
Point{Float64}

julia&gt; Point{AbstractString}
Point{AbstractString}</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T021742Z" creationid="hsugawa8651" creationdate="20181116T021742Z">
        <seg>julia&gt; Point{Float64}
Point{Float64}

julia&gt; Point{AbstractString}
Point{AbstractString}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; Point{Float64} &lt;: Point
true

julia&gt; Point{AbstractString} &lt;: Point
true</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T021747Z" creationid="hsugawa8651" creationdate="20181116T021747Z">
        <seg>julia&gt; Point{Float64} &lt;: Point
true

julia&gt; Point{AbstractString} &lt;: Point
true</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; Point{Float64} &lt;: Pointy{Float64}
true

julia&gt; Point{Real} &lt;: Pointy{Real}
true

julia&gt; Point{AbstractString} &lt;: Pointy{AbstractString}
true</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T021850Z" creationid="hsugawa8651" creationdate="20181116T021850Z">
        <seg>julia&gt; Point{Float64} &lt;: Pointy{Float64}
true

julia&gt; Point{Real} &lt;: Pointy{Real}
true

julia&gt; Point{AbstractString} &lt;: Pointy{AbstractString}
true</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; Point{Float64} &lt;: Pointy{Real}
false

julia&gt; Point{Float64} &lt;: Pointy{&lt;:Real}
true</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T021853Z" creationid="hsugawa8651" creationdate="20181116T021853Z">
        <seg>julia&gt; Point{Float64} &lt;: Pointy{Real}
false

julia&gt; Point{Float64} &lt;: Pointy{&lt;:Real}
true</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; Point{Float64} &lt;: Point{Int64}
false

julia&gt; Point{Float64} &lt;: Point{Real}
false</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T021752Z" creationid="hsugawa8651" creationdate="20181116T021752Z">
        <seg>julia&gt; Point{Float64} &lt;: Point{Int64}
false

julia&gt; Point{Float64} &lt;: Point{Real}
false</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; Point{Float64}(1.0)
ERROR: MethodError: no method matching Point{Float64}(::Float64)
[...]

julia&gt; Point{Float64}(1.0,2.0,3.0)
ERROR: MethodError: no method matching Point{Float64}(::Float64, ::Float64, ::Float64)
[...]</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T021813Z" creationid="hsugawa8651" creationdate="20181116T021813Z">
        <seg>julia&gt; Point{Float64}(1.0)
ERROR: MethodError: no method matching Point{Float64}(::Float64)
[...]

julia&gt; Point{Float64}(1.0,2.0,3.0)
ERROR: MethodError: no method matching Point{Float64}(::Float64, ::Float64, ::Float64)
[...]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; Point{Float64}(1.0, 2.0)
Point{Float64}(1.0, 2.0)

julia&gt; typeof(ans)
Point{Float64}</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T021810Z" creationid="hsugawa8651" creationdate="20181116T021810Z">
        <seg>julia&gt; Point{Float64}(1.0, 2.0)
Point{Float64}(1.0, 2.0)

julia&gt; typeof(ans)
Point{Float64}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; Polar(3, 4.0)
Polar{Float64} complex number:
   3.0 * exp(4.0im)

julia&gt; [Polar(3, 4.0), Polar(4.0,5.3)]
2-element Array{Polar{Float64},1}:
 3.0 * exp(4.0im)
 4.0 * exp(5.3im)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T022114Z" creationid="hsugawa8651" creationdate="20181116T022114Z">
        <seg>julia&gt; Polar(3, 4.0)
Polar{Float64} complex number:
   3.0 * exp(4.0im)

julia&gt; [Polar(3, 4.0), Polar(4.0,5.3)]
2-element Array{Polar{Float64},1}:
 3.0 * exp(4.0im)
 4.0 * exp(5.3im)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; Ptr{Float64} &lt;: Ptr
true

julia&gt; Ptr{Int64} &lt;: Ptr
true</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T022006Z" creationid="hsugawa8651" creationdate="20181116T022006Z">
        <seg>julia&gt; Ptr{Float64} &lt;: Ptr
true

julia&gt; Ptr{Int64} &lt;: Ptr
true</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; Tuple{Int,AbstractString} &lt;: Tuple{Real,Any}
true

julia&gt; Tuple{Int,AbstractString} &lt;: Tuple{Real,Real}
false

julia&gt; Tuple{Int,AbstractString} &lt;: Tuple{Real,}
false</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T021923Z" creationid="hsugawa8651" creationdate="20181116T021923Z">
        <seg>julia&gt; Tuple{Int,AbstractString} &lt;: Tuple{Real,Any}
true

julia&gt; Tuple{Int,AbstractString} &lt;: Tuple{Real,Real}
false

julia&gt; Tuple{Int,AbstractString} &lt;: Tuple{Real,}
false</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; Y = [1.0, 2.0, 3.0, 4.0];

julia&gt; X = similar(Y); &lt;x1/&gt; pre-allocate output array

julia&gt; @.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181110T030248Z" creationid="hsugawa8651" creationdate="20181110T030248Z">
        <seg>julia&gt; Y = [1.0, 2.0, 3.0, 4.0];

julia&gt; X = similar(Y); &lt;x1/&gt; pre-allocate output array

julia&gt; @.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; [(i,j) for i=1:3 for j=1:i if i+j == 4]
2-element Array{Tuple{Int64,Int64},1}:
 (2, 2)
 (3, 1)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T155100Z" creationid="hsugawa8651" creationdate="20181109T155100Z">
        <seg>julia&gt; [(i,j) for i=1:3 for j=1:i if i+j == 4]
2-element Array{Tuple{Int64,Int64},1}:
 (2, 2)
 (3, 1)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; [(i,j) for i=1:3 for j=1:i]
6-element Array{Tuple{Int64,Int64},1}:
 (1, 1)
 (2, 1)
 (2, 2)
 (3, 1)
 (3, 2)
 (3, 3)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T155040Z" creationid="hsugawa8651" creationdate="20181109T155040Z">
        <seg>julia&gt; [(i,j) for i=1:3 for j=1:i]
6-element Array{Tuple{Int64,Int64},1}:
 (1, 1)
 (2, 1)
 (2, 2)
 (3, 1)
 (3, 2)
 (3, 3)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; [1 NaN] == [1 NaN]
false</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T030525Z" creationid="hsugawa8651" creationdate="20181114T030525Z">
        <seg>julia&gt; [1 NaN] == [1 NaN]
false</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; [1,2,3] .^ 3
3-element Array{Int64,1}:
  1
  8
 27</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T132518Z" creationid="hsugawa8651" creationdate="20181113T132518Z">
        <seg>julia&gt; [1,2,3] .^ 3
3-element Array{Int64,1}:
  1
  8
 27</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; [1:5;] .|&gt; [x-&gt;x^2, inv, x-&gt;2*x, -, isodd]
5-element Array{Real,1}:
    1
    0.5
    6
   -4
 true</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181110T030300Z" creationid="hsugawa8651" creationdate="20181110T030300Z">
        <seg>julia&gt; [1:5;] .|&gt; [x-&gt;x^2, inv, x-&gt;2*x, -, isodd]
5-element Array{Real,1}:
    1
    0.5
    6
   -4
 true</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; [[1 2] [3 4]]
1×4 Array{Int64,2}:
 1  2  3  4

julia&gt; Int8[[1 2] [3 4]]
1×4 Array{Int8,2}:
 1  2  3  4</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154710Z" creationid="hsugawa8651" creationdate="20181109T154710Z">
        <seg>julia&gt; [[1 2] [3 4]]
1×4 Array{Int64,2}:
 1  2  3  4

julia&gt; Int8[[1 2] [3 4]]
1×4 Array{Int8,2}:
 1  2  3  4</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; [[1; 2]; [3, 4]]
4-element Array{Int64,1}:
 1
 2
 3
 4

julia&gt; [[1 2] [3 4]]
1×4 Array{Int64,2}:
 1  2  3  4

julia&gt; [[1 2]; [3 4]]
2×2 Array{Int64,2}:
 1  2
 3  4</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154652Z" creationid="hsugawa8651" creationdate="20181109T154652Z">
        <seg>julia&gt; [[1; 2]; [3, 4]]
4-element Array{Int64,1}:
 1
 2
 3
 4

julia&gt; [[1 2] [3 4]]
1×4 Array{Int64,2}:
 1  2  3  4

julia&gt; [[1 2]; [3 4]]
2×2 Array{Int64,2}:
 1  2
 3  4</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; a = 1;

julia&gt; ex = :($a + b)
:(1 + b)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T015146Z" creationid="hsugawa8651" creationdate="20181116T015146Z">
        <seg>julia&gt; a = 1;

julia&gt; ex = :($a + b)
:(1 + b)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; a = 1;

julia&gt; ex = Expr(:call, :+, a, :b)
:(1 + b)

julia&gt; a = 0; b = 2;

julia&gt; eval(ex)
3</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T015235Z" creationid="hsugawa8651" creationdate="20181116T015235Z">
        <seg>julia&gt; a = 1;

julia&gt; ex = Expr(:call, :+, a, :b)
:(1 + b)

julia&gt; a = 0; b = 2;

julia&gt; eval(ex)
3</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; a = 1; b = 2;

julia&gt; isequal(float(a//b), a/b)
true</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T123633Z" creationid="hsugawa8651" creationdate="20181118T123633Z">
        <seg>julia&gt; a = 1; b = 2;

julia&gt; isequal(float(a//b), a/b)
true</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; a = 1; b = 2; a + b*im
1 + 2im</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T123442Z" creationid="hsugawa8651" creationdate="20181118T123442Z">
        <seg>julia&gt; a = 1; b = 2; a + b*im
1 + 2im</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; a = 1; b = 2; complex(a, b)
1 + 2im</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T123449Z" creationid="hsugawa8651" creationdate="20181118T123449Z">
        <seg>julia&gt; a = 1; b = 2; complex(a, b)
1 + 2im</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; a = ArrayAndChar([1 2; 3 4], 'x')
2×2 ArrayAndChar{Int64,2} with char 'x':
 1  2
 3  4

julia&gt; a .+ 1
2×2 ArrayAndChar{Int64,2} with char 'x':
 2  3
 4  5

julia&gt; a .+ [5,10]
2×2 ArrayAndChar{Int64,2} with char 'x':
  6   7
 13  14</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T131434Z" creationid="hsugawa8651" creationdate="20181113T131434Z">
        <seg>julia&gt; a = ArrayAndChar([1 2; 3 4], 'x')
2×2 ArrayAndChar{Int64,2} with char 'x':
 1  2
 3  4

julia&gt; a .+ 1
2×2 ArrayAndChar{Int64,2} with char 'x':
 2  3
 4  5

julia&gt; a .+ [5,10]
2×2 ArrayAndChar{Int64,2} with char 'x':
  6   7
 13  14</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; a = Polar(3, 4.0)
Polar{Float64} complex number:
   3.0 * exp(4.0im)

julia&gt; print(:($a^2))
3.0 * exp(4.0im) ^ 2</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T022126Z" creationid="hsugawa8651" creationdate="20181116T022126Z">
        <seg>julia&gt; a = Polar(3, 4.0)
Polar{Float64} complex number:
   3.0 * exp(4.0im)

julia&gt; print(:($a^2))
3.0 * exp(4.0im) ^ 2</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; a = [1,2,5,6,7];

julia&gt; searchsorted(a, 4)
3:2</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T155322Z" creationid="hsugawa8651" creationdate="20181109T155322Z">
        <seg>julia&gt; a = [1,2,5,6,7];

julia&gt; searchsorted(a, 4)
3:2</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; a = [2,3,1];

julia&gt; sort!(a);

julia&gt; a
3-element Array{Int64,1}:
 1
 2
 3</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T044850Z" creationid="hsugawa8651" creationdate="20181112T044850Z">
        <seg>julia&gt; a = [2,3,1];

julia&gt; sort!(a);

julia&gt; a
3-element Array{Int64,1}:
 1
 2
 3</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; a = rand(10, 10)
10×10 Array{Float64,2}:
 0.517515  0.0348206  0.749042   0.0979679  …  0.75984     0.950481   0.579513
 0.901092  0.873479   0.134533   0.0697848     0.0586695   0.193254   0.726898
 0.976808  0.0901881  0.208332   0.920358      0.288535    0.705941   0.337137
 0.657127  0.0317896  0.772837   0.534457      0.0966037   0.700694   0.675999
 0.471777  0.144969   0.0718405  0.0827916     0.527233    0.173132   0.694304
 0.160872  0.455168   0.489254   0.827851   …  0.62226     0.0995456  0.946522
 0.291857  0.769492   0.68043    0.629461      0.727558    0.910796   0.834837
 0.775774  0.700731   0.700177   0.0126213     0.00822304  0.327502   0.955181
 0.9715    0.64354    0.848441   0.241474      0.591611    0.792573   0.194357
 0.646596  0.575456   0.0995212  0.038517      0.709233    0.477657   0.0507231

julia&gt; b = view(a, 2:2:8,2:2:4)
4×2 view(::Array{Float64,2}, 2:2:8, 2:2:4) with eltype Float64:
 0.873479   0.0697848
 0.0317896  0.534457
 0.455168   0.827851
 0.700731   0.0126213

julia&gt; (q, r) = qr(b);

julia&gt; q
4×4 LinearAlgebra.QRCompactWYQ{Float64,Array{Float64,2}}:
 -0.722358    0.227524  -0.247784    -0.604181
 -0.0262896  -0.575919  -0.804227     0.144377
 -0.376419   -0.75072    0.540177    -0.0541979
 -0.579497    0.230151  -0.00552346   0.781782

julia&gt; r
2×2 Array{Float64,2}:
 -1.20921  -0.383393
  0.0      -0.910506</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T160525Z" creationid="hsugawa8651" creationdate="20181109T160525Z">
        <seg>julia&gt; a = rand(10, 10)
10×10 Array{Float64,2}:
 0.517515  0.0348206  0.749042   0.0979679  …  0.75984     0.950481   0.579513
 0.901092  0.873479   0.134533   0.0697848     0.0586695   0.193254   0.726898
 0.976808  0.0901881  0.208332   0.920358      0.288535    0.705941   0.337137
 0.657127  0.0317896  0.772837   0.534457      0.0966037   0.700694   0.675999
 0.471777  0.144969   0.0718405  0.0827916     0.527233    0.173132   0.694304
 0.160872  0.455168   0.489254   0.827851   …  0.62226     0.0995456  0.946522
 0.291857  0.769492   0.68043    0.629461      0.727558    0.910796   0.834837
 0.775774  0.700731   0.700177   0.0126213     0.00822304  0.327502   0.955181
 0.9715    0.64354    0.848441   0.241474      0.591611    0.792573   0.194357
 0.646596  0.575456   0.0995212  0.038517      0.709233    0.477657   0.0507231

julia&gt; b = view(a, 2:2:8,2:2:4)
4×2 view(::Array{Float64,2}, 2:2:8, 2:2:4) with eltype Float64:
 0.873479   0.0697848
 0.0317896  0.534457
 0.455168   0.827851
 0.700731   0.0126213

julia&gt; (q, r) = qr(b);

julia&gt; q
4×4 LinearAlgebra.QRCompactWYQ{Float64,Array{Float64,2}}:
 -0.722358    0.227524  -0.247784    -0.604181
 -0.0262896  -0.575919  -0.804227     0.144377
 -0.376419   -0.75072    0.540177    -0.0541979
 -0.579497    0.230151  -0.00552346   0.781782

julia&gt; r
2×2 Array{Float64,2}:
 -1.20921  -0.383393
  0.0      -0.910506</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; a = rand(2,1); A = rand(2,3);

julia&gt; repeat(a,1,3)+A
2×3 Array{Float64,2}:
 1.20813  1.82068  1.25387
 1.56851  1.86401  1.67846</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T160046Z" creationid="hsugawa8651" creationdate="20181109T160046Z">
        <seg>julia&gt; a = rand(2,1); A = rand(2,3);

julia&gt; repeat(a,1,3)+A
2×3 Array{Float64,2}:
 1.20813  1.82068  1.25387
 1.56851  1.86401  1.67846</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; a, b = "\xe2\x88", "\x80"
("\xe2\x88", "\x80")

julia&gt; c = a*b
"∀"

julia&gt; collect.([a, b, c])
3-element Array{Array{Char,1},1}:
 ['\xe2\x88']
 ['\x80']
 ['∀']

julia&gt; length.([a, b, c])
3-element Array{Int64,1}:
 1
 1
 1</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T020746Z" creationid="hsugawa8651" creationdate="20181116T020746Z">
        <seg>julia&gt; a, b = "\xe2\x88", "\x80"
("\xe2\x88", "\x80")

julia&gt; c = a*b
"∀"

julia&gt; collect.([a, b, c])
3-element Array{Array{Char,1},1}:
 ['\xe2\x88']
 ['\x80']
 ['∀']

julia&gt; length.([a, b, c])
3-element Array{Int64,1}:
 1
 1
 1</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; abstract type Pointy{T} end</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T021823Z" creationid="hsugawa8651" creationdate="20181116T021823Z">
        <seg>julia&gt; abstract type Pointy{T} end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; args = [:x, :y, :z];

julia&gt; :(f(1, $(args...)))
:(f(1, x, y, z))</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T015159Z" creationid="hsugawa8651" creationdate="20181116T015159Z">
        <seg>julia&gt; args = [:x, :y, :z];

julia&gt; :(f(1, $(args...)))
:(f(1, x, y, z))</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; b = SelfReferential(a)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T155848Z" creationid="hsugawa8651" creationdate="20181117T155848Z">
        <seg>julia&gt; b = SelfReferential(a)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; b"DATA\xff\u2200"
8-element Array{UInt8,1}:
 0x44
 0x41
 0x54
 0x41
 0xff
 0xe2
 0x88
 0x80</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T094547Z" creationid="hsugawa8651" creationdate="20181120T094547Z">
        <seg>julia&gt; b"DATA\xff\u2200"
8-element Array{UInt8,1}:
 0x44
 0x41
 0x54
 0x41
 0xff
 0xe2
 0x88
 0x80</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; b"DATA\xff\u2200"
8-element Base.CodeUnits{UInt8,String}:
 0x44
 0x41
 0x54
 0x41
 0xff
 0xe2
 0x88
 0x80</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T021048Z" creationid="hsugawa8651" creationdate="20181116T021048Z">
        <seg>julia&gt; b"DATA\xff\u2200"
8-element Base.CodeUnits{UInt8,String}:
 0x44
 0x41
 0x54
 0x41
 0xff
 0xe2
 0x88
 0x80</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; b"\xff"
1-element Array{UInt8,1}:
 0xff

julia&gt; b"\uff"
2-element Array{UInt8,1}:
 0xc3
 0xbf</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T094556Z" creationid="hsugawa8651" creationdate="20181120T094556Z">
        <seg>julia&gt; b"\xff"
1-element Array{UInt8,1}:
 0xff

julia&gt; b"\uff"
2-element Array{UInt8,1}:
 0xc3
 0xbf</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; b"\xff"
1-element Base.CodeUnits{UInt8,String}:
 0xff

julia&gt; b"\uff"
2-element Base.CodeUnits{UInt8,String}:
 0xc3
 0xbf</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T021059Z" creationid="hsugawa8651" creationdate="20181116T021059Z">
        <seg>julia&gt; b"\xff"
1-element Base.CodeUnits{UInt8,String}:
 0xff

julia&gt; b"\uff"
2-element Base.CodeUnits{UInt8,String}:
 0xc3
 0xbf</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; bar(1,2)
(1, 2, ())

julia&gt; bar(1,2,3)
(1, 2, (3,))

julia&gt; bar(1, 2, 3, 4)
(1, 2, (3, 4))

julia&gt; bar(1,2,3,4,5,6)
(1, 2, (3, 4, 5, 6))</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181110T030058Z" creationid="hsugawa8651" creationdate="20181110T030058Z">
        <seg>julia&gt; bar(1,2)
(1, 2, ())

julia&gt; bar(1,2,3)
(1, 2, (3,))

julia&gt; bar(1, 2, 3, 4)
(1, 2, (3, 4))

julia&gt; bar(1,2,3,4,5,6)
(1, 2, (3, 4, 5, 6))</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; bar(a,b,x...) = (a,b,x)
bar (generic function with 1 method)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181110T030056Z" creationid="hsugawa8651" creationdate="20181110T030056Z">
        <seg>julia&gt; bar(a,b,x...) = (a,b,x)
bar (generic function with 1 method)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; bar(a,b,x::Vararg{Any,2}) = (a,b,x)
bar (generic function with 1 method)

julia&gt; bar(1,2,3)
ERROR: MethodError: no method matching bar(::Int64, ::Int64, ::Int64)
Closest candidates are:
  bar(::Any, ::Any, ::Any, !Matched::Any) at none:1

julia&gt; bar(1,2,3,4)
(1, 2, (3, 4))

julia&gt; bar(1,2,3,4,5)
ERROR: MethodError: no method matching bar(::Int64, ::Int64, ::Int64, ::Int64, ::Int64)
Closest candidates are:
  bar(::Any, ::Any, ::Any, ::Any) at none:1</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T054317Z" creationid="hsugawa8651" creationdate="20181116T054317Z">
        <seg>julia&gt; bar(a,b,x::Vararg{Any,2}) = (a,b,x)
bar (generic function with 1 method)

julia&gt; bar(1,2,3)
ERROR: MethodError: no method matching bar(::Int64, ::Int64, ::Int64)
Closest candidates are:
  bar(::Any, ::Any, ::Any, !Matched::Any) at none:1

julia&gt; bar(1,2,3,4)
(1, 2, (3, 4))

julia&gt; bar(1,2,3,4,5)
ERROR: MethodError: no method matching bar(::Int64, ::Int64, ::Int64, ::Int64, ::Int64)
Closest candidates are:
  bar(::Any, ::Any, ::Any, ::Any) at none:1</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; baz(a,b) = a + b;

julia&gt; args = [1,2]
2-element Array{Int64,1}:
 1
 2

julia&gt; baz(args...)
3

julia&gt; args = [1,2,3]
3-element Array{Int64,1}:
 1
 2
 3

julia&gt; baz(args...)
ERROR: MethodError: no method matching baz(::Int64, ::Int64, ::Int64)
Closest candidates are:
  baz(::Any, ::Any) at none:1</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181110T030114Z" creationid="hsugawa8651" creationdate="20181110T030114Z">
        <seg>julia&gt; baz(a,b) = a + b;

julia&gt; args = [1,2]
2-element Array{Int64,1}:
 1
 2

julia&gt; baz(args...)
3

julia&gt; args = [1,2,3]
3-element Array{Int64,1}:
 1
 2
 3

julia&gt; baz(args...)
ERROR: MethodError: no method matching baz(::Int64, ::Int64, ::Int64)
Closest candidates are:
  baz(::Any, ::Any) at none:1</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; begin x = 1; y = 2; x + y end
3

julia&gt; (x = 1;
        y = 2;
        x + y)
3</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T225823Z" creationid="hsugawa8651" creationdate="20181109T225823Z">
        <seg>julia&gt; begin x = 1; y = 2; x + y end
3

julia&gt; (x = 1;
        y = 2;
        x + y)
3</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; broadcast(+, a, A)
2×3 Array{Float64,2}:
 1.20813  1.82068  1.25387
 1.56851  1.86401  1.67846

julia&gt; b = rand(1,2)
1×2 Array{Float64,2}:
 0.867535  0.00457906

julia&gt; broadcast(+, a, b)
2×2 Array{Float64,2}:
 1.71056  0.847604
 1.73659  0.873631</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T160057Z" creationid="hsugawa8651" creationdate="20181109T160057Z">
        <seg>julia&gt; broadcast(+, a, A)
2×3 Array{Float64,2}:
 1.20813  1.82068  1.25387
 1.56851  1.86401  1.67846

julia&gt; b = rand(1,2)
1×2 Array{Float64,2}:
 0.867535  0.00457906

julia&gt; broadcast(+, a, b)
2×2 Array{Float64,2}:
 1.71056  0.847604
 1.73659  0.873631</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; c = 'x'
'x': ASCII/Unicode U+0078 (category Ll: Letter, lowercase)

julia&gt; "hi, $c"
"hi, x"</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T020818Z" creationid="hsugawa8651" creationdate="20181116T020818Z">
        <seg>julia&gt; c = 'x'
'x': ASCII/Unicode U+0078 (category Ll: Letter, lowercase)

julia&gt; "hi, $c"
"hi, x"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; cglobal((:errno, :libc), Int32)
Ptr{Int32} @0x00007f418d0816b8</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T152512Z" creationid="hsugawa8651" creationdate="20181117T152512Z">
        <seg>julia&gt; cglobal((:errno, :libc), Int32)
Ptr{Int32} @0x00007f418d0816b8</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; collect(Squares(4))
4-element Array{Int64,1}:
  1
  4
  9
 16</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T112726Z" creationid="hsugawa8651" creationdate="20181112T112726Z">
        <seg>julia&gt; collect(Squares(4))
4-element Array{Int64,1}:
  1
  4
  9
 16</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; const T1 = Array{Array{T,1} where T, 1}
Array{Array{T,1} where T,1}

julia&gt; const T2 = Array{Array{T,1}, 1} where T
Array{Array{T,1},1} where T</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T022019Z" creationid="hsugawa8651" creationdate="20181116T022019Z">
        <seg>julia&gt; const T1 = Array{Array{T,1} where T, 1}
Array{Array{T,1} where T,1}

julia&gt; const T2 = Array{Array{T,1}, 1} where T
Array{Array{T,1},1} where T</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; const a = [1]
1-element Array{Int64,1}:
 1

julia&gt; a = [1]
WARNING: redefining constant a
1-element Array{Int64,1}:
 1</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T022437Z" creationid="hsugawa8651" creationdate="20181116T022437Z">
        <seg>julia&gt; const a = [1]
1-element Array{Int64,1}:
 1

julia&gt; a = [1]
WARNING: redefining constant a
1-element Array{Int64,1}:
 1</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; const a, b = 1, 2
(1, 2)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T022420Z" creationid="hsugawa8651" creationdate="20181116T022420Z">
        <seg>julia&gt; const a, b = 1, 2
(1, 2)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; const e  = 2.71828182845904523536;

julia&gt; const pi = 3.14159265358979323846;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T022414Z" creationid="hsugawa8651" creationdate="20181116T022414Z">
        <seg>julia&gt; const e  = 2.71828182845904523536;

julia&gt; const pi = 3.14159265358979323846;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; const s1 = "1"
"1"

julia&gt; s2 = "1"
"1"

julia&gt; pointer.([s1, s2], 1)
2-element Array{Ptr{UInt8},1}:
 Ptr{UInt8} @0x00000000132c9638
 Ptr{UInt8} @0x0000000013dd3d18

julia&gt; s1 = s2
"1"

julia&gt; pointer.([s1, s2], 1)
2-element Array{Ptr{UInt8},1}:
 Ptr{UInt8} @0x0000000013dd3d18
 Ptr{UInt8} @0x0000000013dd3d18</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T022434Z" creationid="hsugawa8651" creationdate="20181116T022434Z">
        <seg>julia&gt; const s1 = "1"
"1"

julia&gt; s2 = "1"
"1"

julia&gt; pointer.([s1, s2], 1)
2-element Array{Ptr{UInt8},1}:
 Ptr{UInt8} @0x00000000132c9638
 Ptr{UInt8} @0x0000000013dd3d18

julia&gt; s1 = s2
"1"

julia&gt; pointer.([s1, s2], 1)
2-element Array{Ptr{UInt8},1}:
 Ptr{UInt8} @0x0000000013dd3d18
 Ptr{UInt8} @0x0000000013dd3d18</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; const x = 1
1

julia&gt; f() = x
f (generic function with 1 method)

julia&gt; f()
1

julia&gt; x = 2
WARNING: redefining constant x
2

julia&gt; f()
1</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T022441Z" creationid="hsugawa8651" creationdate="20181116T022441Z">
        <seg>julia&gt; const x = 1
1

julia&gt; f() = x
f (generic function with 1 method)

julia&gt; f()
1

julia&gt; x = 2
WARNING: redefining constant x
2

julia&gt; f()
1</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; const x = 1.0
1.0

julia&gt; x = 1
ERROR: invalid redefinition of constant x</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T022426Z" creationid="hsugawa8651" creationdate="20181116T022426Z">
        <seg>julia&gt; const x = 1.0
1.0

julia&gt; x = 1
ERROR: invalid redefinition of constant x</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; const y = 1.0
1.0

julia&gt; y = 2.0
WARNING: redefining constant y
2.0</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T022429Z" creationid="hsugawa8651" creationdate="20181116T022429Z">
        <seg>julia&gt; const y = 1.0
1.0

julia&gt; y = 2.0
WARNING: redefining constant y
2.0</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; const z = 100
100

julia&gt; z = 100
100</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T022432Z" creationid="hsugawa8651" creationdate="20181116T022432Z">
        <seg>julia&gt; const z = 100
100

julia&gt; z = 100
100</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; contains("Hello, world.", "world")
true

julia&gt; contains("Xylophon", "o")
true

julia&gt; contains("Xylophon", "a")
false

julia&gt; contains("Xylophon", 'o')
ERROR: MethodError: no method matching contains(::String, ::Char)
Closest candidates are:
  contains(!Matched::Function, ::Any, !Matched::Any) at reduce.jl:664
  contains(::AbstractString, !Matched::AbstractString) at strings/search.jl:378</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T094406Z" creationid="hsugawa8651" creationdate="20181120T094406Z">
        <seg>julia&gt; contains("Hello, world.", "world")
true

julia&gt; contains("Xylophon", "o")
true

julia&gt; contains("Xylophon", "a")
false

julia&gt; contains("Xylophon", 'o')
ERROR: MethodError: no method matching contains(::String, ::Char)
Closest candidates are:
  contains(!Matched::Function, ::Any, !Matched::Any) at reduce.jl:664
  contains(::AbstractString, !Matched::AbstractString) at strings/search.jl:378</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; convert.(Float32, [1, 2])
2-element Array{Float32,1}:
 1.0
 2.0

julia&gt; ceil.((UInt8,), [1.2 3.4; 5.6 6.7])
2×2 Array{UInt8,2}:
 0x02  0x04
 0x06  0x07

julia&gt; string.(1:3, ".</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T160140Z" creationid="hsugawa8651" creationdate="20181109T160140Z">
        <seg>julia&gt; convert.(Float32, [1, 2])
2-element Array{Float32,1}:
 1.0
 2.0

julia&gt; ceil.((UInt8,), [1.2 3.4; 5.6 6.7])
2×2 Array{UInt8,2}:
 0x02  0x04
 0x06  0x07

julia&gt; string.(1:3, ".</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; convert.(Float32, [1, 2])
2-element Array{Float32,1}:
 1.0
 2.0

julia&gt; ceil.((UInt8,), [1.2 3.4; 5.6 6.7])
2×2 Array{UInt8,2}:
 0x02  0x04
 0x06  0x07

julia&gt; string.(1:3, ". ", ["First", "Second", "Third"])
3-element Array{String,1}:
 "1. First"
 "2. Second"
 "3. Third"</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T135302Z" creationid="hsugawa8651" creationdate="20181117T135302Z">
        <seg>julia&gt; convert.(Float32, [1, 2])
2-element Array{Float32,1}:
 1.0
 2.0

julia&gt; ceil.((UInt8,), [1.2 3.4; 5.6 6.7])
2×2 Array{UInt8,2}:
 0x02  0x04
 0x06  0x07

julia&gt; string.(1:3, ". ", ["First", "Second", "Third"])
3-element Array{String,1}:
 "1. First"
 "2. Second"
 "3. Third"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; copy(A)
3×3 SparseArray{Float64,2}:
 1.0  4.0  7.0
 2.0  5.0  8.0
 3.0  6.0  9.0</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T083324Z" creationid="hsugawa8651" creationdate="20181113T083324Z">
        <seg>julia&gt; copy(A)
3×3 SparseArray{Float64,2}:
 1.0  4.0  7.0
 2.0  5.0  8.0
 3.0  6.0  9.0</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; dump(Meta.parse(":(1+2)"))
Expr
  head: Symbol quote
  args: Array{Any}((1,))
    1: Expr
      head: Symbol call
      args: Array{Any}((3,))
        1: Symbol +
        2: Int64 1
        3: Int64 2</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T015218Z" creationid="hsugawa8651" creationdate="20181116T015218Z">
        <seg>julia&gt; dump(Meta.parse(":(1+2)"))
Expr
  head: Symbol quote
  args: Array{Any}((1,))
    1: Expr
      head: Symbol call
      args: Array{Any}((3,))
        1: Symbol +
        2: Int64 1
        3: Int64 2</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; dump(Meta.parse(":x"))
QuoteNode
  value: Symbol x</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T015223Z" creationid="hsugawa8651" creationdate="20181116T015223Z">
        <seg>julia&gt; dump(Meta.parse(":x"))
QuoteNode
  value: Symbol x</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; dump(ex2)
Expr
  head: Symbol call
  args: Array{Any}((3,))
    1: Symbol +
    2: Int64 1
    3: Int64 1</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T115245Z" creationid="hsugawa8651" creationdate="20181118T115245Z">
        <seg>julia&gt; dump(ex2)
Expr
  head: Symbol call
  args: Array{Any}((3,))
    1: Symbol +
    2: Int64 1
    3: Int64 1</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; e = quote quote $$x end end
quote
    &lt;x1/&gt;= none:1 =&lt;x2/&gt;
    $(Expr(:quote, quote
    &lt;x3/&gt;= none:1 =&lt;x4/&gt;
    $(Expr(:$, :(1 + 2)))
end))
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T015211Z" creationid="hsugawa8651" creationdate="20181116T015211Z">
        <seg>julia&gt; e = quote quote $$x end end
quote
    &lt;x1/&gt;= none:1 =&lt;x2/&gt;
    $(Expr(:quote, quote
    &lt;x3/&gt;= none:1 =&lt;x4/&gt;
    $(Expr(:$, :(1 + 2)))
end))
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; else = false
ERROR: syntax: unexpected "else"

julia&gt; try = "No"
ERROR: syntax: unexpected "="</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T022524Z" creationid="hsugawa8651" creationdate="20181116T022524Z">
        <seg>julia&gt; else = false
ERROR: syntax: unexpected "else"

julia&gt; try = "No"
ERROR: syntax: unexpected "="</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; eps(1.0)
2.220446049250313e-16

julia&gt; eps(1000.)
1.1368683772161603e-13

julia&gt; eps(1e-27)
1.793662034335766e-43

julia&gt; eps(0.0)
5.0e-324</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T111203Z" creationid="hsugawa8651" creationdate="20181112T111203Z">
        <seg>julia&gt; eps(1.0)
2.220446049250313e-16

julia&gt; eps(1000.)
1.1368683772161603e-13

julia&gt; eps(1e-27)
1.793662034335766e-43

julia&gt; eps(0.0)
5.0e-324</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; eps(Float32)
1.1920929f-7

julia&gt; eps(Float64)
2.220446049250313e-16

julia&gt; eps() &lt;x1/&gt; same as eps(Float64)
2.220446049250313e-16</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T111138Z" creationid="hsugawa8651" creationdate="20181112T111138Z">
        <seg>julia&gt; eps(Float32)
1.1920929f-7

julia&gt; eps(Float64)
2.220446049250313e-16

julia&gt; eps() &lt;x1/&gt; same as eps(Float64)
2.220446049250313e-16</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; eval(e)
quote
    &lt;x1/&gt;= none:1 =&lt;x2/&gt;
    1 + 2
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T015208Z" creationid="hsugawa8651" creationdate="20181116T015208Z">
        <seg>julia&gt; eval(e)
quote
    &lt;x1/&gt;= none:1 =&lt;x2/&gt;
    1 + 2
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; eval(e)
quote
    &lt;x1/&gt;= none:1 =&lt;x2/&gt;
    3
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T015215Z" creationid="hsugawa8651" creationdate="20181116T015215Z">
        <seg>julia&gt; eval(e)
quote
    &lt;x1/&gt;= none:1 =&lt;x2/&gt;
    3
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; ex = :(a in $:((1,2,3)) )
:(a in (1, 2, 3))</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T015153Z" creationid="hsugawa8651" creationdate="20181116T015153Z">
        <seg>julia&gt; ex = :(a in $:((1,2,3)) )
:(a in (1, 2, 3))</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; ex = :(a+b*c+1)
:(a + b * c + 1)

julia&gt; typeof(ex)
Expr</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T015117Z" creationid="hsugawa8651" creationdate="20181116T015117Z">
        <seg>julia&gt; ex = :(a+b*c+1)
:(a + b * c + 1)

julia&gt; typeof(ex)
Expr</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; ex = :(x = 1)
:(x = 1)

julia&gt; x
ERROR: UndefVarError: x not defined

julia&gt; eval(ex)
1

julia&gt; x
1</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T015230Z" creationid="hsugawa8651" creationdate="20181116T015230Z">
        <seg>julia&gt; ex = :(x = 1)
:(x = 1)

julia&gt; x
ERROR: UndefVarError: x not defined

julia&gt; eval(ex)
1

julia&gt; x
1</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; ex = macroexpand(Main, :(@sayhello("human")) )
:((Main.println)("Hello, ", "human"))

julia&gt; typeof(ex)
Expr</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T015309Z" creationid="hsugawa8651" creationdate="20181116T015309Z">
        <seg>julia&gt; ex = macroexpand(Main, :(@sayhello("human")) )
:((Main.println)("Hello, ", "human"))

julia&gt; typeof(ex)
Expr</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; ex = quote
           x = 1
           y = 2
           x + y
       end
quote
    &lt;x1/&gt;= none:2 =&lt;x2/&gt;
    x = 1
    &lt;x3/&gt;= none:3 =&lt;x4/&gt;
    y = 2
    &lt;x5/&gt;= none:4 =&lt;x6/&gt;
    x + y
end

julia&gt; typeof(ex)
Expr</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T015127Z" creationid="hsugawa8651" creationdate="20181116T015127Z">
        <seg>julia&gt; ex = quote
           x = 1
           y = 2
           x + y
       end
quote
    &lt;x1/&gt;= none:2 =&lt;x2/&gt;
    x = 1
    &lt;x3/&gt;= none:3 =&lt;x4/&gt;
    y = 2
    &lt;x5/&gt;= none:4 =&lt;x6/&gt;
    x + y
end

julia&gt; typeof(ex)
Expr</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; ex1 = Meta.parse(prog)
:(1 + 1)

julia&gt; typeof(ex1)
Expr</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T115200Z" creationid="hsugawa8651" creationdate="20181118T115200Z">
        <seg>julia&gt; ex1 = Meta.parse(prog)
:(1 + 1)

julia&gt; typeof(ex1)
Expr</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; ex1 == ex2
true</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T115236Z" creationid="hsugawa8651" creationdate="20181118T115236Z">
        <seg>julia&gt; ex1 == ex2
true</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; ex1.args
3-element Array{Any,1}:
  :+
 1
 1</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T115221Z" creationid="hsugawa8651" creationdate="20181118T115221Z">
        <seg>julia&gt; ex1.args
3-element Array{Any,1}:
  :+
 1
 1</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; ex1.head
:call</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T115214Z" creationid="hsugawa8651" creationdate="20181118T115214Z">
        <seg>julia&gt; ex1.head
:call</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; ex2 = Expr(:call, :+, 1, 1)
:(1 + 1)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T115230Z" creationid="hsugawa8651" creationdate="20181118T115230Z">
        <seg>julia&gt; ex2 = Expr(:call, :+, 1, 1)
:(1 + 1)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; ex3 = Meta.parse("(4 + 4) / 2")
:((4 + 4) / 2)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T115250Z" creationid="hsugawa8651" creationdate="20181118T115250Z">
        <seg>julia&gt; ex3 = Meta.parse("(4 + 4) / 2")
:((4 + 4) / 2)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; example() = stacktrace()
example (generic function with 1 method)

julia&gt; example()
7-element Array{Base.StackTraces.StackFrame,1}:
 example() at REPL[1]:1
 top-level scope
 eval at boot.jl:317 [inlined]
 eval(::Module, ::Expr) at REPL.jl:5
 eval_user_input(::Any, ::REPL.REPLBackend) at REPL.jl:85
 macro expansion at REPL.jl:116 [inlined]
 (::getfield(REPL, Symbol("&lt;x1/&gt;28&lt;x2/&gt;29")){REPL.REPLBackend})() at event.jl:92</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T020403Z" creationid="hsugawa8651" creationdate="20181116T020403Z">
        <seg>julia&gt; example() = stacktrace()
example (generic function with 1 method)

julia&gt; example()
7-element Array{Base.StackTraces.StackFrame,1}:
 example() at REPL[1]:1
 top-level scope
 eval at boot.jl:317 [inlined]
 eval(::Module, ::Expr) at REPL.jl:5
 eval_user_input(::Any, ::REPL.REPLBackend) at REPL.jl:85
 macro expansion at REPL.jl:116 [inlined]
 (::getfield(REPL, Symbol("&lt;x1/&gt;28&lt;x2/&gt;29")){REPL.REPLBackend})() at event.jl:92</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; example() = stacktrace()
example (generic function with 1 method)

julia&gt; example()
7-element Array{Base.StackTraces.StackFrame,1}:
 example() at REPL[1]:1
 top-level scope
 eval at boot.jl:317 [inlined]
[...]

julia&gt; @noinline child() = stacktrace()
child (generic function with 1 method)

julia&gt; @noinline parent() = child()
parent (generic function with 1 method)

julia&gt; grandparent() = parent()
grandparent (generic function with 1 method)

julia&gt; grandparent()
9-element Array{Base.StackTraces.StackFrame,1}:
 child() at REPL[3]:1
 parent() at REPL[4]:1
 grandparent() at REPL[5]:1
[...]</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T020358Z" creationid="hsugawa8651" creationdate="20181116T020358Z">
        <seg>julia&gt; example() = stacktrace()
example (generic function with 1 method)

julia&gt; example()
7-element Array{Base.StackTraces.StackFrame,1}:
 example() at REPL[1]:1
 top-level scope
 eval at boot.jl:317 [inlined]
[...]

julia&gt; @noinline child() = stacktrace()
child (generic function with 1 method)

julia&gt; @noinline parent() = child()
parent (generic function with 1 method)

julia&gt; grandparent() = parent()
grandparent (generic function with 1 method)

julia&gt; grandparent()
9-element Array{Base.StackTraces.StackFrame,1}:
 child() at REPL[3]:1
 parent() at REPL[4]:1
 grandparent() at REPL[5]:1
[...]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; f
f (generic function with 2 methods)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T053936Z" creationid="hsugawa8651" creationdate="20181116T053936Z">
        <seg>julia&gt; f
f (generic function with 2 methods)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; f = +;

julia&gt; f(1,2,3)
6</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181110T025828Z" creationid="hsugawa8651" creationdate="20181110T025828Z">
        <seg>julia&gt; f = +;

julia&gt; f(1,2,3)
6</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; f = y -&gt; y + a;

julia&gt; f(3)
ERROR: UndefVarError: a not defined
Stacktrace:
[...]

julia&gt; a = 1
1

julia&gt; f(3)
4</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T022331Z" creationid="hsugawa8651" creationdate="20181116T022331Z">
        <seg>julia&gt; f = y -&gt; y + a;

julia&gt; f(3)
ERROR: UndefVarError: a not defined
Stacktrace:
[...]

julia&gt; a = 1
1

julia&gt; f(3)
4</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; f("foo", 3)
ERROR: MethodError: no method matching f(::String, ::Int64)
Closest candidates are:
  f(!Matched::Number, ::Number) at none:1

julia&gt; f()
ERROR: MethodError: no method matching f()
Closest candidates are:
  f(!Matched::Float64, !Matched::Float64) at none:1
  f(!Matched::Number, !Matched::Number) at none:1</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T053933Z" creationid="hsugawa8651" creationdate="20181116T053933Z">
        <seg>julia&gt; f("foo", 3)
ERROR: MethodError: no method matching f(::String, ::Int64)
Closest candidates are:
  f(!Matched::Number, ::Number) at none:1

julia&gt; f()
ERROR: MethodError: no method matching f()
Closest candidates are:
  f(!Matched::Float64, !Matched::Float64) at none:1
  f(!Matched::Number, !Matched::Number) at none:1</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; f(1)
"definition for Int"

julia&gt; g(1)
"definition for Int"

julia&gt; fetch(schedule(t, 1))
"original definition"

julia&gt; t = @async f(wait()); yield();

julia&gt; fetch(schedule(t, 1))
"definition for Int"</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T054120Z" creationid="hsugawa8651" creationdate="20181116T054120Z">
        <seg>julia&gt; f(1)
"definition for Int"

julia&gt; g(1)
"definition for Int"

julia&gt; fetch(schedule(t, 1))
"original definition"

julia&gt; t = @async f(wait()); yield();

julia&gt; fetch(schedule(t, 1))
"definition for Int"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; f(1)
"definition for Int"

julia&gt; g(1)
"definition for Int"

julia&gt; gen1(1)
"original definition"

julia&gt; gen2(1)
"definition for Int"</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T015738Z" creationid="hsugawa8651" creationdate="20181116T015738Z">
        <seg>julia&gt; f(1)
"definition for Int"

julia&gt; g(1)
"definition for Int"

julia&gt; gen1(1)
"original definition"

julia&gt; gen2(1)
"definition for Int"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; f(1)
"definition for Int"

julia&gt; g(1)
"definition for Int"

julia&gt; wait(schedule(t, 1))
"original definition"

julia&gt; t = @async f(wait()); yield();

julia&gt; wait(schedule(t, 1))
"definition for Int"</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T022657Z" creationid="hsugawa8651" creationdate="20181120T022657Z">
        <seg>julia&gt; f(1)
"definition for Int"

julia&gt; g(1)
"definition for Int"

julia&gt; wait(schedule(t, 1))
"original definition"

julia&gt; t = @async f(wait()); yield();

julia&gt; wait(schedule(t, 1))
"definition for Int"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; f(1) &amp; t(2)
1
2
false

julia&gt; t(1) | t(2)
1
2
true</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T230755Z" creationid="hsugawa8651" creationdate="20181109T230755Z">
        <seg>julia&gt; f(1) &amp; t(2)
1
2
false

julia&gt; t(1) | t(2)
1
2
true</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; f(2,3)
5</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181110T025628Z" creationid="hsugawa8651" creationdate="20181110T025628Z">
        <seg>julia&gt; f(2,3)
5</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; f(2.0, 3)
ERROR: MethodError: no method matching f(::Float64, ::Int64)
Closest candidates are:
  f(::Float64, !Matched::Float64) at none:1

julia&gt; f(Float32(2.0), 3.0)
ERROR: MethodError: no method matching f(::Float32, ::Float64)
Closest candidates are:
  f(!Matched::Float64, ::Float64) at none:1

julia&gt; f(2.0, "3.0")
ERROR: MethodError: no method matching f(::Float64, ::String)
Closest candidates are:
  f(::Float64, !Matched::Float64) at none:1

julia&gt; f("2.0", "3.0")
ERROR: MethodError: no method matching f(::String, ::String)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T053858Z" creationid="hsugawa8651" creationdate="20181116T053858Z">
        <seg>julia&gt; f(2.0, 3)
ERROR: MethodError: no method matching f(::Float64, ::Int64)
Closest candidates are:
  f(::Float64, !Matched::Float64) at none:1

julia&gt; f(Float32(2.0), 3.0)
ERROR: MethodError: no method matching f(::Float32, ::Float64)
Closest candidates are:
  f(!Matched::Float64, ::Float64) at none:1

julia&gt; f(2.0, "3.0")
ERROR: MethodError: no method matching f(::Float64, ::String)
Closest candidates are:
  f(::Float64, !Matched::Float64) at none:1

julia&gt; f("2.0", "3.0")
ERROR: MethodError: no method matching f(::String, ::String)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; f(2.0, 3.0)
7.0</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T053905Z" creationid="hsugawa8651" creationdate="20181116T053905Z">
        <seg>julia&gt; f(2.0, 3.0)
7.0</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; f(2.0, 3.0)
7.0

julia&gt; f(2, 3.0)
1.0

julia&gt; f(2.0, 3)
1.0

julia&gt; f(2, 3)
1</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T053925Z" creationid="hsugawa8651" creationdate="20181116T053925Z">
        <seg>julia&gt; f(2.0, 3.0)
7.0

julia&gt; f(2, 3.0)
1.0

julia&gt; f(2.0, 3)
1.0

julia&gt; f(2, 3)
1</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; f(x) = "original definition"
f (generic function with 1 method)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T054109Z" creationid="hsugawa8651" creationdate="20181116T054109Z">
        <seg>julia&gt; f(x) = "original definition"
f (generic function with 1 method)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; f(x) = "original definition";</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T015711Z" creationid="hsugawa8651" creationdate="20181116T015711Z">
        <seg>julia&gt; f(x) = "original definition";</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; f(x) = 2.0 * x
f (generic function with 1 method)

julia&gt; f(1//2)
1.0

julia&gt; f(1/2)
1.0

julia&gt; f(1)
2.0</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T021359Z" creationid="hsugawa8651" creationdate="20181116T021359Z">
        <seg>julia&gt; f(x) = 2.0 * x
f (generic function with 1 method)

julia&gt; f(1//2)
1.0

julia&gt; f(1/2)
1.0

julia&gt; f(1)
2.0</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; f(x) = try
           sqrt(x)
       catch
           sqrt(complex(x, 0))
       end
f (generic function with 1 method)

julia&gt; f(1)
1.0

julia&gt; f(-1)
0.0 + 1.0im</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T124749Z" creationid="hsugawa8651" creationdate="20181118T124749Z">
        <seg>julia&gt; f(x) = try
           sqrt(x)
       catch
           sqrt(complex(x, 0))
       end
f (generic function with 1 method)

julia&gt; f(1)
1.0

julia&gt; f(-1)
0.0 + 1.0im</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; f(x) = x&gt;=0 ?</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T124629Z" creationid="hsugawa8651" creationdate="20181118T124629Z">
        <seg>julia&gt; f(x) = x&gt;=0 ?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; f(x,y) = 3x + 4y;

julia&gt; A = [1.0, 2.0, 3.0];

julia&gt; B = [4.0, 5.0, 6.0];

julia&gt; f.(pi, A)
3-element Array{Float64,1}:
 13.42477796076938
 17.42477796076938
 21.42477796076938

julia&gt; f.(A, B)
3-element Array{Float64,1}:
 19.0
 26.0
 33.0</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181110T030235Z" creationid="hsugawa8651" creationdate="20181110T030235Z">
        <seg>julia&gt; f(x,y) = 3x + 4y;

julia&gt; A = [1.0, 2.0, 3.0];

julia&gt; B = [4.0, 5.0, 6.0];

julia&gt; f.(pi, A)
3-element Array{Float64,1}:
 13.42477796076938
 17.42477796076938
 21.42477796076938

julia&gt; f.(A, B)
3-element Array{Float64,1}:
 19.0
 26.0
 33.0</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; f(x,y) = println("Whoa there, Nelly.")
f (generic function with 3 methods)

julia&gt; f("foo", 1)
Whoa there, Nelly.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T053947Z" creationid="hsugawa8651" creationdate="20181116T053947Z">
        <seg>julia&gt; f(x,y) = println("Whoa there, Nelly.")
f (generic function with 3 methods)

julia&gt; f("foo", 1)
Whoa there, Nelly.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; f(x,y) = x + y
f (generic function with 1 method)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181110T025509Z" creationid="hsugawa8651" creationdate="20181110T025509Z">
        <seg>julia&gt; f(x,y) = x + y
f (generic function with 1 method)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; f(x,y) = x + y
f (generic function with 1 method)

julia&gt; function g(x,y)
           return x * y
           x + y
       end
g (generic function with 1 method)

julia&gt; f(2,3)
5

julia&gt; g(2,3)
6</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181110T025743Z" creationid="hsugawa8651" creationdate="20181110T025743Z">
        <seg>julia&gt; f(x,y) = x + y
f (generic function with 1 method)

julia&gt; function g(x,y)
           return x * y
           x + y
       end
g (generic function with 1 method)

julia&gt; f(2,3)
5

julia&gt; g(2,3)
6</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; f(x::Float64, y::Float64) = 2x + y
f (generic function with 1 method)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T053909Z" creationid="hsugawa8651" creationdate="20181116T053909Z">
        <seg>julia&gt; f(x::Float64, y::Float64) = 2x + y
f (generic function with 1 method)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; f(x::Int) = "definition for Int"
f (generic function with 2 methods)

julia&gt; f(x::Type{Int}) = "definition for Type{Int}"
f (generic function with 3 methods)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T054115Z" creationid="hsugawa8651" creationdate="20181116T054115Z">
        <seg>julia&gt; f(x::Int) = "definition for Int"
f (generic function with 2 methods)

julia&gt; f(x::Type{Int}) = "definition for Type{Int}"
f (generic function with 3 methods)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; f(x::Int) = "definition for Int";

julia&gt; f(x::Type{Int}) = "definition for Type{Int}";</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T015718Z" creationid="hsugawa8651" creationdate="20181116T015718Z">
        <seg>julia&gt; f(x::Int) = "definition for Int";

julia&gt; f(x::Type{Int}) = "definition for Type{Int}";</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; f(x::Number, y::Number) = 2x - y
f (generic function with 2 methods)

julia&gt; f(2.0, 3)
1.0</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T053919Z" creationid="hsugawa8651" creationdate="20181116T053919Z">
        <seg>julia&gt; f(x::Number, y::Number) = 2x - y
f (generic function with 2 methods)

julia&gt; f(2.0, 3)
1.0</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; fieldnames(Foo)
(:bar, :baz, :qux)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T021658Z" creationid="hsugawa8651" creationdate="20181116T021658Z">
        <seg>julia&gt; fieldnames(Foo)
(:bar, :baz, :qux)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; fieldnames(foo)
3-element Array{Symbol,1}:
 :bar
 :baz
 :qux</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T095017Z" creationid="hsugawa8651" creationdate="20181120T095017Z">
        <seg>julia&gt; fieldnames(foo)
3-element Array{Symbol,1}:
 :bar
 :baz
 :qux</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; findfirst(isequal('o'), "xylophone")
4

julia&gt; findlast(isequal('o'), "xylophone")
7

julia&gt; findfirst(isequal('z'), "xylophone")</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T020906Z" creationid="hsugawa8651" creationdate="20181116T020906Z">
        <seg>julia&gt; findfirst(isequal('o'), "xylophone")
4

julia&gt; findlast(isequal('o'), "xylophone")
7

julia&gt; findfirst(isequal('z'), "xylophone")</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; findnext(isequal('o'), "xylophone", 1)
4

julia&gt; findnext(isequal('o'), "xylophone", 5)
7

julia&gt; findprev(isequal('o'), "xylophone", 5)
4

julia&gt; findnext(isequal('o'), "xylophone", 8)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T020908Z" creationid="hsugawa8651" creationdate="20181116T020908Z">
        <seg>julia&gt; findnext(isequal('o'), "xylophone", 1)
4

julia&gt; findnext(isequal('o'), "xylophone", 5)
7

julia&gt; findprev(isequal('o'), "xylophone", 5)
4

julia&gt; findnext(isequal('o'), "xylophone", 8)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; first, second, third = m.captures; first
"a"</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T021008Z" creationid="hsugawa8651" creationdate="20181116T021008Z">
        <seg>julia&gt; first, second, third = m.captures; first
"a"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; firstlast(::Val{true}) = "First"
firstlast (generic function with 1 method)

julia&gt; firstlast(::Val{false}) = "Last"
firstlast (generic function with 2 methods)

julia&gt; firstlast(Val(true))
"First"

julia&gt; firstlast(Val(false))
"Last"</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T022201Z" creationid="hsugawa8651" creationdate="20181116T022201Z">
        <seg>julia&gt; firstlast(::Val{true}) = "First"
firstlast (generic function with 1 method)

julia&gt; firstlast(::Val{false}) = "Last"
firstlast (generic function with 2 methods)

julia&gt; firstlast(Val(true))
"First"

julia&gt; firstlast(Val(false))
"Last"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; float(3//4)
0.75</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T123550Z" creationid="hsugawa8651" creationdate="20181118T123550Z">
        <seg>julia&gt; float(3//4)
0.75</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; foo = Foo("Hello, world.", 23, 1.5)
Foo("Hello, world.", 23, 1.5)

julia&gt; typeof(foo)
Foo</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T021649Z" creationid="hsugawa8651" creationdate="20181116T021649Z">
        <seg>julia&gt; foo = Foo("Hello, world.", 23, 1.5)
Foo("Hello, world.", 23, 1.5)

julia&gt; typeof(foo)
Foo</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; foo(2,3)
(5, 6)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181110T030031Z" creationid="hsugawa8651" creationdate="20181110T030031Z">
        <seg>julia&gt; foo(2,3)
(5, 6)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; foo(4)
16</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T015703Z" creationid="hsugawa8651" creationdate="20181116T015703Z">
        <seg>julia&gt; foo(4)
16</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; foo.bar
"Hello, world."

julia&gt; foo.baz
23

julia&gt; foo.qux
1.5</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T021701Z" creationid="hsugawa8651" creationdate="20181116T021701Z">
        <seg>julia&gt; foo.bar
"Hello, world."

julia&gt; foo.baz
23

julia&gt; foo.qux
1.5</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; for c in s
           println(c)
       end
∀

x

∃

y</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T020618Z" creationid="hsugawa8651" creationdate="20181116T020618Z">
        <seg>julia&gt; for c in s
           println(c)
       end
∀

x

∃

y</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; for i = 1:10
           global z
           z = i
       end

julia&gt; z
10</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T022306Z" creationid="hsugawa8651" creationdate="20181116T022306Z">
        <seg>julia&gt; for i = 1:10
           global z
           z = i
       end

julia&gt; z
10</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; for i = 1:10
           if i % 3 != 0
               continue
           end
           println(i)
       end
3
6
9</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T124521Z" creationid="hsugawa8651" creationdate="20181118T124521Z">
        <seg>julia&gt; for i = 1:10
           if i % 3 != 0
               continue
           end
           println(i)
       end
3
6
9</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; for i = 1:10
           z = i
           global z
       end

julia&gt; z
10</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T022310Z" creationid="hsugawa8651" creationdate="20181116T022310Z">
        <seg>julia&gt; for i = 1:10
           z = i
           global z
       end

julia&gt; z
10</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; for i = 1:10
           z = i
       end

julia&gt; z
ERROR: UndefVarError: z not defined</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T022300Z" creationid="hsugawa8651" creationdate="20181116T022300Z">
        <seg>julia&gt; for i = 1:10
           z = i
       end

julia&gt; z
ERROR: UndefVarError: z not defined</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; for i = 1:2, j = 3:4
           println((i, j))
           i = 0
       end
(1, 3)
(1, 4)
(2, 3)
(2, 4)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T124541Z" creationid="hsugawa8651" creationdate="20181118T124541Z">
        <seg>julia&gt; for i = 1:2, j = 3:4
           println((i, j))
           i = 0
       end
(1, 3)
(1, 4)
(2, 3)
(2, 4)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; for i = 1:2, j = 3:4
           println((i, j))
       end
(1, 3)
(1, 4)
(2, 3)
(2, 4)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T124531Z" creationid="hsugawa8651" creationdate="20181118T124531Z">
        <seg>julia&gt; for i = 1:2, j = 3:4
           println((i, j))
       end
(1, 3)
(1, 4)
(2, 3)
(2, 4)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; for i = 1:5
           println(i)
       end
1
2
3
4
5</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T231134Z" creationid="hsugawa8651" creationdate="20181109T231134Z">
        <seg>julia&gt; for i = 1:5
           println(i)
       end
1
2
3
4
5</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; for i = 1:endof(s)
           try
               println(s[i])
           catch
               &lt;x1/&gt; ignore the index error
           end
       end
∀

x

∃

y</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T081824Z" creationid="hsugawa8651" creationdate="20181120T081824Z">
        <seg>julia&gt; for i = 1:endof(s)
           try
               println(s[i])
           catch
               &lt;x1/&gt; ignore the index error
           end
       end
∀

x

∃

y</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; for i = firstindex(s):lastindex(s)
           try
               println(s[i])
           catch
               &lt;x1/&gt; ignore the index error
           end
       end
∀

x

∃

y</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T020615Z" creationid="hsugawa8651" creationdate="20181116T020615Z">
        <seg>julia&gt; for i = firstindex(s):lastindex(s)
           try
               println(s[i])
           catch
               &lt;x1/&gt; ignore the index error
           end
       end
∀

x

∃

y</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; for i in Squares(7)
           println(i)
       end
1
4
9
16
25
36
49</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T112509Z" creationid="hsugawa8651" creationdate="20181112T112509Z">
        <seg>julia&gt; for i in Squares(7)
           println(i)
       end
1
4
9
16
25
36
49</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; for i in [1,4,0]
           println(i)
       end
1
4
0

julia&gt; for s ∈ ["foo","bar","baz"]
           println(s)
       end
foo
bar
baz</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T124440Z" creationid="hsugawa8651" creationdate="20181118T124440Z">
        <seg>julia&gt; for i in [1,4,0]
           println(i)
       end
1
4
0

julia&gt; for s ∈ ["foo","bar","baz"]
           println(s)
       end
foo
bar
baz</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; for j = 1:5
           println(j)
       end
1
2
3
4
5

julia&gt; j
ERROR: UndefVarError: j not defined</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T231206Z" creationid="hsugawa8651" creationdate="20181109T231206Z">
        <seg>julia&gt; for j = 1:5
           println(j)
       end
1
2
3
4
5

julia&gt; j
ERROR: UndefVarError: j not defined</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; frame = stacktrace()[3]
eval(::Module, ::Expr) at REPL.jl:5

julia&gt; frame.func
:eval

julia&gt; frame.file
Symbol("&lt;x1/&gt;/julia/usr/share/julia/stdlib/v0.7/REPL/src/REPL.jl")

julia&gt; frame.line
5

julia&gt; top_frame.linfo
MethodInstance for eval(::Module, ::Expr)

julia&gt; top_frame.inlined
false

julia&gt; top_frame.from_c
false</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T020406Z" creationid="hsugawa8651" creationdate="20181116T020406Z">
        <seg>julia&gt; frame = stacktrace()[3]
eval(::Module, ::Expr) at REPL.jl:5

julia&gt; frame.func
:eval

julia&gt; frame.file
Symbol("&lt;x1/&gt;/julia/usr/share/julia/stdlib/v0.7/REPL/src/REPL.jl")

julia&gt; frame.line
5

julia&gt; top_frame.linfo
MethodInstance for eval(::Module, ::Expr)

julia&gt; top_frame.inlined
false

julia&gt; top_frame.from_c
false</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; function Base.getindex(S::Squares, i::Int)
           1 &lt;= i &lt;= S.count || throw(BoundsError(S, i))
           return i*i
       end

julia&gt; Squares(100)[23]
529</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T113100Z" creationid="hsugawa8651" creationdate="20181112T113100Z">
        <seg>julia&gt; function Base.getindex(S::Squares, i::Int)
           1 &lt;= i &lt;= S.count || throw(BoundsError(S, i))
           return i*i
       end

julia&gt; Squares(100)[23]
529</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; function Base.show(io::IO, z::Polar)
           if get(io, :compact, false)
               print(io, z.r, "ℯ", z.Θ, "im")
           else
               print(io, z.r, " * exp(", z.Θ, "im)")
           end
       end</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T022143Z" creationid="hsugawa8651" creationdate="20181116T022143Z">
        <seg>julia&gt; function Base.show(io::IO, z::Polar)
           if get(io, :compact, false)
               print(io, z.r, "ℯ", z.Θ, "im")
           else
               print(io, z.r, " * exp(", z.Θ, "im)")
           end
       end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; function Base.show_unquoted(io::IO, z::Polar, ::Int, precedence::Int)
           if Base.operator_precedence(:*) &lt;= precedence
               print(io, "(")
               show(io, z)
               print(io, ")")
           else
               show(io, z)
           end
       end

julia&gt; :($a^2)
:((3.0 * exp(4.0im)) ^ 2)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T022129Z" creationid="hsugawa8651" creationdate="20181116T022129Z">
        <seg>julia&gt; function Base.show_unquoted(io::IO, z::Polar, ::Int, precedence::Int)
           if Base.operator_precedence(:*) &lt;= precedence
               print(io, "(")
               show(io, z)
               print(io, ")")
           else
               show(io, z)
           end
       end

julia&gt; :($a^2)
:((3.0 * exp(4.0im)) ^ 2)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; function f()
           i = 0
           for i = 1:3
           end
           return i
       end;

julia&gt; f()
0</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T022402Z" creationid="hsugawa8651" creationdate="20181116T022402Z">
        <seg>julia&gt; function f()
           i = 0
           for i = 1:3
           end
           return i
       end;

julia&gt; f()
0</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; function f()
           i = 0
           for outer i = 1:3
           end
           return i
       end;

julia&gt; f()
3</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T022405Z" creationid="hsugawa8651" creationdate="20181116T022405Z">
        <seg>julia&gt; function f()
           i = 0
           for outer i = 1:3
           end
           return i
       end;

julia&gt; f()
3</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; function f(x,y)
           x + y
       end
f (generic function with 1 method)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181110T025459Z" creationid="hsugawa8651" creationdate="20181110T025459Z">
        <seg>julia&gt; function f(x,y)
           x + y
       end
f (generic function with 1 method)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; function fact(n::Int)
           n &gt;= 0 || error("n must be non-negative")
           n == 0 &amp;&amp; return 1
           n * fact(n-1)
       end
fact (generic function with 1 method)

julia&gt; fact(5)
120

julia&gt; fact(0)
1

julia&gt; fact(-1)
ERROR: n must be non-negative
Stacktrace:
 [1] error at ./error.jl:33 [inlined]
 [2] fact(::Int64) at ./none:2
 [3] top-level scope</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T230447Z" creationid="hsugawa8651" creationdate="20181109T230447Z">
        <seg>julia&gt; function fact(n::Int)
           n &gt;= 0 || error("n must be non-negative")
           n == 0 &amp;&amp; return 1
           n * fact(n-1)
       end
fact (generic function with 1 method)

julia&gt; fact(5)
120

julia&gt; fact(0)
1

julia&gt; fact(-1)
ERROR: n must be non-negative
Stacktrace:
 [1] error at ./error.jl:33 [inlined]
 [2] fact(::Int64) at ./none:2
 [3] top-level scope</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; function fact(n::Int)
           n &gt;= 0 || error("n must be non-negative")
           n == 0 &amp;&amp; return 1
           n * fact(n-1)
       end
fact (generic function with 1 method)

julia&gt; fact(5)
120

julia&gt; fact(0)
1

julia&gt; fact(-1)
ERROR: n must be non-negative
Stacktrace:
 [1] fact(::Int64) at ./none:2</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T000151Z" creationid="hsugawa8651" creationdate="20181120T000151Z">
        <seg>julia&gt; function fact(n::Int)
           n &gt;= 0 || error("n must be non-negative")
           n == 0 &amp;&amp; return 1
           n * fact(n-1)
       end
fact (generic function with 1 method)

julia&gt; fact(5)
120

julia&gt; fact(0)
1

julia&gt; fact(-1)
ERROR: n must be non-negative
Stacktrace:
 [1] fact(::Int64) at ./none:2</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; function foo()
           x::Int8 = 100
           x
       end
foo (generic function with 1 method)

julia&gt; foo()
100

julia&gt; typeof(ans)
Int8</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T021530Z" creationid="hsugawa8651" creationdate="20181116T021530Z">
        <seg>julia&gt; function foo()
           x::Int8 = 100
           x
       end
foo (generic function with 1 method)

julia&gt; foo()
100

julia&gt; typeof(ans)
Int8</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; function foo(a,b)
           a+b, a*b
       end
foo (generic function with 1 method)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181110T030028Z" creationid="hsugawa8651" creationdate="20181110T030028Z">
        <seg>julia&gt; function foo(a,b)
           a+b, a*b
       end
foo (generic function with 1 method)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; function g(x, y)::Int8
           return x * y
       end;

julia&gt; typeof(g(1, 2))
Int8</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181110T025812Z" creationid="hsugawa8651" creationdate="20181110T025812Z">
        <seg>julia&gt; function g(x, y)::Int8
           return x * y
       end;

julia&gt; typeof(g(1, 2))
Int8</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; function hypot(x,y)
           x = abs(x)
           y = abs(y)
           if x &gt; y
               r = y/x
               return x*sqrt(1+r*r)
           end
           if y == 0
               return zero(x)
           end
           r = x/y
           return y*sqrt(1+r*r)
       end
hypot (generic function with 1 method)

julia&gt; hypot(3, 4)
5.0</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181110T025759Z" creationid="hsugawa8651" creationdate="20181110T025759Z">
        <seg>julia&gt; function hypot(x,y)
           x = abs(x)
           y = abs(y)
           if x &gt; y
               r = y/x
               return x*sqrt(1+r*r)
           end
           if y == 0
               return zero(x)
           end
           r = x/y
           return y*sqrt(1+r*r)
       end
hypot (generic function with 1 method)

julia&gt; hypot(3, 4)
5.0</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; function make_expr2(op, opr1, opr2)
           opr1f, opr2f = map(x -&gt; isa(x, Number) ?</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T015246Z" creationid="hsugawa8651" creationdate="20181116T015246Z">
        <seg>julia&gt; function make_expr2(op, opr1, opr2)
           opr1f, opr2f = map(x -&gt; isa(x, Number) ?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; function math_expr(op, op1, op2)
           expr = Expr(:call, op, op1, op2)
           return expr
       end
math_expr (generic function with 1 method)

julia&gt;  ex = math_expr(:+, 1, Expr(:call, :*, 4, 5))
:(1 + 4 * 5)

julia&gt; eval(ex)
21</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T015243Z" creationid="hsugawa8651" creationdate="20181116T015243Z">
        <seg>julia&gt; function math_expr(op, op1, op2)
           expr = Expr(:call, op, op1, op2)
           return expr
       end
math_expr (generic function with 1 method)

julia&gt;  ex = math_expr(:+, 1, Expr(:call, :*, 4, 5))
:(1 + 4 * 5)

julia&gt; eval(ex)
21</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; function mycompare(a, b)::Cint</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T133239Z" creationid="hsugawa8651" creationdate="20181117T133239Z">
        <seg>julia&gt; function mycompare(a, b)::Cint</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; function mycompare(a, b)::Cint
           return (a &lt; b) ?</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T022642Z" creationid="hsugawa8651" creationdate="20181116T022642Z">
        <seg>julia&gt; function mycompare(a, b)::Cint
           return (a &lt; b) ?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; function mycompare(a, b)::Cint
           return (a &lt; b) ? -1 : ((a &gt; b) ? +1 : 0)
       end
mycompare (generic function with 1 method)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T133940Z" creationid="hsugawa8651" creationdate="20181117T133940Z">
        <seg>julia&gt; function mycompare(a, b)::Cint
           return (a &lt; b) ? -1 : ((a &gt; b) ? +1 : 0)
       end
mycompare (generic function with 1 method)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; function printargs(args...)
           println(typeof(args))
           for (i, arg) in enumerate(args)
               println("Arg &lt;x1/&gt;$i = $arg")
           end
       end
printargs (generic function with 1 method)

julia&gt; printargs(1, 2, 3)
Tuple{Int64,Int64,Int64}
Arg &lt;x2/&gt;1 = 1
Arg &lt;x3/&gt;2 = 2
Arg &lt;x4/&gt;3 = 3</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181110T025242Z" creationid="hsugawa8651" creationdate="20181110T025242Z">
        <seg>julia&gt; function printargs(args...)
           println(typeof(args))
           for (i, arg) in enumerate(args)
               println("Arg &lt;x1/&gt;$i = $arg")
           end
       end
printargs (generic function with 1 method)

julia&gt; printargs(1, 2, 3)
Tuple{Int64,Int64,Int64}
Arg &lt;x2/&gt;1 = 1
Arg &lt;x3/&gt;2 = 2
Arg &lt;x4/&gt;3 = 3</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; function sub2ind_loop(dims::NTuple{N}, I::Integer...) where N
           ind = I[N] - 1
           for i = N-1:-1:1
               ind = I[i]-1 + dims[i]*ind
           end
           return ind + 1
       end
sub2ind_loop (generic function with 1 method)

julia&gt; sub2ind_loop((3, 5), 1, 2)
4</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T032245Z" creationid="hsugawa8651" creationdate="20181116T032245Z">
        <seg>julia&gt; function sub2ind_loop(dims::NTuple{N}, I::Integer...) where N
           ind = I[N] - 1
           for i = N-1:-1:1
               ind = I[i]-1 + dims[i]*ind
           end
           return ind + 1
       end
sub2ind_loop (generic function with 1 method)

julia&gt; sub2ind_loop((3, 5), 1, 2)
4</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; function test(x, y)
           if x &lt; y
               println("x is less than y")
           elseif x &gt; y
               println("x is greater than y")
           else
               println("x is equal to y")
           end
       end
test (generic function with 1 method)

julia&gt; test(1, 2)
x is less than y

julia&gt; test(2, 1)
x is greater than y

julia&gt; test(1, 1)
x is equal to y</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T225852Z" creationid="hsugawa8651" creationdate="20181109T225852Z">
        <seg>julia&gt; function test(x, y)
           if x &lt; y
               println("x is less than y")
           elseif x &gt; y
               println("x is greater than y")
           else
               println("x is equal to y")
           end
       end
test (generic function with 1 method)

julia&gt; test(1, 2)
x is less than y

julia&gt; test(2, 1)
x is greater than y

julia&gt; test(1, 1)
x is equal to y</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; function test(x,y)
           if x &lt; y
               relation = "less than"
           elseif x == y
               relation = "equal to"
           else
               relation = "greater than"
           end
           println("x is ", relation, " y.")
       end
test (generic function with 1 method)

julia&gt; test(2, 1)
x is greater than y.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T225926Z" creationid="hsugawa8651" creationdate="20181109T225926Z">
        <seg>julia&gt; function test(x,y)
           if x &lt; y
               relation = "less than"
           elseif x == y
               relation = "equal to"
           else
               relation = "greater than"
           end
           println("x is ", relation, " y.")
       end
test (generic function with 1 method)

julia&gt; test(2, 1)
x is greater than y.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; function test(x,y)
           if x &lt; y
               relation = "less than"
           elseif x == y
               relation = "equal to"
           end
           println("x is ", relation, " y.")
       end
test (generic function with 1 method)

julia&gt; test(1,2)
x is less than y.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T124344Z" creationid="hsugawa8651" creationdate="20181118T124344Z">
        <seg>julia&gt; function test(x,y)
           if x &lt; y
               relation = "less than"
           elseif x == y
               relation = "equal to"
           end
           println("x is ", relation, " y.")
       end
test (generic function with 1 method)

julia&gt; test(1,2)
x is less than y.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; function tryeval()
           @eval newfun() = 1
           newfun()
       end
tryeval (generic function with 1 method)

julia&gt; tryeval()
ERROR: MethodError: no method matching newfun()
The applicable method may be too new: running in world age xxxx1, while current world is xxxx2.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T054039Z" creationid="hsugawa8651" creationdate="20181116T054039Z">
        <seg>julia&gt; function tryeval()
           @eval newfun() = 1
           newfun()
       end
tryeval (generic function with 1 method)

julia&gt; tryeval()
ERROR: MethodError: no method matching newfun()
The applicable method may be too new: running in world age xxxx1, while current world is xxxx2.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; function tryeval2()
           @eval newfun2() = 2
           Base.invokelatest(newfun2)
       end
tryeval2 (generic function with 1 method)

julia&gt; tryeval2()
2</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T054103Z" creationid="hsugawa8651" creationdate="20181116T054103Z">
        <seg>julia&gt; function tryeval2()
           @eval newfun2() = 2
           Base.invokelatest(newfun2)
       end
tryeval2 (generic function with 1 method)

julia&gt; tryeval2()
2</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; function verbose_fussy_sqrt(x)
           println("before fussy_sqrt")
           r = fussy_sqrt(x)
           println("after fussy_sqrt")
           return r
       end
verbose_fussy_sqrt (generic function with 1 method)

julia&gt; verbose_fussy_sqrt(2)
before fussy_sqrt
after fussy_sqrt
1.4142135623730951

julia&gt; verbose_fussy_sqrt(-1)
before fussy_sqrt
ERROR: negative x not allowed
Stacktrace:
 [1] error at ./error.jl:33 [inlined]
 [2] fussy_sqrt at ./none:1 [inlined]
 [3] verbose_fussy_sqrt(::Int64) at ./none:3
 [4] top-level scope</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T124730Z" creationid="hsugawa8651" creationdate="20181118T124730Z">
        <seg>julia&gt; function verbose_fussy_sqrt(x)
           println("before fussy_sqrt")
           r = fussy_sqrt(x)
           println("after fussy_sqrt")
           return r
       end
verbose_fussy_sqrt (generic function with 1 method)

julia&gt; verbose_fussy_sqrt(2)
before fussy_sqrt
after fussy_sqrt
1.4142135623730951

julia&gt; verbose_fussy_sqrt(-1)
before fussy_sqrt
ERROR: negative x not allowed
Stacktrace:
 [1] error at ./error.jl:33 [inlined]
 [2] fussy_sqrt at ./none:1 [inlined]
 [3] verbose_fussy_sqrt(::Int64) at ./none:3
 [4] top-level scope</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; fussy_sqrt(x) = x &gt;= 0 ?</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T124718Z" creationid="hsugawa8651" creationdate="20181118T124718Z">
        <seg>julia&gt; fussy_sqrt(x) = x &gt;= 0 ?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; g = f;

julia&gt; g(2,3)
5</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181110T025635Z" creationid="hsugawa8651" creationdate="20181110T025635Z">
        <seg>julia&gt; g = f;

julia&gt; g(2,3)
5</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; g(x) = 2 * x
g (generic function with 1 method)

julia&gt; g(1//2)
1//1

julia&gt; g(1/2)
1.0

julia&gt; g(1)
2</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T021404Z" creationid="hsugawa8651" creationdate="20181116T021404Z">
        <seg>julia&gt; g(x) = 2 * x
g (generic function with 1 method)

julia&gt; g(1//2)
1//1

julia&gt; g(1/2)
1.0

julia&gt; g(1)
2</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; g(x) = f(x)
g (generic function with 1 method)

julia&gt; t = @async f(wait()); yield();</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T054112Z" creationid="hsugawa8651" creationdate="20181116T054112Z">
        <seg>julia&gt; g(x) = f(x)
g (generic function with 1 method)

julia&gt; t = @async f(wait()); yield();</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; g(x) = f(x);

julia&gt; @generated gen1(x) = f(x);

julia&gt; @generated gen2(x) = :(f(x));</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T015713Z" creationid="hsugawa8651" creationdate="20181116T015713Z">
        <seg>julia&gt; g(x) = f(x);

julia&gt; @generated gen1(x) = f(x);

julia&gt; @generated gen2(x) = :(f(x));</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; g(x::Float64, y) = 2x + y
g (generic function with 1 method)

julia&gt; g(x, y::Float64) = x + 2y
g (generic function with 2 methods)

julia&gt; g(2.0, 3)
7.0

julia&gt; g(2, 3.0)
8.0

julia&gt; g(2.0, 3.0)
ERROR: MethodError: g(::Float64, ::Float64) is ambiguous.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T053955Z" creationid="hsugawa8651" creationdate="20181116T053955Z">
        <seg>julia&gt; g(x::Float64, y) = 2x + y
g (generic function with 1 method)

julia&gt; g(x, y::Float64) = x + 2y
g (generic function with 2 methods)

julia&gt; g(2.0, 3)
7.0

julia&gt; g(2, 3.0)
8.0

julia&gt; g(2.0, 3.0)
ERROR: MethodError: g(::Float64, ::Float64) is ambiguous.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; g(x::Float64, y::Float64) = 2x + 2y
g (generic function with 3 methods)

julia&gt; g(2.0, 3)
7.0

julia&gt; g(2, 3.0)
8.0

julia&gt; g(2.0, 3.0)
10.0</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T054010Z" creationid="hsugawa8651" creationdate="20181116T054010Z">
        <seg>julia&gt; g(x::Float64, y::Float64) = 2x + 2y
g (generic function with 3 methods)

julia&gt; g(2.0, 3)
7.0

julia&gt; g(2, 3.0)
8.0

julia&gt; g(2.0, 3.0)
10.0</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; getenv("SHELL")
"/bin/bash"

julia&gt; getenv("FOOBAR")
getenv: undefined variable: FOOBAR</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T224135Z" creationid="hsugawa8651" creationdate="20181109T224135Z">
        <seg>julia&gt; getenv("SHELL")
"/bin/bash"

julia&gt; getenv("FOOBAR")
getenv: undefined variable: FOOBAR</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; greet * ", " * whom * ".\n"
"Hello, world.\n"</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T020750Z" creationid="hsugawa8651" creationdate="20181116T020750Z">
        <seg>julia&gt; greet * ", " * whom * ".\n"
"Hello, world.\n"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; greet = "Hello"
"Hello"

julia&gt; whom = "world"
"world"

julia&gt; string(greet, ", ", whom, ".\n")
"Hello, world.\n"</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T020743Z" creationid="hsugawa8651" creationdate="20181116T020743Z">
        <seg>julia&gt; greet = "Hello"
"Hello"

julia&gt; whom = "world"
"world"

julia&gt; string(greet, ", ", whom, ".\n")
"Hello, world.\n"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; h(x) = 2//1 * x
h (generic function with 1 method)

julia&gt; h(1//2)
1//1

julia&gt; h(1/2)
1.0

julia&gt; h(1)
2//1</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T021409Z" creationid="hsugawa8651" creationdate="20181116T021409Z">
        <seg>julia&gt; h(x) = 2//1 * x
h (generic function with 1 method)

julia&gt; h(1//2)
1//1

julia&gt; h(1/2)
1.0

julia&gt; h(1)
2//1</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; i = 1;

julia&gt; while i &lt;= 5
           println(i)
           global i += 1
       end
1
2
3
4
5</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T230848Z" creationid="hsugawa8651" creationdate="20181109T230848Z">
        <seg>julia&gt; i = 1;

julia&gt; while i &lt;= 5
           println(i)
           global i += 1
       end
1
2
3
4
5</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; i = 1;

julia&gt; while i &lt;= 5
           println(i)
           i += 1
       end
1
2
3
4
5</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T000153Z" creationid="hsugawa8651" creationdate="20181120T000153Z">
        <seg>julia&gt; i = 1;

julia&gt; while i &lt;= 5
           println(i)
           i += 1
       end
1
2
3
4
5</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; i = 1;

julia&gt; while true
           println(i)
           if i &gt;= 5
               break
           end
           global i += 1
       end
1
2
3
4
5

julia&gt; for j = 1:1000
           println(j)
           if j &gt;= 5
               break
           end
       end
1
2
3
4
5</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T124503Z" creationid="hsugawa8651" creationdate="20181118T124503Z">
        <seg>julia&gt; i = 1;

julia&gt; while true
           println(i)
           if i &gt;= 5
               break
           end
           global i += 1
       end
1
2
3
4
5

julia&gt; for j = 1:1000
           println(j)
           if j &gt;= 5
               break
           end
       end
1
2
3
4
5</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; i = 1;

julia&gt; while true
           println(i)
           if i &gt;= 5
               break
           end
           i += 1
       end
1
2
3
4
5

julia&gt; for i = 1:1000
           println(i)
           if i &gt;= 5
               break
           end
       end
1
2
3
4
5</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T000410Z" creationid="hsugawa8651" creationdate="20181120T000410Z">
        <seg>julia&gt; i = 1;

julia&gt; while true
           println(i)
           if i &gt;= 5
               break
           end
           i += 1
       end
1
2
3
4
5

julia&gt; for i = 1:1000
           println(i)
           if i &gt;= 5
               break
           end
       end
1
2
3
4
5</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; if 1
           println("true")
       end
ERROR: TypeError: non-boolean (Int64) used in boolean context</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T230038Z" creationid="hsugawa8651" creationdate="20181109T230038Z">
        <seg>julia&gt; if 1
           println("true")
       end
ERROR: TypeError: non-boolean (Int64) used in boolean context</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; import .Bar

julia&gt; x = -1;

julia&gt; Bar.foo()
1</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T022248Z" creationid="hsugawa8651" creationdate="20181116T022248Z">
        <seg>julia&gt; import .Bar

julia&gt; x = -1;

julia&gt; Bar.foo()
1</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; isa(1, Int)
true

julia&gt; isa(1, AbstractFloat)
false</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T022047Z" creationid="hsugawa8651" creationdate="20181116T022047Z">
        <seg>julia&gt; isa(1, Int)
true

julia&gt; isa(1, AbstractFloat)
false</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; isa(1, Type)
false

julia&gt; isa("foo", Type)
false</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T021951Z" creationid="hsugawa8651" creationdate="20181116T021951Z">
        <seg>julia&gt; isa(1, Type)
false

julia&gt; isa("foo", Type)
false</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; isa(Float64, Type{Float64})
true

julia&gt; isa(Real, Type{Float64})
false

julia&gt; isa(Real, Type{Real})
true

julia&gt; isa(Float64, Type{Real})
false</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T021944Z" creationid="hsugawa8651" creationdate="20181116T021944Z">
        <seg>julia&gt; isa(Float64, Type{Float64})
true

julia&gt; isa(Real, Type{Float64})
false

julia&gt; isa(Real, Type{Real})
true

julia&gt; isa(Float64, Type{Real})
false</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; isa(Type{Float64}, Type)
true

julia&gt; isa(Float64, Type)
true

julia&gt; isa(Real, Type)
true</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T021946Z" creationid="hsugawa8651" creationdate="20181116T021946Z">
        <seg>julia&gt; isa(Type{Float64}, Type)
true

julia&gt; isa(Float64, Type)
true

julia&gt; isa(Real, Type)
true</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; isequal(NaN, NaN)
true

julia&gt; isequal([1 NaN], [1 NaN])
true

julia&gt; isequal(NaN, NaN32)
true</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T030607Z" creationid="hsugawa8651" creationdate="20181114T030607Z">
        <seg>julia&gt; isequal(NaN, NaN)
true

julia&gt; isequal([1 NaN], [1 NaN])
true

julia&gt; isequal(NaN, NaN32)
true</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; ismatch(r"^\s*(?:&lt;x1/&gt;|$)", "not a comment")
false

julia&gt; ismatch(r"^\s*(?:&lt;x2/&gt;|$)", "&lt;x3/&gt; a comment")
true</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T094446Z" creationid="hsugawa8651" creationdate="20181120T094446Z">
        <seg>julia&gt; ismatch(r"^\s*(?:&lt;x1/&gt;|$)", "not a comment")
false

julia&gt; ismatch(r"^\s*(?:&lt;x2/&gt;|$)", "&lt;x3/&gt; a comment")
true</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; isvalid("DATA\xff\u2200")
false</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T021054Z" creationid="hsugawa8651" creationdate="20181116T021054Z">
        <seg>julia&gt; isvalid("DATA\xff\u2200")
false</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; let
           local x = 1
           let
               local x = 2
           end
           x
       end
1</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T022356Z" creationid="hsugawa8651" creationdate="20181116T022356Z">
        <seg>julia&gt; let
           local x = 1
           let
               local x = 2
           end
           x
       end
1</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; let state = 0
           global counter() = (state += 1)
       end;

julia&gt; counter()
1

julia&gt; counter()
2</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T022324Z" creationid="hsugawa8651" creationdate="20181116T022324Z">
        <seg>julia&gt; let state = 0
           global counter() = (state += 1)
       end;

julia&gt; counter()
1

julia&gt; counter()
2</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; m = match(r"(a|b)(c)?(d)", "acd")
RegexMatch("acd", 1="a", 2="c", 3="d")

julia&gt; m.match
"acd"

julia&gt; m.captures
3-element Array{Union{Nothing, SubString{String}},1}:
 "a"
 "c"
 "d"

julia&gt; m.offset
1

julia&gt; m.offsets
3-element Array{Int64,1}:
 1
 2
 3

julia&gt; m = match(r"(a|b)(c)?(d)", "ad")
RegexMatch("ad", 1="a", 2=nothing, 3="d")

julia&gt; m.match
"ad"

julia&gt; m.captures
3-element Array{Union{Nothing, SubString{String}},1}:
 "a"
 nothing
 "d"

julia&gt; m.offset
1

julia&gt; m.offsets
3-element Array{Int64,1}:
 1
 0
 2</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T020955Z" creationid="hsugawa8651" creationdate="20181116T020955Z">
        <seg>julia&gt; m = match(r"(a|b)(c)?(d)", "acd")
RegexMatch("acd", 1="a", 2="c", 3="d")

julia&gt; m.match
"acd"

julia&gt; m.captures
3-element Array{Union{Nothing, SubString{String}},1}:
 "a"
 "c"
 "d"

julia&gt; m.offset
1

julia&gt; m.offsets
3-element Array{Int64,1}:
 1
 2
 3

julia&gt; m = match(r"(a|b)(c)?(d)", "ad")
RegexMatch("ad", 1="a", 2=nothing, 3="d")

julia&gt; m.match
"ad"

julia&gt; m.captures
3-element Array{Union{Nothing, SubString{String}},1}:
 "a"
 nothing
 "d"

julia&gt; m.offset
1

julia&gt; m.offsets
3-element Array{Int64,1}:
 1
 0
 2</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; m = match(r"(a|b)(c)?(d)", "acd")
RegexMatch("acd", 1="a", 2="c", 3="d")

julia&gt; m.match
"acd"

julia&gt; m.captures
3-element Array{Union{SubString{String}, Void},1}:
 "a"
 "c"
 "d"

julia&gt; m.offset
1

julia&gt; m.offsets
3-element Array{Int64,1}:
 1
 2
 3

julia&gt; m = match(r"(a|b)(c)?(d)", "ad")
RegexMatch("ad", 1="a", 2=nothing, 3="d")

julia&gt; m.match
"ad"

julia&gt; m.captures
3-element Array{Union{SubString{String}, Void},1}:
 "a"
 nothing
 "d"

julia&gt; m.offset
1

julia&gt; m.offsets
3-element Array{Int64,1}:
 1
 0
 2</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T094504Z" creationid="hsugawa8651" creationdate="20181120T094504Z">
        <seg>julia&gt; m = match(r"(a|b)(c)?(d)", "acd")
RegexMatch("acd", 1="a", 2="c", 3="d")

julia&gt; m.match
"acd"

julia&gt; m.captures
3-element Array{Union{SubString{String}, Void},1}:
 "a"
 "c"
 "d"

julia&gt; m.offset
1

julia&gt; m.offsets
3-element Array{Int64,1}:
 1
 2
 3

julia&gt; m = match(r"(a|b)(c)?(d)", "ad")
RegexMatch("ad", 1="a", 2=nothing, 3="d")

julia&gt; m.match
"ad"

julia&gt; m.captures
3-element Array{Union{SubString{String}, Void},1}:
 "a"
 nothing
 "d"

julia&gt; m.offset
1

julia&gt; m.offsets
3-element Array{Int64,1}:
 1
 0
 2</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; m = match(r"[0-9]","aaaa1aaaa2aaaa3",1)
RegexMatch("1")

julia&gt; m = match(r"[0-9]","aaaa1aaaa2aaaa3",6)
RegexMatch("2")

julia&gt; m = match(r"[0-9]","aaaa1aaaa2aaaa3",11)
RegexMatch("3")</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T020948Z" creationid="hsugawa8651" creationdate="20181116T020948Z">
        <seg>julia&gt; m = match(r"[0-9]","aaaa1aaaa2aaaa3",1)
RegexMatch("1")

julia&gt; m = match(r"[0-9]","aaaa1aaaa2aaaa3",6)
RegexMatch("2")

julia&gt; m = match(r"[0-9]","aaaa1aaaa2aaaa3",11)
RegexMatch("3")</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; m = match(r"^\s*(?:&lt;x1/&gt;\s*(.*?)\s*$|$)", "&lt;x2/&gt; a comment ")
RegexMatch("&lt;x3/&gt; a comment ", 1="a comment")</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T020946Z" creationid="hsugawa8651" creationdate="20181116T020946Z">
        <seg>julia&gt; m = match(r"^\s*(?:&lt;x1/&gt;\s*(.*?)\s*$|$)", "&lt;x2/&gt; a comment ")
RegexMatch("&lt;x3/&gt; a comment ", 1="a comment")</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; m=match(r"(?&lt;x1/&gt;\d+):(?&lt;x2/&gt;\d+)","12:45")
RegexMatch("12:45", hour="12", minute="45")

julia&gt; m[:minute]
"45"

julia&gt; m[2]
"45"</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T021015Z" creationid="hsugawa8651" creationdate="20181116T021015Z">
        <seg>julia&gt; m=match(r"(?&lt;x1/&gt;\d+):(?&lt;x2/&gt;\d+)","12:45")
RegexMatch("12:45", hour="12", minute="45")

julia&gt; m[:minute]
"45"

julia&gt; m[2]
"45"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; macro __LOCATION__(); return QuoteNode(__source__); end
@__LOCATION__ (macro with 1 method)

julia&gt; dump(
            @__LOCATION__(
       ))
LineNumberNode
  line: Int64 2
  file: Symbol none</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T015414Z" creationid="hsugawa8651" creationdate="20181116T015414Z">
        <seg>julia&gt; macro __LOCATION__(); return QuoteNode(__source__); end
@__LOCATION__ (macro with 1 method)

julia&gt; dump(
            @__LOCATION__(
       ))
LineNumberNode
  line: Int64 2
  file: Symbol none</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; macro assert(ex)
           return :( $ex ?</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T015417Z" creationid="hsugawa8651" creationdate="20181116T015417Z">
        <seg>julia&gt; macro assert(ex)
           return :( $ex ?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; macro assert(ex, msgs...)
           msg_body = isempty(msgs) ?</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T015436Z" creationid="hsugawa8651" creationdate="20181116T015436Z">
        <seg>julia&gt; macro assert(ex, msgs...)
           msg_body = isempty(msgs) ?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; macro m end
@m (macro with 0 methods)

julia&gt; macro m(args...)
           println("$(length(args)) arguments")
       end
@m (macro with 1 method)

julia&gt; macro m(x,y)
           println("Two arguments")
       end
@m (macro with 2 methods)

julia&gt; @m "asd"
1 arguments

julia&gt; @m 1 2
Two arguments</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T015531Z" creationid="hsugawa8651" creationdate="20181116T015531Z">
        <seg>julia&gt; macro m end
@m (macro with 0 methods)

julia&gt; macro m(args...)
           println("$(length(args)) arguments")
       end
@m (macro with 1 method)

julia&gt; macro m(x,y)
           println("Two arguments")
       end
@m (macro with 2 methods)

julia&gt; @m "asd"
1 arguments

julia&gt; @m 1 2
Two arguments</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; macro m(::Int)
           println("An Integer")
       end
@m (macro with 3 methods)

julia&gt; @m 2
An Integer

julia&gt; x = 2
2

julia&gt; @m x
1 arguments</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T015533Z" creationid="hsugawa8651" creationdate="20181116T015533Z">
        <seg>julia&gt; macro m(::Int)
           println("An Integer")
       end
@m (macro with 3 methods)

julia&gt; @m 2
An Integer

julia&gt; x = 2
2

julia&gt; @m x
1 arguments</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; macro sayhello()
           return :( println("Hello, world!") )
       end
@sayhello (macro with 1 method)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T015255Z" creationid="hsugawa8651" creationdate="20181116T015255Z">
        <seg>julia&gt; macro sayhello()
           return :( println("Hello, world!") )
       end
@sayhello (macro with 1 method)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; macro sayhello(name)
           return :( println("Hello, ", $name) )
       end
@sayhello (macro with 1 method)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T015304Z" creationid="hsugawa8651" creationdate="20181116T015304Z">
        <seg>julia&gt; macro sayhello(name)
           return :( println("Hello, ", $name) )
       end
@sayhello (macro with 1 method)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; macro showarg(x)
           show(x)
           &lt;x1/&gt; ... remainder of macro, returning an expression
       end
@showarg (macro with 1 method)

julia&gt; @showarg(a)
:a

julia&gt; @showarg(1+1)
:(1 + 1)

julia&gt; @showarg(println("Yo!"))
:(println("Yo!"))</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T015409Z" creationid="hsugawa8651" creationdate="20181116T015409Z">
        <seg>julia&gt; macro showarg(x)
           show(x)
           &lt;x1/&gt; ... remainder of macro, returning an expression
       end
@showarg (macro with 1 method)

julia&gt; @showarg(a)
:a

julia&gt; @showarg(1+1)
:(1 + 1)

julia&gt; @showarg(println("Yo!"))
:(println("Yo!"))</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; macro twostep(arg)
           println("I execute at parse time.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T015318Z" creationid="hsugawa8651" creationdate="20181116T015318Z">
        <seg>julia&gt; macro twostep(arg)
           println("I execute at parse time.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; macro zerox()
           return esc(:(x = 0))
       end
@zerox (macro with 1 method)

julia&gt; function foo()
           x = 1
           @zerox
           return x &lt;x1/&gt; is zero
       end
foo (generic function with 1 method)

julia&gt; foo()
0</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T015522Z" creationid="hsugawa8651" creationdate="20181116T015522Z">
        <seg>julia&gt; macro zerox()
           return esc(:(x = 0))
       end
@zerox (macro with 1 method)

julia&gt; function foo()
           x = 1
           @zerox
           return x &lt;x1/&gt; is zero
       end
foo (generic function with 1 method)

julia&gt; foo()
0</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; map(round, [1.2,3.5,1.7])
3-element Array{Float64,1}:
 1.0
 4.0
 2.0</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181110T030004Z" creationid="hsugawa8651" creationdate="20181110T030004Z">
        <seg>julia&gt; map(round, [1.2,3.5,1.7])
3-element Array{Float64,1}:
 1.0
 4.0
 2.0</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; map(tuple, (1/(i+j) for i=1:2, j=1:2), [1 3; 2 4])
2×2 Array{Tuple{Float64,Int64},2}:
 (0.5, 1)       (0.333333, 3)
 (0.333333, 2)  (0.25, 4)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T155000Z" creationid="hsugawa8651" creationdate="20181109T155000Z">
        <seg>julia&gt; map(tuple, (1/(i+j) for i=1:2, j=1:2), [1 3; 2 4])
2×2 Array{Tuple{Float64,Int64},2}:
 (0.5, 1)       (0.333333, 3)
 (0.333333, 2)  (0.25, 4)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; map(tuple, 1/(i+j) for i=1:2, j=1:2, [1:4;])
ERROR: syntax: invalid iteration specification</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154944Z" creationid="hsugawa8651" creationdate="20181109T154944Z">
        <seg>julia&gt; map(tuple, 1/(i+j) for i=1:2, j=1:2, [1:4;])
ERROR: syntax: invalid iteration specification</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; map(x -&gt; x^2 + 2x - 1, [1,3,-1])
3-element Array{Int64,1}:
  2
 14
 -2</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181110T030009Z" creationid="hsugawa8651" creationdate="20181110T030009Z">
        <seg>julia&gt; map(x -&gt; x^2 + 2x - 1, [1,3,-1])
3-element Array{Int64,1}:
  2
 14
 -2</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; match(r"^\s*(?:&lt;x1/&gt;|$)", "not a comment")

julia&gt; match(r"^\s*(?:&lt;x2/&gt;|$)", "&lt;x3/&gt; a comment")
RegexMatch("&lt;x4/&gt;")</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T020939Z" creationid="hsugawa8651" creationdate="20181116T020939Z">
        <seg>julia&gt; match(r"^\s*(?:&lt;x1/&gt;|$)", "not a comment")

julia&gt; match(r"^\s*(?:&lt;x2/&gt;|$)", "&lt;x3/&gt; a comment")
RegexMatch("&lt;x4/&gt;")</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; methods(+)
&lt;x1/&gt; 180 methods for generic function "+":
+(x::Bool, z::Complex{Bool}) in Base at complex.jl:224
+(x::Bool, y::Bool) in Base at bool.jl:89
+(x::Bool) in Base at bool.jl:86
+(x::Bool, y::T) where T&lt;:AbstractFloat in Base at bool.jl:96
+(x::Bool, z::Complex) in Base at complex.jl:231
+(a::Float16, b::Float16) in Base at float.jl:372
+(x::Float32, y::Float32) in Base at float.jl:374
+(x::Float64, y::Float64) in Base at float.jl:375
+(z::Complex{Bool}, x::Bool) in Base at complex.jl:225
+(z::Complex{Bool}, x::Real) in Base at complex.jl:239
+(x::Char, y::Integer) in Base at char.jl:40
+(c::BigInt, x::BigFloat) in Base.MPFR at mpfr.jl:303
+(a::BigInt, b::BigInt, c::BigInt, d::BigInt, e::BigInt) in Base.GMP at gmp.jl:303
+(a::BigInt, b::BigInt, c::BigInt, d::BigInt) in Base.GMP at gmp.jl:296
+(a::BigInt, b::BigInt, c::BigInt) in Base.GMP at gmp.jl:290
+(x::BigInt, y::BigInt) in Base.GMP at gmp.jl:258
+(x::BigInt, c::Union{UInt16, UInt32, UInt64, UInt8}) in Base.GMP at gmp.jl:315
...
+(a, b, c, xs...) at operators.jl:119</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T014213Z" creationid="hsugawa8651" creationdate="20181120T014213Z">
        <seg>julia&gt; methods(+)
&lt;x1/&gt; 180 methods for generic function "+":
+(x::Bool, z::Complex{Bool}) in Base at complex.jl:224
+(x::Bool, y::Bool) in Base at bool.jl:89
+(x::Bool) in Base at bool.jl:86
+(x::Bool, y::T) where T&lt;:AbstractFloat in Base at bool.jl:96
+(x::Bool, z::Complex) in Base at complex.jl:231
+(a::Float16, b::Float16) in Base at float.jl:372
+(x::Float32, y::Float32) in Base at float.jl:374
+(x::Float64, y::Float64) in Base at float.jl:375
+(z::Complex{Bool}, x::Bool) in Base at complex.jl:225
+(z::Complex{Bool}, x::Real) in Base at complex.jl:239
+(x::Char, y::Integer) in Base at char.jl:40
+(c::BigInt, x::BigFloat) in Base.MPFR at mpfr.jl:303
+(a::BigInt, b::BigInt, c::BigInt, d::BigInt, e::BigInt) in Base.GMP at gmp.jl:303
+(a::BigInt, b::BigInt, c::BigInt, d::BigInt) in Base.GMP at gmp.jl:296
+(a::BigInt, b::BigInt, c::BigInt) in Base.GMP at gmp.jl:290
+(x::BigInt, y::BigInt) in Base.GMP at gmp.jl:258
+(x::BigInt, c::Union{UInt16, UInt32, UInt64, UInt8}) in Base.GMP at gmp.jl:315
...
+(a, b, c, xs...) at operators.jl:119</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; methods(+)
&lt;x1/&gt; 180 methods for generic function "+":
[1] +(x::Bool, z::Complex{Bool}) in Base at complex.jl:227
[2] +(x::Bool, y::Bool) in Base at bool.jl:89
[3] +(x::Bool) in Base at bool.jl:86
[4] +(x::Bool, y::T) where T&lt;:AbstractFloat in Base at bool.jl:96
[5] +(x::Bool, z::Complex) in Base at complex.jl:234
[6] +(a::Float16, b::Float16) in Base at float.jl:373
[7] +(x::Float32, y::Float32) in Base at float.jl:375
[8] +(x::Float64, y::Float64) in Base at float.jl:376
[9] +(z::Complex{Bool}, x::Bool) in Base at complex.jl:228
[10] +(z::Complex{Bool}, x::Real) in Base at complex.jl:242
[11] +(x::Char, y::Integer) in Base at char.jl:40
[12] +(c::BigInt, x::BigFloat) in Base.MPFR at mpfr.jl:307
[13] +(a::BigInt, b::BigInt, c::BigInt, d::BigInt, e::BigInt) in Base.GMP at gmp.jl:392
[14] +(a::BigInt, b::BigInt, c::BigInt, d::BigInt) in Base.GMP at gmp.jl:391
[15] +(a::BigInt, b::BigInt, c::BigInt) in Base.GMP at gmp.jl:390
[16] +(x::BigInt, y::BigInt) in Base.GMP at gmp.jl:361
[17] +(x::BigInt, c::Union{UInt16, UInt32, UInt64, UInt8}) in Base.GMP at gmp.jl:398
...
[180] +(a, b, c, xs...) in Base at operators.jl:424</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T053951Z" creationid="hsugawa8651" creationdate="20181116T053951Z">
        <seg>julia&gt; methods(+)
&lt;x1/&gt; 180 methods for generic function "+":
[1] +(x::Bool, z::Complex{Bool}) in Base at complex.jl:227
[2] +(x::Bool, y::Bool) in Base at bool.jl:89
[3] +(x::Bool) in Base at bool.jl:86
[4] +(x::Bool, y::T) where T&lt;:AbstractFloat in Base at bool.jl:96
[5] +(x::Bool, z::Complex) in Base at complex.jl:234
[6] +(a::Float16, b::Float16) in Base at float.jl:373
[7] +(x::Float32, y::Float32) in Base at float.jl:375
[8] +(x::Float64, y::Float64) in Base at float.jl:376
[9] +(z::Complex{Bool}, x::Bool) in Base at complex.jl:228
[10] +(z::Complex{Bool}, x::Real) in Base at complex.jl:242
[11] +(x::Char, y::Integer) in Base at char.jl:40
[12] +(c::BigInt, x::BigFloat) in Base.MPFR at mpfr.jl:307
[13] +(a::BigInt, b::BigInt, c::BigInt, d::BigInt, e::BigInt) in Base.GMP at gmp.jl:392
[14] +(a::BigInt, b::BigInt, c::BigInt, d::BigInt) in Base.GMP at gmp.jl:391
[15] +(a::BigInt, b::BigInt, c::BigInt) in Base.GMP at gmp.jl:390
[16] +(x::BigInt, y::BigInt) in Base.GMP at gmp.jl:361
[17] +(x::BigInt, c::Union{UInt16, UInt32, UInt64, UInt8}) in Base.GMP at gmp.jl:398
...
[180] +(a, b, c, xs...) in Base at operators.jl:424</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; methods(f)
&lt;x1/&gt; 2 methods for generic function "f":
[1] f(x::Float64, y::Float64) in Main at none:1
[2] f(x::Number, y::Number) in Main at none:1</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T053940Z" creationid="hsugawa8651" creationdate="20181116T053940Z">
        <seg>julia&gt; methods(f)
&lt;x1/&gt; 2 methods for generic function "f":
[1] f(x::Float64, y::Float64) in Main at none:1
[2] f(x::Number, y::Number) in Main at none:1</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; minmax(x, y) = (y &lt; x) ?</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181110T030048Z" creationid="hsugawa8651" creationdate="20181110T030048Z">
        <seg>julia&gt; minmax(x, y) = (y &lt; x) ?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; missing + 1
missing

julia&gt; "a" * missing
missing

julia&gt; abs(missing)
missing</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T054512Z" creationid="hsugawa8651" creationdate="20181116T054512Z">
        <seg>julia&gt; missing + 1
missing

julia&gt; "a" * missing
missing

julia&gt; abs(missing)
missing</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; missing == 1
missing

julia&gt; missing == missing
missing

julia&gt; missing &lt; 1
missing

julia&gt; 2 &gt;= missing
missing</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T054518Z" creationid="hsugawa8651" creationdate="20181116T054518Z">
        <seg>julia&gt; missing == 1
missing

julia&gt; missing == missing
missing

julia&gt; missing &lt; 1
missing

julia&gt; 2 &gt;= missing
missing</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; module A
           a = 1 &lt;x1/&gt; a global in A's scope
       end;

julia&gt; module B
           module C
               c = 2
           end
           b = C.c    &lt;x2/&gt; can access the namespace of a nested global scope
                      &lt;x3/&gt; through a qualified access
           import ..A &lt;x4/&gt; makes module A available
           d = A.a
       end;

julia&gt; module D
           b = a &lt;x5/&gt; errors as D's global scope is separate from A's
       end;
ERROR: UndefVarError: a not defined

julia&gt; module E
           import ..A &lt;x6/&gt; make module A available
           A.a = 2    &lt;x7/&gt; throws below error
       end;
ERROR: cannot assign variables in other modules</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T022254Z" creationid="hsugawa8651" creationdate="20181116T022254Z">
        <seg>julia&gt; module A
           a = 1 &lt;x1/&gt; a global in A's scope
       end;

julia&gt; module B
           module C
               c = 2
           end
           b = C.c    &lt;x2/&gt; can access the namespace of a nested global scope
                      &lt;x3/&gt; through a qualified access
           import ..A &lt;x4/&gt; makes module A available
           d = A.a
       end;

julia&gt; module D
           b = a &lt;x5/&gt; errors as D's global scope is separate from A's
       end;
ERROR: UndefVarError: a not defined

julia&gt; module E
           import ..A &lt;x6/&gt; make module A available
           A.a = 2    &lt;x7/&gt; throws below error
       end;
ERROR: cannot assign variables in other modules</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; module Bar
           x = 1
           foo() = x
       end;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T022246Z" creationid="hsugawa8651" creationdate="20181116T022246Z">
        <seg>julia&gt; module Bar
           x = 1
           foo() = x
       end;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; mutable struct Bar
           baz
           qux::Float64
       end

julia&gt; bar = Bar("Hello", 1.5);

julia&gt; bar.qux = 2.0
2.0

julia&gt; bar.baz = 1//2
1//2</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T021711Z" creationid="hsugawa8651" creationdate="20181116T021711Z">
        <seg>julia&gt; mutable struct Bar
           baz
           qux::Float64
       end

julia&gt; bar = Bar("Hello", 1.5);

julia&gt; bar.qux = 2.0
2.0

julia&gt; bar.baz = 1//2
1//2</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; mutable struct Incomplete
           data
           Incomplete() = new()
       end

julia&gt; z = Incomplete();</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T155925Z" creationid="hsugawa8651" creationdate="20181117T155925Z">
        <seg>julia&gt; mutable struct Incomplete
           data
           Incomplete() = new()
       end

julia&gt; z = Incomplete();</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; mutable struct Lazy
           data
           Lazy(v) = complete_me(new(), v)
       end</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T123815Z" creationid="hsugawa8651" creationdate="20181118T123815Z">
        <seg>julia&gt; mutable struct Lazy
           data
           Lazy(v) = complete_me(new(), v)
       end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; mutable struct SelfReferential
           obj::SelfReferential
           SelfReferential() = (x = new(); x.obj = x)
       end</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T155903Z" creationid="hsugawa8651" creationdate="20181117T155903Z">
        <seg>julia&gt; mutable struct SelfReferential
           obj::SelfReferential
           SelfReferential() = (x = new(); x.obj = x)
       end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; mutable struct SelfReferential
           obj::SelfReferential
       end</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T155843Z" creationid="hsugawa8651" creationdate="20181117T155843Z">
        <seg>julia&gt; mutable struct SelfReferential
           obj::SelfReferential
       end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; myappend(v::Vector{T}, x::T) where {T} = [v..., x]
myappend (generic function with 1 method)

julia&gt; myappend([1,2,3],4)
4-element Array{Int64,1}:
 1
 2
 3
 4

julia&gt; myappend([1,2,3],2.5)
ERROR: MethodError: no method matching myappend(::Array{Int64,1}, ::Float64)
Closest candidates are:
  myappend(::Array{T,1}, !Matched::T) where T at none:1

julia&gt; myappend([1.0,2.0,3.0],4.0)
4-element Array{Float64,1}:
 1.0
 2.0
 3.0
 4.0

julia&gt; myappend([1.0,2.0,3.0],4)
ERROR: MethodError: no method matching myappend(::Array{Float64,1}, ::Int64)
Closest candidates are:
  myappend(::Array{T,1}, !Matched::T) where T at none:1</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T054024Z" creationid="hsugawa8651" creationdate="20181116T054024Z">
        <seg>julia&gt; myappend(v::Vector{T}, x::T) where {T} = [v..., x]
myappend (generic function with 1 method)

julia&gt; myappend([1,2,3],4)
4-element Array{Int64,1}:
 1
 2
 3
 4

julia&gt; myappend([1,2,3],2.5)
ERROR: MethodError: no method matching myappend(::Array{Int64,1}, ::Float64)
Closest candidates are:
  myappend(::Array{T,1}, !Matched::T) where T at none:1

julia&gt; myappend([1.0,2.0,3.0],4.0)
4-element Array{Float64,1}:
 1.0
 2.0
 3.0
 4.0

julia&gt; myappend([1.0,2.0,3.0],4)
ERROR: MethodError: no method matching myappend(::Array{Float64,1}, ::Int64)
Closest candidates are:
  myappend(::Array{T,1}, !Matched::T) where T at none:1</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; mycompare_c = @cfunction(mycompare, Cint, (Ref{Cdouble}, Ref{Cdouble}));</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T133258Z" creationid="hsugawa8651" creationdate="20181117T133258Z">
        <seg>julia&gt; mycompare_c = @cfunction(mycompare, Cint, (Ref{Cdouble}, Ref{Cdouble}));</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; mytupletype = Tuple{AbstractString,Vararg{Int}}
Tuple{AbstractString,Vararg{Int64,N} where N}

julia&gt; isa(("1",), mytupletype)
true

julia&gt; isa(("1",1), mytupletype)
true

julia&gt; isa(("1",1,2), mytupletype)
true

julia&gt; isa(("1",1,2,3.0), mytupletype)
false</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T021931Z" creationid="hsugawa8651" creationdate="20181116T021931Z">
        <seg>julia&gt; mytupletype = Tuple{AbstractString,Vararg{Int}}
Tuple{AbstractString,Vararg{Int64,N} where N}

julia&gt; isa(("1",), mytupletype)
true

julia&gt; isa(("1",1), mytupletype)
true

julia&gt; isa(("1",1,2), mytupletype)
true

julia&gt; isa(("1",1,2,3.0), mytupletype)
false</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; mytypeof(x::T) where {T} = T
mytypeof (generic function with 1 method)

julia&gt; mytypeof(1)
Int64

julia&gt; mytypeof(1.0)
Float64</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T054028Z" creationid="hsugawa8651" creationdate="20181116T054028Z">
        <seg>julia&gt; mytypeof(x::T) where {T} = T
mytypeof (generic function with 1 method)

julia&gt; mytypeof(1)
Int64

julia&gt; mytypeof(1.0)
Float64</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; numerator(2//3)
2

julia&gt; denominator(2//3)
3</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T123523Z" creationid="hsugawa8651" creationdate="20181118T123523Z">
        <seg>julia&gt; numerator(2//3)
2

julia&gt; denominator(2//3)
3</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; occursin("world", "Hello, world.")
true

julia&gt; occursin("o", "Xylophon")
true

julia&gt; occursin("a", "Xylophon")
false

julia&gt; occursin('o', "Xylophon")
true</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T020911Z" creationid="hsugawa8651" creationdate="20181116T020911Z">
        <seg>julia&gt; occursin("world", "Hello, world.")
true

julia&gt; occursin("o", "Xylophon")
true

julia&gt; occursin("a", "Xylophon")
false

julia&gt; occursin('o', "Xylophon")
true</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; occursin(r"^\s*(?:&lt;x1/&gt;|$)", "not a comment")
false

julia&gt; occursin(r"^\s*(?:&lt;x2/&gt;|$)", "&lt;x3/&gt; a comment")
true</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T020936Z" creationid="hsugawa8651" creationdate="20181116T020936Z">
        <seg>julia&gt; occursin(r"^\s*(?:&lt;x1/&gt;|$)", "not a comment")
false

julia&gt; occursin(r"^\s*(?:&lt;x2/&gt;|$)", "&lt;x3/&gt; a comment")
true</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; p = Polynomial([1,10,100])
Polynomial{Int64}([1, 10, 100])

julia&gt; p(3)
931

julia&gt; p()
2551</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T054346Z" creationid="hsugawa8651" creationdate="20181116T054346Z">
        <seg>julia&gt; p = Polynomial([1,10,100])
Polynomial{Int64}([1, 10, 100])

julia&gt; p(3)
931

julia&gt; p()
2551</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; page = A[:,:,1]
4×4 Array{Int64,2}:
 1  5   9  13
 2  6  10  14
 3  7  11  15
 4  8  12  16

julia&gt; page[[CartesianIndex(1,1),
             CartesianIndex(2,2),
             CartesianIndex(3,3),
             CartesianIndex(4,4)]]
4-element Array{Int64,1}:
  1
  6
 11
 16</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T155657Z" creationid="hsugawa8651" creationdate="20181109T155657Z">
        <seg>julia&gt; page = A[:,:,1]
4×4 Array{Int64,2}:
 1  5   9  13
 2  6  10  14
 3  7  11  15
 4  8  12  16

julia&gt; page[[CartesianIndex(1,1),
             CartesianIndex(2,2),
             CartesianIndex(3,3),
             CartesianIndex(4,4)]]
4-element Array{Int64,1}:
  1
  6
 11
 16</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; path = ccall((:getenv, "libc"), Cstring, (Cstring,), "SHELL")
Cstring(@0x00007fff5fbffc45)

julia&gt; unsafe_string(path)
"/bin/bash"</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T224044Z" creationid="hsugawa8651" creationdate="20181109T224044Z">
        <seg>julia&gt; path = ccall((:getenv, "libc"), Cstring, (Cstring,), "SHELL")
Cstring(@0x00007fff5fbffc45)

julia&gt; unsafe_string(path)
"/bin/bash"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; pi
π = 3.1415926535897...

julia&gt; pi = 3
ERROR: cannot assign variable MathConstants.pi from module Main

julia&gt; sqrt(100)
10.0

julia&gt; sqrt = 4
ERROR: cannot assign variable Base.sqrt from module Main</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T022516Z" creationid="hsugawa8651" creationdate="20181116T022516Z">
        <seg>julia&gt; pi
π = 3.1415926535897...

julia&gt; pi = 3
ERROR: cannot assign variable MathConstants.pi from module Main

julia&gt; sqrt(100)
10.0

julia&gt; sqrt = 4
ERROR: cannot assign variable Base.sqrt from module Main</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; pi = 3
3

julia&gt; pi
3

julia&gt; sqrt = 4
4</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T022514Z" creationid="hsugawa8651" creationdate="20181116T022514Z">
        <seg>julia&gt; pi = 3
3

julia&gt; pi
3

julia&gt; sqrt = 4
4</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; pointer = backtrace()[1];

julia&gt; frame = StackTraces.lookup(pointer)
1-element Array{Base.StackTraces.StackFrame,1}:
 jl_apply_generic at gf.c:2167

julia&gt; println("The top frame is from $(frame[1].func)!")
The top frame is from jl_apply_generic!</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T020442Z" creationid="hsugawa8651" creationdate="20181116T020442Z">
        <seg>julia&gt; pointer = backtrace()[1];

julia&gt; frame = StackTraces.lookup(pointer)
1-element Array{Base.StackTraces.StackFrame,1}:
 jl_apply_generic at gf.c:2167

julia&gt; println("The top frame is from $(frame[1].func)!")
The top frame is from jl_apply_generic!</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; prefixer(prefix, sleep) = `perl -nle '$|=1; print "'$prefix' ", $_; sleep '$sleep';'`;

julia&gt; run(pipeline(`perl -le '$|=1; for(0..5){ print; sleep 1 }'`, prefixer("A",2) &amp; prefixer("B",2)));
B 0
A 1
B 2
A 3
B 4
A 5</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T020336Z" creationid="hsugawa8651" creationdate="20181116T020336Z">
        <seg>julia&gt; prefixer(prefix, sleep) = `perl -nle '$|=1; print "'$prefix' ", $_; sleep '$sleep';'`;

julia&gt; run(pipeline(`perl -le '$|=1; for(0..5){ print; sleep 1 }'`, prefixer("A",2) &amp; prefixer("B",2)));
B 0
A 1
B 2
A 3
B 4
A 5</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; print("I have \$100 in my account.\n")
I have $100 in my account.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T020823Z" creationid="hsugawa8651" creationdate="20181116T020823Z">
        <seg>julia&gt; print("I have \$100 in my account.\n")
I have $100 in my account.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; println(raw"\\ \\\"")
\\ \"</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T021128Z" creationid="hsugawa8651" creationdate="20181116T021128Z">
        <seg>julia&gt; println(raw"\\ \\\"")
\\ \"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; prog = "1 + 1"
"1 + 1"</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T115151Z" creationid="hsugawa8651" creationdate="20181118T115151Z">
        <seg>julia&gt; prog = "1 + 1"
"1 + 1"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; r"^\s*(?:&lt;x1/&gt;|$)"
r"^\s*(?:&lt;x2/&gt;|$)"

julia&gt; typeof(ans)
Regex</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T020933Z" creationid="hsugawa8651" creationdate="20181116T020933Z">
        <seg>julia&gt; r"^\s*(?:&lt;x1/&gt;|$)"
r"^\s*(?:&lt;x2/&gt;|$)"

julia&gt; typeof(ans)
Regex</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; r"a+.*b+.*?d$"ism
r"a+.*b+.*?d$"ims

julia&gt; match(r"a+.*b+.*?d$"ism, "Goodbye,\nOh, angry,\nBad world\n")
RegexMatch("angry,\nBad world")</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T021034Z" creationid="hsugawa8651" creationdate="20181116T021034Z">
        <seg>julia&gt; r"a+.*b+.*?d$"ism
r"a+.*b+.*?d$"ims

julia&gt; match(r"a+.*b+.*?d$"ism, "Goodbye,\nOh, angry,\nBad world\n")
RegexMatch("angry,\nBad world")</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; repeat(".:Z:.", 10)
".:Z:..:Z:..:Z:..:Z:..:Z:..:Z:..:Z:..:Z:..:Z:..:Z:."

julia&gt; join(["apples", "bananas", "pineapples"], ", ", " and ")
"apples, bananas and pineapples"</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T020917Z" creationid="hsugawa8651" creationdate="20181116T020917Z">
        <seg>julia&gt; repeat(".:Z:.", 10)
".:Z:..:Z:..:Z:..:Z:..:Z:..:Z:..:Z:..:Z:..:Z:..:Z:."

julia&gt; join(["apples", "bananas", "pineapples"], ", ", " and ")
"apples, bananas and pineapples"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; replace("a", r"." =&gt; s"\g&lt;x1/&gt;1")
"a1"</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T021025Z" creationid="hsugawa8651" creationdate="20181116T021025Z">
        <seg>julia&gt; replace("a", r"." =&gt; s"\g&lt;x1/&gt;1")
"a1"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; replace("a", r".", s"\g&lt;x1/&gt;1")
"a1"</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T094524Z" creationid="hsugawa8651" creationdate="20181120T094524Z">
        <seg>julia&gt; replace("a", r".", s"\g&lt;x1/&gt;1")
"a1"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; replace("first second", r"(\w+) (?&lt;x1/&gt;\w+)" =&gt; s"\g&lt;x2/&gt; \1")
"second first"</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T021021Z" creationid="hsugawa8651" creationdate="20181116T021021Z">
        <seg>julia&gt; replace("first second", r"(\w+) (?&lt;x1/&gt;\w+)" =&gt; s"\g&lt;x2/&gt; \1")
"second first"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; replace("first second", r"(\w+) (?&lt;x1/&gt;\w+)", s"\g&lt;x2/&gt; \1")
"second first"</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T094520Z" creationid="hsugawa8651" creationdate="20181120T094520Z">
        <seg>julia&gt; replace("first second", r"(\w+) (?&lt;x1/&gt;\w+)", s"\g&lt;x2/&gt; \1")
"second first"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; run(`echo hello` &amp; `echo world`);
world
hello</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T020315Z" creationid="hsugawa8651" creationdate="20181116T020315Z">
        <seg>julia&gt; run(`echo hello` &amp; `echo world`);
world
hello</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; run(pipeline(`echo world` &amp; `echo hello`, `sort`));
hello
world</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T020319Z" creationid="hsugawa8651" creationdate="20181116T020319Z">
        <seg>julia&gt; run(pipeline(`echo world` &amp; `echo hello`, `sort`));
hello
world</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; run(pipeline(`perl -le '$|=1; for(0..5){ print; sleep 1 }'`,
           prefixer("X",3) &amp; prefixer("Y",3) &amp; prefixer("Z",3),
           prefixer("A",2) &amp; prefixer("B",2)));
A X 0
B Y 1
A Z 2
B X 3
A Y 4
B Z 5</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T020340Z" creationid="hsugawa8651" creationdate="20181116T020340Z">
        <seg>julia&gt; run(pipeline(`perl -le '$|=1; for(0..5){ print; sleep 1 }'`,
           prefixer("X",3) &amp; prefixer("Y",3) &amp; prefixer("Z",3),
           prefixer("A",2) &amp; prefixer("B",2)));
A X 0
B Y 1
A Z 2
B X 3
A Y 4
B Z 5</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; s = "\u2200 x \u2203 y"
"∀ x ∃ y"</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T020602Z" creationid="hsugawa8651" creationdate="20181116T020602Z">
        <seg>julia&gt; s = "\u2200 x \u2203 y"
"∀ x ∃ y"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; s = "\xc0\xa0\xe2\x88\xe2|"
"\xc0\xa0\xe2\x88\xe2|"

julia&gt; foreach(display, s)
'\xc0\xa0': [overlong] ASCII/Unicode U+0020 (category Zs: Separator, space)
'\xe2\x88': Malformed UTF-8 (category Ma: Malformed, bad data)
'\xe2': Malformed UTF-8 (category Ma: Malformed, bad data)
'|': ASCII/Unicode U+007c (category Sm: Symbol, math)

julia&gt; isvalid.(collect(s))
4-element BitArray{1}:
 false
 false
 false
  true

julia&gt; s2 = "\xf7\xbf\xbf\xbf"
"\U1fffff"

julia&gt; foreach(display, s2)
'\U1fffff': Unicode U+1fffff (category In: Invalid, too high)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T020731Z" creationid="hsugawa8651" creationdate="20181116T020731Z">
        <seg>julia&gt; s = "\xc0\xa0\xe2\x88\xe2|"
"\xc0\xa0\xe2\x88\xe2|"

julia&gt; foreach(display, s)
'\xc0\xa0': [overlong] ASCII/Unicode U+0020 (category Zs: Separator, space)
'\xe2\x88': Malformed UTF-8 (category Ma: Malformed, bad data)
'\xe2': Malformed UTF-8 (category Ma: Malformed, bad data)
'|': ASCII/Unicode U+007c (category Sm: Symbol, math)

julia&gt; isvalid.(collect(s))
4-element BitArray{1}:
 false
 false
 false
  true

julia&gt; s2 = "\xf7\xbf\xbf\xbf"
"\U1fffff"

julia&gt; foreach(display, s2)
'\U1fffff': Unicode U+1fffff (category In: Invalid, too high)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; s = SquaresVector(4)
4-element SquaresVector:
  1
  4
  9
 16

julia&gt; s[s .&gt; 8]
2-element Array{Int64,1}:
  9
 16

julia&gt; s + s
4-element Array{Int64,1}:
  2
  8
 18
 32

julia&gt; sin.(s)
4-element Array{Float64,1}:
  0.8414709848078965
 -0.7568024953079282
  0.4121184852417566
 -0.2879033166650653</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T083214Z" creationid="hsugawa8651" creationdate="20181113T083214Z">
        <seg>julia&gt; s = SquaresVector(4)
4-element SquaresVector:
  1
  4
  9
 16

julia&gt; s[s .&gt; 8]
2-element Array{Int64,1}:
  9
 16

julia&gt; s + s
4-element Array{Int64,1}:
  2
  8
 18
 32

julia&gt; sin.(s)
4-element Array{Float64,1}:
  0.8414709848078965
 -0.7568024953079282
  0.4121184852417566
 -0.2879033166650653</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; s[1:1]
"∀"

julia&gt; s[1:2]
ERROR: StringIndexError("∀ x ∃ y", 2)
Stacktrace:
[...]

julia&gt; s[1:4]
"∀ "</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T020611Z" creationid="hsugawa8651" creationdate="20181116T020611Z">
        <seg>julia&gt; s[1:1]
"∀"

julia&gt; s[1:2]
ERROR: StringIndexError("∀ x ∃ y", 2)
Stacktrace:
[...]

julia&gt; s[1:4]
"∀ "</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; s[1]
'∀': Unicode U+2200 (category Sm: Symbol, math)

julia&gt; s[2]
ERROR: StringIndexError("∀ x ∃ y", 2)
[...]

julia&gt; s[3]
ERROR: StringIndexError("∀ x ∃ y", 3)
Stacktrace:
[...]

julia&gt; s[4]
' ': ASCII/Unicode U+0020 (category Zs: Separator, space)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T020607Z" creationid="hsugawa8651" creationdate="20181116T020607Z">
        <seg>julia&gt; s[1]
'∀': Unicode U+2200 (category Sm: Symbol, math)

julia&gt; s[2]
ERROR: StringIndexError("∀ x ∃ y", 2)
[...]

julia&gt; s[3]
ERROR: StringIndexError("∀ x ∃ y", 3)
Stacktrace:
[...]

julia&gt; s[4]
' ': ASCII/Unicode U+0020 (category Zs: Separator, space)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; s[1]
'∀': Unicode U+2200 (category Sm: Symbol, math)

julia&gt; s[2]
ERROR: UnicodeError: invalid character index
[...]

julia&gt; s[3]
ERROR: UnicodeError: invalid character index
[...]

julia&gt; s[4]
' ': ASCII/Unicode U+0020 (category Zs: Separator, space)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T094223Z" creationid="hsugawa8651" creationdate="20181120T094223Z">
        <seg>julia&gt; s[1]
'∀': Unicode U+2200 (category Sm: Symbol, math)

julia&gt; s[2]
ERROR: UnicodeError: invalid character index
[...]

julia&gt; s[3]
ERROR: UnicodeError: invalid character index
[...]

julia&gt; s[4]
' ': ASCII/Unicode U+0020 (category Zs: Separator, space)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; same_type(1, 2)
true

julia&gt; same_type(1, 2.0)
false

julia&gt; same_type(1.0, 2.0)
true

julia&gt; same_type("foo", 2.0)
false

julia&gt; same_type("foo", "bar")
true

julia&gt; same_type(Int32(1), Int64(2))
false</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T054019Z" creationid="hsugawa8651" creationdate="20181116T054019Z">
        <seg>julia&gt; same_type(1, 2)
true

julia&gt; same_type(1, 2.0)
false

julia&gt; same_type(1.0, 2.0)
true

julia&gt; same_type("foo", 2.0)
false

julia&gt; same_type("foo", "bar")
true

julia&gt; same_type(Int32(1), Int64(2))
false</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; same_type(x::T, y::T) where {T} = true
same_type (generic function with 1 method)

julia&gt; same_type(x,y) = false
same_type (generic function with 2 methods)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T054016Z" creationid="hsugawa8651" creationdate="20181116T054016Z">
        <seg>julia&gt; same_type(x::T, y::T) where {T} = true
same_type (generic function with 1 method)

julia&gt; same_type(x,y) = false
same_type (generic function with 2 methods)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; same_type_numeric(x::T, y::T) where {T&lt;:Number} = true
same_type_numeric (generic function with 1 method)

julia&gt; same_type_numeric(x::Number, y::Number) = false
same_type_numeric (generic function with 2 methods)

julia&gt; same_type_numeric(1, 2)
true

julia&gt; same_type_numeric(1, 2.0)
false

julia&gt; same_type_numeric(1.0, 2.0)
true

julia&gt; same_type_numeric("foo", 2.0)
ERROR: MethodError: no method matching same_type_numeric(::String, ::Float64)
Closest candidates are:
  same_type_numeric(!Matched::T&lt;:Number, ::T&lt;:Number) where T&lt;:Number at none:1
  same_type_numeric(!Matched::Number, ::Number) at none:1

julia&gt; same_type_numeric("foo", "bar")
ERROR: MethodError: no method matching same_type_numeric(::String, ::String)

julia&gt; same_type_numeric(Int32(1), Int64(2))
false</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T054030Z" creationid="hsugawa8651" creationdate="20181116T054030Z">
        <seg>julia&gt; same_type_numeric(x::T, y::T) where {T&lt;:Number} = true
same_type_numeric (generic function with 1 method)

julia&gt; same_type_numeric(x::Number, y::Number) = false
same_type_numeric (generic function with 2 methods)

julia&gt; same_type_numeric(1, 2)
true

julia&gt; same_type_numeric(1, 2.0)
false

julia&gt; same_type_numeric(1.0, 2.0)
true

julia&gt; same_type_numeric("foo", 2.0)
ERROR: MethodError: no method matching same_type_numeric(::String, ::Float64)
Closest candidates are:
  same_type_numeric(!Matched::T&lt;:Number, ::T&lt;:Number) where T&lt;:Number at none:1
  same_type_numeric(!Matched::Number, ::Number) at none:1

julia&gt; same_type_numeric("foo", "bar")
ERROR: MethodError: no method matching same_type_numeric(::String, ::String)

julia&gt; same_type_numeric(Int32(1), Int64(2))
false</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; search("xylophone", 'o')
4

julia&gt; search("xylophone", 'o', 5)
7

julia&gt; search("xylophone", 'o', 8)
0</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T094404Z" creationid="hsugawa8651" creationdate="20181120T094404Z">
        <seg>julia&gt; search("xylophone", 'o')
4

julia&gt; search("xylophone", 'o', 5)
7

julia&gt; search("xylophone", 'o', 8)
0</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; search("xylophone", 'x')
1

julia&gt; search("xylophone", 'p')
5

julia&gt; search("xylophone", 'z')
0</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T094402Z" creationid="hsugawa8651" creationdate="20181120T094402Z">
        <seg>julia&gt; search("xylophone", 'x')
1

julia&gt; search("xylophone", 'p')
5

julia&gt; search("xylophone", 'z')
0</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; setrounding(BigFloat, RoundUp) do
           BigFloat(1) + parse(BigFloat, "0.1")
       end
1.100000000000000000000000000000000000000000000000000000000000000000000000000003

julia&gt; setrounding(BigFloat, RoundDown) do
           BigFloat(1) + parse(BigFloat, "0.1")
       end
1.099999999999999999999999999999999999999999999999999999999999999999999999999986

julia&gt; setprecision(40) do
           BigFloat(1) + parse(BigFloat, "0.1")
       end
1.1000000000004</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T111716Z" creationid="hsugawa8651" creationdate="20181112T111716Z">
        <seg>julia&gt; setrounding(BigFloat, RoundUp) do
           BigFloat(1) + parse(BigFloat, "0.1")
       end
1.100000000000000000000000000000000000000000000000000000000000000000000000000003

julia&gt; setrounding(BigFloat, RoundDown) do
           BigFloat(1) + parse(BigFloat, "0.1")
       end
1.099999999999999999999999999999999999999999999999999999999999999999999999999986

julia&gt; setprecision(40) do
           BigFloat(1) + parse(BigFloat, "0.1")
       end
1.1000000000004</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; show(IOContext(stdout, :compact=&gt;true), Polar(3, 4.0))
3.0ℯ4.0im

julia&gt; [Polar(3, 4.0) Polar(4.0,5.3)]
1×2 Array{Polar{Float64},2}:
 3.0ℯ4.0im  4.0ℯ5.3im</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T022148Z" creationid="hsugawa8651" creationdate="20181116T022148Z">
        <seg>julia&gt; show(IOContext(stdout, :compact=&gt;true), Polar(3, 4.0))
3.0ℯ4.0im

julia&gt; [Polar(3, 4.0) Polar(4.0,5.3)]
1×2 Array{Polar{Float64},2}:
 3.0ℯ4.0im  4.0ℯ5.3im</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; show(stdout, "text/html", Polar(3.0,4.0))
&lt;x1/&gt;Polar{Float64}&lt;x2/&gt; complex number: 3.0 &lt;x3/&gt;e&lt;x4/&gt;&lt;x5/&gt;4.0 &lt;x6/&gt;i&lt;x7/&gt;&lt;x8/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T022123Z" creationid="hsugawa8651" creationdate="20181116T022123Z">
        <seg>julia&gt; show(stdout, "text/html", Polar(3.0,4.0))
&lt;x1/&gt;Polar{Float64}&lt;x2/&gt; complex number: 3.0 &lt;x3/&gt;e&lt;x4/&gt;&lt;x5/&gt;4.0 &lt;x6/&gt;i&lt;x7/&gt;&lt;x8/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; sizeof(Float16(4.))
2

julia&gt; 2*Float16(4.)
Float16(8.0)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T110716Z" creationid="hsugawa8651" creationdate="20181112T110716Z">
        <seg>julia&gt; sizeof(Float16(4.))
2

julia&gt; 2*Float16(4.)
Float16(8.0)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; sort([2,3,1])
3-element Array{Int64,1}:
 1
 2
 3</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T044836Z" creationid="hsugawa8651" creationdate="20181112T044836Z">
        <seg>julia&gt; sort([2,3,1])
3-element Array{Int64,1}:
 1
 2
 3</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; sort([2,3,1], rev=true)
3-element Array{Int64,1}:
 3
 2
 1</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T044838Z" creationid="hsugawa8651" creationdate="20181112T044838Z">
        <seg>julia&gt; sort([2,3,1], rev=true)
3-element Array{Int64,1}:
 3
 2
 1</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; sort(v, alg=InsertionSort)
5-element Array{Float64,1}:
 -0.839027
 -0.597634
 -0.0104452
  0.297288
  0.382396</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T044925Z" creationid="hsugawa8651" creationdate="20181112T044925Z">
        <seg>julia&gt; sort(v, alg=InsertionSort)
5-element Array{Float64,1}:
 -0.839027
 -0.597634
 -0.0104452
  0.297288
  0.382396</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; sort(v, by=abs)
5-element Array{Float64,1}:
 -0.0104452
  0.297288
  0.382396
 -0.597634
 -0.839027</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T044917Z" creationid="hsugawa8651" creationdate="20181112T044917Z">
        <seg>julia&gt; sort(v, by=abs)
5-element Array{Float64,1}:
 -0.0104452
  0.297288
  0.382396
 -0.597634
 -0.839027</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; sort(v, by=abs, rev=true)
5-element Array{Float64,1}:
 -0.839027
 -0.597634
  0.382396
  0.297288
 -0.0104452</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T044921Z" creationid="hsugawa8651" creationdate="20181112T044921Z">
        <seg>julia&gt; sort(v, by=abs, rev=true)
5-element Array{Float64,1}:
 -0.839027
 -0.597634
  0.382396
  0.297288
 -0.0104452</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; sqrt(-1)
ERROR: DomainError with -1.0:
sqrt will only return a complex result if called with a complex argument.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T123421Z" creationid="hsugawa8651" creationdate="20181118T123421Z">
        <seg>julia&gt; sqrt(-1)
ERROR: DomainError with -1.0:
sqrt will only return a complex result if called with a complex argument.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; sqrt(1im)
0.7071067811865476 + 0.7071067811865475im

julia&gt; sqrt(1 + 2im)
1.272019649514069 + 0.7861513777574233im

julia&gt; cos(1 + 2im)
2.0327230070196656 - 3.0518977991518im

julia&gt; exp(1 + 2im)
-1.1312043837568135 + 2.4717266720048188im

julia&gt; sinh(1 + 2im)
-0.4890562590412937 + 1.4031192506220405im</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T123306Z" creationid="hsugawa8651" creationdate="20181118T123306Z">
        <seg>julia&gt; sqrt(1im)
0.7071067811865476 + 0.7071067811865475im

julia&gt; sqrt(1 + 2im)
1.272019649514069 + 0.7861513777574233im

julia&gt; cos(1 + 2im)
2.0327230070196656 - 3.0518977991518im

julia&gt; exp(1 + 2im)
-1.1312043837568135 + 2.4717266720048188im

julia&gt; sinh(1 + 2im)
-0.4890562590412937 + 1.4031192506220405im</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; stacktrace(trace, true)
21-element Array{Base.StackTraces.StackFrame,1}:
 jl_apply_generic at gf.c:2167
 do_call at interpreter.c:324
 eval_value at interpreter.c:416
 eval_body at interpreter.c:559
 jl_interpret_toplevel_thunk_callback at interpreter.c:798
 top-level scope
 jl_interpret_toplevel_thunk at interpreter.c:807
 jl_toplevel_eval_flex at toplevel.c:856
 jl_toplevel_eval_in at builtins.c:624
 eval at boot.jl:317 [inlined]
 eval(::Module, ::Expr) at REPL.jl:5
 jl_apply_generic at gf.c:2167
 eval_user_input(::Any, ::REPL.REPLBackend) at REPL.jl:85
 jl_apply_generic at gf.c:2167
 macro expansion at REPL.jl:116 [inlined]
 (::getfield(REPL, Symbol("&lt;x1/&gt;28&lt;x2/&gt;29")){REPL.REPLBackend})() at event.jl:92
 jl_fptr_trampoline at gf.c:1838
 jl_apply_generic at gf.c:2167
 jl_apply at julia.h:1540 [inlined]
 start_task at task.c:268
 ip:0xffffffffffffffff</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T020439Z" creationid="hsugawa8651" creationdate="20181116T020439Z">
        <seg>julia&gt; stacktrace(trace, true)
21-element Array{Base.StackTraces.StackFrame,1}:
 jl_apply_generic at gf.c:2167
 do_call at interpreter.c:324
 eval_value at interpreter.c:416
 eval_body at interpreter.c:559
 jl_interpret_toplevel_thunk_callback at interpreter.c:798
 top-level scope
 jl_interpret_toplevel_thunk at interpreter.c:807
 jl_toplevel_eval_flex at toplevel.c:856
 jl_toplevel_eval_in at builtins.c:624
 eval at boot.jl:317 [inlined]
 eval(::Module, ::Expr) at REPL.jl:5
 jl_apply_generic at gf.c:2167
 eval_user_input(::Any, ::REPL.REPLBackend) at REPL.jl:85
 jl_apply_generic at gf.c:2167
 macro expansion at REPL.jl:116 [inlined]
 (::getfield(REPL, Symbol("&lt;x1/&gt;28&lt;x2/&gt;29")){REPL.REPLBackend})() at event.jl:92
 jl_fptr_trampoline at gf.c:1838
 jl_apply_generic at gf.c:2167
 jl_apply at julia.h:1540 [inlined]
 start_task at task.c:268
 ip:0xffffffffffffffff</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; str = """
           Hello,
           world.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T020830Z" creationid="hsugawa8651" creationdate="20181116T020830Z">
        <seg>julia&gt; str = """
           Hello,
           world.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; str = "Hello, world.\n"
"Hello, world.\n"

julia&gt; """Contains "quote" characters"""
"Contains \"quote\" characters"</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T020537Z" creationid="hsugawa8651" creationdate="20181116T020537Z">
        <seg>julia&gt; str = "Hello, world.\n"
"Hello, world.\n"

julia&gt; """Contains "quote" characters"""
"Contains \"quote\" characters"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; str = "long string"
"long string"

julia&gt; substr = SubString(str, 1, 4)
"long"

julia&gt; typeof(substr)
SubString{String}</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T020556Z" creationid="hsugawa8651" creationdate="20181116T020556Z">
        <seg>julia&gt; str = "long string"
"long string"

julia&gt; substr = SubString(str, 1, 4)
"long"

julia&gt; typeof(substr)
SubString{String}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; str[0]
ERROR: BoundsError: attempt to access "Hello, world.\n"
  at index [0]
[...]

julia&gt; str[end+1]
ERROR: BoundsError: attempt to access "Hello, world.\n"
  at index [15]
Stacktrace:
[...]</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T020547Z" creationid="hsugawa8651" creationdate="20181116T020547Z">
        <seg>julia&gt; str[0]
ERROR: BoundsError: attempt to access "Hello, world.\n"
  at index [0]
[...]

julia&gt; str[end+1]
ERROR: BoundsError: attempt to access "Hello, world.\n"
  at index [15]
Stacktrace:
[...]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; str[0]
ERROR: BoundsError: attempt to access "Hello, world.\n"
  at index [0]
[...]

julia&gt; str[end+1]
ERROR: BoundsError: attempt to access "Hello, world.\n"
  at index [15]
[...]</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T094210Z" creationid="hsugawa8651" creationdate="20181120T094210Z">
        <seg>julia&gt; str[0]
ERROR: BoundsError: attempt to access "Hello, world.\n"
  at index [0]
[...]

julia&gt; str[end+1]
ERROR: BoundsError: attempt to access "Hello, world.\n"
  at index [15]
[...]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; str[1]
'H': ASCII/Unicode U+0048 (category Lu: Letter, uppercase)

julia&gt; str[6]
',': ASCII/Unicode U+002c (category Po: Punctuation, other)

julia&gt; str[end]
'\n': ASCII/Unicode U+000a (category Cc: Other, control)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T020539Z" creationid="hsugawa8651" creationdate="20181116T020539Z">
        <seg>julia&gt; str[1]
'H': ASCII/Unicode U+0048 (category Lu: Letter, uppercase)

julia&gt; str[6]
',': ASCII/Unicode U+002c (category Po: Punctuation, other)

julia&gt; str[end]
'\n': ASCII/Unicode U+000a (category Cc: Other, control)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; str[4:9]
"lo, wo"</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T020549Z" creationid="hsugawa8651" creationdate="20181116T020549Z">
        <seg>julia&gt; str[4:9]
"lo, wo"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; str[6]
',': ASCII/Unicode U+002c (category Po: Punctuation, other)

julia&gt; str[6:6]
","</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T020552Z" creationid="hsugawa8651" creationdate="20181116T020552Z">
        <seg>julia&gt; str[6]
',': ASCII/Unicode U+002c (category Po: Punctuation, other)

julia&gt; str[6:6]
","</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; str[end-1]
'.': ASCII/Unicode U+002e (category Po: Punctuation, other)

julia&gt; str[end÷2]
' ': ASCII/Unicode U+0020 (category Zs: Separator, space)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T020545Z" creationid="hsugawa8651" creationdate="20181116T020545Z">
        <seg>julia&gt; str[end-1]
'.': ASCII/Unicode U+002e (category Po: Punctuation, other)

julia&gt; str[end÷2]
' ': ASCII/Unicode U+0020 (category Zs: Separator, space)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; string(1 + 2)
"3"</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T001013Z" creationid="hsugawa8651" creationdate="20181120T001013Z">
        <seg>julia&gt; string(1 + 2)
"3"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; struct DiagPoint{T} &lt;: Pointy{T}
           x::T
       end</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T021856Z" creationid="hsugawa8651" creationdate="20181116T021856Z">
        <seg>julia&gt; struct DiagPoint{T} &lt;: Pointy{T}
           x::T
       end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; struct Foo
           bar
           baz
           Foo(bar,baz) = new(bar,baz)
       end</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T155810Z" creationid="hsugawa8651" creationdate="20181117T155810Z">
        <seg>julia&gt; struct Foo
           bar
           baz
           Foo(bar,baz) = new(bar,baz)
       end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; struct Foo
           bar
           baz
       end

julia&gt; foo = Foo(1, 2)
Foo(1, 2)

julia&gt; foo.bar
1

julia&gt; foo.baz
2</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T155629Z" creationid="hsugawa8651" creationdate="20181117T155629Z">
        <seg>julia&gt; struct Foo
           bar
           baz
       end

julia&gt; foo = Foo(1, 2)
Foo(1, 2)

julia&gt; foo.bar
1

julia&gt; foo.baz
2</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; struct Foo
           bar
           baz::Int
           qux::Float64
       end</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T021646Z" creationid="hsugawa8651" creationdate="20181116T021646Z">
        <seg>julia&gt; struct Foo
           bar
           baz::Int
           qux::Float64
       end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; struct HasPlain
           n::Int
           HasPlain() = new()
       end

julia&gt; HasPlain()
HasPlain(438103441441)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T123802Z" creationid="hsugawa8651" creationdate="20181118T123802Z">
        <seg>julia&gt; struct HasPlain
           n::Int
           HasPlain() = new()
       end

julia&gt; HasPlain()
HasPlain(438103441441)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; struct MyCustomException &lt;: Exception end</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T124619Z" creationid="hsugawa8651" creationdate="20181118T124619Z">
        <seg>julia&gt; struct MyCustomException &lt;: Exception end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; struct MyUndefVarError &lt;: Exception
           var::Symbol
       end

julia&gt; Base.showerror(io::IO, e::MyUndefVarError) = print(io, e.var, " not defined")</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T124655Z" creationid="hsugawa8651" creationdate="20181118T124655Z">
        <seg>julia&gt; struct MyUndefVarError &lt;: Exception
           var::Symbol
       end

julia&gt; Base.showerror(io::IO, e::MyUndefVarError) = print(io, e.var, " not defined")</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; struct NoFields
       end

julia&gt; NoFields() === NoFields()
true</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T021707Z" creationid="hsugawa8651" creationdate="20181116T021707Z">
        <seg>julia&gt; struct NoFields
       end

julia&gt; NoFields() === NoFields()
true</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; struct OrderedPair
           x::Real
           y::Real
           OrderedPair(x,y) = x &gt; y ?</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T155743Z" creationid="hsugawa8651" creationdate="20181117T155743Z">
        <seg>julia&gt; struct OrderedPair
           x::Real
           y::Real
           OrderedPair(x,y) = x &gt; y ?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; struct OurRational{T&lt;:Integer} &lt;: Real
           num::T
           den::T
           function OurRational{T}(num::T, den::T) where T&lt;:Integer
               if num == 0 &amp;&amp; den == 0
                    error("invalid rational: 0//0")
               end
               g = gcd(den, num)
               num = div(num, g)
               den = div(den, g)
               new(num, den)
           end
       end

julia&gt; OurRational(n::T, d::T) where {T&lt;:Integer} = OurRational{T}(n,d)
OurRational

julia&gt; OurRational(n::Integer, d::Integer) = OurRational(promote(n,d)...)
OurRational

julia&gt; OurRational(n::Integer) = OurRational(n,one(n))
OurRational

julia&gt; ⊘(n::Integer, d::Integer) = OurRational(n,d)
⊘ (generic function with 1 method)

julia&gt; ⊘(x::OurRational, y::Integer) = x.num ⊘ (x.den*y)
⊘ (generic function with 2 methods)

julia&gt; ⊘(x::Integer, y::OurRational) = (x*y.den) ⊘ y.num
⊘ (generic function with 3 methods)

julia&gt; ⊘(x::Complex, y::Real) = complex(real(x) ⊘ y, imag(x) ⊘ y)
⊘ (generic function with 4 methods)

julia&gt; ⊘(x::Real, y::Complex) = (x*y') ⊘ real(y*y')
⊘ (generic function with 5 methods)

julia&gt; function ⊘(x::Complex, y::Complex)
           xy = x*y'
           yy = real(y*y')
           complex(real(xy) ⊘ yy, imag(xy) ⊘ yy)
       end
⊘ (generic function with 6 methods)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T124101Z" creationid="hsugawa8651" creationdate="20181118T124101Z">
        <seg>julia&gt; struct OurRational{T&lt;:Integer} &lt;: Real
           num::T
           den::T
           function OurRational{T}(num::T, den::T) where T&lt;:Integer
               if num == 0 &amp;&amp; den == 0
                    error("invalid rational: 0//0")
               end
               g = gcd(den, num)
               num = div(num, g)
               den = div(den, g)
               new(num, den)
           end
       end

julia&gt; OurRational(n::T, d::T) where {T&lt;:Integer} = OurRational{T}(n,d)
OurRational

julia&gt; OurRational(n::Integer, d::Integer) = OurRational(promote(n,d)...)
OurRational

julia&gt; OurRational(n::Integer) = OurRational(n,one(n))
OurRational

julia&gt; ⊘(n::Integer, d::Integer) = OurRational(n,d)
⊘ (generic function with 1 method)

julia&gt; ⊘(x::OurRational, y::Integer) = x.num ⊘ (x.den*y)
⊘ (generic function with 2 methods)

julia&gt; ⊘(x::Integer, y::OurRational) = (x*y.den) ⊘ y.num
⊘ (generic function with 3 methods)

julia&gt; ⊘(x::Complex, y::Real) = complex(real(x) ⊘ y, imag(x) ⊘ y)
⊘ (generic function with 4 methods)

julia&gt; ⊘(x::Real, y::Complex) = (x*y') ⊘ real(y*y')
⊘ (generic function with 5 methods)

julia&gt; function ⊘(x::Complex, y::Complex)
           xy = x*y'
           yy = real(y*y')
           complex(real(xy) ⊘ yy, imag(xy) ⊘ yy)
       end
⊘ (generic function with 6 methods)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; struct Point{T&lt;:Real}
           x::T
           y::T
           Point{T}(x,y) where {T&lt;:Real} = new(x,y)
       end

julia&gt; Point(x::T, y::T) where {T&lt;:Real} = Point{T}(x,y);</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T123916Z" creationid="hsugawa8651" creationdate="20181118T123916Z">
        <seg>julia&gt; struct Point{T&lt;:Real}
           x::T
           y::T
           Point{T}(x,y) where {T&lt;:Real} = new(x,y)
       end

julia&gt; Point(x::T, y::T) where {T&lt;:Real} = Point{T}(x,y);</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; struct Point{T&lt;:Real}
           x::T
           y::T
       end

julia&gt; Point(1,2) &lt;x1/&gt; implicit T &lt;x2/&gt;
Point{Int64}(1, 2)

julia&gt; Point(1.0,2.5) &lt;x3/&gt; implicit T &lt;x4/&gt;
Point{Float64}(1.0, 2.5)

julia&gt; Point(1,2.5) &lt;x5/&gt; implicit T &lt;x6/&gt;
ERROR: MethodError: no method matching Point(::Int64, ::Float64)
Closest candidates are:
  Point(::T&lt;:Real, ::T&lt;:Real) where T&lt;:Real at none:2

julia&gt; Point{Int64}(1, 2) &lt;x7/&gt; explicit T &lt;x8/&gt;
Point{Int64}(1, 2)

julia&gt; Point{Int64}(1.0,2.5) &lt;x9/&gt; explicit T &lt;x10/&gt;
ERROR: InexactError: Int64(Int64, 2.5)
Stacktrace:
[...]

julia&gt; Point{Float64}(1.0, 2.5) &lt;x11/&gt; explicit T &lt;x12/&gt;
Point{Float64}(1.0, 2.5)

julia&gt; Point{Float64}(1,2) &lt;x13/&gt; explicit T &lt;x14/&gt;
Point{Float64}(1.0, 2.0)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T123830Z" creationid="hsugawa8651" creationdate="20181118T123830Z">
        <seg>julia&gt; struct Point{T&lt;:Real}
           x::T
           y::T
       end

julia&gt; Point(1,2) &lt;x1/&gt; implicit T &lt;x2/&gt;
Point{Int64}(1, 2)

julia&gt; Point(1.0,2.5) &lt;x3/&gt; implicit T &lt;x4/&gt;
Point{Float64}(1.0, 2.5)

julia&gt; Point(1,2.5) &lt;x5/&gt; implicit T &lt;x6/&gt;
ERROR: MethodError: no method matching Point(::Int64, ::Float64)
Closest candidates are:
  Point(::T&lt;:Real, ::T&lt;:Real) where T&lt;:Real at none:2

julia&gt; Point{Int64}(1, 2) &lt;x7/&gt; explicit T &lt;x8/&gt;
Point{Int64}(1, 2)

julia&gt; Point{Int64}(1.0,2.5) &lt;x9/&gt; explicit T &lt;x10/&gt;
ERROR: InexactError: Int64(Int64, 2.5)
Stacktrace:
[...]

julia&gt; Point{Float64}(1.0, 2.5) &lt;x11/&gt; explicit T &lt;x12/&gt;
Point{Float64}(1.0, 2.5)

julia&gt; Point{Float64}(1,2) &lt;x13/&gt; explicit T &lt;x14/&gt;
Point{Float64}(1.0, 2.0)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; struct Point{T}
           x::T
           y::T
       end</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T021737Z" creationid="hsugawa8651" creationdate="20181116T021737Z">
        <seg>julia&gt; struct Point{T}
           x::T
           y::T
       end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; struct Point{T} &lt;: Pointy{T}
           x::T
           y::T
       end</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T021848Z" creationid="hsugawa8651" creationdate="20181116T021848Z">
        <seg>julia&gt; struct Point{T} &lt;: Pointy{T}
           x::T
           y::T
       end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; struct Polar{T&lt;:Real} &lt;: Number
           r::T
           Θ::T
       end

julia&gt; Polar(r::Real,Θ::Real) = Polar(promote(r,Θ)...)
Polar</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T022104Z" creationid="hsugawa8651" creationdate="20181116T022104Z">
        <seg>julia&gt; struct Polar{T&lt;:Real} &lt;: Number
           r::T
           Θ::T
       end

julia&gt; Polar(r::Real,Θ::Real) = Polar(promote(r,Θ)...)
Polar</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; struct Polynomial{R}
           coeffs::Vector{R}
       end

julia&gt; function (p::Polynomial)(x)
           v = p.coeffs[end]
           for i = (length(p.coeffs)-1):-1:1
               v = v*x + p.coeffs[i]
           end
           return v
       end

julia&gt; (p::Polynomial)() = p(5)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T054341Z" creationid="hsugawa8651" creationdate="20181116T054341Z">
        <seg>julia&gt; struct Polynomial{R}
           coeffs::Vector{R}
       end

julia&gt; function (p::Polynomial)(x)
           v = p.coeffs[end]
           for i = (length(p.coeffs)-1):-1:1
               v = v*x + p.coeffs[i]
           end
           return v
       end

julia&gt; (p::Polynomial)() = p(5)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; struct SparseArray{T,N} &lt;: AbstractArray{T,N}
           data::Dict{NTuple{N,Int}, T}
           dims::NTuple{N,Int}
       end

julia&gt; SparseArray(::Type{T}, dims::Int...) where {T} = SparseArray(T, dims);

julia&gt; SparseArray(::Type{T}, dims::NTuple{N,Int}) where {T,N} = SparseArray{T,N}(Dict{NTuple{N,Int}, T}(), dims);

julia&gt; Base.size(A::SparseArray) = A.dims

julia&gt; Base.similar(A::SparseArray, ::Type{T}, dims::Dims) where {T} = SparseArray(T, dims)

julia&gt; Base.getindex(A::SparseArray{T,N}, I::Vararg{Int,N}) where {T,N} = get(A.data, I, zero(T))

julia&gt; Base.setindex!(A::SparseArray{T,N}, v, I::Vararg{Int,N}) where {T,N} = (A.data[I] = v)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T083222Z" creationid="hsugawa8651" creationdate="20181113T083222Z">
        <seg>julia&gt; struct SparseArray{T,N} &lt;: AbstractArray{T,N}
           data::Dict{NTuple{N,Int}, T}
           dims::NTuple{N,Int}
       end

julia&gt; SparseArray(::Type{T}, dims::Int...) where {T} = SparseArray(T, dims);

julia&gt; SparseArray(::Type{T}, dims::NTuple{N,Int}) where {T,N} = SparseArray{T,N}(Dict{NTuple{N,Int}, T}(), dims);

julia&gt; Base.size(A::SparseArray) = A.dims

julia&gt; Base.similar(A::SparseArray, ::Type{T}, dims::Dims) where {T} = SparseArray(T, dims)

julia&gt; Base.getindex(A::SparseArray{T,N}, I::Vararg{Int,N}) where {T,N} = get(A.data, I, zero(T))

julia&gt; Base.setindex!(A::SparseArray{T,N}, v, I::Vararg{Int,N}) where {T,N} = (A.data[I] = v)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; struct Squares
           count::Int
       end

julia&gt; Base.iterate(S::Squares, state=1) = state &gt; S.count ?</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T112454Z" creationid="hsugawa8651" creationdate="20181112T112454Z">
        <seg>julia&gt; struct Squares
           count::Int
       end

julia&gt; Base.iterate(S::Squares, state=1) = state &gt; S.count ?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; struct SquaresVector &lt;: AbstractArray{Int, 1}
           count::Int
       end

julia&gt; Base.size(S::SquaresVector) = (S.count,)

julia&gt; Base.IndexStyle(::Type{&lt;:SquaresVector}) = IndexLinear()

julia&gt; Base.getindex(S::SquaresVector, i::Int) = i*i</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T083203Z" creationid="hsugawa8651" creationdate="20181113T083203Z">
        <seg>julia&gt; struct SquaresVector &lt;: AbstractArray{Int, 1}
           count::Int
       end

julia&gt; Base.size(S::SquaresVector) = (S.count,)

julia&gt; Base.IndexStyle(::Type{&lt;:SquaresVector}) = IndexLinear()

julia&gt; Base.getindex(S::SquaresVector, i::Int) = i*i</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; struct SummedArray{T&lt;:Number,S&lt;:Number}
           data::Vector{T}
           sum::S
           function SummedArray(a::Vector{T}) where T
               S = widen(T)
               new{T,S}(a, sum(S, a))
           end
       end

julia&gt; SummedArray(Int32[1; 2; 3], Int32(6))
ERROR: MethodError: no method matching SummedArray(::Array{Int32,1}, ::Int32)
Closest candidates are:
  SummedArray(::Array{T,1}) where T at none:5</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T124259Z" creationid="hsugawa8651" creationdate="20181118T124259Z">
        <seg>julia&gt; struct SummedArray{T&lt;:Number,S&lt;:Number}
           data::Vector{T}
           sum::S
           function SummedArray(a::Vector{T}) where T
               S = widen(T)
               new{T,S}(a, sum(S, a))
           end
       end

julia&gt; SummedArray(Int32[1; 2; 3], Int32(6))
ERROR: MethodError: no method matching SummedArray(::Array{Int32,1}, ::Int32)
Closest candidates are:
  SummedArray(::Array{T,1}) where T at none:5</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; struct SummedArray{T&lt;:Number,S&lt;:Number}
           data::Vector{T}
           sum::S
       end

julia&gt; SummedArray(Int32[1; 2; 3], Int32(6))
SummedArray{Int32,Int32}(Int32[1, 2, 3], 6)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T124243Z" creationid="hsugawa8651" creationdate="20181118T124243Z">
        <seg>julia&gt; struct SummedArray{T&lt;:Number,S&lt;:Number}
           data::Vector{T}
           sum::S
       end

julia&gt; SummedArray(Int32[1; 2; 3], Int32(6))
SummedArray{Int32,Int32}(Int32[1, 2, 3], 6)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; struct T1
           x::Int64
       end

julia&gt; struct T2
           x::Int64
           T2(x) = new(x)
       end

julia&gt; T1(1)
T1(1)

julia&gt; T2(1)
T2(1)

julia&gt; T1(1.0)
T1(1)

julia&gt; T2(1.0)
T2(1)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T155818Z" creationid="hsugawa8651" creationdate="20181117T155818Z">
        <seg>julia&gt; struct T1
           x::Int64
       end

julia&gt; struct T2
           x::Int64
           T2(x) = new(x)
       end

julia&gt; T1(1)
T1(1)

julia&gt; T2(1)
T2(1)

julia&gt; T1(1.0)
T1(1)

julia&gt; T2(1.0)
T2(1)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; struct Val{x}
       end

julia&gt; Val(x) = Val{x}()
Val</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T022156Z" creationid="hsugawa8651" creationdate="20181116T022156Z">
        <seg>julia&gt; struct Val{x}
       end

julia&gt; Val(x) = Val{x}()
Val</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; sub2ind_gen_impl(Tuple{Int,Int}, Int, Int)
:(((I[1] - 1) + dims[1] * (I[2] - 1)) + 1)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T032331Z" creationid="hsugawa8651" creationdate="20181116T032331Z">
        <seg>julia&gt; sub2ind_gen_impl(Tuple{Int,Int}, Int, Int)
:(((I[1] - 1) + dims[1] * (I[2] - 1)) + 1)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; sub2ind_rec(dims::Tuple{}) = 1;

julia&gt; sub2ind_rec(dims::Tuple{}, i1::Integer, I::Integer...) =
           i1 == 1 ?</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T032248Z" creationid="hsugawa8651" creationdate="20181116T032248Z">
        <seg>julia&gt; sub2ind_rec(dims::Tuple{}) = 1;

julia&gt; sub2ind_rec(dims::Tuple{}, i1::Integer, I::Integer...) =
           i1 == 1 ?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; sum(1/n^2 for n=1:1000)
1.6439345666815615</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154933Z" creationid="hsugawa8651" creationdate="20181109T154933Z">
        <seg>julia&gt; sum(1/n^2 for n=1:1000)
1.6439345666815615</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; supertype(Float64)
AbstractFloat

julia&gt; supertype(Number)
Any

julia&gt; supertype(AbstractString)
Any

julia&gt; supertype(Any)
Any</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T022057Z" creationid="hsugawa8651" creationdate="20181116T022057Z">
        <seg>julia&gt; supertype(Float64)
AbstractFloat

julia&gt; supertype(Number)
Any

julia&gt; supertype(AbstractString)
Any

julia&gt; supertype(Any)
Any</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; supertype(Union{Float64,Int64})
ERROR: MethodError: no method matching supertype(::Type{Union{Float64, Int64}})
Closest candidates are:
  supertype(!Matched::DataType) at operators.jl:42
  supertype(!Matched::UnionAll) at operators.jl:47</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T022100Z" creationid="hsugawa8651" creationdate="20181116T022100Z">
        <seg>julia&gt; supertype(Union{Float64,Int64})
ERROR: MethodError: no method matching supertype(::Type{Union{Float64, Int64}})
Closest candidates are:
  supertype(!Matched::DataType) at operators.jl:42
  supertype(!Matched::UnionAll) at operators.jl:47</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; t = ccall((:clock, "libc"), Int32, ())
2292761

julia&gt; t
2292761

julia&gt; typeof(ans)
Int32</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T224025Z" creationid="hsugawa8651" creationdate="20181109T224025Z">
        <seg>julia&gt; t = ccall((:clock, "libc"), Int32, ())
2292761

julia&gt; t
2292761

julia&gt; typeof(ans)
Int32</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; t(x) = (println(x); true)
t (generic function with 1 method)

julia&gt; f(x) = (println(x); false)
f (generic function with 1 method)

julia&gt; t(1) &amp;&amp; t(2)
1
2
true

julia&gt; t(1) &amp;&amp; f(2)
1
2
false

julia&gt; f(1) &amp;&amp; t(2)
1
false

julia&gt; f(1) &amp;&amp; f(2)
1
false

julia&gt; t(1) || t(2)
1
true

julia&gt; t(1) || f(2)
1
true

julia&gt; f(1) || t(2)
1
2
true

julia&gt; f(1) || f(2)
1
2
false</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T230250Z" creationid="hsugawa8651" creationdate="20181109T230250Z">
        <seg>julia&gt; t(x) = (println(x); true)
t (generic function with 1 method)

julia&gt; f(x) = (println(x); false)
f (generic function with 1 method)

julia&gt; t(1) &amp;&amp; t(2)
1
2
true

julia&gt; t(1) &amp;&amp; f(2)
1
2
false

julia&gt; f(1) &amp;&amp; t(2)
1
false

julia&gt; f(1) &amp;&amp; f(2)
1
false

julia&gt; t(1) || t(2)
1
true

julia&gt; t(1) || f(2)
1
true

julia&gt; f(1) || t(2)
1
2
true

julia&gt; f(1) || f(2)
1
2
false</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; test(2,1)
ERROR: UndefVarError: relation not defined
Stacktrace:
 [1] test(::Int64, ::Int64) at ./none:7</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T124347Z" creationid="hsugawa8651" creationdate="20181118T124347Z">
        <seg>julia&gt; test(2,1)
ERROR: UndefVarError: relation not defined
Stacktrace:
 [1] test(::Int64, ::Int64) at ./none:7</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; test(x, y) = println(x &lt; y ?</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T230142Z" creationid="hsugawa8651" creationdate="20181109T230142Z">
        <seg>julia&gt; test(x, y) = println(x &lt; y ?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; throw(UndefVarError(:x))
ERROR: UndefVarError: x not defined</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T124651Z" creationid="hsugawa8651" creationdate="20181118T124651Z">
        <seg>julia&gt; throw(UndefVarError(:x))
ERROR: UndefVarError: x not defined</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; trace = backtrace()
18-element Array{Union{Ptr{Nothing}, Base.InterpreterIP},1}:
 Ptr{Nothing} @0x00007fd8734c6209
 Ptr{Nothing} @0x00007fd87362b342
 Ptr{Nothing} @0x00007fd87362c136
 Ptr{Nothing} @0x00007fd87362c986
 Ptr{Nothing} @0x00007fd87362d089
 Base.InterpreterIP(CodeInfo(:(begin
      Core.SSAValue(0) = backtrace()
      trace = Core.SSAValue(0)
      return Core.SSAValue(0)
  end)), 0x0000000000000000)
 Ptr{Nothing} @0x00007fd87362e4cf
[...]

julia&gt; stacktrace(trace)
6-element Array{Base.StackTraces.StackFrame,1}:
 top-level scope
 eval at boot.jl:317 [inlined]
 eval(::Module, ::Expr) at REPL.jl:5
 eval_user_input(::Any, ::REPL.REPLBackend) at REPL.jl:85
 macro expansion at REPL.jl:116 [inlined]
 (::getfield(REPL, Symbol("&lt;x1/&gt;28&lt;x2/&gt;29")){REPL.REPLBackend})() at event.jl:92</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T020434Z" creationid="hsugawa8651" creationdate="20181116T020434Z">
        <seg>julia&gt; trace = backtrace()
18-element Array{Union{Ptr{Nothing}, Base.InterpreterIP},1}:
 Ptr{Nothing} @0x00007fd8734c6209
 Ptr{Nothing} @0x00007fd87362b342
 Ptr{Nothing} @0x00007fd87362c136
 Ptr{Nothing} @0x00007fd87362c986
 Ptr{Nothing} @0x00007fd87362d089
 Base.InterpreterIP(CodeInfo(:(begin
      Core.SSAValue(0) = backtrace()
      trace = Core.SSAValue(0)
      return Core.SSAValue(0)
  end)), 0x0000000000000000)
 Ptr{Nothing} @0x00007fd87362e4cf
[...]

julia&gt; stacktrace(trace)
6-element Array{Base.StackTraces.StackFrame,1}:
 top-level scope
 eval at boot.jl:317 [inlined]
 eval(::Module, ::Expr) at REPL.jl:5
 eval_user_input(::Any, ::REPL.REPLBackend) at REPL.jl:85
 macro expansion at REPL.jl:116 [inlined]
 (::getfield(REPL, Symbol("&lt;x1/&gt;28&lt;x2/&gt;29")){REPL.REPLBackend})() at event.jl:92</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; true &amp;&amp; (x = (1, 2, 3))
(1, 2, 3)

julia&gt; false &amp;&amp; (x = (1, 2, 3))
false</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T230829Z" creationid="hsugawa8651" creationdate="20181109T230829Z">
        <seg>julia&gt; true &amp;&amp; (x = (1, 2, 3))
(1, 2, 3)

julia&gt; false &amp;&amp; (x = (1, 2, 3))
false</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; try
           error("(A) The root cause")
       catch
           try
               error("(B) An exception while handling the exception")
           catch
               for (exc, bt) in catch_stack()
                   showerror(stdout, exc, bt)
                   println()
               end
           end
       end
(A) The root cause
Stacktrace:
 [1] error(::String) at error.jl:33
 [2] top-level scope at REPL[7]:2
 [3] eval(::Module, ::Any) at boot.jl:319
 [4] eval_user_input(::Any, ::REPL.REPLBackend) at REPL.jl:85
 [5] macro expansion at REPL.jl:117 [inlined]
 [6] (::getfield(REPL, Symbol("&lt;x1/&gt;26&lt;x2/&gt;27")){REPL.REPLBackend})() at task.jl:259
(B) An exception while handling the exception
Stacktrace:
 [1] error(::String) at error.jl:33
 [2] top-level scope at REPL[7]:5
 [3] eval(::Module, ::Any) at boot.jl:319
 [4] eval_user_input(::Any, ::REPL.REPLBackend) at REPL.jl:85
 [5] macro expansion at REPL.jl:117 [inlined]
 [6] (::getfield(REPL, Symbol("&lt;x3/&gt;26&lt;x4/&gt;27")){REPL.REPLBackend})() at task.jl:259</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T020429Z" creationid="hsugawa8651" creationdate="20181116T020429Z">
        <seg>julia&gt; try
           error("(A) The root cause")
       catch
           try
               error("(B) An exception while handling the exception")
           catch
               for (exc, bt) in catch_stack()
                   showerror(stdout, exc, bt)
                   println()
               end
           end
       end
(A) The root cause
Stacktrace:
 [1] error(::String) at error.jl:33
 [2] top-level scope at REPL[7]:2
 [3] eval(::Module, ::Any) at boot.jl:319
 [4] eval_user_input(::Any, ::REPL.REPLBackend) at REPL.jl:85
 [5] macro expansion at REPL.jl:117 [inlined]
 [6] (::getfield(REPL, Symbol("&lt;x1/&gt;26&lt;x2/&gt;27")){REPL.REPLBackend})() at task.jl:259
(B) An exception while handling the exception
Stacktrace:
 [1] error(::String) at error.jl:33
 [2] top-level scope at REPL[7]:5
 [3] eval(::Module, ::Any) at boot.jl:319
 [4] eval_user_input(::Any, ::REPL.REPLBackend) at REPL.jl:85
 [5] macro expansion at REPL.jl:117 [inlined]
 [6] (::getfield(REPL, Symbol("&lt;x3/&gt;26&lt;x4/&gt;27")){REPL.REPLBackend})() at task.jl:259</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; typeof((1,"foo",2.5))
Tuple{Int64,String,Float64}</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T021921Z" creationid="hsugawa8651" creationdate="20181116T021921Z">
        <seg>julia&gt; typeof((1,"foo",2.5))
Tuple{Int64,String,Float64}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; typeof((a=1,b="hello"))
NamedTuple{(:a, :b),Tuple{Int64,String}}</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T021936Z" creationid="hsugawa8651" creationdate="20181116T021936Z">
        <seg>julia&gt; typeof((a=1,b="hello"))
NamedTuple{(:a, :b),Tuple{Int64,String}}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; typeof(:("a should equal b"))
String

julia&gt; typeof(:("a ($a) should equal b ($b)!"))
Expr

julia&gt; dump(:("a ($a) should equal b ($b)!"))
Expr
  head: Symbol string
  args: Array{Any}((5,))
    1: String "a ("
    2: Symbol a
    3: String ") should equal b ("
    4: Symbol b
    5: String ")!"</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T015451Z" creationid="hsugawa8651" creationdate="20181116T015451Z">
        <seg>julia&gt; typeof(:("a should equal b"))
String

julia&gt; typeof(:("a ($a) should equal b ($b)!"))
Expr

julia&gt; dump(:("a ($a) should equal b ($b)!"))
Expr
  head: Symbol string
  args: Array{Any}((5,))
    1: String "a ("
    2: Symbol a
    3: String ") should equal b ("
    4: Symbol b
    5: String ")!"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; typeof(DataType)
DataType

julia&gt; typeof(Union)
DataType</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T022054Z" creationid="hsugawa8651" creationdate="20181116T022054Z">
        <seg>julia&gt; typeof(DataType)
DataType

julia&gt; typeof(Union)
DataType</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; typeof(DomainError(nothing)) &lt;: Exception
true

julia&gt; typeof(DomainError) &lt;: Exception
false</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T124643Z" creationid="hsugawa8651" creationdate="20181118T124643Z">
        <seg>julia&gt; typeof(DomainError(nothing)) &lt;: Exception
true

julia&gt; typeof(DomainError) &lt;: Exception
false</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; typeof(Rational{Int})
DataType

julia&gt; typeof(Union{Real,String})
Union</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T022051Z" creationid="hsugawa8651" creationdate="20181116T022051Z">
        <seg>julia&gt; typeof(Rational{Int})
DataType

julia&gt; typeof(Union{Real,String})
Union</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; typeof(Real)
DataType

julia&gt; typeof(Int)
DataType</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T021720Z" creationid="hsugawa8651" creationdate="20181116T021720Z">
        <seg>julia&gt; typeof(Real)
DataType

julia&gt; typeof(Int)
DataType</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; typeof(ex)
Expr

julia&gt; ex
:((println)("I execute at runtime.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T015344Z" creationid="hsugawa8651" creationdate="20181116T015344Z">
        <seg>julia&gt; typeof(ex)
Expr

julia&gt; ex
:((println)("I execute at runtime.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; using Dates

julia&gt; Date(2000, 12, 12)
2000-12-12

julia&gt; Date(2000, 12)
2000-12-01

julia&gt; Date(2000)
2000-01-01</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181110T030125Z" creationid="hsugawa8651" creationdate="20181110T030125Z">
        <seg>julia&gt; using Dates

julia&gt; Date(2000, 12, 12)
2000-12-12

julia&gt; Date(2000, 12)
2000-12-01

julia&gt; Date(2000)
2000-01-01</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; v = [1,2,3]
3-element Array{Int64,1}:
 1
 2
 3

julia&gt; "v: $v"
"v: [1, 2, 3]"</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T020815Z" creationid="hsugawa8651" creationdate="20181116T020815Z">
        <seg>julia&gt; v = [1,2,3]
3-element Array{Int64,1}:
 1
 2
 3

julia&gt; "v: $v"
"v: [1, 2, 3]"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; v = randn(5)
5-element Array{Float64,1}:
  0.297288
  0.382396
 -0.597634
 -0.0104452
 -0.839027

julia&gt; p = sortperm(v)
5-element Array{Int64,1}:
 5
 3
 4
 1
 2

julia&gt; v[p]
5-element Array{Float64,1}:
 -0.839027
 -0.597634
 -0.0104452
  0.297288
  0.382396</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T044905Z" creationid="hsugawa8651" creationdate="20181112T044905Z">
        <seg>julia&gt; v = randn(5)
5-element Array{Float64,1}:
  0.297288
  0.382396
 -0.597634
 -0.0104452
 -0.839027

julia&gt; p = sortperm(v)
5-element Array{Int64,1}:
 5
 3
 4
 1
 2

julia&gt; v[p]
5-element Array{Float64,1}:
 -0.839027
 -0.597634
 -0.0104452
  0.297288
  0.382396</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; v(x) = (println(x); x)
v (generic function with 1 method)

julia&gt; 1 &lt; 2 ?</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T230204Z" creationid="hsugawa8651" creationdate="20181109T230204Z">
        <seg>julia&gt; v(x) = (println(x); x)
v (generic function with 1 method)

julia&gt; 1 &lt; 2 ?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; v(x) = (println(x); x)
v (generic function with 1 method)

julia&gt; v(1) &lt; v(2) &lt;= v(3)
2
1
3
true

julia&gt; v(1) &gt; v(2) &lt;= v(3)
2
1
false</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T030729Z" creationid="hsugawa8651" creationdate="20181114T030729Z">
        <seg>julia&gt; v(x) = (println(x); x)
v (generic function with 1 method)

julia&gt; v(1) &lt; v(2) &lt;= v(3)
2
1
3
true

julia&gt; v(1) &gt; v(2) &lt;= v(3)
2
1
false</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; vcat([1, 2], 3)
3-element Array{Int64,1}:
 1
 2
 3

julia&gt; hcat([1 2], 3)
1×3 Array{Int64,2}:
 1  2  3</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154606Z" creationid="hsugawa8651" creationdate="20181109T154606Z">
        <seg>julia&gt; vcat([1, 2], 3)
3-element Array{Int64,1}:
 1
 2
 3

julia&gt; hcat([1 2], 3)
1×3 Array{Int64,2}:
 1  2  3</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; x -&gt; x^2 + 2x - 1
(::&lt;x1/&gt;1) (generic function with 1 method)

julia&gt; function (x)
           x^2 + 2x - 1
       end
(::&lt;x2/&gt;3) (generic function with 1 method)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T130452Z" creationid="hsugawa8651" creationdate="20181120T130452Z">
        <seg>julia&gt; x -&gt; x^2 + 2x - 1
(::&lt;x1/&gt;1) (generic function with 1 method)

julia&gt; function (x)
           x^2 + 2x - 1
       end
(::&lt;x2/&gt;3) (generic function with 1 method)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; x -&gt; x^2 + 2x - 1
&lt;x1/&gt;1 (generic function with 1 method)

julia&gt; function (x)
           x^2 + 2x - 1
       end
&lt;x2/&gt;3 (generic function with 1 method)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181110T025957Z" creationid="hsugawa8651" creationdate="20181110T025957Z">
        <seg>julia&gt; x -&gt; x^2 + 2x - 1
&lt;x1/&gt;1 (generic function with 1 method)

julia&gt; function (x)
           x^2 + 2x - 1
       end
&lt;x2/&gt;3 (generic function with 1 method)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; x = (2, 3, 4)
(2, 3, 4)

julia&gt; bar(1,x...)
(1, 2, (3, 4))

julia&gt; x = (1, 2, 3, 4)
(1, 2, 3, 4)

julia&gt; bar(x...)
(1, 2, (3, 4))</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181110T030107Z" creationid="hsugawa8651" creationdate="20181110T030107Z">
        <seg>julia&gt; x = (2, 3, 4)
(2, 3, 4)

julia&gt; bar(1,x...)
(1, 2, (3, 4))

julia&gt; x = (1, 2, 3, 4)
(1, 2, 3, 4)

julia&gt; bar(x...)
(1, 2, (3, 4))</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; x = (3, 4)
(3, 4)

julia&gt; bar(1,2,x...)
(1, 2, (3, 4))</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181110T030104Z" creationid="hsugawa8651" creationdate="20181110T030104Z">
        <seg>julia&gt; x = (3, 4)
(3, 4)

julia&gt; bar(1,2,x...)
(1, 2, (3, 4))</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; x = (a=1, b=1+1)
(a = 1, b = 2)

julia&gt; x.a
1</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181110T030023Z" creationid="hsugawa8651" creationdate="20181110T030023Z">
        <seg>julia&gt; x = (a=1, b=1+1)
(a = 1, b = 2)

julia&gt; x.a
1</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; x = 0;

julia&gt; for i = 1:10
           local x &lt;x1/&gt; this is also the default
           x = i + 1
       end

julia&gt; x
0</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T022304Z" creationid="hsugawa8651" creationdate="20181116T022304Z">
        <seg>julia&gt; x = 0;

julia&gt; for i = 1:10
           local x &lt;x1/&gt; this is also the default
           x = i + 1
       end

julia&gt; x
0</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; x = 1
1

julia&gt; x += 3
4

julia&gt; x
4</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T132355Z" creationid="hsugawa8651" creationdate="20181113T132355Z">
        <seg>julia&gt; x = 1
1

julia&gt; x += 3
4

julia&gt; x
4</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; x = 1.0
1.0

julia&gt; y = -3
-3

julia&gt; Z = "My string"
"My string"

julia&gt; customary_phrase = "Hello world!"
"Hello world!"

julia&gt; UniversalDeclarationOfHumanRightsStart = "人人生而自由，在尊严和权利上一律平等。"
"人人生而自由，在尊严和权利上一律平等。"</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T022502Z" creationid="hsugawa8651" creationdate="20181116T022502Z">
        <seg>julia&gt; x = 1.0
1.0

julia&gt; y = -3
-3

julia&gt; Z = "My string"
"My string"

julia&gt; customary_phrase = "Hello world!"
"Hello world!"

julia&gt; UniversalDeclarationOfHumanRightsStart = "人人生而自由，在尊严和权利上一律平等。"
"人人生而自由，在尊严和权利上一律平等。"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; x = 1.1; y = 0.1;

julia&gt; x + y
1.2000000000000002

julia&gt; setrounding(Float64,RoundDown) do
           x + y
       end
1.2</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T235653Z" creationid="hsugawa8651" creationdate="20181119T235653Z">
        <seg>julia&gt; x = 1.1; y = 0.1;

julia&gt; x + y
1.2000000000000002

julia&gt; setrounding(Float64,RoundDown) do
           x + y
       end
1.2</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; x = 1.25f0
1.25f0

julia&gt; nextfloat(x)
1.2500001f0

julia&gt; prevfloat(x)
1.2499999f0

julia&gt; bits(prevfloat(x))
"00111111100111111111111111111111"

julia&gt; bits(x)
"00111111101000000000000000000000"

julia&gt; bits(nextfloat(x))
"00111111101000000000000000000001"</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T235620Z" creationid="hsugawa8651" creationdate="20181119T235620Z">
        <seg>julia&gt; x = 1.25f0
1.25f0

julia&gt; nextfloat(x)
1.2500001f0

julia&gt; prevfloat(x)
1.2499999f0

julia&gt; bits(prevfloat(x))
"00111111100111111111111111111111"

julia&gt; bits(x)
"00111111101000000000000000000000"

julia&gt; bits(nextfloat(x))
"00111111101000000000000000000001"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; x = 1.25f0
1.25f0

julia&gt; nextfloat(x)
1.2500001f0

julia&gt; prevfloat(x)
1.2499999f0

julia&gt; bitstring(prevfloat(x))
"00111111100111111111111111111111"

julia&gt; bitstring(x)
"00111111101000000000000000000000"

julia&gt; bitstring(nextfloat(x))
"00111111101000000000000000000001"</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T111321Z" creationid="hsugawa8651" creationdate="20181112T111321Z">
        <seg>julia&gt; x = 1.25f0
1.25f0

julia&gt; nextfloat(x)
1.2500001f0

julia&gt; prevfloat(x)
1.2499999f0

julia&gt; bitstring(prevfloat(x))
"00111111100111111111111111111111"

julia&gt; bitstring(x)
"00111111101000000000000000000000"

julia&gt; bitstring(nextfloat(x))
"00111111101000000000000000000001"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; x = 10
10

julia&gt; function change_value!(y)
           y = 17
       end
change_value!</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181110T025000Z" creationid="hsugawa8651" creationdate="20181110T025000Z">
        <seg>julia&gt; x = 10
10

julia&gt; function change_value!(y)
           y = 17
       end
change_value!</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; x = 10
10

julia&gt; r"$x"
r"$x"

julia&gt; "$x"
"10"

julia&gt; r"\x"
r"\x"

julia&gt; "\x"
ERROR: syntax: invalid escape sequence</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T021038Z" creationid="hsugawa8651" creationdate="20181116T021038Z">
        <seg>julia&gt; x = 10
10

julia&gt; r"$x"
r"$x"

julia&gt; "$x"
"10"

julia&gt; r"\x"
r"\x"

julia&gt; "\x"
ERROR: syntax: invalid escape sequence</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; x = 1;

julia&gt; function foobar()
           global x = 2
       end;

julia&gt; foobar();

julia&gt; x
2</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T022318Z" creationid="hsugawa8651" creationdate="20181116T022318Z">
        <seg>julia&gt; x = 1;

julia&gt; function foobar()
           global x = 2
       end;

julia&gt; foobar();

julia&gt; x
2</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; x = 1; y = 2;

julia&gt; println(x &lt; y ?</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T230124Z" creationid="hsugawa8651" creationdate="20181109T230124Z">
        <seg>julia&gt; x = 1; y = 2;

julia&gt; println(x &lt; y ?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; x = 3
3

julia&gt; 2x^2 - 3x + 1
10

julia&gt; 1.5x^2 - .5x + 1
13.0</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T111734Z" creationid="hsugawa8651" creationdate="20181112T111734Z">
        <seg>julia&gt; x = 3
3

julia&gt; 2x^2 - 3x + 1
10

julia&gt; 1.5x^2 - .5x + 1
13.0</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; x = 3
3

julia&gt; if x &gt; 0
           "positive!"
       else
           "negative..."
       end
"positive!"</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T230026Z" creationid="hsugawa8651" creationdate="20181109T230026Z">
        <seg>julia&gt; x = 3
3

julia&gt; if x &gt; 0
           "positive!"
       else
           "negative..."
       end
"positive!"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; x = :(1 + 2);

julia&gt; e = quote quote $x end end
quote
    &lt;x1/&gt;= none:1 =&lt;x2/&gt;
    $(Expr(:quote, quote
    &lt;x3/&gt;= none:1 =&lt;x4/&gt;
    $(Expr(:$, :x))
end))
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T015204Z" creationid="hsugawa8651" creationdate="20181116T015204Z">
        <seg>julia&gt; x = :(1 + 2);

julia&gt; e = quote quote $x end end
quote
    &lt;x1/&gt;= none:1 =&lt;x2/&gt;
    $(Expr(:quote, quote
    &lt;x3/&gt;= none:1 =&lt;x4/&gt;
    $(Expr(:$, :x))
end))
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; x = MyNumber(π)
MyNumber(3.141592653589793)

julia&gt; sin(x)
MyNumber(1.2246467991473532e-16)

julia&gt; cos(x)
MyNumber(-1.0)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T015544Z" creationid="hsugawa8651" creationdate="20181116T015544Z">
        <seg>julia&gt; x = MyNumber(π)
MyNumber(3.141592653589793)

julia&gt; sin(x)
MyNumber(1.2246467991473532e-16)

julia&gt; cos(x)
MyNumber(-1.0)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; x = SelfReferential();

julia&gt; x === x
true

julia&gt; x === x.obj
true

julia&gt; x === x.obj.obj
true</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T155909Z" creationid="hsugawa8651" creationdate="20181117T155909Z">
        <seg>julia&gt; x = SelfReferential();

julia&gt; x === x
true

julia&gt; x === x.obj
true

julia&gt; x === x.obj.obj
true</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; x = [1,2,3]
3-element Array{Int64,1}:
 1
 2
 3

julia&gt; function change_array!(A)
           A[1] = 5
       end
change_array!</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181110T025049Z" creationid="hsugawa8651" creationdate="20181110T025049Z">
        <seg>julia&gt; x = [1,2,3]
3-element Array{Int64,1}:
 1
 2
 3

julia&gt; function change_array!(A)
           A[1] = 5
       end
change_array!</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; x = [3,4]
2-element Array{Int64,1}:
 3
 4

julia&gt; bar(1,2,x...)
(1, 2, (3, 4))

julia&gt; x = [1,2,3,4]
4-element Array{Int64,1}:
 1
 2
 3
 4

julia&gt; bar(x...)
(1, 2, (3, 4))</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181110T030112Z" creationid="hsugawa8651" creationdate="20181110T030112Z">
        <seg>julia&gt; x = [3,4]
2-element Array{Int64,1}:
 3
 4

julia&gt; bar(1,2,x...)
(1, 2, (3, 4))

julia&gt; x = [1,2,3,4]
4-element Array{Int64,1}:
 1
 2
 3
 4

julia&gt; bar(x...)
(1, 2, (3, 4))</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; x = b"123"
3-element Base.CodeUnits{UInt8,String}:
 0x31
 0x32
 0x33

julia&gt; x[1]
0x31

julia&gt; x[1] = 0x32
ERROR: setindex!</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T021056Z" creationid="hsugawa8651" creationdate="20181116T021056Z">
        <seg>julia&gt; x = b"123"
3-element Base.CodeUnits{UInt8,String}:
 0x31
 0x32
 0x33

julia&gt; x[1]
0x31

julia&gt; x[1] = 0x32
ERROR: setindex!</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; x = collect(reshape(1:9, 3, 3))
3×3 Array{Int64,2}:
 1  4  7
 2  5  8
 3  6  9

julia&gt; x[3, 3] = -9;

julia&gt; x[1:2, 1:2] = [-1 -4; -2 -5];

julia&gt; x
3×3 Array{Int64,2}:
 -1  -4   7
 -2  -5   8
  3   6  -9</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T155453Z" creationid="hsugawa8651" creationdate="20181109T155453Z">
        <seg>julia&gt; x = collect(reshape(1:9, 3, 3))
3×3 Array{Int64,2}:
 1  4  7
 2  5  8
 3  6  9

julia&gt; x[3, 3] = -9;

julia&gt; x[1:2, 1:2] = [-1 -4; -2 -5];

julia&gt; x
3×3 Array{Int64,2}:
 -1  -4   7
 -2  -5   8
  3   6  -9</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; x = foo(2); &lt;x1/&gt; note: output is from println() statement in the body
Int64

julia&gt; x           &lt;x2/&gt; now we print x
4

julia&gt; y = foo("bar");
String

julia&gt; y
"barbar"</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T015701Z" creationid="hsugawa8651" creationdate="20181116T015701Z">
        <seg>julia&gt; x = foo(2); &lt;x1/&gt; note: output is from println() statement in the body
Int64

julia&gt; x           &lt;x2/&gt; now we print x
4

julia&gt; y = foo("bar");
String

julia&gt; y
"barbar"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; x = rand(8)
8-element Array{Float64,1}:
 0.843025
 0.869052
 0.365105
 0.699456
 0.977653
 0.994953
 0.41084
 0.809411

julia&gt; [ 0.25*x[i-1] + 0.5*x[i] + 0.25*x[i+1] for i=2:length(x)-1 ]
6-element Array{Float64,1}:
 0.736559
 0.57468
 0.685417
 0.912429
 0.8446
 0.656511</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154823Z" creationid="hsugawa8651" creationdate="20181109T154823Z">
        <seg>julia&gt; x = rand(8)
8-element Array{Float64,1}:
 0.843025
 0.869052
 0.365105
 0.699456
 0.977653
 0.994953
 0.41084
 0.809411

julia&gt; [ 0.25*x[i-1] + 0.5*x[i] + 0.25*x[i+1] for i=2:length(x)-1 ]
6-element Array{Float64,1}:
 0.736559
 0.57468
 0.685417
 0.912429
 0.8446
 0.656511</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; x = reshape(1:16, 4, 4)
4×4 reshape(::UnitRange{Int64}, 4, 4) with eltype Int64:
 1  5   9  13
 2  6  10  14
 3  7  11  15
 4  8  12  16

julia&gt; x[2:3, 2:end-1]
2×2 Array{Int64,2}:
 6  10
 7  11

julia&gt; x[1, [2 3; 4 1]]
2×2 Array{Int64,2}:
  5  9
 13  1</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T155304Z" creationid="hsugawa8651" creationdate="20181109T155304Z">
        <seg>julia&gt; x = reshape(1:16, 4, 4)
4×4 reshape(::UnitRange{Int64}, 4, 4) with eltype Int64:
 1  5   9  13
 2  6  10  14
 3  7  11  15
 4  8  12  16

julia&gt; x[2:3, 2:end-1]
2×2 Array{Int64,2}:
 6  10
 7  11

julia&gt; x[1, [2 3; 4 1]]
2×2 Array{Int64,2}:
  5  9
 13  1</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; x = reshape(1:16, 4, 4)
4×4 reshape(::UnitRange{Int64}, 4, 4) with eltype Int64:
 1  5   9  13
 2  6  10  14
 3  7  11  15
 4  8  12  16

julia&gt; x[[false, true, true, false], :]
2×4 Array{Int64,2}:
 2  6  10  14
 3  7  11  15

julia&gt; mask = map(ispow2, x)
4×4 Array{Bool,2}:
  true  false  false  false
  true  false  false  false
 false  false  false  false
  true   true  false   true

julia&gt; x[mask]
5-element Array{Int64,1}:
  1
  2
  4
  8
 16</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T155818Z" creationid="hsugawa8651" creationdate="20181109T155818Z">
        <seg>julia&gt; x = reshape(1:16, 4, 4)
4×4 reshape(::UnitRange{Int64}, 4, 4) with eltype Int64:
 1  5   9  13
 2  6  10  14
 3  7  11  15
 4  8  12  16

julia&gt; x[[false, true, true, false], :]
2×4 Array{Int64,2}:
 2  6  10  14
 3  7  11  15

julia&gt; mask = map(ispow2, x)
4×4 Array{Bool,2}:
  true  false  false  false
  true  false  false  false
 false  false  false  false
  true   true  false   true

julia&gt; x[mask]
5-element Array{Int64,1}:
  1
  2
  4
  8
 16</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; x = typemax(Int64)
9223372036854775807

julia&gt; x + 1
-9223372036854775808

julia&gt; x + 1 == typemin(Int64)
true</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T225616Z" creationid="hsugawa8651" creationdate="20181109T225616Z">
        <seg>julia&gt; x = typemax(Int64)
9223372036854775807

julia&gt; x + 1
-9223372036854775808

julia&gt; x + 1 == typemin(Int64)
true</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; x = typemin(Int64)
-9223372036854775808

julia&gt; x = x - 1
9223372036854775807

julia&gt; typeof(x)
Int64

julia&gt; y = BigInt(typemin(Int64))
-9223372036854775808

julia&gt; y = y - 1
-9223372036854775809

julia&gt; typeof(y)
BigInt</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T111557Z" creationid="hsugawa8651" creationdate="20181112T111557Z">
        <seg>julia&gt; x = typemin(Int64)
-9223372036854775808

julia&gt; x = x - 1
9223372036854775807

julia&gt; typeof(x)
Int64

julia&gt; y = BigInt(typemin(Int64))
-9223372036854775808

julia&gt; y = y - 1
-9223372036854775809

julia&gt; typeof(y)
BigInt</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; x, y = 1, 2;

julia&gt; function bar()
           x = 10 &lt;x1/&gt; local, no longer a closure variable
           return x + y
       end;

julia&gt; function quz()
           x = 2 &lt;x2/&gt; local
           return bar() + x &lt;x3/&gt; 12 + 2 (x is not modified)
       end;

julia&gt; quz()
14

julia&gt; x, y &lt;x4/&gt; verify that global x and y are unchanged
(1, 2)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T022328Z" creationid="hsugawa8651" creationdate="20181116T022328Z">
        <seg>julia&gt; x, y = 1, 2;

julia&gt; function bar()
           x = 10 &lt;x1/&gt; local, no longer a closure variable
           return x + y
       end;

julia&gt; function quz()
           x = 2 &lt;x2/&gt; local
           return bar() + x &lt;x3/&gt; 12 + 2 (x is not modified)
       end;

julia&gt; quz()
14

julia&gt; x, y &lt;x4/&gt; verify that global x and y are unchanged
(1, 2)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; x, y = 1, 2;

julia&gt; function baz()
           x = 2 &lt;x1/&gt; introduces a new local
           function bar()
               x = 10       &lt;x2/&gt; modifies the parent's x
               return x + y &lt;x3/&gt; y is global
           end
           return bar() + x &lt;x4/&gt; 12 + 10 (x is modified in call of bar())
       end;

julia&gt; baz()
22

julia&gt; x, y &lt;x5/&gt; verify that global x and y are unchanged
(1, 2)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T022320Z" creationid="hsugawa8651" creationdate="20181116T022320Z">
        <seg>julia&gt; x, y = 1, 2;

julia&gt; function baz()
           x = 2 &lt;x1/&gt; introduces a new local
           function bar()
               x = 10       &lt;x2/&gt; modifies the parent's x
               return x + y &lt;x3/&gt; y is global
           end
           return bar() + x &lt;x4/&gt; 12 + 10 (x is modified in call of bar())
       end;

julia&gt; baz()
22

julia&gt; x, y &lt;x5/&gt; verify that global x and y are unchanged
(1, 2)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; x, y = 1, 2;

julia&gt; function foo()
           x = 2        &lt;x1/&gt; assignment introduces a new local
           return x + y &lt;x2/&gt; y refers to the global
       end;

julia&gt; foo()
4

julia&gt; x
1</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T022314Z" creationid="hsugawa8651" creationdate="20181116T022314Z">
        <seg>julia&gt; x, y = 1, 2;

julia&gt; function foo()
           x = 2        &lt;x1/&gt; assignment introduces a new local
           return x + y &lt;x2/&gt; y refers to the global
       end;

julia&gt; foo()
4

julia&gt; x
1</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; x, y = foo(2,3)
(5, 6)

julia&gt; x
5

julia&gt; y
6</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181110T030035Z" creationid="hsugawa8651" creationdate="20181110T030035Z">
        <seg>julia&gt; x, y = foo(2,3)
(5, 6)

julia&gt; x
5

julia&gt; y
6</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; x, y, z = -1, -1, -1;

julia&gt; let x = 1, z
           println("x: $x, y: $y") &lt;x1/&gt; x is local variable, y the global
           println("z: $z") &lt;x2/&gt; errors as z has not been assigned yet but is local
       end
x: 1, y: -1
ERROR: UndefVarError: z not defined</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T022342Z" creationid="hsugawa8651" creationdate="20181116T022342Z">
        <seg>julia&gt; x, y, z = -1, -1, -1;

julia&gt; let x = 1, z
           println("x: $x, y: $y") &lt;x1/&gt; x is local variable, y the global
           println("z: $z") &lt;x2/&gt; errors as z has not been assigned yet but is local
       end
x: 1, y: -1
ERROR: UndefVarError: z not defined</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; z = (1 + 2im) ⊘ (1 - 2im);

julia&gt; typeof(z)
Complex{OurRational{Int64}}

julia&gt; typeof(z) &lt;: Complex{OurRational}
false</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T124215Z" creationid="hsugawa8651" creationdate="20181118T124215Z">
        <seg>julia&gt; z = (1 + 2im) ⊘ (1 - 2im);

julia&gt; typeof(z)
Complex{OurRational{Int64}}

julia&gt; typeof(z) &lt;: Complex{OurRational}
false</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; z = (x = 1; y = 2; x + y)
3</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T225811Z" creationid="hsugawa8651" creationdate="20181109T225811Z">
        <seg>julia&gt; z = (x = 1; y = 2; x + y)
3</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; z = 1 + 2im
1 + 2im

julia&gt; real(1 + 2im) &lt;x1/&gt; real part of z
1

julia&gt; imag(1 + 2im) &lt;x2/&gt; imaginary part of z
2

julia&gt; conj(1 + 2im) &lt;x3/&gt; complex conjugate of z
1 - 2im

julia&gt; abs(1 + 2im) &lt;x4/&gt; absolute value of z
2.23606797749979

julia&gt; abs2(1 + 2im) &lt;x5/&gt; squared absolute value
5

julia&gt; angle(1 + 2im) &lt;x6/&gt; phase angle in radians
1.1071487177940904</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T123144Z" creationid="hsugawa8651" creationdate="20181118T123144Z">
        <seg>julia&gt; z = 1 + 2im
1 + 2im

julia&gt; real(1 + 2im) &lt;x1/&gt; real part of z
1

julia&gt; imag(1 + 2im) &lt;x2/&gt; imaginary part of z
2

julia&gt; conj(1 + 2im) &lt;x3/&gt; complex conjugate of z
1 - 2im

julia&gt; abs(1 + 2im) &lt;x4/&gt; absolute value of z
2.23606797749979

julia&gt; abs2(1 + 2im) &lt;x5/&gt; squared absolute value
5

julia&gt; angle(1 + 2im) &lt;x6/&gt; phase angle in radians
1.1071487177940904</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; z = begin
           x = 1
           y = 2
           x + y
       end
3</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T225805Z" creationid="hsugawa8651" creationdate="20181109T225805Z">
        <seg>julia&gt; z = begin
           x = 1
           y = 2
           x + y
       end
3</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; z.data
ERROR: UndefRefError: access to undefined reference</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T123747Z" creationid="hsugawa8651" creationdate="20181118T123747Z">
        <seg>julia&gt; z.data
ERROR: UndefRefError: access to undefined reference</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; zero(Float32)
0.0f0

julia&gt; zero(1.0)
0.0

julia&gt; one(Int32)
1

julia&gt; one(BigFloat)
1.0</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T112028Z" creationid="hsugawa8651" creationdate="20181112T112028Z">
        <seg>julia&gt; zero(Float32)
0.0f0

julia&gt; zero(1.0)
0.0

julia&gt; one(Int32)
1

julia&gt; one(BigFloat)
1.0</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; zero(Float32)
0.0f0

julia&gt; zero(1.0)
0.0

julia&gt; one(Int32)
1

julia&gt; one(BigFloat)
1.000000000000000000000000000000000000000000000000000000000000000000000000000000</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T000912Z" creationid="hsugawa8651" creationdate="20181120T000912Z">
        <seg>julia&gt; zero(Float32)
0.0f0

julia&gt; zero(1.0)
0.0

julia&gt; one(Int32)
1

julia&gt; one(BigFloat)
1.000000000000000000000000000000000000000000000000000000000000000000000000000000</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; zeros(Int8, 2, 3)
2×3 Array{Int8,2}:
 0  0  0
 0  0  0

julia&gt; zeros(Int8, (2, 3))
2×3 Array{Int8,2}:
 0  0  0
 0  0  0

julia&gt; zeros((2, 3))
2×3 Array{Float64,2}:
 0.0  0.0  0.0
 0.0  0.0  0.0</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154527Z" creationid="hsugawa8651" creationdate="20181109T154527Z">
        <seg>julia&gt; zeros(Int8, 2, 3)
2×3 Array{Int8,2}:
 0  0  0
 0  0  0

julia&gt; zeros(Int8, (2, 3))
2×3 Array{Int8,2}:
 0  0  0
 0  0  0

julia&gt; zeros((2, 3))
2×3 Array{Float64,2}:
 0.0  0.0  0.0
 0.0  0.0  0.0</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; δ = 0.00001
1.0e-5

julia&gt; 안녕하세요 = "Hello"
"Hello"</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T022509Z" creationid="hsugawa8651" creationdate="20181116T022509Z">
        <seg>julia&gt; δ = 0.00001
1.0e-5

julia&gt; 안녕하세요 = "Hello"
"Hello"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; ∑(x,y) = x + y
∑ (generic function with 1 method)

julia&gt; ∑(2, 3)
5</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181110T025648Z" creationid="hsugawa8651" creationdate="20181110T025648Z">
        <seg>julia&gt; ∑(x,y) = x + y
∑ (generic function with 1 method)

julia&gt; ∑(2, 3)
5</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>lastindex(X)&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T113016Z" creationid="hsugawa8651" creationdate="20181112T113016Z">
        <seg>lastindex(X)&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>least positive common multiple of &lt;x1/&gt;x&lt;x2/&gt;, &lt;x3/&gt;y&lt;x4/&gt;,...</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T072830Z" creationid="hsugawa8651" creationdate="20181118T095903Z">
        <seg>&lt;x1/&gt;x&lt;x2/&gt; 、&lt;x3/&gt;y&lt;x4/&gt; 、...の正の最小公倍数</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>length(A)&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T022406Z" creationid="hsugawa8651" creationdate="20181113T022406Z">
        <seg>length(A)&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>length(iter)&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T112217Z" creationid="hsugawa8651" creationdate="20181112T112217Z">
        <seg>length(iter)&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>length(iter)&lt;x1/&gt;  and &lt;x2/&gt;size(iter, [dim])&lt;x3/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T112314Z" creationid="hsugawa8651" creationdate="20181112T112314Z">
        <seg>length(iter)&lt;x1/&gt;  and &lt;x2/&gt;size(iter, [dim])&lt;x3/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>less than</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T095434Z" creationid="hsugawa8651" creationdate="20181118T095434Z">
        <seg>より小さい</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>less than or equal to</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T095449Z" creationid="hsugawa8651" creationdate="20181114T030412Z">
        <seg>以下</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>lib = Libdl.dlopen("./my_lib.so") &lt;x1/&gt; Open the library explicitly.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T152359Z" creationid="hsugawa8651" creationdate="20181117T152359Z">
        <seg>lib = Libdl.dlopen("./my_lib.so") &lt;x1/&gt; Open the library explicitly.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>local x::Int8  &lt;x1/&gt; in a local declaration
x::Int8 = 10   &lt;x2/&gt; as the left-hand side of an assignment</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T021537Z" creationid="hsugawa8651" creationdate="20181116T021537Z">
        <seg>local x::Int8  &lt;x1/&gt; in a local declaration
x::Int8 = 10   &lt;x2/&gt; as the left-hand side of an assignment</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>logical shift&lt;x1/&gt; right</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T063714Z" creationid="hsugawa8651" creationdate="20181113T132309Z">
        <seg>論理右桁送り</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>logical/arithmetic shift left</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T063747Z" creationid="hsugawa8651" creationdate="20181113T132323Z">
        <seg>論理/算術左桁送り</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>m = match(r"^\s*(?:&lt;x1/&gt;|$)", line)
if m === nothing
    println("not a comment")
else
    println("blank or comment")
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T020942Z" creationid="hsugawa8651" creationdate="20181116T020942Z">
        <seg>m = match(r"^\s*(?:&lt;x1/&gt;|$)", line)
if m === nothing
    println("not a comment")
else
    println("blank or comment")
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>m&lt;x1/&gt;-by-&lt;x2/&gt;n&lt;x3/&gt; identity matrix</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154456Z" creationid="hsugawa8651" creationdate="20181109T154456Z">
        <seg>m&lt;x1/&gt;-by-&lt;x2/&gt;n&lt;x3/&gt;識別マトリクス</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>macro cmd(str)
    :(cmd_gen($(shell_parse(str)[1])))
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T015646Z" creationid="hsugawa8651" creationdate="20181116T015646Z">
        <seg>macro cmd(str)
    :(cmd_gen($(shell_parse(str)[1])))
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>macro dlsym(func, lib)
    z = Ref{Ptr{Cvoid}}(C_NULL)
    quote
        let zlocal = $z[]
            if zlocal == C_NULL
                zlocal = dlsym($(esc(lib))::Ptr{Cvoid}, $(esc(func)))::Ptr{Cvoid}
                $z[] = $zlocal
            end
            zlocal
        end
    end
end

mylibvar = Libdl.dlopen("mylib")
ccall(@dlsym("myfunc", mylibvar), Cvoid, ())</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T152331Z" creationid="hsugawa8651" creationdate="20181117T152331Z">
        <seg>macro dlsym(func, lib)
    z = Ref{Ptr{Cvoid}}(C_NULL)
    quote
        let zlocal = $z[]
            if zlocal == C_NULL
                zlocal = dlsym($(esc(lib))::Ptr{Cvoid}, $(esc(func)))::Ptr{Cvoid}
                $z[] = $zlocal
            end
            zlocal
        end
    end
end

mylibvar = Libdl.dlopen("mylib")
ccall(@dlsym("myfunc", mylibvar), Cvoid, ())</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>macro r_str(p)
    Regex(p)
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T015622Z" creationid="hsugawa8651" creationdate="20181116T015622Z">
        <seg>macro r_str(p)
    Regex(p)
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>macro time(ex)
    ...
    local val = $(esc(ex))
    ...
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T015518Z" creationid="hsugawa8651" creationdate="20181116T015518Z">
        <seg>macro time(ex)
    ...
    local val = $(esc(ex))
    ...
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>macro time(ex)
    return quote
        local t0 = time()
        local val = $ex
        local t1 = time()
        println("elapsed time: ", t1-t0, " seconds")
        val
    end
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T015500Z" creationid="hsugawa8651" creationdate="20181116T015500Z">
        <seg>macro time(ex)
    return quote
        local t0 = time()
        local val = $ex
        local t1 = time()
        println("elapsed time: ", t1-t0, " seconds")
        val
    end
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>macro time(expr)
    return :(timeit(() -&gt; $(esc(expr))))
end
function timeit(f)
    t0 = time()
    val = f()
    t1 = time()
    println("elapsed time: ", t1-t0, " seconds")
    return val
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T015527Z" creationid="hsugawa8651" creationdate="20181116T015527Z">
        <seg>macro time(expr)
    return :(timeit(() -&gt; $(esc(expr))))
end
function timeit(f)
    t0 = time()
    val = f()
    t1 = time()
    println("elapsed time: ", t1-t0, " seconds")
    return val
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>mantissa) of a floating-point number &lt;x1/&gt;x&lt;x2/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T074255Z" creationid="hsugawa8651" creationdate="20181118T100102Z">
        <seg>浮動小数点数 &lt;x1/&gt;x&lt;x2/&gt; に対する 2進仮数 (significand すなわち mantissa)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>map(OneTo, size(A))&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T022516Z" creationid="hsugawa8651" creationdate="20181113T022516Z">
        <seg>map(OneTo, size(A))&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>map([A, B, C]) do x
    if x &lt; 0 &amp;&amp; iseven(x)
        return 0
    elseif x == 0
        return 1
    else
        return x
    end
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181110T030213Z" creationid="hsugawa8651" creationdate="20181110T030213Z">
        <seg>map([A, B, C]) do x
    if x &lt; 0 &amp;&amp; iseven(x)
        return 0
    elseif x == 0
        return 1
    else
        return x
    end
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>map(x-&gt;begin
           if x &lt; 0 &amp;&amp; iseven(x)
               return 0
           elseif x == 0
               return 1
           else
               return x
           end
       end,
    [A, B, C])</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181110T030210Z" creationid="hsugawa8651" creationdate="20181110T030210Z">
        <seg>map(x-&gt;begin
           if x &lt; 0 &amp;&amp; iseven(x)
               return 0
           elseif x == 0
               return 1
           else
               return x
           end
       end,
    [A, B, C])</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>maps values to their additive inverses</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T063119Z" creationid="hsugawa8651" creationdate="20181113T131958Z">
        <seg>値を加法の逆元と関連付ける</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>meaning</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T150217Z" creationid="hsugawa8651" creationdate="20181117T150217Z">
        <seg>意味</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>min.(x,y)&lt;x1/&gt;, for elementwise operations over arrays or mixtures of arrays and
scalars (a &lt;x2/&gt;Broadcasting&lt;x3/&gt; operation); these have the additional advantage of
"fusing" into a single loop when combined with other dot calls, e.g. &lt;x4/&gt;sin.(cos.(x))&lt;x5/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T161224Z" creationid="hsugawa8651" creationdate="20181114T161224Z">
        <seg>(x,y)&lt;x1/&gt;配列またはアレイの混合物を構成する要素演算に対して&lt;x x1/&gt; スカラー(&lt;x2/&gt;ブロードキャスト&lt;x3/&gt;オペレーション);これらは追加の利点を有する。 他のドット呼び出し(例えば&lt;x4/&gt;sin.(cos.(x))&lt;x5/&gt;)と組み合わされた場合、単一ループへの「融合」。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>mod()&lt;x1/&gt; with offset 1; returns &lt;x2/&gt;r∈(0,y]&lt;x3/&gt; for &lt;x4/&gt;y&gt;0&lt;x5/&gt; or &lt;x6/&gt;r∈[y,0)&lt;x7/&gt; for &lt;x8/&gt;y&lt;0&lt;x9/&gt;, where &lt;x10/&gt;mod(r, y) == mod(x, y)&lt;x11/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T072505Z" creationid="hsugawa8651" creationdate="20181120T072505Z">
        <seg>オフセットが1の mod()&lt;x1/&gt;  ； &lt;x10/&gt;mod(r, y) == mod(x, y)&lt;x11/&gt;の場合、 &lt;x4/&gt;y&gt;0&lt;x5/&gt;  なら &lt;x2/&gt;r∈(0,y]&lt;x3/&gt; を、&lt;x8/&gt;y&lt;0&lt;x9/&gt;ならに &lt;x6/&gt;r∈[y,0)&lt;x7/&gt; を返す</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>mod&lt;x1/&gt; with offset 1; returns &lt;x2/&gt;r∈(0,y]&lt;x3/&gt; for &lt;x4/&gt;y&gt;0&lt;x5/&gt; or &lt;x6/&gt;r∈[y,0)&lt;x7/&gt; for &lt;x8/&gt;y&lt;0&lt;x9/&gt;, where &lt;x10/&gt;mod(r, y) == mod(x, y)&lt;x11/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T095846Z" creationid="hsugawa8651" creationdate="20181118T095846Z">
        <seg>&lt;x1/&gt;&lt;x0&gt;&lt;x0/&gt;&lt;x8/&gt;&lt;x9/&gt;&lt;x8/&gt;&lt;x9/&gt;&lt;x9/&gt;&lt;x9/&gt;&lt;x9/&gt;(r, y)==mod(x, y)&lt;x11/&gt;&lt;x9/&gt;0 0</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>module
export
import
using
baremodule
function
macro
return
do
begin
end
let
if
for
while
break
continue
try
finally
quote
local
global
const
struct
mutable struct
abstract type
primitive type
where
...
;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181110T041812Z" creationid="hsugawa8651" creationdate="20181110T041812Z">
        <seg>module
export
import
using
baremodule
function
macro
return
do
begin
end
let
if
for
while
break
continue
try
finally
quote
local
global
const
struct
mutable struct
abstract type
primitive type
where
...
;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>module A
import Base.*
*(x::Symbol, y::Symbol) = Symbol(x,y)
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T021350Z" creationid="hsugawa8651" creationdate="20181116T021350Z">
        <seg>module A
import Base.*
*(x::Symbol, y::Symbol) = Symbol(x,y)
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>module Bar
export bar
using Foo
function bar(...)
    &lt;x1/&gt; ... refer to Foo.baz as simply baz ....</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181110T025158Z" creationid="hsugawa8651" creationdate="20181110T025158Z">
        <seg>module Bar
export bar
using Foo
function bar(...)
    &lt;x1/&gt; ... refer to Foo.baz as simply baz ....</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>module MyModule
import Base.@time

time() = ... &lt;x1/&gt; compute something

@time time()
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T015514Z" creationid="hsugawa8651" creationdate="20181116T015514Z">
        <seg>module MyModule
import Base.@time

time() = ... &lt;x1/&gt; compute something

@time time()
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>modulus with respect to 2pi;  &lt;x1/&gt;0 &lt;= mod2pi(x)    &lt; 2pi&lt;x2/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T072602Z" creationid="hsugawa8651" creationdate="20181118T095849Z">
        <seg>2piを法とする剰余； &lt;x1/&gt;0 &lt;= mod2pi(x) &lt; 2pi&lt;x2/&gt; </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>modulus; satisfies &lt;x1/&gt;x == fld(x,y)*y + mod(x,y)&lt;x2/&gt;; sign matches &lt;x3/&gt;y&lt;x4/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T072327Z" creationid="hsugawa8651" creationdate="20181114T031309Z">
        <seg>剰余； &lt;x1/&gt;x == fld(x,y)*y + mod(x,y)&lt;x2/&gt;;を満たす；符号は &lt;x3/&gt;y&lt;x4/&gt; と一致</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>multiply, or matrix multiply</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T150250Z" creationid="hsugawa8651" creationdate="20181117T150250Z">
        <seg>乗算する、または行列乗算する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>mutable struct MyType
    ...
    x::Union{Void,T}
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T094718Z" creationid="hsugawa8651" creationdate="20181120T094718Z">
        <seg>mutable struct MyType
    ...
    x::Union{Void,T}
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>mutable struct NativeType
    p::Ptr{UInt8}
    ...
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T021340Z" creationid="hsugawa8651" creationdate="20181116T021340Z">
        <seg>mutable struct NativeType
    p::Ptr{UInt8}
    ...
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>mutable struct gsl_permutation
end

&lt;x1/&gt; The corresponding C signature is
&lt;x2/&gt;     gsl_permutation * gsl_permutation_alloc (size_t n);
function permutation_alloc(n::Integer)
    output_ptr = ccall(
        (:gsl_permutation_alloc, :libgsl), &lt;x3/&gt; name of C function and library
        Ptr{gsl_permutation},              &lt;x4/&gt; output type
        (Csize_t,),                        &lt;x5/&gt; tuple of input types
        n                                  &lt;x6/&gt; name of Julia variable to pass in
    )
    if output_ptr == C_NULL &lt;x7/&gt; Could not allocate memory
        throw(OutOfMemoryError())
    end
    return output_ptr
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T151911Z" creationid="hsugawa8651" creationdate="20181117T151911Z">
        <seg>mutable struct gsl_permutation
end

&lt;x1/&gt; The corresponding C signature is
&lt;x2/&gt;     gsl_permutation * gsl_permutation_alloc (size_t n);
function permutation_alloc(n::Integer)
    output_ptr = ccall(
        (:gsl_permutation_alloc, :libgsl), &lt;x3/&gt; name of C function and library
        Ptr{gsl_permutation},              &lt;x4/&gt; output type
        (Csize_t,),                        &lt;x5/&gt; tuple of input types
        n                                  &lt;x6/&gt; name of Julia variable to pass in
    )
    if output_ptr == C_NULL &lt;x7/&gt; Could not allocate memory
        throw(OutOfMemoryError())
    end
    return output_ptr
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>mutable struct&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T134317Z" creationid="hsugawa8651" creationdate="20181117T134317Z">
        <seg>mutable struct&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>mycompare&lt;x1/&gt;, which will allow you to see the comparisons that &lt;x2/&gt;qsort&lt;x3/&gt; is performing
(and to verify that it is really calling the Julia function that you passed to it).</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T134203Z" creationid="hsugawa8651" creationdate="20181117T134203Z">
        <seg>&lt;x2/&gt;qsort&lt;x3/&gt;が実行されている比較を表示するためのミコンパレ&lt;x1/&gt; (そして、それが渡されたJulia関数を実際に呼び出していることを確認するためです)。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>n&lt;x1/&gt; worker processes, while &lt;x2/&gt;--machine-file file&lt;x3/&gt; will launch a worker
for each line in file &lt;x4/&gt;file&lt;x5/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T092316Z" creationid="hsugawa8651" creationdate="20181118T092316Z">
        <seg>&lt;x5/&gt;-p n&lt;x6/&gt; でn&lt;x1/&gt;個のワーカーを追加で起動することができ、 &lt;x2/&gt;--machinefile file&lt;x3/&gt; では &lt;x4/&gt;file&lt;x5/&gt; ファイルの各行ごとにワーカーが起動されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>n&lt;x1/&gt; worker processes, while &lt;x2/&gt;--machinefile file&lt;x3/&gt; will launch a worker
for each line in file &lt;x4/&gt;file&lt;x5/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T233607Z" creationid="hsugawa8651" creationdate="20181119T233607Z">
        <seg>&lt;x5/&gt;-p n&lt;x6/&gt; でn&lt;x1/&gt;個のワーカーを追加で起動することができ、 &lt;x2/&gt;--machinefile file&lt;x3/&gt; では &lt;x4/&gt;file&lt;x5/&gt; ファイルの各行ごとにワーカーが起動されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>name : "$name / $desc"))
        end
    end
    return names
end

&lt;x4/&gt; Surround combining characters with no-break spaces (i.e '\u00A0').</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T022226Z" creationid="hsugawa8651" creationdate="20181116T022226Z">
        <seg>name : "$name / $desc"))
        end
    end
    return names
end

&lt;x4/&gt; Surround combining characters with no-break spaces (i.e '\u00A0').</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>name = "App"
uuid = "8f986787-14fe-4607-ba5d-fbff2944afa9"

[deps]
Priv = "ba13f791-ae1d-465a-978b-69c3ad90f72b"
Pub  = "c07ecb7d-0dc9-4db7-8803-fadaaeaf08e1"</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T015858Z" creationid="hsugawa8651" creationdate="20181116T015858Z">
        <seg>name = "App"
uuid = "8f986787-14fe-4607-ba5d-fbff2944afa9"

[deps]
Priv = "ba13f791-ae1d-465a-978b-69c3ad90f72b"
Pub  = "c07ecb7d-0dc9-4db7-8803-fadaaeaf08e1"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>natural exponential function at &lt;x1/&gt;x&lt;x2/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T073450Z" creationid="hsugawa8651" creationdate="20181118T100022Z">
        <seg>&lt;x1/&gt;x&lt;x2/&gt; の自然な指数関数</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>natural logarithm of &lt;x1/&gt;x&lt;x2/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T100037Z" creationid="hsugawa8651" creationdate="20181118T100037Z">
        <seg>&lt;x1/&gt;x&lt;x2/&gt;の自然対数</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>ndims(A)&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T083058Z" creationid="hsugawa8651" creationdate="20181113T083058Z">
        <seg>ndims(A)&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>negation</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T095056Z" creationid="hsugawa8651" creationdate="20181118T095056Z">
        <seg>否定</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>negative infinity</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T110833Z" creationid="hsugawa8651" creationdate="20181112T110833Z">
        <seg>負の無限大</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>next = iterate(iter)
while next !== nothing
    (i, state) = next
    &lt;x1/&gt; body
    next = iterate(iter, state)
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181110T042115Z" creationid="hsugawa8651" creationdate="20181110T042115Z">
        <seg>next = iterate(iter)
while next !== nothing
    (i, state) = next
    &lt;x1/&gt; body
    next = iterate(iter, state)
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>not a number</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T034023Z" creationid="hsugawa8651" creationdate="20181118T120348Z">
        <seg>非数値</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>not supported by &lt;x1/&gt;ccall&lt;x2/&gt; or &lt;x3/&gt;@cfunction&lt;x4/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T151731Z" creationid="hsugawa8651" creationdate="20181117T151731Z">
        <seg>&lt;x1/&gt;ccall&lt;x2/&gt;または&lt;x3/&gt;@cfunction&lt;x4/&gt;ではサポートされていません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>note
A C function declared to return &lt;x1/&gt;Cvoid&lt;x2/&gt; will return the value &lt;x3/&gt;nothing&lt;x4/&gt; in Julia.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T151128Z" creationid="hsugawa8651" creationdate="20181117T151128Z">
        <seg>メモ &lt;x1/&gt;Cvoid&lt;x2/&gt;を返すことを宣言したC関数は、ジュリアでは&lt;x3/&gt;何も返さない&lt;x4/&gt;の値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>note
An updating operator rebinds the variable on the left-hand side.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T064006Z" creationid="hsugawa8651" creationdate="20181113T132418Z">
        <seg>note 更新機能の結果は、左辺にある変数に紐付きます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>note
C functions that take an argument of the type &lt;x1/&gt;char**&lt;x2/&gt; can be called by using a &lt;x3/&gt;Ptr{Ptr{UInt8}}&lt;x4/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T151035Z" creationid="hsugawa8651" creationdate="20181117T151035Z">
        <seg>メモ &lt;x1/&gt;char**&lt;x2/&gt;という型の引数をとるC関数は、&lt;x3/&gt;Ptr{Ptr{UInt8}}&lt;x4/&gt;を使って呼び出すことができる。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>note
For &lt;x1/&gt;wchar_t*&lt;x2/&gt; arguments, the Julia type should be &lt;x3/&gt;`Cwstring`&lt;x4/&gt; (if the C routine expects a NUL-terminated
string) or &lt;x5/&gt;Ptr{Cwchar_t}&lt;x6/&gt; otherwise.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T151029Z" creationid="hsugawa8651" creationdate="20181117T151029Z">
        <seg>メモ &lt;x1/&gt;wchar_t*&lt;x2/&gt;引数に対しては、Julia型は&lt;x3/&gt;`Cwstring'&lt;x4/&gt;(もしCルーチンがあると想定した場合)&lt;x4/&gt;でなければなりません。 string)または&lt;x5/&gt;Ptr{Cwchar_t}&lt;x6/&gt;それ以外の場合。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>note
For Fortran functions taking variable length strings of type &lt;x1/&gt;character(len=*)&lt;x2/&gt; the string lengths
are provided as &lt;x3/&gt;hidden arguments&lt;x4/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T151043Z" creationid="hsugawa8651" creationdate="20181117T151043Z">
        <seg>メモ Fortran関数の長さが&lt;x1/&gt;文字(len=*)&lt;x2/&gt;の可変長文字列を持つ場合は、文字列の長さを指定します。 は、&lt;x3/&gt;隠し引数&lt;x4/&gt;として提供されています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>note
For ease of understanding, the examples throughout this chapter show full data structures for &lt;x1/&gt;roots&lt;x2/&gt;, &lt;x3/&gt;graph&lt;x4/&gt; and &lt;x5/&gt;paths&lt;x6/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T121043Z" creationid="hsugawa8651" creationdate="20181118T121043Z">
        <seg>メモ 理解を容易にするために、本章の例では、&lt;x1/&gt;根&lt;x2/&gt;、&lt;x3/&gt;グラフ&lt;x4/&gt;、&lt;x5/&gt;の各パス&lt;x6/&gt;の完全なデータ構造を示している。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>note
The precedence of numeric literal coefficients used for implicit
multiplication is higher than other binary operators such as multiplication
(&lt;x1/&gt;*&lt;x2/&gt;), and division (&lt;x3/&gt;/&lt;x4/&gt;, &lt;x5/&gt;\&lt;x6/&gt;, and &lt;x7/&gt;//&lt;x8/&gt;).</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T040457Z" creationid="hsugawa8651" creationdate="20181120T040457Z">
        <seg></seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>note
When writing an error message, it is preferred to make the first word lowercase.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T124701Z" creationid="hsugawa8651" creationdate="20181118T124701Z">
        <seg>メモ エラー・メッセージを書き込む場合は、最初のワード小文字を小文字にすることをお勧めします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>note
You only need to read this chapter if you want to understand the technical details of package loading.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T152756Z" creationid="hsugawa8651" creationdate="20181117T152756Z">
        <seg>メモ パッケージのロードに関する技術的な詳細を理解するには、この章を読む必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>nothing : (state*state, state+1)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T112458Z" creationid="hsugawa8651" creationdate="20181112T112458Z">
        <seg>nothing : (state*state, state+1)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>nothing : (state*state, state-1)

julia&gt; collect(Iterators.reverse(Squares(4)))
4-element Array{Int64,1}:
 16
  9
  4
  1</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T112945Z" creationid="hsugawa8651" creationdate="20181112T112945Z">
        <seg>nothing : (state*state, state-1)

julia&gt; collect(Iterators.reverse(Squares(4)))
4-element Array{Int64,1}:
 16
  9
  4
  1</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>nothing : throw(AssertionError("1 == 0"))</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T015430Z" creationid="hsugawa8651" creationdate="20181116T015430Z">
        <seg>nothing : throw(AssertionError("1 == 0"))</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>nothing : throw(AssertionError("1 == 1.0"))
1 == 0 ?</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T015427Z" creationid="hsugawa8651" creationdate="20181116T015427Z">
        <seg>nothing : throw(AssertionError("1 == 1.0"))
1 == 0 ?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>nothing : throw(AssertionError($(string(ex)))) )
       end
@assert (macro with 1 method)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T015420Z" creationid="hsugawa8651" creationdate="20181116T015420Z">
        <seg>nothing : throw(AssertionError($(string(ex)))) )
       end
@assert (macro with 1 method)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>nothing : throw(AssertionError($msg)))
       end
@assert (macro with 1 method)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T015441Z" creationid="hsugawa8651" creationdate="20181116T015441Z">
        <seg>nothing : throw(AssertionError($msg)))
       end
@assert (macro with 1 method)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>nothing&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T150737Z" creationid="hsugawa8651" creationdate="20181117T150737Z">
        <seg>nothing&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>obj3 = MyModule.someotherfunction(obj2, c)
...</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181110T024805Z" creationid="hsugawa8651" creationdate="20181110T024805Z">
        <seg>obj3 = MyModule.someotherfunction(obj2, c)
...</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>open("outfile", "w") do io
    write(io, data)
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181110T030218Z" creationid="hsugawa8651" creationdate="20181110T030218Z">
        <seg>open("outfile", "w") do io
    write(io, data)
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>option will search through parent directories until a Project.toml or JuliaProject.toml file is found.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T174249Z" creationid="hsugawa8651" creationdate="20181114T031541Z">
        <seg>オプションは、Project.toml またはJuliaProject.tomlファイルが見つかるまで、親ディレクトリを検索します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>or else&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T124414Z" creationid="hsugawa8651" creationdate="20181118T124414Z">
        <seg>または&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>p&lt;x1/&gt;, &lt;x2/&gt;q&lt;x3/&gt; and &lt;x4/&gt;n&lt;x5/&gt; from the enclosing scope.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T160657Z" creationid="hsugawa8651" creationdate="20181114T160657Z">
        <seg>p&lt;x1/&gt;、&lt;x2/&gt;q&lt;x3/&gt;、および&lt;x4/&gt;n&lt;x5/&gt;を囲むスコープからの値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>p&lt;x1/&gt;, &lt;x2/&gt;q&lt;x3/&gt; and &lt;x4/&gt;n&lt;x5/&gt; from the enclosing scope.
Captured variables can present performance challenges; see
&lt;x6/&gt;&lt;x7/&gt;&lt;x8/&gt;(@ref man-performance-tips).</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T134823Z" creationid="hsugawa8651" creationdate="20181117T134823Z">
        <seg>p&lt;x1/&gt;、&lt;x2/&gt;q&lt;x3/&gt;、および&lt;x4/&gt;n&lt;x5/&gt;を囲むスコープからの値。 キャプチャされた変数はパフォーマンス上の問題を提示することがあります。 &lt;x6/&gt;&lt;x7/&gt;&lt;x8/&gt;(@ref manのパフォーマンス・ヒント)。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>parametric type instantiation</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T063146Z" creationid="hsugawa8651" creationdate="20181114T063146Z">
        <seg>パラメトリック・タイプのインスタンス化</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>paths = Dict{Tuple{UUID,Symbol},String}(
    (UUID("00000000-0000-0000-0000-000000000000"), :Aardvark) =&gt;
        "/home/me/AnimalPackages/Aardvark/src/Aardvark.jl",
    (UUID("85ad11c7-31f6-5d08-84db-0a4914d4cadf"), :Bobcat) =&gt;
        "/home/me/AnimalPackages/Bobcat/src/Bobcat.jl",
    (UUID("4725e24d-f727-424b-bca0-c4307a3456fa"), :Cobra) =&gt;
        "/home/me/AnimalPackages/Cobra/src/Cobra.jl",
    (UUID("7a7925be-828c-4418-bbeb-bac8dfc843bc"), :Dingo) =&gt;
        "/home/me/AnimalPackages/Dingo/src/Dingo.jl",
)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T020000Z" creationid="hsugawa8651" creationdate="20181116T020000Z">
        <seg>paths = Dict{Tuple{UUID,Symbol},String}(
    (UUID("00000000-0000-0000-0000-000000000000"), :Aardvark) =&gt;
        "/home/me/AnimalPackages/Aardvark/src/Aardvark.jl",
    (UUID("85ad11c7-31f6-5d08-84db-0a4914d4cadf"), :Bobcat) =&gt;
        "/home/me/AnimalPackages/Bobcat/src/Bobcat.jl",
    (UUID("4725e24d-f727-424b-bca0-c4307a3456fa"), :Cobra) =&gt;
        "/home/me/AnimalPackages/Cobra/src/Cobra.jl",
    (UUID("7a7925be-828c-4418-bbeb-bac8dfc843bc"), :Dingo) =&gt;
        "/home/me/AnimalPackages/Dingo/src/Dingo.jl",
)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>paths = Dict{Tuple{UUID,Symbol},String}(
    &lt;x1/&gt; Priv – the private one:
    (UUID("ba13f791-ae1d-465a-978b-69c3ad90f72b"), :Priv) =&gt;
        &lt;x2/&gt; relative entry-point inside `App` repo:
        "/home/me/projects/App/deps/Priv/src/Priv.jl",
    &lt;x3/&gt; Priv – the public one:
    (UUID("2d15fe94-a1f7-436c-a4d8-07a9a496e01c"), :Priv) =&gt;
        &lt;x4/&gt; package installed in the system depot:
        "/usr/local/julia/packages/Priv/HDkr/src/Priv.jl",
    &lt;x5/&gt; Pub:
    (UUID("c07ecb7d-0dc9-4db7-8803-fadaaeaf08e1"), :Pub) =&gt;
        &lt;x6/&gt; package installed in the user depot:
        "/home/me/.julia/packages/Pub/oKpw/src/Pub.jl",
    &lt;x7/&gt; Zebra:
    (UUID("f7a24cb4-21fc-4002-ac70-f0e3a0dd3f62"), :Zebra) =&gt;
        &lt;x8/&gt; package installed in the system depot:
        "/usr/local/julia/packages/Zebra/me9k/src/Zebra.jl",
)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T015934Z" creationid="hsugawa8651" creationdate="20181116T015934Z">
        <seg>paths = Dict{Tuple{UUID,Symbol},String}(
    &lt;x1/&gt; Priv – the private one:
    (UUID("ba13f791-ae1d-465a-978b-69c3ad90f72b"), :Priv) =&gt;
        &lt;x2/&gt; relative entry-point inside `App` repo:
        "/home/me/projects/App/deps/Priv/src/Priv.jl",
    &lt;x3/&gt; Priv – the public one:
    (UUID("2d15fe94-a1f7-436c-a4d8-07a9a496e01c"), :Priv) =&gt;
        &lt;x4/&gt; package installed in the system depot:
        "/usr/local/julia/packages/Priv/HDkr/src/Priv.jl",
    &lt;x5/&gt; Pub:
    (UUID("c07ecb7d-0dc9-4db7-8803-fadaaeaf08e1"), :Pub) =&gt;
        &lt;x6/&gt; package installed in the user depot:
        "/home/me/.julia/packages/Pub/oKpw/src/Pub.jl",
    &lt;x7/&gt; Zebra:
    (UUID("f7a24cb4-21fc-4002-ac70-f0e3a0dd3f62"), :Zebra) =&gt;
        &lt;x8/&gt; package installed in the system depot:
        "/usr/local/julia/packages/Zebra/me9k/src/Zebra.jl",
)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>performs addition</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T063132Z" creationid="hsugawa8651" creationdate="20181113T132011Z">
        <seg>加算を行う</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>performs division</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T063216Z" creationid="hsugawa8651" creationdate="20181113T132053Z">
        <seg>除算を行う</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>performs multiplication</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T063208Z" creationid="hsugawa8651" creationdate="20181113T132037Z">
        <seg>乗算を行う</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>performs subtraction</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T063157Z" creationid="hsugawa8651" creationdate="20181113T132025Z">
        <seg>減算を行う</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>pipeline(`do_work`, stdout=pipeline(`sort`, "out.txt"), stderr="errs.txt")</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T020328Z" creationid="hsugawa8651" creationdate="20181116T020328Z">
        <seg>pipeline(`do_work`, stdout=pipeline(`sort`, "out.txt"), stderr="errs.txt")</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>positive infinity</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T110813Z" creationid="hsugawa8651" creationdate="20181112T110813Z">
        <seg>正の無限大</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>power</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T094950Z" creationid="hsugawa8651" creationdate="20181118T094950Z">
        <seg>冪乗</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>prefix "not" (logical negation) operator</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T032241Z" creationid="hsugawa8651" creationdate="20181114T032241Z">
        <seg>接頭語"not"(論理否定)演算子</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>primitive type Float16 &lt;: AbstractFloat 16 end
primitive type Float32 &lt;: AbstractFloat 32 end
primitive type Float64 &lt;: AbstractFloat 64 end

primitive type Bool &lt;: Integer 8 end
primitive type Char 32 end

primitive type Int8    &lt;: Signed   8 end
primitive type UInt8   &lt;: Unsigned 8 end
primitive type Int16   &lt;: Signed   16 end
primitive type UInt16  &lt;: Unsigned 16 end
primitive type Int32   &lt;: Signed   32 end
primitive type UInt32  &lt;: Unsigned 32 end
primitive type Int64   &lt;: Signed   64 end
primitive type UInt64  &lt;: Unsigned 64 end
primitive type Int128  &lt;: Signed   128 end
primitive type UInt128 &lt;: Unsigned 128 end</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T094944Z" creationid="hsugawa8651" creationdate="20181120T094944Z">
        <seg>primitive type Float16 &lt;: AbstractFloat 16 end
primitive type Float32 &lt;: AbstractFloat 32 end
primitive type Float64 &lt;: AbstractFloat 64 end

primitive type Bool &lt;: Integer 8 end
primitive type Char 32 end

primitive type Int8    &lt;: Signed   8 end
primitive type UInt8   &lt;: Unsigned 8 end
primitive type Int16   &lt;: Signed   16 end
primitive type UInt16  &lt;: Unsigned 16 end
primitive type Int32   &lt;: Signed   32 end
primitive type UInt32  &lt;: Unsigned 32 end
primitive type Int64   &lt;: Signed   64 end
primitive type UInt64  &lt;: Unsigned 64 end
primitive type Int128  &lt;: Signed   128 end
primitive type UInt128 &lt;: Unsigned 128 end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>primitive type Float16 &lt;: AbstractFloat 16 end
primitive type Float32 &lt;: AbstractFloat 32 end
primitive type Float64 &lt;: AbstractFloat 64 end

primitive type Bool &lt;: Integer 8 end
primitive type Char &lt;: AbstractChar 32 end

primitive type Int8    &lt;: Signed   8 end
primitive type UInt8   &lt;: Unsigned 8 end
primitive type Int16   &lt;: Signed   16 end
primitive type UInt16  &lt;: Unsigned 16 end
primitive type Int32   &lt;: Signed   32 end
primitive type UInt32  &lt;: Unsigned 32 end
primitive type Int64   &lt;: Signed   64 end
primitive type UInt64  &lt;: Unsigned 64 end
primitive type Int128  &lt;: Signed   128 end
primitive type UInt128 &lt;: Unsigned 128 end</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T021619Z" creationid="hsugawa8651" creationdate="20181116T021619Z">
        <seg>primitive type Float16 &lt;: AbstractFloat 16 end
primitive type Float32 &lt;: AbstractFloat 32 end
primitive type Float64 &lt;: AbstractFloat 64 end

primitive type Bool &lt;: Integer 8 end
primitive type Char &lt;: AbstractChar 32 end

primitive type Int8    &lt;: Signed   8 end
primitive type UInt8   &lt;: Unsigned 8 end
primitive type Int16   &lt;: Signed   16 end
primitive type UInt16  &lt;: Unsigned 16 end
primitive type Int32   &lt;: Signed   32 end
primitive type UInt32  &lt;: Unsigned 32 end
primitive type Int64   &lt;: Signed   64 end
primitive type UInt64  &lt;: Unsigned 64 end
primitive type Int128  &lt;: Signed   128 end
primitive type UInt128 &lt;: Unsigned 128 end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>primitive type «name» «bits» end
primitive type «name» &lt;: «supertype» «bits» end</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T021627Z" creationid="hsugawa8651" creationdate="20181116T021627Z">
        <seg>primitive type «name» «bits» end
primitive type «name» &lt;: «supertype» «bits» end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>primitive type&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T150655Z" creationid="hsugawa8651" creationdate="20181117T150655Z">
        <seg>primitive type&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>prod(size(A))&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T022410Z" creationid="hsugawa8651" creationdate="20181113T022410Z">
        <seg>prod(size(A))&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>quoted expression</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T150259Z" creationid="hsugawa8651" creationdate="20181117T150259Z">
        <seg>引用式</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>raises &lt;x1/&gt;x&lt;x2/&gt; to the &lt;x3/&gt;y&lt;x4/&gt;th power</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T063246Z" creationid="hsugawa8651" creationdate="20181113T132134Z">
        <seg>&lt;x1/&gt;x&lt;x2/&gt;を&lt;x3/&gt;y&lt;x4/&gt;乗する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>range a, a+1, a+2, ..., b</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T063539Z" creationid="hsugawa8651" creationdate="20181114T063539Z">
        <seg>range a, a+1, a+2, ..., b</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>range a, a+s, a+2s, ..., b</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T063542Z" creationid="hsugawa8651" creationdate="20181114T063542Z">
        <seg>range a, a+s, a+2s, ..., b</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>range of &lt;x1/&gt;n&lt;x2/&gt; linearly spaced elements from &lt;x3/&gt;start&lt;x4/&gt; to &lt;x5/&gt;stop&lt;x6/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154500Z" creationid="hsugawa8651" creationdate="20181109T154500Z">
        <seg>&lt;x1/&gt;n&lt;x2/&gt;の範囲で、&lt;x3/&gt;開始&lt;x4/&gt;から&lt;x5/&gt;&lt;x6/&gt;までの直線的に間隔をあけた要素の範囲</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>rather than:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T020048Z" creationid="hsugawa8651" creationdate="20181116T020048Z">
        <seg>rather than:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>re = Regex("^\\s*(?:&lt;x1/&gt;|\$)")
for line = lines
    m = match(re, line)
    if m === nothing
        &lt;x2/&gt; non-comment
    else
        &lt;x3/&gt; comment
    end
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T015631Z" creationid="hsugawa8651" creationdate="20181116T015631Z">
        <seg>re = Regex("^\\s*(?:&lt;x1/&gt;|\$)")
for line = lines
    m = match(re, line)
    if m === nothing
        &lt;x2/&gt; non-comment
    else
        &lt;x3/&gt; comment
    end
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>remainder</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T095022Z" creationid="hsugawa8651" creationdate="20181113T132141Z">
        <seg>剰余</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>remainder operator</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T032310Z" creationid="hsugawa8651" creationdate="20181114T032310Z">
        <seg>剰余演算子</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>remainder; satisfies &lt;x1/&gt;x == div(x,y)*y + rem(x,y)&lt;x2/&gt;; sign matches &lt;x3/&gt;x&lt;x4/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T071959Z" creationid="hsugawa8651" creationdate="20181118T095841Z">
        <seg>余り；  &lt;x1/&gt;x == div(x,y)*y + rem(x,y)&lt;x2/&gt;を満たす；符号は &lt;x3/&gt;x&lt;x4/&gt; と一致</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>return (a &lt; b) ? -1 : ((a &gt; b) ? +1 : 0)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T133236Z" creationid="hsugawa8651" creationdate="20181117T133236Z">
        <seg>return (a &lt; b) ? -1 : ((a &gt; b) ? +1 : 0)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>returns &lt;x1/&gt;(div(x,y),rem(x,y))&lt;x2/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T072624Z" creationid="hsugawa8651" creationdate="20181118T095853Z">
        <seg>&lt;x1/&gt;(div(x,y),rem(x,y))&lt;x2/&gt; を返す</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>returns &lt;x1/&gt;(fld(x,y),mod(x,y))&lt;x2/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T072654Z" creationid="hsugawa8651" creationdate="20181118T095856Z">
        <seg>&lt;x1/&gt;(fld(x,y),mod(x,y)&lt;x2/&gt;)&lt; を返す</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>roots = Dict(
    :App  =&gt; UUID("8f986787-14fe-4607-ba5d-fbff2944afa9"),
    :Priv =&gt; UUID("ba13f791-ae1d-465a-978b-69c3ad90f72b"),
    :Pub  =&gt; UUID("c07ecb7d-0dc9-4db7-8803-fadaaeaf08e1"),
)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T015901Z" creationid="hsugawa8651" creationdate="20181116T015901Z">
        <seg>roots = Dict(
    :App  =&gt; UUID("8f986787-14fe-4607-ba5d-fbff2944afa9"),
    :Priv =&gt; UUID("ba13f791-ae1d-465a-978b-69c3ad90f72b"),
    :Pub  =&gt; UUID("c07ecb7d-0dc9-4db7-8803-fadaaeaf08e1"),
)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>roots = Dict{Symbol,UUID}(
    :Aardvark =&gt; UUID("00000000-0000-0000-0000-000000000000"), &lt;x1/&gt; no project file, nil UUID
    :Bobcat   =&gt; UUID("85ad11c7-31f6-5d08-84db-0a4914d4cadf"), &lt;x2/&gt; dummy UUID based on path
    :Cobra    =&gt; UUID("4725e24d-f727-424b-bca0-c4307a3456fa"), &lt;x3/&gt; UUID from project file
    :Dingo    =&gt; UUID("7a7925be-828c-4418-bbeb-bac8dfc843bc"), &lt;x4/&gt; UUID from project file
)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T015947Z" creationid="hsugawa8651" creationdate="20181116T015947Z">
        <seg>roots = Dict{Symbol,UUID}(
    :Aardvark =&gt; UUID("00000000-0000-0000-0000-000000000000"), &lt;x1/&gt; no project file, nil UUID
    :Bobcat   =&gt; UUID("85ad11c7-31f6-5d08-84db-0a4914d4cadf"), &lt;x2/&gt; dummy UUID based on path
    :Cobra    =&gt; UUID("4725e24d-f727-424b-bca0-c4307a3456fa"), &lt;x3/&gt; UUID from project file
    :Dingo    =&gt; UUID("7a7925be-828c-4418-bbeb-bac8dfc843bc"), &lt;x4/&gt; UUID from project file
)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>roots = reduce(merge, reverse([roots₁, roots₂, …]))
graph = reduce(merge, reverse([graph₁, graph₂, …]))
paths = reduce(merge, reverse([paths₁, paths₂, …]))</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T020006Z" creationid="hsugawa8651" creationdate="20181116T020006Z">
        <seg>roots = reduce(merge, reverse([roots₁, roots₂, …]))
graph = reduce(merge, reverse([graph₁, graph₂, …]))
paths = reduce(merge, reverse([paths₁, paths₂, …]))</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>round &lt;x1/&gt;x&lt;x2/&gt; to the nearest integer</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T071246Z" creationid="hsugawa8651" creationdate="20181114T031119Z">
        <seg>&lt;x1/&gt;x&lt;x2/&gt; を最も近い整数になるように丸める</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>round &lt;x1/&gt;x&lt;x2/&gt; towards &lt;x3/&gt;+Inf&lt;x4/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T071349Z" creationid="hsugawa8651" creationdate="20181118T095740Z">
        <seg>&lt;x1/&gt;x&lt;x2/&gt; を &lt;x3/&gt;+Inf&lt;x4/&gt; に向かって丸める</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>round &lt;x1/&gt;x&lt;x2/&gt; towards &lt;x3/&gt;-Inf&lt;x4/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T071317Z" creationid="hsugawa8651" creationdate="20181114T031125Z">
        <seg>&lt;x1/&gt;x&lt;x2/&gt; を &lt;x3/&gt;-Inf&lt;x4/&gt; に向かって丸める</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>round &lt;x1/&gt;x&lt;x2/&gt; towards zero</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T071401Z" creationid="hsugawa8651" creationdate="20181118T095757Z">
        <seg>&lt;x1/&gt;x&lt;x2/&gt; を0に向かって丸める</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>s&lt;x1/&gt;, the sequence of characters returned when errors aren't thrown is the sequence
of characters comprising the string &lt;x2/&gt;s&lt;x3/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T081745Z" creationid="hsugawa8651" creationdate="20181120T081745Z">
        <seg> s &lt;x1/&gt;にインデックスする場合、エラーが出力されなければ文字列  &lt;x2/&gt;s&lt;x3/&gt; を構成する一連の文字列が返されます。 </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>s&lt;x1/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T094512Z" creationid="hsugawa8651" creationdate="20181120T094512Z">
        <seg>s&lt;x1/&gt;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>separate function arguments or tuple components</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T063200Z" creationid="hsugawa8651" creationdate="20181114T063200Z">
        <seg>個別の関数の引数またはタプル・コンポーネント</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>setindex!(A, I...)&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T022344Z" creationid="hsugawa8651" creationdate="20181113T022344Z">
        <seg>setindex!(A, I...)&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>setindex!(A, X, I_1, I_2, ..., I_n)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T134935Z" creationid="hsugawa8651" creationdate="20181117T134935Z">
        <seg>setindex!(A, X, I_1, I_2, ..., I_n)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>setindex!(A, v, I::Vararg{Int, N})&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T113256Z" creationid="hsugawa8651" creationdate="20181112T113256Z">
        <seg>setindex!(A, v, I::Vararg{Int, N})&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>setindex!(A, v, i::Int)&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T113245Z" creationid="hsugawa8651" creationdate="20181112T113245Z">
        <seg>setindex!(A, v, i::Int)&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>setindex!(X, v, i)&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T164709Z" creationid="hsugawa8651" creationdate="20181118T164709Z">
        <seg>setindex!(X, v, i)&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>short-circuiting boolean and</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T150227Z" creationid="hsugawa8651" creationdate="20181117T150227Z">
        <seg>短絡ブール値</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>short-circuiting boolean or</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T150244Z" creationid="hsugawa8651" creationdate="20181117T150244Z">
        <seg>短絡ブール値</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>short&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T150907Z" creationid="hsugawa8651" creationdate="20181117T150907Z">
        <seg>short&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>shorthand for &lt;x1/&gt;cat(A...; dims=1)&lt;x2/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154553Z" creationid="hsugawa8651" creationdate="20181109T154553Z">
        <seg>&lt;x1/&gt;cat(A.…;dims=1)&lt;x2/&gt;の短縮形</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>shorthand for &lt;x1/&gt;cat(A...; dims=2)&lt;x2/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154557Z" creationid="hsugawa8651" creationdate="20181109T154557Z">
        <seg>&lt;x1/&gt;cat(A.…;dims=2)&lt;x2/&gt;の短縮形</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>show(io::IO, v::Vector{MyType}) = ...</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T021344Z" creationid="hsugawa8651" creationdate="20181116T021344Z">
        <seg>show(io::IO, v::Vector{MyType}) = ...</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>similar(A)&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T022415Z" creationid="hsugawa8651" creationdate="20181113T022415Z">
        <seg>similar(A)&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>similar(A, ::Type{S})&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T022423Z" creationid="hsugawa8651" creationdate="20181113T022423Z">
        <seg>similar(A, ::Type{S})&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>similar(A, ::Type{S}, dims::Dims)&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T022448Z" creationid="hsugawa8651" creationdate="20181113T022448Z">
        <seg>similar(A, ::Type{S}, dims::Dims)&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>similar(A, ::Type{S}, inds)&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T022521Z" creationid="hsugawa8651" creationdate="20181113T022521Z">
        <seg>similar(A, ::Type{S}, inds)&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>similar(A, S, Base.to_shape(inds))&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T022525Z" creationid="hsugawa8651" creationdate="20181113T022525Z">
        <seg>similar(A, S, Base.to_shape(inds))&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>similar(A, S, size(A))&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T022426Z" creationid="hsugawa8651" creationdate="20181113T022426Z">
        <seg>similar(A, S, size(A))&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>similar(A, dims::Dims)&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T022435Z" creationid="hsugawa8651" creationdate="20181113T022435Z">
        <seg>similar(A, dims::Dims)&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>similar(A, eltype(A), dims)&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T022439Z" creationid="hsugawa8651" creationdate="20181113T022439Z">
        <seg>similar(A, eltype(A), dims)&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>similar(A, eltype(A), size(A))&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T022419Z" creationid="hsugawa8651" creationdate="20181113T022419Z">
        <seg>similar(A, eltype(A), size(A))&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>similar(T::Union{Type,Function}, inds)&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T022608Z" creationid="hsugawa8651" creationdate="20181113T022608Z">
        <seg>similar(T::Union{Type,Function}, inds)&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>similar(bc::Broadcasted{DefaultArrayStyle{N}}, ::Type{ElType}) where {N,ElType} =
    similar(Array{ElType}, axes(bc))</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T131319Z" creationid="hsugawa8651" creationdate="20181113T131319Z">
        <seg>similar(bc::Broadcasted{DefaultArrayStyle{N}}, ::Type{ElType}) where {N,ElType} =
    similar(Array{ElType}, axes(bc))</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>similar&lt;x1/&gt; supports 1- and 2-argument
forms, in most case you only need to specialize the 3-argument form.) For this to work it's important
that &lt;x2/&gt;SparseArray&lt;x3/&gt; is mutable (supports &lt;x4/&gt;setindex!&lt;x5/&gt;).</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T083312Z" creationid="hsugawa8651" creationdate="20181113T083312Z">
        <seg>同様の&lt;x1/&gt;は1と2の引数をサポートします ほとんどの場合、3引数形式の特殊化のみが必要となります。)この場合、重要なのは、このフォームを使用することです。 &lt;x2/&gt;SparseArray&lt;x3/&gt;は可変です(&lt;x4/&gt;setindex!&lt;x5/&gt;をサポートします)。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>sin    cos    tan    cot    sec    csc
sinh   cosh   tanh   coth   sech   csch
asin   acos   atan   acot   asec   acsc
asinh  acosh  atanh  acoth  asech  acsch
sinc   cosc</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T100115Z" creationid="hsugawa8651" creationdate="20181118T100115Z">
        <seg>sin    cos    tan    cot    sec    csc
sinh   cosh   tanh   coth   sech   csch
asin   acos   atan   acot   asec   acsc
asinh  acosh  atanh  acoth  asech  acsch
sinc   cosc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>sin.(a)&lt;x1/&gt; to vectorize via &lt;x2/&gt;broadcast&lt;x3/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T150008Z" creationid="hsugawa8651" creationdate="20181117T150008Z">
        <seg>sin.(a)&lt;x2/&gt;ブロードキャストを介してベクトル化する&lt;x2/&gt;ブロードキャスト&lt;x/&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>sind   cosd   tand   cotd   secd   cscd
asind  acosd  atand  acotd  asecd  acscd</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T100144Z" creationid="hsugawa8651" creationdate="20181118T100143Z">
        <seg>sind   cosd   tand   cotd   secd   cscd
asind  acosd  atand  acotd  asecd  acscd</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>single&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T110235Z" creationid="hsugawa8651" creationdate="20181112T110235Z">
        <seg>single&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>size(A)&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T113213Z" creationid="hsugawa8651" creationdate="20181112T113213Z">
        <seg>size(A)&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>size(iter, [dim])&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T112237Z" creationid="hsugawa8651" creationdate="20181112T112237Z">
        <seg>size(iter, [dim])&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>sort&lt;x1/&gt; function.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T120146Z" creationid="hsugawa8651" creationdate="20181118T120146Z">
        <seg>sort&lt;x1/&gt;関数です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>splice arguments into a function call or declare a varargs function</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T063529Z" creationid="hsugawa8651" creationdate="20181114T063529Z">
        <seg>関数呼び出しに引数を指定するか、またはvarargs関数を宣言します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>sqrt(x) : error("negative x not allowed")
fussy_sqrt (generic function with 1 method)

julia&gt; fussy_sqrt(2)
1.4142135623730951

julia&gt; fussy_sqrt(-1)
ERROR: negative x not allowed
Stacktrace:
 [1] error at ./error.jl:33 [inlined]
 [2] fussy_sqrt(::Int64) at ./none:1
 [3] top-level scope</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T124720Z" creationid="hsugawa8651" creationdate="20181118T124720Z">
        <seg>sqrt(x) : error("negative x not allowed")
fussy_sqrt (generic function with 1 method)

julia&gt; fussy_sqrt(2)
1.4142135623730951

julia&gt; fussy_sqrt(-1)
ERROR: negative x not allowed
Stacktrace:
 [1] error at ./error.jl:33 [inlined]
 [2] fussy_sqrt(::Int64) at ./none:1
 [3] top-level scope</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>square root of &lt;x1/&gt;x&lt;x2/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T100010Z" creationid="hsugawa8651" creationdate="20181118T100010Z">
        <seg>&lt;x1/&gt;x&lt;x2/&gt;の平方根</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>statement separator</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T063155Z" creationid="hsugawa8651" creationdate="20181114T063155Z">
        <seg>文区切り文字</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>stdcall&lt;x1/&gt; is unified with the
C calling convention).</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T133918Z" creationid="hsugawa8651" creationdate="20181117T133918Z">
        <seg>stdcall&lt;x1/&gt;は C呼び出し規約)。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>str = from_c::Ptr{Cvoid}
len = unsafe_load(Ptr{Cint}(str))
unsafe_string(str + Core.sizeof(Cint), len)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T022828Z" creationid="hsugawa8651" creationdate="20181116T022828Z">
        <seg>str = from_c::Ptr{Cvoid}
len = unsafe_load(Ptr{Cint}(str))
unsafe_string(str + Core.sizeof(Cint), len)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>stride(A, i::Int)&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T083446Z" creationid="hsugawa8651" creationdate="20181113T083446Z">
        <seg>stride(A, i::Int)&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>strides(A)&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T083428Z" creationid="hsugawa8651" creationdate="20181113T083428Z">
        <seg>strides(A)&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>string and expression interpolation</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T032307Z" creationid="hsugawa8651" creationdate="20181114T032307Z">
        <seg>文字列と式の補間</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>struct ...; end&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T150734Z" creationid="hsugawa8651" creationdate="20181117T150734Z">
        <seg>struct ...; end&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>struct ArrayAndChar{T,N} &lt;: AbstractArray{T,N}
    data::Array{T,N}
    char::Char
end
Base.size(A::ArrayAndChar) = size(A.data)
Base.getindex(A::ArrayAndChar{T,N}, inds::Vararg{Int,N}) where {T,N} = A.data[inds...]
Base.setindex!(A::ArrayAndChar{T,N}, val, inds::Vararg{Int,N}) where {T,N} = A.data[inds...] = val
Base.showarg(io::IO, A::ArrayAndChar, toplevel) = print(io, typeof(A), " with char '", A.char, "'")
&lt;x1/&gt; output</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T131355Z" creationid="hsugawa8651" creationdate="20181113T131355Z">
        <seg>struct ArrayAndChar{T,N} &lt;: AbstractArray{T,N}
    data::Array{T,N}
    char::Char
end
Base.size(A::ArrayAndChar) = size(A.data)
Base.getindex(A::ArrayAndChar{T,N}, inds::Vararg{Int,N}) where {T,N} = A.data[inds...]
Base.setindex!(A::ArrayAndChar{T,N}, val, inds::Vararg{Int,N}) where {T,N} = A.data[inds...] = val
Base.showarg(io::IO, A::ArrayAndChar, toplevel) = print(io, typeof(A), " with char '", A.char, "'")
&lt;x1/&gt; output</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>struct B
    A::NTuple{3, Cint}
end
b_a_2 = B.A[3]  &lt;x1/&gt; note the difference in indexing (1-based in Julia, 0-based in C)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T151207Z" creationid="hsugawa8651" creationdate="20181117T151207Z">
        <seg>struct B
    A::NTuple{3, Cint}
end
b_a_2 = B.A[3]  &lt;x1/&gt; note the difference in indexing (1-based in Julia, 0-based in C)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>struct B {
    int A[3];
};
b_a_2 = B.A[2];</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T022755Z" creationid="hsugawa8651" creationdate="20181116T022755Z">
        <seg>struct B {
    int A[3];
};
b_a_2 = B.A[2];</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>struct MyNumber
    x::Float64
end
&lt;x1/&gt; output</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T015538Z" creationid="hsugawa8651" creationdate="20181116T015538Z">
        <seg>struct MyNumber
    x::Float64
end
&lt;x1/&gt; output</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>struct MyStyle &lt;: Broadcast.BroadcastStyle end
Base.BroadcastStyle(::Type{&lt;:MyType}) = MyStyle()</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T131135Z" creationid="hsugawa8651" creationdate="20181113T131135Z">
        <seg>struct MyStyle&lt;:Broadcast.BroadcastStyle end#struct MyStyle&lt;:Broadcast.Schedule end# Base.BroadcastStyle(::Type{&lt;:MyType})=MyStyle()</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>struct MyType
    value::String
end

Docs.getdoc(t::MyType) = "Documentation for MyType with value $(t.value)"

x = MyType("x")
y = MyType("y")</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T020147Z" creationid="hsugawa8651" creationdate="20181116T020147Z">
        <seg>struct MyType
    value::String
end

Docs.getdoc(t::MyType) = "Documentation for MyType with value $(t.value)"

x = MyType("x")
y = MyType("y")</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>struct NoPad end  &lt;x1/&gt; indicate that no padding is desired, or that it's already applied

myfilter(A, kernel) = myfilter(A, kernel, Replicate())  &lt;x2/&gt; default boundary conditions

function myfilter(A, kernel, ::Replicate)
    Apadded = replicate_edges(A, size(kernel))
    myfilter(Apadded, kernel, NoPad())  &lt;x3/&gt; indicate the new boundary conditions
end

&lt;x4/&gt; other padding methods go here

function myfilter(A, kernel, ::NoPad)
    &lt;x5/&gt; Here's the "real" implementation of the core computation
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T054503Z" creationid="hsugawa8651" creationdate="20181116T054503Z">
        <seg>struct NoPad end  &lt;x1/&gt; indicate that no padding is desired, or that it's already applied

myfilter(A, kernel) = myfilter(A, kernel, Replicate())  &lt;x2/&gt; default boundary conditions

function myfilter(A, kernel, ::Replicate)
    Apadded = replicate_edges(A, size(kernel))
    myfilter(Apadded, kernel, NoPad())  &lt;x3/&gt; indicate the new boundary conditions
end

&lt;x4/&gt; other padding methods go here

function myfilter(A, kernel, ::NoPad)
    &lt;x5/&gt; Here's the "real" implementation of the core computation
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>struct Point{T&lt;:Real} &lt;: Pointy{T}
    x::T
    y::T
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T021903Z" creationid="hsugawa8651" creationdate="20181116T021903Z">
        <seg>struct Point{T&lt;:Real} &lt;: Pointy{T}
    x::T
    y::T
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>struct Rational{T&lt;:Integer} &lt;: Real
    num::T
    den::T
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T021908Z" creationid="hsugawa8651" creationdate="20181116T021908Z">
        <seg>struct Rational{T&lt;:Integer} &lt;: Real
    num::T
    den::T
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>struct SparseVecStyle &lt;: Broadcast.AbstractArrayStyle{1} end
struct SparseMatStyle &lt;: Broadcast.AbstractArrayStyle{2} end
Base.BroadcastStyle(::Type{&lt;:SparseVector}) = SparseVecStyle()
Base.BroadcastStyle(::Type{&lt;:SparseMatrixCSC}) = SparseMatStyle()</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T131845Z" creationid="hsugawa8651" creationdate="20181113T131845Z">
        <seg>struct SparseVecStyle &lt;: Broadcast.AbstractArrayStyle{1} end
struct SparseMatStyle &lt;: Broadcast.AbstractArrayStyle{2} end
Base.BroadcastStyle(::Type{&lt;:SparseVector}) = SparseVecStyle()
Base.BroadcastStyle(::Type{&lt;:SparseMatrixCSC}) = SparseMatStyle()</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>struct String {
    int strlen;
    char data[];
};</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T022823Z" creationid="hsugawa8651" creationdate="20181116T022823Z">
        <seg>struct String {
    int strlen;
    char data[];
};</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>struct T&lt;x1/&gt; (including typedef to a struct)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T151517Z" creationid="hsugawa8651" creationdate="20181117T151517Z">
        <seg>struct T&lt;x1/&gt;(構造体に対してtypedefを含む)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>struct Tuple2{A,B}
    a::A
    b::B
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T021913Z" creationid="hsugawa8651" creationdate="20181116T021913Z">
        <seg>struct Tuple2{A,B}
    a::A
    b::B
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>struct VecElement{T}
    value::T
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T044821Z" creationid="hsugawa8651" creationdate="20181112T044821Z">
        <seg>struct VecElement{T}
    value::T
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>struct&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T150707Z" creationid="hsugawa8651" creationdate="20181117T150707Z">
        <seg>struct&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>sub2ind_rec(dims, I...) : throw(BoundsError());

julia&gt; sub2ind_rec(dims::Tuple{Integer, Vararg{Integer}}, i1::Integer) = i1;

julia&gt; sub2ind_rec(dims::Tuple{Integer, Vararg{Integer}}, i1::Integer, I::Integer...) =
           i1 + dims[1] * (sub2ind_rec(Base.tail(dims), I...) - 1);

julia&gt; sub2ind_rec((3, 5), 1, 2)
4</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T032255Z" creationid="hsugawa8651" creationdate="20181116T032255Z">
        <seg>sub2ind_rec(dims, I...) : throw(BoundsError());

julia&gt; sub2ind_rec(dims::Tuple{Integer, Vararg{Integer}}, i1::Integer) = i1;

julia&gt; sub2ind_rec(dims::Tuple{Integer, Vararg{Integer}}, i1::Integer, I::Integer...) =
           i1 + dims[1] * (sub2ind_rec(Base.tail(dims), I...) - 1);

julia&gt; sub2ind_rec((3, 5), 1, 2)
4</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>sym = Libdl.dlsym(lib, :my_fcn)   &lt;x2/&gt; Get a symbol for the function to call.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T152402Z" creationid="hsugawa8651" creationdate="20181117T152402Z">
        <seg>sym = Libdl.dlsym(lib, :my_fcn)   &lt;x2/&gt; Get a symbol for the function to call.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>symbol a</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T063557Z" creationid="hsugawa8651" creationdate="20181114T063557Z">
        <seg>symbol a</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>the &lt;x1/&gt;bar&lt;x2/&gt; function solves a problem that is better solved with multiple dispatch - defining &lt;x3/&gt;bar(x) = x&lt;x4/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T032211Z" creationid="hsugawa8651" creationdate="20181116T032211Z">
        <seg>&lt;x1/&gt;bar&lt;x2/&gt;関数は、複数のディスパッチによって解決される問題を解決します。&lt;x3/&gt;bar(x)=x&lt;x4/&gt;を定義します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>the &lt;x1/&gt;baz&lt;x2/&gt; function is pathological</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T032215Z" creationid="hsugawa8651" creationdate="20181116T032215Z">
        <seg>&lt;x1/&gt;baz&lt;x2/&gt;関数は病的である</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>the &lt;x1/&gt;foo&lt;x2/&gt; function has side-effects (the call to &lt;x3/&gt;Core.println&lt;x4/&gt;), and it is undefined exactly
when, how often or how many times these side-effects will occur</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T032206Z" creationid="hsugawa8651" creationdate="20181116T032206Z">
        <seg>&lt;x1/&gt;foo&lt;x2/&gt;関数は副作用(&lt;x3/&gt;Core.println&lt;x4/&gt;の呼び出し)を持っており、厳密には定義されていません。 これらの副作用が何回、何回発生するか、何回起こるか</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>the empty tuple</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T150252Z" creationid="hsugawa8651" creationdate="20181117T150252Z">
        <seg>空のタプル</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>the expression arguments, which may be symbols, other expressions, or literal values:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T115220Z" creationid="hsugawa8651" creationdate="20181118T115217Z">
        <seg>式引数はシンボル、その他の式、またはリテラル値であることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>the identity operation</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T063039Z" creationid="hsugawa8651" creationdate="20181113T131949Z">
        <seg>恒等演算</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>the number of dimensions of &lt;x1/&gt;A&lt;x2/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154242Z" creationid="hsugawa8651" creationdate="20181109T154242Z">
        <seg>&lt;x1/&gt;A&lt;x2/&gt;の次元数</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>the number of elements in &lt;x1/&gt;A&lt;x2/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154235Z" creationid="hsugawa8651" creationdate="20181109T154235Z">
        <seg>&lt;x1/&gt;A&lt;x2/&gt;のエレメント数</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>the size of &lt;x1/&gt;A&lt;x2/&gt; along dimension &lt;x3/&gt;n&lt;x4/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154250Z" creationid="hsugawa8651" creationdate="20181109T154250Z">
        <seg>&lt;x3/&gt;n&lt;x4/&gt;の寸法に沿って&lt;x1/&gt;A&lt;x2/&gt;の大きさ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>the squared magnitude of &lt;x1/&gt;x&lt;x2/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T073001Z" creationid="hsugawa8651" creationdate="20181118T095927Z">
        <seg>&lt;x1/&gt;x&lt;x2/&gt; の大きさの２乗</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>the stride (linear index distance between adjacent elements) along dimension &lt;x1/&gt;k&lt;x2/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154305Z" creationid="hsugawa8651" creationdate="20181109T154305Z">
        <seg>寸法&lt;x1/&gt;k&lt;x2/&gt;に沿っての歩幅(隣接する要素間の線形指数の距離)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>the type of the elements contained in &lt;x1/&gt;A&lt;x2/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154231Z" creationid="hsugawa8651" creationdate="20181109T154231Z">
        <seg>&lt;x1/&gt;A&lt;x2/&gt;に含まれるエレメントのタイプ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>then the result of both &lt;x1/&gt;f()&lt;x2/&gt; and &lt;x3/&gt;f(1,2)&lt;x4/&gt; is &lt;x5/&gt;-3&lt;x6/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T023246Z" creationid="hsugawa8651" creationdate="20181120T023246Z">
        <seg>f()とf(1,2)の結果は両方とも-3です。言い換えれば、オプション引数は、その関数の特定のメソッドではなく、関数自体に結び付けられます。オプション引数の型によって、どのメソッドが呼び出されるかが変わります。オプション引数がグローバル変数で定義されている場合、オプション引数の型は実行時に変更されることさえあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>this argument may be declared as &lt;x1/&gt;Ptr{Cvoid}&lt;x2/&gt;, if it really is just an unknown pointer</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T151527Z" creationid="hsugawa8651" creationdate="20181117T151527Z">
        <seg>この引数は、実際には未知のポインタである場合、&lt;x1/&gt;Ptr{Cvoid}&lt;x2/&gt;として宣言されることがあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>times</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T094753Z" creationid="hsugawa8651" creationdate="20181118T094753Z">
        <seg>乗算</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>translates to the following three methods:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T022911Z" creationid="hsugawa8651" creationdate="20181120T022911Z">
        <seg>これは以下の3つのメソッドに変換されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>true : odd(n - 1);

julia&gt; odd(n) = (n == 0) ?</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T022334Z" creationid="hsugawa8651" creationdate="20181116T022334Z">
        <seg>true : odd(n - 1);

julia&gt; odd(n) = (n == 0) ?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>true&lt;x1/&gt; (1)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T110222Z" creationid="hsugawa8651" creationdate="20181112T110222Z">
        <seg>true&lt;x1/&gt; (1)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>truncated division; quotient rounded towards zero</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T071745Z" creationid="hsugawa8651" creationdate="20181114T031243Z">
        <seg>整商; 0に向かって丸めた商 </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>type annotation or &lt;x1/&gt;`typeassert`&lt;x2/&gt;, depending on context</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T063552Z" creationid="hsugawa8651" creationdate="20181114T063552Z">
        <seg>コンテキストに応じて、タイプの注釈または&lt;x1/&gt;`テーペアセルト'&lt;x2/&gt;を入力します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>typedef returntype (*functiontype)(argumenttype, ...)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T133852Z" creationid="hsugawa8651" creationdate="20181117T133852Z">
        <seg>typedef returntype (*functiontype)(argumenttype, ...)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>typeof(x)&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T031111Z" creationid="hsugawa8651" creationdate="20181114T031111Z">
        <seg>typeof(x)&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>unary minus</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T094738Z" creationid="hsugawa8651" creationdate="20181118T094738Z">
        <seg>単項マイナス</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>unary plus</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T063030Z" creationid="hsugawa8651" creationdate="20181118T094734Z">
        <seg>単項プラス</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>unsigned char&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T150854Z" creationid="hsugawa8651" creationdate="20181117T150854Z">
        <seg>unsigned char&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>v("yes") : v("no")
no
"no"</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T230210Z" creationid="hsugawa8651" creationdate="20181109T230210Z">
        <seg>v("yes") : v("no")
no
"no"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>v("yes") : v("no")
yes
"yes"

julia&gt; 1 &gt; 2 ?</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T230206Z" creationid="hsugawa8651" creationdate="20181109T230206Z">
        <seg>v("yes") : v("no")
yes
"yes"

julia&gt; 1 &gt; 2 ?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>va_arg&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T151724Z" creationid="hsugawa8651" creationdate="20181117T151724Z">
        <seg>va_arg&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>vector literal constructor (calling &lt;x1/&gt;&lt;x2/&gt;&lt;x3/&gt;(@ref Base.vect))</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T063111Z" creationid="hsugawa8651" creationdate="20181114T063111Z">
        <seg>ベクトルリテラルコンストラクタ(calling&lt;x1/&gt;&lt;x2/&gt;&lt;x3/&gt;(@ref Base.vect))</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>vertical concatenation (calling &lt;x1/&gt;`vcat`&lt;x2/&gt; or &lt;x3/&gt;`hvcat`&lt;x4/&gt;)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T063117Z" creationid="hsugawa8651" creationdate="20181114T063117Z">
        <seg>垂直連結(calling&lt;x1/&gt;`vcat'&lt;x2/&gt;or&lt;x3/&gt;`ホフカト'&lt;x4/&gt;)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>void qsort(void *base, size_t nmemb, size_t size,
           int (*compare)(const void*, const void*));</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T133922Z" creationid="hsugawa8651" creationdate="20181117T133922Z">
        <seg>void qsort(void *base, size_t nmemb, size_t size,
           int (*compare)(const void*, const void*));</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>void*&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T151521Z" creationid="hsugawa8651" creationdate="20181117T151521Z">
        <seg>void*&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>void&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T151756Z" creationid="hsugawa8651" creationdate="20181117T151756Z">
        <seg>void&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>warning</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T155745Z" creationid="hsugawa8651" creationdate="20181109T155745Z">
        <seg>warning</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>warning
A return type of &lt;x1/&gt;Union{}&lt;x2/&gt; means the function will not return i.e. C++11 &lt;x3/&gt;[[noreturn]]&lt;x4/&gt; or C11
&lt;x5/&gt;_Noreturn&lt;x6/&gt; (e.g. &lt;x7/&gt;jl_throw&lt;x8/&gt; or &lt;x9/&gt;longjmp&lt;x10/&gt;).</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T151023Z" creationid="hsugawa8651" creationdate="20181117T151023Z">
        <seg>警告 &lt;x1/&gt;Union{}&lt;x2/&gt;の戻り型は、関数がi.すなわちC++11&lt;x3/&gt;[noreturn]&lt;x4/&gt;またはC11を返すことはないことを意味します。 &lt;x5/&gt;_Noreturn&lt;x6/&gt;(例:&lt;x7/&gt;jl_throw&lt;x8/&gt;または&lt;x9/&gt;longjmp&lt;x10/&gt;)。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>warning
For string arguments (&lt;x1/&gt;char*&lt;x2/&gt;) the Julia type should be &lt;x3/&gt;Cstring&lt;x4/&gt; (if NUL- terminated data is
expected) or either &lt;x5/&gt;Ptr{Cchar}&lt;x6/&gt; or &lt;x7/&gt;Ptr{UInt8}&lt;x8/&gt; otherwise (these two pointer types have the same
effect), as described above, not &lt;x9/&gt;String&lt;x10/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T151012Z" creationid="hsugawa8651" creationdate="20181117T151012Z">
        <seg>警告 文字列引数(&lt;x1/&gt;char*&lt;x2/&gt;)では、Julia型は&lt;x3/&gt;Cstring&lt;x4/&gt;(NUL-terminated dataがある場合)を指定する必要があります。 期待されるか、または&lt;x5/&gt;Ptr{Cchar}&lt;x6/&gt;または&lt;x7/&gt;Ptr{UInt8}&lt;x8/&gt;それ以外の場合(これらの2つのポインタタイプは同じですが、これらのポインタは同じです)。 上述のように、効果は&lt;x9/&gt;String&lt;x10/&gt;ではありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>warning
Fortran compilers &lt;x1/&gt;may&lt;x2/&gt; also add other hidden arguments for pointers, assumed-shape (&lt;x3/&gt;:&lt;x4/&gt;)
and assumed-size (&lt;x5/&gt;*&lt;x6/&gt;) arrays.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T151118Z" creationid="hsugawa8651" creationdate="20181117T151118Z">
        <seg>警告 Fortranコンパイラ&lt;x1/&gt;はまた、ポインタに対して他の隠れた引数を追加することができます(&lt;x3/&gt;:&lt;x4/&gt;)。 そして、サイズは(&lt;x5/&gt;*&lt;x6/&gt;)であると考えられる。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>warning
Julia's &lt;x1/&gt;Char&lt;x2/&gt; type is 32 bits, which is not the same as the wide character type (&lt;x3/&gt;wchar_t&lt;x4/&gt; or
&lt;x5/&gt;wint_t&lt;x6/&gt;) on all platforms.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T151018Z" creationid="hsugawa8651" creationdate="20181117T151018Z">
        <seg>警告 Juliaの&lt;x1/&gt;Char&lt;x2/&gt;型は32ビットで、ワイド文字タイプ(&lt;x3/&gt;wchar_t&lt;x4/&gt;または すべてのプラットフォームで、&lt;x5/&gt;wint_t&lt;x6/&gt;)。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>warning
Rounding is generally only correct for basic arithmetic functions (&lt;x1/&gt;`+()`&lt;x2/&gt;, &lt;x3/&gt;`-()`&lt;x4/&gt;,
&lt;x5/&gt;`*()`&lt;x6/&gt;, &lt;x7/&gt;`/()`&lt;x8/&gt; and &lt;x9/&gt;`sqrt()`&lt;x10/&gt;) and type conversion operations.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T034954Z" creationid="hsugawa8651" creationdate="20181120T034917Z">
        <seg>warning
端数処理は通常基本的な算術関数（&lt;x1/&gt;`+()`&lt;x2/&gt;、&lt;x3/&gt;`-()`&lt;x4/&gt;,、&lt;x5/&gt;`*()`&lt;x6/&gt;、&lt;x7/&gt;`/()`&lt;x8/&gt;、&lt;x9/&gt;`sqrt()`&lt;x10/&gt;）および 型変換処理においてのみ正常に機能します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>where &lt;x1/&gt;Style12&lt;x2/&gt; is the &lt;x3/&gt;BroadcastStyle&lt;x4/&gt; you want to choose for outputs involving
arguments of &lt;x5/&gt;Style1&lt;x6/&gt; and &lt;x7/&gt;Style2&lt;x8/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T131746Z" creationid="hsugawa8651" creationdate="20181113T131746Z">
        <seg>ここで、&lt;x1/&gt;Style12&lt;x2/&gt;は、出力を選択する&lt;x3/&gt;BroadcastStyle&lt;x4/&gt;である。 &lt;x5/&gt;Style1&lt;x6/&gt;および&lt;x7/&gt;Style2&lt;x8/&gt;の引数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>where each &lt;x1/&gt;I_k&lt;x2/&gt; may be a scalar integer, an array of integers, or any other
&lt;x3/&gt;&lt;x4/&gt;&lt;x5/&gt;(@ref man-supported-index-types).</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T122241Z" creationid="hsugawa8651" creationdate="20181109T155116Z">
        <seg>ここで、各&lt;x1/&gt;I_k&lt;x2/&gt;はスカラー整数、整数の配列、またはその他のいずれかである。 &lt;x3/&gt;&lt;x4/&gt;&lt;x5/&gt;(@ref man-supported-index-types)。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>where each &lt;x1/&gt;I_k&lt;x2/&gt; may be a scalar integer, an array of integers, or any other
&lt;x3/&gt;&lt;x4/&gt;&lt;x5/&gt;(@ref man-supported-index-types). This includes
&lt;x6/&gt;`Colon`&lt;x7/&gt; (&lt;x8/&gt;:&lt;x9/&gt;) to select all indices within the entire dimension,
ranges of the form &lt;x10/&gt;a:c&lt;x11/&gt; or &lt;x12/&gt;a:b:c&lt;x13/&gt; to select contiguous or strided
subsections, and arrays of booleans to select elements at their &lt;x14/&gt;true&lt;x15/&gt; indices.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T134826Z" creationid="hsugawa8651" creationdate="20181117T134826Z">
        <seg>ここで、各&lt;x1/&gt;I_k&lt;x2/&gt;はスカラー整数、整数の配列、またはその他のいずれかである。 &lt;x3/&gt;&lt;x4/&gt;&lt;x5/&gt;(@ref manサポートされているインデックス・タイプ)。これには、以下のものが含まれます。 &lt;x6/&gt;「コロン」&lt;x7/&gt;(&lt;x8/&gt;:&lt;x9/&gt;)は、次元全体のすべてのインデックスを選択するために使用されます。 &lt;x10/&gt;a:c&lt;x11/&gt;または&lt;x12/&gt;a:b:c&lt;x13/&gt;to select連続またはストライドされたものを選択するための範囲 サブセクションは、&lt;x14/&gt;真の&lt;x15/&gt;インデックスで選択要素を選択するためのブール演算の配列です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>which shows that &lt;x1/&gt;f&lt;x2/&gt; has two methods, one taking two &lt;x3/&gt;Float64&lt;x4/&gt; arguments and one taking arguments
of type &lt;x5/&gt;Number&lt;x6/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T014043Z" creationid="hsugawa8651" creationdate="20181120T014043Z">
        <seg>すると表示されるのは、fが二つのメソッドを持っていて、一方は2つのFloat64の引数を取り、他方は型がNumberの引数を取ることです。 </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>while&lt;x1/&gt; loop is first reached, the body is never evaluated.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T124425Z" creationid="hsugawa8651" creationdate="20181118T124425Z">
        <seg>一方、&lt;x1/&gt;ループは最初に到達し、ボディは評価されません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>while&lt;x1/&gt; loop:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T124416Z" creationid="hsugawa8651" creationdate="20181118T124416Z">
        <seg>while&lt;x1/&gt; loop:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>width = Ref{Cint}(0)
range = Ref{Cfloat}(0)
ccall(:foo, Cvoid, (Ref{Cint}, Ref{Cfloat}), width, range)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T151831Z" creationid="hsugawa8651" creationdate="20181117T151831Z">
        <seg>width = Ref{Cint}(0)
range = Ref{Cfloat}(0)
ccall(:foo, Cvoid, (Ref{Cint}, Ref{Cfloat}), width, range)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>width=device-width, initial-scale=1.0</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181119T072213Z" creationid="hsugawa8651" creationdate="20181119T072213Z">
        <seg>width=device-width, initial-scale=1.0</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>will add documentation to &lt;x1/&gt;f(x)&lt;x2/&gt; when &lt;x3/&gt;condition()&lt;x4/&gt; is &lt;x5/&gt;true&lt;x6/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T020134Z" creationid="hsugawa8651" creationdate="20181116T020134Z">
        <seg>will add documentation to &lt;x1/&gt;f(x)&lt;x2/&gt; when &lt;x3/&gt;condition()&lt;x4/&gt; is &lt;x5/&gt;true&lt;x6/&gt;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>will behave as if the following were written:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181117T134254Z" creationid="hsugawa8651" creationdate="20181117T134254Z">
        <seg>次のような動作をします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>will contain a literal newline at the beginning.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T083157Z" creationid="hsugawa8651" creationdate="20181120T083157Z">
        <seg>これは最初にリテラル改行を含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>with space-separated expressions, horizontal concatenation (calling &lt;x1/&gt;`hcat`&lt;x2/&gt; or &lt;x3/&gt;`hvcat`&lt;x4/&gt;)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T063141Z" creationid="hsugawa8651" creationdate="20181114T063141Z">
        <seg>空間的に分離された表現で、水平連結(calling&lt;x1/&gt;`ヘカト'&lt;x2/&gt;または&lt;x3/&gt;'ホフカト''&lt;x4/&gt;)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>would be called only when the number of &lt;x1/&gt;indexes&lt;x2/&gt; matches the dimensionality of the array.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T022839Z" creationid="hsugawa8651" creationdate="20181120T022839Z">
        <seg>&lt;x1/&gt;indexes&lt;x2/&gt;の数が配列の次元の数と一致する場合にのみ呼び出されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>writer = @async write(process, "data")
reader = @async do_compute(read(process, String))
wait(process)
fetch(reader)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T020332Z" creationid="hsugawa8651" creationdate="20181116T020332Z">
        <seg>writer = @async write(process, "data")
reader = @async do_compute(read(process, String))
wait(process)
fetch(reader)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>x % T&lt;x1/&gt; converts an integer &lt;x2/&gt;x&lt;x3/&gt; to a value of integer type &lt;x4/&gt;T&lt;x5/&gt; congruent to &lt;x6/&gt;x&lt;x7/&gt; modulo &lt;x8/&gt;2^n&lt;x9/&gt;,
where &lt;x10/&gt;n&lt;x11/&gt; is the number of bits in &lt;x12/&gt;T&lt;x13/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T070427Z" creationid="hsugawa8651" creationdate="20181114T031040Z">
        <seg>x % T&lt;x1/&gt; は、整数 &lt;x2/&gt;x&lt;x3/&gt; を、 &lt;x6/&gt;x&lt;x7/&gt; を法とする&lt;x8/&gt;2^n&lt;x9/&gt; （ &lt;x10/&gt;n&lt;x11/&gt;  は &lt;x12/&gt;T&lt;x13/&gt;のビット数）に一致する整数型 &lt;x4/&gt;T&lt;x5/&gt; の値に変換します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>x % y&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T132137Z" creationid="hsugawa8651" creationdate="20181113T132137Z">
        <seg>x % y&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>x &amp; y&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T132238Z" creationid="hsugawa8651" creationdate="20181113T132238Z">
        <seg>x &amp; y&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>x * y * z *... calls this function with multiple
  arguments, i.e. *(x,y,z...).</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181116T020115Z" creationid="hsugawa8651" creationdate="20181116T020115Z">
        <seg>x * y * z *... calls this function with multiple
  arguments, i.e. *(x,y,z...).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>x * y&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T132028Z" creationid="hsugawa8651" creationdate="20181113T132028Z">
        <seg>x * y&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>x + y&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T132002Z" creationid="hsugawa8651" creationdate="20181113T132002Z">
        <seg>x + y&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>x - y&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T132014Z" creationid="hsugawa8651" creationdate="20181113T132014Z">
        <seg>x - y&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>x .+ 3 .* x.^2&lt;x1/&gt; are
equivalent to nested dot calls &lt;x2/&gt;(+).(x, (*).(3, (^).(x, 2)))&lt;x3/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T132615Z" creationid="hsugawa8651" creationdate="20181113T132609Z">
        <seg>x.+3.*x.^2&lt;x1/&gt;は次のとおりです。 ネストされたドット呼び出し&lt;x2/&gt;(+)(x,(*).(3,(^).(x, 2)).())&lt;x3/&gt;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>x / y, truncated to an integer</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T132109Z" creationid="hsugawa8651" creationdate="20181113T132109Z">
        <seg>x/y、整数に切り捨てられます</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>x / y&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T132041Z" creationid="hsugawa8651" creationdate="20181113T132041Z">
        <seg>x / y&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>x &lt;&lt; y&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T132319Z" creationid="hsugawa8651" creationdate="20181113T132319Z">
        <seg>x &lt;&lt; y&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>x = rand(1:500, 100)
k = 50
k2 = 50:100
s = sort(x; alg=QuickSort)
ps = sort(x; alg=PartialQuickSort(k))
qs = sort(x; alg=PartialQuickSort(k2))
map(issorted, (s, ps, qs))             &lt;x1/&gt; =&gt; (true, false, false)
map(x-&gt;issorted(x[1:k]), (s, ps, qs))  &lt;x2/&gt; =&gt; (true, true, false)
map(x-&gt;issorted(x[k2]), (s, ps, qs))   &lt;x3/&gt; =&gt; (true, false, true)
s[1:k] == ps[1:k]                      &lt;x4/&gt; =&gt; true
s[k2] == qs[k2]                        &lt;x5/&gt; =&gt; true</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T064105Z" creationid="hsugawa8651" creationdate="20181114T064105Z">
        <seg>x = rand(1:500, 100)
k = 50
k2 = 50:100
s = sort(x; alg=QuickSort)
ps = sort(x; alg=PartialQuickSort(k))
qs = sort(x; alg=PartialQuickSort(k2))
map(issorted, (s, ps, qs))             &lt;x1/&gt; =&gt; (true, false, false)
map(x-&gt;issorted(x[1:k]), (s, ps, qs))  &lt;x2/&gt; =&gt; (true, true, false)
map(x-&gt;issorted(x[k2]), (s, ps, qs))   &lt;x3/&gt; =&gt; (true, false, true)
s[1:k] == ps[1:k]                      &lt;x4/&gt; =&gt; true
s[k2] == qs[k2]                        &lt;x5/&gt; =&gt; true</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>x &gt;&gt; y&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T132313Z" creationid="hsugawa8651" creationdate="20181113T132313Z">
        <seg>x &gt;&gt; y&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>x &gt;&gt;&gt; y&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T132304Z" creationid="hsugawa8651" creationdate="20181113T132304Z">
        <seg>x &gt;&gt;&gt; y&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>x \ y&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T132113Z" creationid="hsugawa8651" creationdate="20181113T132113Z">
        <seg>x \ y&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>x \| y&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T132246Z" creationid="hsugawa8651" creationdate="20181113T132246Z">
        <seg>x \| y&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>x ^ y&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T132128Z" creationid="hsugawa8651" creationdate="20181113T132128Z">
        <seg>x ^ y&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>x ÷ y&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T132058Z" creationid="hsugawa8651" creationdate="20181113T132058Z">
        <seg>x ÷ y&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>x ⊻ y&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181113T132255Z" creationid="hsugawa8651" creationdate="20181113T132255Z">
        <seg>x ⊻ y&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>x*2^n&lt;x1/&gt; computed efficiently for integer values of &lt;x2/&gt;n&lt;x3/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T073627Z" creationid="hsugawa8651" creationdate="20181118T100034Z">
        <seg>整数値&lt;x2/&gt;n&lt;x3/&gt; に対して効率的に計算された x*2^n&lt;x1/&gt; の値</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>x&lt;x1/&gt; and &lt;x2/&gt;y&lt;x3/&gt; are identical</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T064515Z" creationid="hsugawa8651" creationdate="20181114T030543Z">
        <seg>x&lt;x1/&gt; と &lt;x2/&gt;y&lt;x3/&gt; は等価か </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>x&lt;x1/&gt; and &lt;x2/&gt;y&lt;x3/&gt;, avoiding overflow:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T125803Z" creationid="hsugawa8651" creationdate="20181110T025755Z">
        <seg>けれども、実行順序を制御する場合、returnは役に立ちます。 例えば、直角三角形の斜辺を、その他の二辺 x ,yから、桁あふれをさけながら、計算する場合を考えてみましょう。x&lt;x1/&gt;と&lt;x2/&gt;y&lt;x3/&gt;はオーバーフローを回避します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>x&lt;x1/&gt; is a finite number</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T064524Z" creationid="hsugawa8651" creationdate="20181114T030547Z">
        <seg>x&lt;x1/&gt; は有限数であるか 　　</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>x&lt;x1/&gt; is infinite</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T064540Z" creationid="hsugawa8651" creationdate="20181114T030555Z">
        <seg>x&lt;x1/&gt; は無限であるか</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>x&lt;x1/&gt; is not a number</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T064558Z" creationid="hsugawa8651" creationdate="20181114T030601Z">
        <seg>x は非数字か 　</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>| | | | | | |/ _` |  |
  | | |_| | | | (_| |  |  Version 0.5.0-dev+2440 (2016-02-01 02:22 UTC)
 _/ |\__'_|_|_|\__'_|  |  Commit 2bb94d6 (11 days old master)
|__/                   |  x86_64-apple-darwin13.1.0

julia&gt; 1 + 2
3

julia&gt; ans
3</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T000521Z" creationid="hsugawa8651" creationdate="20181120T000521Z">
        <seg>| | | | | | |/ _` |  |
  | | |_| | | | (_| |  |  Version 0.5.0-dev+2440 (2016-02-01 02:22 UTC)
 _/ |\__'_|_|_|\__'_|  |  Commit 2bb94d6 (11 days old master)
|__/                   |  x86_64-apple-darwin13.1.0

julia&gt; 1 + 2
3

julia&gt; ans
3</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg> </seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T120317Z" creationid="hsugawa8651" creationdate="20181118T120317Z">
        <seg> </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>    &lt;x1/&gt;strides(A)[i]&lt;x2/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T001118Z" creationid="hsugawa8651" creationdate="20181120T001118Z">
        <seg>    &lt;x1/&gt;strides(A)[i]&lt;x2/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>⊘&lt;x1/&gt; to complex integral values creates an instance of &lt;x2/&gt;Complex{OurRational}&lt;x3/&gt; -- a complex
number whose real and imaginary parts are rationals:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T124213Z" creationid="hsugawa8651" creationdate="20181118T124213Z">
        <seg>θ&lt;x1/&gt;から複雑な積分値は、&lt;x2/&gt;Complex{OurRational}&lt;x3/&gt;のインスタンスを生成する。 実部と虚部が合理的である数</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>⊻&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181114T032333Z" creationid="hsugawa8651" creationdate="20181114T032333Z">
        <seg>⊻&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>✓</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181112T110039Z" creationid="hsugawa8651" creationdate="20181112T110039Z">
        <seg>✓</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>你好!</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T224500Z" creationid="hsugawa8651" creationdate="20181109T224500Z">
        <seg>你好!</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>안녕하세요?</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T224507Z" creationid="hsugawa8651" creationdate="20181109T224507Z">
        <seg>안녕하세요?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>안녕하세요?")' &gt; &lt;x1/&gt;/.julia/config/startup.jl
$ julia
Greetings!</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T224503Z" creationid="hsugawa8651" creationdate="20181109T224503Z">
        <seg>안녕하세요?")' &gt; &lt;x1/&gt;/.julia/config/startup.jl
$ julia
Greetings!</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>안녕하세요?")' &gt; &lt;x1/&gt;/.juliarc.jl
$ julia
Greetings!</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181120T000641Z" creationid="hsugawa8651" creationdate="20181120T000641Z">
        <seg>안녕하세요?")' &gt; &lt;x1/&gt;/.juliarc.jl
$ julia
Greetings!</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>안녕하세요?")' &gt; ~/.julia/config/startup.jl
$ julia
Greetings!</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181118T174105Z" creationid="hsugawa8651" creationdate="20181118T174105Z">
        <seg>안녕하세요?")' &gt; &lt;x1/&gt;/.julia/config/startup.jl
$ julia
Greetings!</seg>
      </tuv>
    </tu>
<!-- Alternative translations -->
  </body>
</tmx>
