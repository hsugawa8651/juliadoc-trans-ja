<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE tmx SYSTEM "tmx11.dtd">
<tmx version="1.1">
  <header creationtool="OmegaT" o-tmf="OmegaT TMX" adminlang="EN-US" datatype="plaintext" creationtoolversion="3.6.0_10_r10436" segtype="sentence" srclang="EN-US"/>
  <body>
<!-- Default translations -->
    <tu>
      <tuv lang="EN-US">
        <seg>!&lt;x1/&gt; indicates that it will mutate or destroy the
value of one or more of its arguments (compare, for example, &lt;x2/&gt;`sort`&lt;x3/&gt; and &lt;x4/&gt;`sort!`&lt;x5/&gt;).</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154213Z" creationid="hsugawa8651" creationdate="20181109T154213Z">
        <seg>&lt;x1/&gt;は、それが突然変異または破壊されることを示しています。 一つ以上の引数の値(例えば、&lt;x2/&gt;`sort'&lt;x3/&gt;、&lt;x4/&gt;`sort!"&lt;x5/&gt;)。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An array is a collection of objects stored in a multi-dimensional grid.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154138Z" creationid="hsugawa8651" creationdate="20181109T154138Z">
        <seg>配列は、多次元グリッドに格納されたオブジェクトの集合です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Arguments to &lt;x3/&gt;`@cfunction`&lt;x4/&gt; are as follows:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T153935Z" creationid="hsugawa8651" creationdate="20181109T153935Z">
        <seg>&lt;x3/&gt;`@cfunction`&lt;x4/&gt;への引数は次のとおりです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As such, it's also possible to define custom array types by inheriting
from &lt;x1/&gt;`AbstractArray`&lt;x2/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154132Z" creationid="hsugawa8651" creationdate="20181109T154132Z">
        <seg>このように、カスタム配列タイプを継承することによって、カスタム配列タイプを定義することも可能です。 &lt;x1/&gt;'AbstractArray'&lt;x2/&gt;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Callees must make explicit copies to ensure that they don't modify inputs that
they don't intend to change.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154219Z" creationid="hsugawa8651" creationdate="20181109T154219Z">
        <seg>呼び出し側は、入力を変更しないことを確実にするために、明示的なコピーを作成する必要があります。 変化するつもりはありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Currently, only the platform-default C calling convention is supported.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T153954Z" creationid="hsugawa8651" creationdate="20181109T153954Z">
        <seg>現在、プラットフォームのデフォルトのC呼び出し規約のみがサポートされています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, to match C prototypes of the form:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T153924Z" creationid="hsugawa8651" creationdate="20181109T153924Z">
        <seg>たとえば、フォームのCプロトタイプに一致させるには、次のようにします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For most computational purposes, arrays should contain
objects of a more specific type, such as &lt;x3/&gt;`Float64`&lt;x4/&gt; or &lt;x5/&gt;`Int32`&lt;x6/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154148Z" creationid="hsugawa8651" creationdate="20181109T154148Z">
        <seg>For most computational purposes, arrays should contain
objects of a more specific type, such as &lt;x3/&gt;`Float64`&lt;x4/&gt; or &lt;x5/&gt;`Int32`&lt;x6/&gt;.For most computational purposes, arrays should contain
objects of a more specific type, such as &lt;x3/&gt;`Float64`&lt;x4/&gt; or &lt;x5/&gt;`Int32`&lt;x6/&gt;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In Julia, all arguments to functions are &lt;x1/&gt;passed by
sharing&lt;x2/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154159Z" creationid="hsugawa8651" creationdate="20181109T154159Z">
        <seg>Juliaでは、関数に対するすべての引数は、&lt;x1/&gt;に渡されます。 共有&lt;x2/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In general, unlike many other technical computing languages, Julia does not expect programs to
be written in a vectorized style for performance.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154152Z" creationid="hsugawa8651" creationdate="20181109T154152Z">
        <seg>一般的に、多くの他の技術計算言語とは異なり、Juliaはプログラムを期待していない。 パフォーマンスを向上させるためにベクトル化されたスタイルで記述する必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the following list of
such functions, calls with a &lt;x1/&gt;dims...&lt;x2/&gt; argument can either take a single tuple of dimension sizes
or a series of dimension sizes passed as a variable number of arguments.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154340Z" creationid="hsugawa8651" creationdate="20181109T154340Z">
        <seg>以下の一覧 そのような関数は、&lt;x1/&gt;ディムスを持つ関数です。&lt;x2/&gt;引数を指定すると、1組の寸法サイズをとることができます。 または、変数の数として渡される一連の次元サイズを指定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the most general case,
an array may contain objects of type &lt;x1/&gt;`Any`&lt;x2/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154143Z" creationid="hsugawa8651" creationdate="20181109T154143Z">
        <seg>最も一般的なケースでは 配列は、&lt;x1/&gt;'のタイプのオブジェクトを含むことができます。&lt;x/&gt;&lt;x2/&gt;&lt;x/&gt;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It is possible to pass Julia functions to native C functions that accept function pointer arguments.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T153908Z" creationid="hsugawa8651" creationdate="20181109T153908Z">
        <seg>関数ポインタ引数を受け入れるネイティブC関数にJulia関数を渡すことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Julia does not treat arrays in any special way.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154124Z" creationid="hsugawa8651" creationdate="20181109T154124Z">
        <seg>Juliaは、特別な方法でアレイを処理しません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Julia's compiler uses type inference and generates
optimized code for scalar array indexing, allowing programs to be written in a style that is convenient
and readable, without sacrificing performance, and using less memory at times.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154155Z" creationid="hsugawa8651" creationdate="20181109T154155Z">
        <seg>Juliaのコンパイラーは型推論を使用し スカラー配列インデックスの最適化されたコードで、プログラムをスタイルに便利なスタイルで記述できるようにします。 パフォーマンスを犠牲にすることなく読み取り可能で、時にはメモリを減らすことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Julia, like most technical computing languages, provides a first-class array implementation.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154040Z" creationid="hsugawa8651" creationdate="20181109T154040Z">
        <seg>Juliaは、ほとんどの技術的なコンピューティング言語と同様、一流のアレイ実装を提供しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Like ccall, all of these arguments will be evaluated at compile-time, when the containing method is defined.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T153944Z" creationid="hsugawa8651" creationdate="20181109T153944Z">
        <seg>ccallと同様に、これらの引数はすべてコンパイル時に評価され、containingメソッドが定義されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Many functions for constructing and initializing arrays are provided.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154333Z" creationid="hsugawa8651" creationdate="20181109T154333Z">
        <seg>配列を作成して初期化するための多くの関数が用意されています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Many non- mutating functions are implemented by
calling a function of the same name with an added &lt;x6/&gt;!&lt;x7/&gt; at the end on an explicit
copy of the input, and returning that copy.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154222Z" creationid="hsugawa8651" creationdate="20181109T154222Z">
        <seg>多くの非重複関数は、次のように実装されています。 明示的に最後に&lt;x6/&gt;!&lt;x7/&gt;を追加して、同じ名前の関数を呼び出します。 入力のコピーを返し、そのコピーを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Most
technical computing languages pay a lot of attention to their array implementation at the expense
of other containers.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154112Z" creationid="hsugawa8651" creationdate="20181109T154112Z">
        <seg>ほとんど テクニカル・コンピューティング言語は、アレイ実装に多大な関心を払っています。 その他の容器。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>See the &lt;x3/&gt;&lt;x4/&gt;&lt;x5/&gt;(@ref man-interface-array) for more details
on implementing a custom array type.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154135Z" creationid="hsugawa8651" creationdate="20181109T154135Z">
        <seg>詳細については、&lt;x3/&gt;&lt;x4/&gt;&lt;x5/&gt;(@ref man interface array)を参照してください。 カスタム・アレイ・タイプの実装です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The array library is implemented
almost completely in Julia itself, and derives its performance from the compiler, just like any
other code written in Julia.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154129Z" creationid="hsugawa8651" creationdate="20181109T154129Z">
        <seg>アレイ・ライブラリーは実装されています。 ほとんどの場合、ジュリア自身は、コンパイラーからのパフォーマンスを導き出し その他のコードはジュリアに書かれています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The macro &lt;x1/&gt;`@cfunction`&lt;x2/&gt; generates the C-compatible function pointer for a call to a
Julia function.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T153931Z" creationid="hsugawa8651" creationdate="20181109T153931Z">
        <seg>マクロ&lt;x1/&gt;`@cfunction`&lt;x2/&gt;は、コールのC互換関数ポインタを生成します。 Julia関数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This means that
&lt;x1/&gt;@cfunction&lt;x2/&gt;-generated pointers cannot be used in calls where WINAPI expects &lt;x3/&gt;stdcall&lt;x4/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T153957Z" creationid="hsugawa8651" creationdate="20181109T153957Z">
        <seg>つまり &lt;x1/&gt;@cfunction&lt;x2/&gt;-生成されたポインタは、WINAPIが&lt;x3/&gt;stdcall&lt;x4/&gt;を想定している呼び出しでは使用できません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`axes(A)`&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T153250Z" creationid="hsugawa8651" creationdate="20181109T153250Z">
        <seg>`axes(A)`&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`axes(A,n)`&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T153255Z" creationid="hsugawa8651" creationdate="20181109T153255Z">
        <seg>`axes(A,n)`&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`eachindex(A)`&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T153302Z" creationid="hsugawa8651" creationdate="20181109T153302Z">
        <seg>`eachindex(A)`&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`length(A)`&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T153218Z" creationid="hsugawa8651" creationdate="20181109T153218Z">
        <seg>`length(A)`&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`ndims(A)`&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T153230Z" creationid="hsugawa8651" creationdate="20181109T153230Z">
        <seg>`ndims(A)`&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`size(A)`&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T153236Z" creationid="hsugawa8651" creationdate="20181109T153236Z">
        <seg>`size(A)`&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`size(A,n)`&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T153242Z" creationid="hsugawa8651" creationdate="20181109T153242Z">
        <seg>`size(A,n)`&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>a range expressing the valid indices along dimension &lt;x1/&gt;n&lt;x2/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154257Z" creationid="hsugawa8651" creationdate="20181109T154257Z">
        <seg>寸法&lt;x1/&gt;n&lt;x2/&gt;に沿って有効なインデックスを表現する範囲</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>a tuple containing the dimensions of &lt;x1/&gt;A&lt;x2/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154246Z" creationid="hsugawa8651" creationdate="20181109T154246Z">
        <seg>&lt;x1/&gt;A&lt;x2/&gt;の次元を含むタプル</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>a tuple containing the valid indices of &lt;x1/&gt;A&lt;x2/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154254Z" creationid="hsugawa8651" creationdate="20181109T154254Z">
        <seg>&lt;x1/&gt;A&lt;x2/&gt;の有効なインデックスを含むタプル</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>a tuple of the strides in each dimension</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154309Z" creationid="hsugawa8651" creationdate="20181109T154309Z">
        <seg>各次元の上昇点の集合</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>an efficient iterator for visiting each position in &lt;x1/&gt;A&lt;x2/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154302Z" creationid="hsugawa8651" creationdate="20181109T154302Z">
        <seg>&lt;x1/&gt;A&lt;x2/&gt;の各位置を訪問するための効率的なイテレータ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>the number of dimensions of &lt;x1/&gt;A&lt;x2/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154242Z" creationid="hsugawa8651" creationdate="20181109T154242Z">
        <seg>&lt;x1/&gt;A&lt;x2/&gt;の次元数</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>the number of elements in &lt;x1/&gt;A&lt;x2/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154235Z" creationid="hsugawa8651" creationdate="20181109T154235Z">
        <seg>&lt;x1/&gt;A&lt;x2/&gt;のエレメント数</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>the size of &lt;x1/&gt;A&lt;x2/&gt; along dimension &lt;x3/&gt;n&lt;x4/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154250Z" creationid="hsugawa8651" creationdate="20181109T154250Z">
        <seg>&lt;x3/&gt;n&lt;x4/&gt;の寸法に沿って&lt;x1/&gt;A&lt;x2/&gt;の大きさ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>the stride (linear index distance between adjacent elements) along dimension &lt;x1/&gt;k&lt;x2/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154305Z" creationid="hsugawa8651" creationdate="20181109T154305Z">
        <seg>寸法&lt;x1/&gt;k&lt;x2/&gt;に沿っての歩幅(隣接する要素間の線形指数の距離)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>the type of the elements contained in &lt;x1/&gt;A&lt;x2/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154231Z" creationid="hsugawa8651" creationdate="20181109T154231Z">
        <seg>&lt;x1/&gt;A&lt;x2/&gt;に含まれるエレメントのタイプ</seg>
      </tuv>
    </tu>
<!-- Alternative translations -->
  </body>
</tmx>
