<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE tmx SYSTEM "tmx11.dtd">
<tmx version="1.1">
  <header creationtool="OmegaT" o-tmf="OmegaT TMX" adminlang="EN-US" datatype="plaintext" creationtoolversion="3.6.0_10_r10436" segtype="sentence" srclang="EN-US"/>
  <body>
<!-- Default translations -->
    <tu>
      <tuv lang="EN-US">
        <seg>!&lt;x1/&gt; indicates that it will mutate or destroy the
value of one or more of its arguments (compare, for example, &lt;x2/&gt;`sort`&lt;x3/&gt; and &lt;x4/&gt;`sort!`&lt;x5/&gt;).</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154213Z" creationid="hsugawa8651" creationdate="20181109T154213Z">
        <seg>&lt;x1/&gt;は、それが突然変異または破壊されることを示しています。 一つ以上の引数の値(例えば、&lt;x2/&gt;`sort'&lt;x3/&gt;、&lt;x4/&gt;`sort!"&lt;x5/&gt;)。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>", ["First", "Second", "Third"])
3-element Array{String,1}:
 "1.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T160149Z" creationid="hsugawa8651" creationdate="20181109T160147Z">
        <seg>1", ["First", "Second", "Third"])
3-element Array{String,1}:
 "1.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>$ echo 'println("Greetings!</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T224456Z" creationid="hsugawa8651" creationdate="20181109T224456Z">
        <seg>$ echo 'println("Greetings!</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>$ echo 'println(PROGRAM_FILE); for x in ARGS; println(x); end' &gt; script.jl
$ julia script.jl foo bar
script.jl
foo
bar</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T224352Z" creationid="hsugawa8651" creationdate="20181109T224352Z">
        <seg>$ echo 'println(PROGRAM_FILE); for x in ARGS; println(x); end' &gt; script.jl
$ julia script.jl foo bar
script.jl
foo
bar</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>$ julia --color=yes -O -- foo.jl arg1 arg2..</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T224359Z" creationid="hsugawa8651" creationdate="20181109T224359Z">
        <seg>$ julia --color=yes -O -- foo.jl arg1 arg2..</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>$ julia -e 'println(PROGRAM_FILE); for x in ARGS; println(x); end' foo bar

foo
bar</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T224343Z" creationid="hsugawa8651" creationdate="20181109T224343Z">
        <seg>$ julia -e 'println(PROGRAM_FILE); for x in ARGS; println(x); end' foo bar

foo
bar</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>$ julia script.jl arg1 arg2...</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T224325Z" creationid="hsugawa8651" creationdate="20181109T224325Z">
        <seg>$ julia script.jl arg1 arg2...</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>(@id man-array-indexing)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T155105Z" creationid="hsugawa8651" creationdate="20181109T155105Z">
        <seg>(@id man-array-indexing)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>(For comparison
operations like &lt;x5/&gt;&lt;&lt;x6/&gt;, &lt;x7/&gt;only&lt;x8/&gt; the elementwise &lt;x9/&gt;.&lt;&lt;x10/&gt; version is applicable to arrays.)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T160021Z" creationid="hsugawa8651" creationdate="20181109T160021Z">
        <seg>(比較のために &lt;x5/&gt;&lt;x6/&gt;のような操作、&lt;x7/&gt;&lt;x6/&gt;&lt;x8/&gt;&lt;x10/&gt;&lt;x8/&gt;&lt;x10/&gt;は、配列に適用されます。)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>(Non-library function calls in both C and Julia can
be inlined and thus may have even less overhead than calls to shared library functions.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T160555Z" creationid="hsugawa8651" creationdate="20181109T160555Z">
        <seg>(CとJuliaの両方での非ライブラリ関数呼び出しは 共有ライブラリ関数への呼び出しよりも、インライン化されているため、オーバーヘッドが少なくて済みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>-v&lt;x1/&gt;, &lt;x2/&gt;--version&lt;x3/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T224601Z" creationid="hsugawa8651" creationdate="20181109T224549Z">
        <seg>-v&lt;x1/&gt;, &lt;x2/&gt;--version&lt;x3/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>...</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T224510Z" creationid="hsugawa8651" creationdate="20181109T224510Z">
        <seg>...</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>:a : (@static Sys.isapple() ?</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T225018Z" creationid="hsugawa8651" creationdate="20181109T225018Z">
        <seg>:a : (@static Sys.isapple() ?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>:b : :c)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T225020Z" creationid="hsugawa8651" creationdate="20181109T225020Z">
        <seg>:b : :c)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;x1/&gt; 32-bit or 64-bit system:
julia&gt; typeof(3000000000)
Int64</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T225311Z" creationid="hsugawa8651" creationdate="20181109T225311Z">
        <seg>&lt;x1/&gt; 32-bit or 64-bit system:
julia&gt; typeof(3000000000)
Int64</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;x1/&gt; 32-bit system:
julia&gt; typeof(1)
Int32

&lt;x2/&gt; 64-bit system:
julia&gt; typeof(1)
Int64</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T225233Z" creationid="hsugawa8651" creationdate="20181109T225233Z">
        <seg>&lt;x1/&gt; 32-bit system:
julia&gt; typeof(1)
Int32

&lt;x2/&gt; 64-bit system:
julia&gt; typeof(1)
Int64</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;x1/&gt;`CartesianIndex` and arrays of `CartesianIndex` are not compatible with the&lt;x2/&gt;&lt;x3/&gt;`end` keyword to represent the last index of a dimension.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T155752Z" creationid="hsugawa8651" creationdate="20181109T155752Z">
        <seg>&lt;x1/&gt;`CartesianIndex'と「CartesianIndex」の配列は、次元の最後のインデックスを表すために、&lt;x2/&gt;&lt;x3/&gt;'end"キーワードと互換性がない。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;x12/&gt;user&lt;x13/&gt; defaults to current user,
&lt;x14/&gt;port&lt;x15/&gt; to the standard ssh port.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T224441Z" creationid="hsugawa8651" creationdate="20181109T224441Z">
        <seg>&lt;x12/&gt;ユーザ&lt;x13/&gt;デフォルトは現在のユーザになります。 &lt;x14/&gt;ポート&lt;x15/&gt;は、標準的なsshポートに対して設定されています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;x16/&gt;count&lt;x17/&gt; is the number of workers to spawn on the node, and defaults
to 1.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T224446Z" creationid="hsugawa8651" creationdate="20181109T224446Z">
        <seg>&lt;x16/&gt;count&lt;x17/&gt;は、ノード上でスポーンするワーカーの数です。デフォルトは 1です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;x21/&gt;DenseArray&lt;x22/&gt; is a
very specific example of a strided array where the elements are arranged contiguously, thus it
provides its subtypes with the appropriate definition of &lt;x23/&gt;strides&lt;x24/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T160511Z" creationid="hsugawa8651" creationdate="20181109T160511Z">
        <seg>&lt;X21/&gt;DenseArray&lt;x22/&gt;は エレメントが隣接して配置されたストローブ配列の非常に特異的な例であり、したがって は、&lt;x23/&gt;の拡張&lt;x24/&gt;の適切な定義を使用してサブタイプを提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;x28/&gt;`StridedVector`&lt;x29/&gt; and &lt;x30/&gt;`StridedMatrix`&lt;x31/&gt; are convenient aliases for many of the builtin array types that
are considered strided arrays, allowing them to dispatch to select specialized implementations that
call highly tuned and optimized BLAS and LAPACK functions using just the pointer and strides.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T160519Z" creationid="hsugawa8651" creationdate="20181109T160519Z">
        <seg>&lt;x28/&gt;「StridedVector」&lt;x29/&gt;および&lt;x30/&gt;「StridedMatrix」&lt;x31/&gt;は、組み込み型の配列タイプの多くにとって便利なエイリアスです。 は、ストレーテッド・アレイとみなされ、選択された特殊な実装にディスパッチできるようになります。 ポインタと前進だけを使って、BLASとLAPACK関数を高度に調整し、最適化することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;x5/&gt;-p n&lt;x6/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T224412Z" creationid="hsugawa8651" creationdate="20181109T224412Z">
        <seg>&lt;x5/&gt;-p n&lt;x6/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;x8/&gt;`view`&lt;x9/&gt; stores the input index vectors in a
&lt;x10/&gt;SubArray&lt;x11/&gt; object, which can later be used to index the original array
indirectly.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T160440Z" creationid="hsugawa8651" creationdate="20181109T160440Z">
        <seg>&lt;x8/&gt;'view'&lt;x9/&gt;は、入力インデックスベクトルを &lt;x10/&gt;サブアレイ&lt;x11/&gt;オブジェクトで、後でオリジナルの配列をインデックス化するために使用できます。 間接的に。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>@static Sys.iswindows() ?</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T225012Z" creationid="hsugawa8651" creationdate="20181109T225012Z">
        <seg>@static Sys.iswindows() ?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>@static if Sys.islinux()
    linux_specific_thing(a)
else
    generic_thing(a)
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T224958Z" creationid="hsugawa8651" creationdate="20181109T224958Z">
        <seg>@static if Sys.islinux()
    linux_specific_thing(a)
else
    generic_thing(a)
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A "strided" array is stored in memory with elements laid out in regular offsets such that
an instance with a supported &lt;x1/&gt;isbits&lt;x2/&gt; element type can be passed to
external C and Fortran functions that expect this memory layout.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T160455Z" creationid="hsugawa8651" creationdate="20181109T160455Z">
        <seg>"stried"配列は、規則的なオフセットに配置された要素を含むメモリに格納されます。 サポートされる&lt;x1/&gt;イスビトス&lt;x2/&gt;エレメントタイプを持つインスタンスは このメモリレイアウトを期待する外部CとFortranの関数です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A &lt;x1/&gt;(:function, "library")&lt;x2/&gt; pair, which must be written as a literal constant,</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T223837Z" creationid="hsugawa8651" creationdate="20181109T223837Z">
        <seg>&lt;x1/&gt;(:関数、"ライブラリ")&lt;x2/&gt;ペアで、リテラル定数として記述される必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A curated list of useful learning resources to help new users get started can be found on the &lt;x1/&gt;learning&lt;x2/&gt; page of the main Julia web site.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T224812Z" creationid="hsugawa8651" creationdate="20181109T224812Z">
        <seg>新しいユーザを支援するための有用な学習リソースのリストは、Julia Webサイトの&lt;x1/&gt;学習&lt;x2/&gt;ページに掲載されています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A function name may be used alone in place of the tuple (just &lt;x1/&gt;:function&lt;x2/&gt; or &lt;x3/&gt;"function"&lt;x4/&gt;).</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T223757Z" creationid="hsugawa8651" creationdate="20181109T223757Z">
        <seg>関数の関数名はタプルの代わりに単独で使用することができる(単に&lt;x1/&gt;:関数&lt;x2/&gt;または&lt;x3/&gt;"関数&lt;x4/&gt;)。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A logical index
must be a vector of the same length as the dimension it indexes into, or it
must be the only index provided and match the size and dimensionality of the
array it indexes into.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T155807Z" creationid="hsugawa8651" creationdate="20181109T155807Z">
        <seg>論理インデックス は、インデックスを作成する寸法と同じ長さのベクトルである必要があります。また 指定された唯一のインデックスであり にインデックスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A tuple of input types.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T223952Z" creationid="hsugawa8651" creationdate="20181109T223952Z">
        <seg>入力タイプのタプル。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A&lt;x1/&gt; is overwritten with the value &lt;x2/&gt;X[i_1, i_2, ..., i_n]&lt;x3/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T155417Z" creationid="hsugawa8651" creationdate="20181109T155417Z">
        <seg>&lt;x1/&gt;は、&lt;x2/&gt;X[i_1,i_2,…,i_n]&lt;x3/&gt;の値で上書きされる。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Adding parentheses lets
us add a third argument to &lt;x3/&gt;`map`&lt;x4/&gt;:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154956Z" creationid="hsugawa8651" creationdate="20181109T154956Z">
        <seg>括弧を追加すると &lt;x3/&gt;'map`&lt;x4/&gt;:に3番目の引数を追加します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Additionally,
there is a macro &lt;x7/&gt;@static&lt;x8/&gt; which makes it possible to use these functions to conditionally hide
invalid code, as demonstrated in the following examples.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T224947Z" creationid="hsugawa8651" creationdate="20181109T224947Z">
        <seg>さらに マクロ&lt;x7/&gt;@static&lt;x8/&gt;があるため、これらの関数を使用して条件付きで非表示にすることができます。 次の例で示されているように、無効なコードです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Additionally, &lt;x1/&gt;`broadcast`&lt;x2/&gt; is not limited to arrays (see the function documentation),
it also handles tuples and treats any argument that is not an array, tuple or &lt;x3/&gt;`Ref`&lt;x4/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T160134Z" creationid="hsugawa8651" creationdate="20181109T160134Z">
        <seg>さらに、&lt;x1/&gt;`broadcast'&lt;x2/&gt;は配列に限定されるものではありません(関数の文書を参照してください)。 また、タプルや、配列ではない引数、タプル、&lt;x3/&gt;`Ref"&lt;x4/&gt;を処理することもできません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Additionally, Julia provides
software support for &lt;x1/&gt;Arbitrary Precision Arithmetic&lt;x2/&gt;, which can handle operations on numeric
values that cannot be represented effectively in native hardware representations, but at the cost
of relatively slower performance.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T225054Z" creationid="hsugawa8651" creationdate="20181109T225054Z">
        <seg>さらに、ジュリアは &lt;x1/&gt;任意精度算術演算&lt;x2/&gt;のソフトウェアサポートで、数値の操作を処理できます。 ネイティブのハードウェア表現では効果的に表現できないが、コストでは効果的に表現できない値 比較的遅いパフォーマンスです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Additionally, full support for &lt;x1/&gt;Complex and Rational Numbers&lt;x2/&gt; is built on top of these primitive
numeric types.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T225152Z" creationid="hsugawa8651" creationdate="20181109T225152Z">
        <seg>さらに、&lt;x1/&gt;ComplexおよびRational Numbers&lt;x2/&gt;の完全なサポートは、これらのプリミティブに基づいて構築されています。 数値型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>All comma-separated expressions after &lt;x1/&gt;for&lt;x2/&gt; are interpreted as ranges.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154952Z" creationid="hsugawa8651" creationdate="20181109T154948Z">
        <seg>&lt;x2/&gt;のために&lt;x1/&gt;の後にコンマで区切られたすべての式は、範囲として解釈されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>All numeric types interoperate naturally without explicit casting, thanks to a
flexible, user-extensible &lt;x3/&gt;&lt;x4/&gt;&lt;x5/&gt;(@ref conversion-and-promotion).</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T225156Z" creationid="hsugawa8651" creationdate="20181109T225156Z">
        <seg>すべての数値型は、明示的なキャストなしで自然に相互運用されます。 柔軟なユーザー拡張可能な&lt;x3/&gt;&lt;x4/&gt;&lt;x5/&gt;(@ref変換とプロモーション)。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Also notice the difference between &lt;x1/&gt;max.(a,b)&lt;x2/&gt;, which &lt;x3/&gt;`broadcast`&lt;x4/&gt;s &lt;x5/&gt;`max`&lt;x6/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T160027Z" creationid="hsugawa8651" creationdate="20181109T160027Z">
        <seg>また、&lt;x1/&gt;の最大値(a,b)&lt;x2/&gt;は、&lt;x3/&gt;"ブロードキャスト"&lt;x4/&gt;"max"&lt;x6/&gt;"max'&lt;x6/&gt;の差があることに注意してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Also, &lt;x1/&gt;every&lt;x2/&gt; binary operator supports a &lt;x3/&gt;&lt;x4/&gt;&lt;x5/&gt;(@ref man-dot-operators)
that can be applied to arrays (and combinations of arrays and scalars) in such
&lt;x6/&gt;&lt;x7/&gt;&lt;x8/&gt;(@ref man-vectorized), e.g. &lt;x9/&gt;z .== sin.(x .* y)&lt;x10/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T160010Z" creationid="hsugawa8651" creationdate="20181109T160010Z">
        <seg>また、&lt;x2/&gt;バイナリ演算子の&lt;x1/&gt;は、&lt;x3/&gt;&lt;x4/&gt;&lt;x5/&gt;(@ref man dot演算子)をサポートします。 は、配列(および配列とスカラーの組み合わせ)に適用することができます。 &lt;x6/&gt;&lt;x7/&gt;&lt;x8/&gt;(@ref manベクトル化)、例えば&lt;x9/&gt;z.=sin.(x .* y)&lt;x10/&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Also, when calling a Fortran function, all inputs must be passed as
pointers to allocated values on the heap or stack.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T223810Z" creationid="hsugawa8651" creationdate="20181109T223810Z">
        <seg>また、Fortran関数を呼び出す場合は、すべての入力を次のように指定する必要があります。 ヒープまたはスタック上の割り当てられた値へのポインタ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An array is a collection of objects stored in a multi-dimensional grid.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154138Z" creationid="hsugawa8651" creationdate="20181109T154138Z">
        <seg>配列は、多次元グリッドに格納されたオブジェクトの集合です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An array of scalar indices.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T155517Z" creationid="hsugawa8651" creationdate="20181109T155517Z">
        <seg>スカラー・インデックスの配列です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An array with a specific element type can be constructed using the syntax &lt;x1/&gt;T[A, B, C, ...]&lt;x2/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154659Z" creationid="hsugawa8651" creationdate="20181109T154659Z">
        <seg>特定の要素タイプを持つ配列は、構文&lt;x1/&gt;T[A,B,C,…]&lt;x2/&gt;を使用して構築することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An inefficient way to do this would
be to replicate the vector to the size of the matrix:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T160043Z" creationid="hsugawa8651" creationdate="20181109T160043Z">
        <seg>非効率的な方法は ベクトルをマトリックスのサイズに複製することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An object that represents an array of scalar indices and can be converted to such by &lt;x1/&gt;`to_indices`&lt;x2/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T155534Z" creationid="hsugawa8651" creationdate="20181109T155534Z">
        <seg>スカラーインデックスの配列を表すオブジェクトであって、&lt;x1/&gt;"to_indices"&lt;x2/&gt;によって変換されることが可能である。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Any custom array of scalar indices that is a subtype of &lt;x1/&gt;AbstractArray&lt;x2/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T155529Z" creationid="hsugawa8651" creationdate="20181109T155529Z">
        <seg>&lt;x1/&gt;AbstractArray&lt;x2/&gt;のサブタイプであるスカラーインデックスの任意のカスタム配列</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Arguments
to &lt;x3/&gt;`ccall`&lt;x4/&gt; are as follows:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T223834Z" creationid="hsugawa8651" creationdate="20181109T223834Z">
        <seg>引数 &lt;x3/&gt;'ccall'&lt;x4/&gt;は次のようになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Arguments to &lt;x3/&gt;`@cfunction`&lt;x4/&gt; are as follows:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T153935Z" creationid="hsugawa8651" creationdate="20181109T153935Z">
        <seg>&lt;x3/&gt;`@cfunction`&lt;x4/&gt;への引数は次のとおりです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Arrays can be constructed and also concatenated using the following functions:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154543Z" creationid="hsugawa8651" creationdate="20181109T154543Z">
        <seg>配列は、次の関数を使用して構成したり、連結することもできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Arrays of &lt;x1/&gt;CartesianIndex{N}&lt;x2/&gt; (see below for more details)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T155531Z" creationid="hsugawa8651" creationdate="20181109T155531Z">
        <seg>&lt;x1/&gt;CartesianIndex{N}&lt;x2/&gt;(詳細については以下を参照)のアレイ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Arrays of booleans, which select elements at their &lt;x1/&gt;true&lt;x2/&gt; indices (see below for more details)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T155544Z" creationid="hsugawa8651" creationdate="20181109T155544Z">
        <seg>ブール値の配列で、&lt;x1/&gt;真の&lt;x2/&gt;インデックスで要素を選択します(詳細については、以下を参照)。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As a complete but simple example, the following calls the &lt;x1/&gt;clock&lt;x2/&gt; function from the standard C
library:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T224014Z" creationid="hsugawa8651" creationdate="20181109T224014Z">
        <seg>完全ではあるが単純な例として、以下の呼び出しは標準Cから&lt;x1/&gt;クロック&lt;x2/&gt;関数を呼び出します。 ライブラリ:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As a special part of this syntax, the &lt;x1/&gt;end&lt;x2/&gt; keyword may be used to represent the last index of
each dimension within the indexing brackets, as determined by the size of the innermost array
being indexed.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T155252Z" creationid="hsugawa8651" creationdate="20181109T155252Z">
        <seg>この構文の特殊な部分として、&lt;x1/&gt;end&lt;x2/&gt;キーワードを使用して、最後のインデックスを表すことができます。 最も内側の配列のサイズによって決定される、索引付けブラケット内の各寸法 インデックス化されています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As such, it's also possible to define custom array types by inheriting
from &lt;x1/&gt;`AbstractArray`&lt;x2/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154132Z" creationid="hsugawa8651" creationdate="20181109T154132Z">
        <seg>このように、カスタム配列タイプを継承することによって、カスタム配列タイプを定義することも可能です。 &lt;x1/&gt;'AbstractArray'&lt;x2/&gt;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As the example implies, the following command-line arguments to &lt;x1/&gt;julia&lt;x2/&gt; are interpreted as
command-line arguments to the program &lt;x3/&gt;script.jl&lt;x4/&gt;, passed in the global constant &lt;x5/&gt;ARGS&lt;x6/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T224332Z" creationid="hsugawa8651" creationdate="20181109T224332Z">
        <seg>この例が示すように、&lt;x1/&gt;julia&lt;x2/&gt;への次のコマンドライン引数は、以下のように解釈されます。 グローバル定数&lt;x5/&gt;ARGS&lt;x6/&gt;で渡されたプログラム&lt;x3/&gt;スクリプト.jl&lt;x4/&gt;へのコマンドライン引数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Base.IndexStyle(::Type{&lt;:MyArray}) = IndexLinear()</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T155911Z" creationid="hsugawa8651" creationdate="20181109T155911Z">
        <seg>Base.IndexStyle(::Type{&lt;:MyArray}) = IndexLinear()</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Binary and octal literals are also supported:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T225352Z" creationid="hsugawa8651" creationdate="20181109T225352Z">
        <seg>バイナリリテラルと8進数リテラルもサポートされています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Built-in representations of such values are called numeric primitives, while representations of
integers and floating-point numbers as immediate values in code are known as numeric literals.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T225037Z" creationid="hsugawa8651" creationdate="20181109T225037Z">
        <seg>このような値の組み込み表現は、数値プリミティブと呼ばれますが、表現は次のようになります。 整数と浮動小数点数は、コードの即時値として知られており、数値リテラルと呼ばれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>By default this includes:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T155509Z" creationid="hsugawa8651" creationdate="20181109T155509Z">
        <seg>デフォルトでは、次の内容が含まれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>By default, Fortran compilers &lt;x1/&gt;generate mangled
names&lt;x2/&gt; (for example,
converting function names to lowercase or uppercase, often appending an
underscore), and so to call a Fortran function via &lt;x3/&gt;`ccall`&lt;x4/&gt; you must pass
the mangled identifier corresponding to the rule followed by your Fortran
compiler.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T223808Z" creationid="hsugawa8651" creationdate="20181109T223808Z">
        <seg>デフォルトでは、Fortranコンパイラ&lt;x1/&gt;はmangledを生成します。 名前&lt;x2/&gt;(例: 関数名を小文字または大文字に変換し、通常は アンダースコア)は、Fortran関数を&lt;x3/&gt;`ccall`&lt;x4/&gt;経由で呼び出す必要があります。 ルールに従うルールに従って、ルールに対応するマクロ識別子を指定します。 コンパイラー。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>By putting the &lt;x12/&gt;`@views`&lt;x13/&gt; macro in front of an expression or
block of code, any &lt;x14/&gt;array[...]&lt;x15/&gt; slice in that expression will be converted to
create a &lt;x16/&gt;SubArray&lt;x17/&gt; view instead.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T160443Z" creationid="hsugawa8651" creationdate="20181109T160443Z">
        <seg>&lt;x12/&gt;`@views'&lt;x13/&gt;マクロを式の前に置くか コードのブロック、任意の&lt;x14/&gt;配列[.]&lt;x15/&gt;スライスは、その式の中に変換されます。 代わりに&lt;x16/&gt;サブアレイを作成&lt;x17/&gt;ビューを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Callees must make explicit copies to ensure that they don't modify inputs that
they don't intend to change.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154219Z" creationid="hsugawa8651" creationdate="20181109T154219Z">
        <seg>呼び出し側は、入力を変更しないことを確実にするために、明示的なコピーを作成する必要があります。 変化するつもりはありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Comprehension syntax is
similar to set construction notation in mathematics:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154804Z" creationid="hsugawa8651" creationdate="20181109T154804Z">
        <seg>理解の構文は次のとおりです。 数学で設定された建設表記法に似ています</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Comprehensions can also be written without the enclosing square brackets, producing an object
known as a generator.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154923Z" creationid="hsugawa8651" creationdate="20181109T154923Z">
        <seg>包含は、囲まれた角括弧なしで書くこともでき、オブジェクトを生成することができます。 ジェネレータと呼ばれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Concatenation syntax can similarly be prefixed with a type to specify the element type of the
result.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154707Z" creationid="hsugawa8651" creationdate="20181109T154707Z">
        <seg>連結構文には、同じように 結果。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Concrete types should also typically provide a &lt;x16/&gt;`similar(A,T=eltype(A),dims=size(A))`&lt;x17/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T160350Z" creationid="hsugawa8651" creationdate="20181109T160350Z">
        <seg>具体的には、典型的には、&lt;x16/&gt;'類似の(A,T=エルテープ(A),dims=size(A))`&lt;x17/&gt;を提供する必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Consider these examples of this syntax:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154648Z" creationid="hsugawa8651" creationdate="20181109T154648Z">
        <seg>この構文の例を次に示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Considered alone, this may seem relatively trivial; &lt;x1/&gt;CartesianIndex&lt;x2/&gt; simply
gathers multiple integers together into one object that represents a single
multidimensional index.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T155644Z" creationid="hsugawa8651" creationdate="20181109T155644Z">
        <seg>単独で考慮すると、これは比較的簡単であるように思えるかもしれません。&lt;x1/&gt;CartesianIndex&lt;x2/&gt;は単純です。 複数の整数を1つのオブジェクトに集約して1つのオブジェクトを作成します。 多次元インデックス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Control whether inlining is permitted, including overriding &lt;x1/&gt;@inline&lt;x2/&gt; declarations</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T224750Z" creationid="hsugawa8651" creationdate="20181109T224750Z">
        <seg>&lt;x1/&gt;@inline&lt;x2/&gt;宣言の上書きを含め、インライン化が許可されているかどうかを制御する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Count bytes allocated by each source line</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T224805Z" creationid="hsugawa8651" creationdate="20181109T224805Z">
        <seg>各ソース行によって割り当てられたカウントバイト数</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Count executions of source lines</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T224758Z" creationid="hsugawa8651" creationdate="20181109T224758Z">
        <seg>ソース行の実行数のカウント</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Currently, only the platform-default C calling convention is supported.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T153954Z" creationid="hsugawa8651" creationdate="20181109T153954Z">
        <seg>現在、プラットフォームのデフォルトのC呼び出し規約のみがサポートされています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>DenseArray&lt;x1/&gt; is an abstract subtype of &lt;x2/&gt;AbstractArray&lt;x3/&gt; intended to include all arrays where
elements are stored contiguously in column-major order (see additional notes in
&lt;x4/&gt;&lt;x5/&gt;&lt;x6/&gt;(@ref man-performance-tips)).</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T160418Z" creationid="hsugawa8651" creationdate="20181109T160418Z">
        <seg>DenseArray&lt;x1/&gt;は、すべての配列を含むことを意図した&lt;x2/&gt;AbstractArray&lt;x3/&gt;の抽象サブタイプである。 要素は列主順序で連続的に格納されます(追加の注記を参照してください)。 &lt;x4/&gt;&lt;x5/&gt;&lt;x6/&gt;(@ref manのパフォーマンス・ヒント))。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Disallow or enable unsafe floating point optimizations (overrides @fastmath declaration)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T224756Z" creationid="hsugawa8651" creationdate="20181109T224756Z">
        <seg>安全でない浮動小数点の最適化を許可または有効にします(@ファストマト宣言を無効にします)。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Display version information</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T224555Z" creationid="hsugawa8651" creationdate="20181109T224555Z">
        <seg>バージョン情報を表示する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Do not use `end`&lt;x4/&gt;&lt;x5/&gt;in indexing expressions that may contain either `CartesianIndex` or arrays thereof.&lt;x6/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T155720Z" creationid="hsugawa8651" creationdate="20181109T155720Z">
        <seg>「CartesianIndex」またはその配列が含まれる可能性のある表現のインデックス作成には「end」&lt;x4/&gt;&lt;x5/&gt;を使用しないでください。&lt;x6/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Download and install Julia by following the instructions at &lt;x1/&gt;https://julialang.org/downloads/&lt;x2/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T224249Z" creationid="hsugawa8651" creationdate="20181109T224249Z">
        <seg>&lt;x1/&gt;https://julialang.org/downloads/&lt;x2/&gt;の指示に従って、Juliaをダウンロードしてインストールします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Each machine definition
takes the form &lt;x10/&gt;[count*][user@]host[:port] [bind_addr[:port]]&lt;x11/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T224423Z" creationid="hsugawa8651" creationdate="20181109T224423Z">
        <seg>各マシン定義 は、&lt;x10/&gt;[count*][user@]host[:port][bind_addr[:port]]&lt;x11/&gt;の形式をとることになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Emit bounds checks always or never (ignoring declarations)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T224752Z" creationid="hsugawa8651" creationdate="20181109T224752Z">
        <seg>放出の境界チェックは常に行われる(宣言を無視する)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Empty arrays like &lt;x1/&gt;[]&lt;x2/&gt;, which select no elements</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T155524Z" creationid="hsugawa8651" creationdate="20181109T155524Z">
        <seg>&lt;x1/&gt;[]&lt;x2/&gt;のような空の配列で、要素は選択されません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Empty ranges of the form &lt;x1/&gt;n:n-1&lt;x2/&gt; are sometimes used to indicate the inter-index location between
&lt;x3/&gt;n-1&lt;x4/&gt; and &lt;x5/&gt;n&lt;x6/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T155316Z" creationid="hsugawa8651" creationdate="20181109T155316Z">
        <seg>&lt;x1/&gt;n:n-1&lt;x2/&gt;という形式の空の範囲は、場合によっては、インデックス間の位置を示すために使用される。 &lt;x3/&gt;n-1&lt;x4/&gt;および&lt;x5/&gt;n&lt;x6/&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Enable / Set the level of debug info generation (default level is 1 if unspecified or 2 if used without a level)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T224747Z" creationid="hsugawa8651" creationdate="20181109T224747Z">
        <seg>デバッグ情報の生成レベルを有効/設定します(デフォルトレベルは、指定されていない場合は1、レベルなしでは2を指定します)。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Enable or disable Julia's default signal handlers</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T224649Z" creationid="hsugawa8651" creationdate="20181109T224649Z">
        <seg>ジュリアのデフォルトシグナルハンドラを有効または無効にする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Enable or disable color text</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T224727Z" creationid="hsugawa8651" creationdate="20181109T224727Z">
        <seg>カラーテキストを有効または無効にする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Enable or disable incremental precompilation of modules</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T224655Z" creationid="hsugawa8651" creationdate="20181109T224655Z">
        <seg>モジュールのインクリメンタル事前コンパイルを有効または無効にする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Enable or disable method overwrite warnings</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T224735Z" creationid="hsugawa8651" creationdate="20181109T224735Z">
        <seg>メソッドの上書き警告を有効または無効にする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Enable or disable startup banner</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T224725Z" creationid="hsugawa8651" creationdate="20181109T224725Z">
        <seg>起動バナーを有効または無効にする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Enable or disable syntax and method deprecation warnings (&lt;x1/&gt;error&lt;x2/&gt; turns warnings into errors)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T224733Z" creationid="hsugawa8651" creationdate="20181109T224733Z">
        <seg>構文およびメソッドの非推奨警告を有効または無効にします(&lt;x1/&gt;エラー&lt;x2/&gt;は警告をエラーに変換します)。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Evaluate &lt;x1/&gt;&lt;x2/&gt;&lt;x3/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T224659Z" creationid="hsugawa8651" creationdate="20181109T224659Z">
        <seg>&lt;x1/&gt;&lt;x2/&gt;&lt;x3/&gt;を評価します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Evaluate &lt;x1/&gt;&lt;x2/&gt;&lt;x3/&gt; and display the result</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T224702Z" creationid="hsugawa8651" creationdate="20181109T224702Z">
        <seg>&lt;x1/&gt;&lt;x2/&gt;&lt;x3/&gt;を評価し、結果を表示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Finally, you can use &lt;x1/&gt;`ccall`&lt;x2/&gt; to actually generate a call to the library function.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T223825Z" creationid="hsugawa8651" creationdate="20181109T223825Z">
        <seg>最後に、&lt;x1/&gt;`ccall'&lt;x2/&gt;を使ってライブラリ関数への呼び出しを実際に生成することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Float32[ 0.25*x[i-1] + 0.5*x[i] + 0.25*x[i+1] for i=2:length(x)-1 ]</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154902Z" creationid="hsugawa8651" creationdate="20181109T154902Z">
        <seg>Float32[ 0.25*x[i-1] + 0.5*x[i] + 0.25*x[i+1] for i=2:length(x)-1 ]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example,</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154603Z" creationid="hsugawa8651" creationdate="20181109T154603Z">
        <seg>たとえば</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, &lt;x1/&gt;1&lt;x2/&gt; is an integer literal, while &lt;x3/&gt;1.0&lt;x4/&gt; is a floating-point literal; their binary
in-memory representations as objects are numeric primitives.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T225041Z" creationid="hsugawa8651" creationdate="20181109T225041Z">
        <seg>たとえば、&lt;x1/&gt;1&lt;x2/&gt;は整数リテラルであり、&lt;x3/&gt;1.0&lt;x4/&gt;は浮動小数点リテラルであり、それらのバイナリは2進数リテラルです。 メモリー内表現は、数値プリミティブです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, &lt;x11/&gt;Any[x, y, z]&lt;x12/&gt; constructs a heterogeneous array that can contain any values.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154704Z" creationid="hsugawa8651" creationdate="20181109T154704Z">
        <seg>たとえば、&lt;x11/&gt;任意の[x,y,z]&lt;x12/&gt;は、任意の値を含むことができる異機種間配列を構成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, elements might be computed on request
rather than stored.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T160316Z" creationid="hsugawa8651" creationdate="20181109T160316Z">
        <seg>たとえば、要求に基づいて要素を計算することができます。 保存するのではなく。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, it enables
accessing the diagonal elements from the first "page" of &lt;x5/&gt;A&lt;x6/&gt; from above:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T155653Z" creationid="hsugawa8651" creationdate="20181109T155653Z">
        <seg>たとえば 上からの&lt;x5/&gt;A&lt;x6/&gt;の最初の「ページ」からの対角線要素へのアクセス</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, the &lt;x7/&gt;`searchsorted`&lt;x8/&gt; function uses this convention to indicate
the insertion point of a value not found in a sorted array:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T155312Z" creationid="hsugawa8651" creationdate="20181109T155312Z">
        <seg>たとえば、&lt;x7/&gt;'のセアルチゾルタド&lt;x8/&gt;関数は、この規則を使用して ソートされた配列に存在しない値の挿入点です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, the following expression
sums a series without allocating memory:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154929Z" creationid="hsugawa8651" creationdate="20181109T154929Z">
        <seg>たとえば、次の式を指定します。 は、メモリを割り当てずに連続した値を加算します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, to call the &lt;x4/&gt;getenv&lt;x5/&gt; function to get a pointer to
the value of an environment variable, one makes a call like this:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T224039Z" creationid="hsugawa8651" creationdate="20181109T224039Z">
        <seg>たとえば、&lt;x4/&gt;getenv&lt;x5/&gt;関数を呼び出してポインタを取得するには、次のように指定します。 環境変数の値は、次のような呼び出しを行います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, to just print the
arguments given to a script, you could do this:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T224341Z" creationid="hsugawa8651" creationdate="20181109T224341Z">
        <seg>たとえば スクリプトに与えられた引数は、次のようになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, to match C prototypes of the form:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T153924Z" creationid="hsugawa8651" creationdate="20181109T153924Z">
        <seg>たとえば、フォームのCプロトタイプに一致させるには、次のようにします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, we could have requested
the result in single precision by writing:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154859Z" creationid="hsugawa8651" creationdate="20181109T154859Z">
        <seg>例えば 以下のように記述することによって、単精度での結果が得られます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For more details on defining custom
&lt;x16/&gt;AbstractArray&lt;x17/&gt; implementations, see the &lt;x18/&gt;&lt;x19/&gt;&lt;x20/&gt;(@ref man-interface-array).</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T160400Z" creationid="hsugawa8651" creationdate="20181109T160400Z">
        <seg>カスタム定義の詳細については &lt;x16/&gt;AbstractArray&lt;x17/&gt;実装を参照してください。&lt;x18/&gt;&lt;x19/&gt;&lt;x20/&gt;(@ref man interface array)を参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For most computational purposes, arrays should contain
objects of a more specific type, such as &lt;x3/&gt;`Float64`&lt;x4/&gt; or &lt;x5/&gt;`Int32`&lt;x6/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154148Z" creationid="hsugawa8651" creationdate="20181109T154148Z">
        <seg>For most computational purposes, arrays should contain
objects of a more specific type, such as &lt;x3/&gt;`Float64`&lt;x4/&gt; or &lt;x5/&gt;`Int32`&lt;x6/&gt;.For most computational purposes, arrays should contain
objects of a more specific type, such as &lt;x3/&gt;`Float64`&lt;x4/&gt; or &lt;x5/&gt;`Int32`&lt;x6/&gt;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Generated values can be filtered using the &lt;x1/&gt;if&lt;x2/&gt; keyword:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T155050Z" creationid="hsugawa8651" creationdate="20181109T155050Z">
        <seg>生成された値は、&lt;x2/&gt;キーワードの場合は&lt;x1/&gt;を使用してフィルタできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Here, &lt;x1/&gt;(2, 3)&lt;x2/&gt; is a &lt;x3/&gt;`Tuple`&lt;x4/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154539Z" creationid="hsugawa8651" creationdate="20181109T154539Z">
        <seg>ここで、&lt;x1/&gt;(2, 3)&lt;x2/&gt;は、&lt;x3/&gt;「タプル」&lt;x4/&gt;である。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>However, any concrete &lt;x3/&gt;AbstractArray{T,N}&lt;x4/&gt; type should generally implement
at least &lt;x5/&gt;`size(A)`&lt;x6/&gt; (returning an &lt;x7/&gt;Int&lt;x8/&gt; tuple), &lt;x9/&gt;`getindex(A,i)`&lt;x10/&gt; and &lt;x11/&gt;&lt;x12/&gt;&lt;x13/&gt;(@ref getindex);
mutable arrays should also implement &lt;x14/&gt;`setindex!`&lt;x15/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T160320Z" creationid="hsugawa8651" creationdate="20181109T160320Z">
        <seg>しかし、具体的な&lt;x3/&gt;AbstractArray{T,N}&lt;x4/&gt;型は、一般的には実装されるべきである。 &lt;x5/&gt;'size(A)'&lt;x6/&gt;(return an&lt;x7/&gt;Int&lt;x8/&gt;タプルを返す)&lt;x9/&gt;`getindex(A,i)`&lt;x10/&gt;&lt;x13/&gt;&lt;x13/&gt;&lt;x13/&gt;&lt;x13/&gt;(@ref getindex); mutable配列は、&lt;x14/&gt;`setindex!`&lt;x15/&gt;を実装する必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If &lt;x1/&gt;X&lt;x2/&gt; is an array, it must have the same number of elements as the product of the lengths of
the indices: &lt;x3/&gt;prod(length(I_1), length(I_2), ..., length(I_n))&lt;x4/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T155408Z" creationid="hsugawa8651" creationdate="20181109T155408Z">
        <seg>&lt;x1/&gt;X&lt;x2/&gt;が配列である場合、それは長さの積と同じ数の要素を持つ必要があります。 インデックス:&lt;x3/&gt;prod(長さ(I_1),長さ(I_2),…,長さ(I_n))&lt;x4/&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If &lt;x4/&gt;X&lt;x5/&gt; is not an array, its value
is written to all referenced locations of &lt;x6/&gt;A&lt;x7/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T155420Z" creationid="hsugawa8651" creationdate="20181109T155420Z">
        <seg>&lt;x4/&gt;X&lt;x5/&gt;が配列でない場合は、その値は は、&lt;x6/&gt;A&lt;x7/&gt;の参照されたすべての場所に書き込まれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If a pointer conversion method &lt;x19/&gt;`Base.unsafe_convert(Ptr{T}, A)`&lt;x20/&gt; is
provided, the memory layout must correspond in the same way to these strides.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T160506Z" creationid="hsugawa8651" creationdate="20181109T160506Z">
        <seg>ポインタ変換方法&lt;x19/&gt;`Base.unsafe_convert(Ptr{T},A)`&lt;x20/&gt;がある場合 この場合、メモリレイアウトは、これらの進歩と同じ方法で対応する必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If all
arguments have a common &lt;x3/&gt;&lt;x4/&gt;&lt;x5/&gt;(@ref conversion-and-promotion) then they get
converted to that type using &lt;x6/&gt;`convert`&lt;x7/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154521Z" creationid="hsugawa8651" creationdate="20181109T154521Z">
        <seg>すべて 引数には共通の&lt;x3/&gt;&lt;x4/&gt;&lt;x5/&gt;(@ref変換とプロモーション)があります。 &lt;x6/&gt;'convert`&lt;x7/&gt;を使用して、そのタイプに変換されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If all indices are vectors, for example, then the shape of &lt;x1/&gt;X&lt;x2/&gt; would be &lt;x3/&gt;(length(I_1), length(I_2), ..., length(I_n))&lt;x4/&gt;,
with location &lt;x5/&gt;(i_1, i_2, ..., i_n)&lt;x6/&gt; of &lt;x7/&gt;X&lt;x8/&gt; containing the value &lt;x9/&gt;A[I_1[i_1], I_2[i_2], ..., I_n[i_n]]&lt;x10/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T155134Z" creationid="hsugawa8651" creationdate="20181109T155134Z">
        <seg>例えば、すべてのインデックスがベクトルである場合、&lt;x1/&gt;X&lt;x2/&gt;の形状は&lt;x3/&gt;(長さI_1)、長さ(I_2)、…、長さ(I_n)&lt;x4/&gt;である。 位置&lt;x5/&gt;(i_1,i_2,.…i_n)&lt;x7/&gt;X&lt;x8/&gt;の値&lt;x9/&gt;A[I_1[i_1],I_2[i_2],.…,I_n[i_n]]&lt;x10/&gt;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If all the indices are scalars, then the result &lt;x1/&gt;X&lt;x2/&gt; is a single element from the array &lt;x3/&gt;A&lt;x4/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T155128Z" creationid="hsugawa8651" creationdate="20181109T155128Z">
        <seg>すべての指標がスカラーである場合、結果&lt;x1/&gt;X&lt;x2/&gt;は、配列&lt;x3/&gt;A&lt;x4/&gt;からの単一要素である。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If an expression is entered into an interactive
session with a trailing semicolon, its value is not shown.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T224315Z" creationid="hsugawa8651" creationdate="20181109T224315Z">
        <seg>式が対話式に入力された場合 末尾のセミコロンとのセッションは、その値は表示されません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the type &lt;x5/&gt;T&lt;x6/&gt; is
omitted it will default to &lt;x7/&gt;`Float64`&lt;x8/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154346Z" creationid="hsugawa8651" creationdate="20181109T154346Z">
        <seg>&lt;x5/&gt;T&lt;x6/&gt;の場合 省略すると、デフォルトでは&lt;x7/&gt;"Float64&lt;x8/&gt;になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you don't
specify this trait, the default value &lt;x5/&gt;IndexCartesian()&lt;x6/&gt; is used.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T155920Z" creationid="hsugawa8651" creationdate="20181109T155920Z">
        <seg>もしあなたが この特性を指定します。デフォルト値&lt;x5/&gt;IndexCartesian()&lt;x6/&gt;は使用されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you have code that you want executed whenever Julia is run, you can put it in
&lt;x1/&gt;&lt;x2/&gt;/.julia/config/startup.jl&lt;x3/&gt;:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T224453Z" creationid="hsugawa8651" creationdate="20181109T224453Z">
        <seg>Juliaが実行されるたびに実行するコードがある場合は、そのコードを次のように記述することができます。 &lt;x1/&gt;&lt;x2/&gt;/.julia/config/startup.jl&lt;x3/&gt;:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you write a custom &lt;x1/&gt;`AbstractArray`&lt;x2/&gt; type, you can specify that it has fast linear indexing using</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T155906Z" creationid="hsugawa8651" creationdate="20181109T155906Z">
        <seg>カスタム&lt;x1/&gt;`AbstractArray'&lt;x2/&gt;タイプを書く場合は、次のようにして、高速な線形インデックスを作成することを指定できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In
this case the name is resolved within the current process.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T223759Z" creationid="hsugawa8651" creationdate="20181109T223759Z">
        <seg>の この場合、名前は現在のプロセス内で解決されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In Julia, all arguments to functions are &lt;x1/&gt;passed by
sharing&lt;x2/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154159Z" creationid="hsugawa8651" creationdate="20181109T154159Z">
        <seg>Juliaでは、関数に対するすべての引数は、&lt;x1/&gt;に渡されます。 共有&lt;x2/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In contrast with &lt;x1/&gt;for i = 1:length(A)&lt;x2/&gt;, iterating with &lt;x3/&gt;`eachindex`&lt;x4/&gt; provides an efficient way to
iterate over any array type.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T155900Z" creationid="hsugawa8651" creationdate="20181109T155900Z">
        <seg>i=1:長さ(A)&lt;x2/&gt;の&lt;x1/&gt;とは対照的に、&lt;x3/&gt;'の反復は、効率的な方法である。&lt;x3/&gt;"エアチンデス"&lt;x4/&gt;である 任意の配列タイプに対して繰り返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In general, unlike many other technical computing languages, Julia does not expect programs to
be written in a vectorized style for performance.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154152Z" creationid="hsugawa8651" creationdate="20181109T154152Z">
        <seg>一般的に、多くの他の技術計算言語とは異なり、Juliaはプログラムを期待していない。 パフォーマンスを向上させるためにベクトル化されたスタイルで記述する必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In order to control the
type explicitly, a type can be prepended to the comprehension.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154854Z" creationid="hsugawa8651" creationdate="20181109T154854Z">
        <seg>制御を行うには 明示的にタイプを認識することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In practice, especially when providing reusable functionality, one generally wraps &lt;x1/&gt;`ccall`&lt;x2/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T224109Z" creationid="hsugawa8651" creationdate="20181109T224109Z">
        <seg>実際には、特に再利用可能な機能を提供する場合には、一般的には&lt;x1/&gt;"ccall"&lt;x2/&gt;"をラップします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In such cases, the result is always 1-d.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T155056Z" creationid="hsugawa8651" creationdate="20181109T155056Z">
        <seg>この場合、結果は常に1-dになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the expression &lt;x1/&gt;A[I_1, I_2, ..., I_n]&lt;x2/&gt;, each &lt;x3/&gt;I_k&lt;x4/&gt; may be a scalar index, an
array of scalar indices, or an object that represents an array of scalar
indices and can be converted to such by &lt;x5/&gt;`to_indices`&lt;x6/&gt;:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T155503Z" creationid="hsugawa8651" creationdate="20181109T155503Z">
        <seg>式&lt;x1/&gt;A[I_1,I_2,…I_n]&lt;x2/&gt;では、各&lt;x3/&gt;I_k&lt;x4/&gt;はスカラーインデックスであってもよいし スカラの配列、またはスカラーの配列を表すオブジェクト インデックスは、&lt;x5/&gt;から&lt;x6/&gt;までに変換することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the following list of
such functions, calls with a &lt;x1/&gt;dims...&lt;x2/&gt; argument can either take a single tuple of dimension sizes
or a series of dimension sizes passed as a variable number of arguments.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154340Z" creationid="hsugawa8651" creationdate="20181109T154340Z">
        <seg>以下の一覧 そのような関数は、&lt;x1/&gt;ディムスを持つ関数です。&lt;x2/&gt;引数を指定すると、1組の寸法サイズをとることができます。 または、変数の数として渡される一連の次元サイズを指定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the future,
however, it may do so, yielding even greater performance gains.)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T160601Z" creationid="hsugawa8651" creationdate="20181109T160601Z">
        <seg>将来は しかし、それによってパフォーマンスが向上する可能性があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the most general case,
an array may contain objects of type &lt;x1/&gt;`Any`&lt;x2/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154143Z" creationid="hsugawa8651" creationdate="20181109T154143Z">
        <seg>最も一般的なケースでは 配列は、&lt;x1/&gt;'のタイプのオブジェクトを含むことができます。&lt;x/&gt;&lt;x2/&gt;&lt;x/&gt;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the second
construct, &lt;x1/&gt;i&lt;x2/&gt; will be an &lt;x3/&gt;Int&lt;x4/&gt; if &lt;x5/&gt;A&lt;x6/&gt; is an array type with fast linear indexing; otherwise,
it will be a &lt;x7/&gt;CartesianIndex&lt;x8/&gt;:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T155838Z" creationid="hsugawa8651" creationdate="20181109T155838Z">
        <seg>2番目の 構成,&lt;x1/&gt;i&lt;x2/&gt;は&lt;x5/&gt;Int&lt;x6/&gt;であり,&lt;x5/&gt;A&lt;x6/&gt;が高速線形インデックスを用いたアレイ型である場合は,それ以外の値である。 &lt;x7/&gt;CartesianIndex&lt;x8/&gt;になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Increasing the
index of dimension &lt;x9/&gt;k&lt;x10/&gt; by &lt;x11/&gt;1&lt;x12/&gt; should increase the index &lt;x13/&gt;i&lt;x14/&gt; of &lt;x15/&gt;`getindex(A,i)`&lt;x16/&gt; by
&lt;x17/&gt;`stride(A,k)`&lt;x18/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T160502Z" creationid="hsugawa8651" creationdate="20181109T160502Z">
        <seg>増加 &lt;x11/&gt;1&lt;x12/&gt;&lt;x12/&gt;の寸法&lt;x9/&gt;k&lt;x10/&gt;は、&lt;x15/&gt;'getindex(A,i)'&lt;x15/&gt;のインデックス&lt;x13/&gt;i&lt;x14/&gt;を増加させます。 &lt;x17/&gt;`stride(A,k)`&lt;x18/&gt;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Indexed assignment
syntax without the &lt;x6/&gt;end&lt;x7/&gt; keyword is equivalent to a call to
&lt;x8/&gt;`setindex!`&lt;x9/&gt;:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T155447Z" creationid="hsugawa8651" creationdate="20181109T155447Z">
        <seg>インデックス付きの割り当て &lt;x6/&gt;end&lt;x7/&gt;キーワードがない構文は、次のような呼び出しに相当します。 &lt;x8/&gt;`setindex!`&lt;x9/&gt;:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Indexing by a boolean vector &lt;x3/&gt;B&lt;x4/&gt; is effectively the same as indexing by the
vector of integers that is returned by &lt;x5/&gt;`findall(B)`&lt;x6/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T155758Z" creationid="hsugawa8651" creationdate="20181109T155758Z">
        <seg>ブール型ベクトル&lt;x3/&gt;B&lt;x4/&gt;によるインデックス作成は、実効的には、以下のようにして行われる。 &lt;x5/&gt;`findall(B)`&lt;x6/&gt;によって返される整数のベクトル。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Indexing syntax without the &lt;x3/&gt;end&lt;x4/&gt; keyword is equivalent to a call to &lt;x5/&gt;`getindex`&lt;x6/&gt;:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T155245Z" creationid="hsugawa8651" creationdate="20181109T155245Z">
        <seg>&lt;x3/&gt;end&lt;x4/&gt;キーワードなしのインデックス構文は、&lt;x5/&gt;`getindex'&lt;x6/&gt;への呼び出しと同じです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Integer value N launches N additional local worker processes; &lt;x1/&gt;auto&lt;x2/&gt; launches as many workers as the number of local CPU threads (logical cores)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T224711Z" creationid="hsugawa8651" creationdate="20181109T224711Z">
        <seg>整数値Nは、N個のローカル・ワーカー・プロセスを起動します。&lt;x1/&gt;自動&lt;x2/&gt;は、ローカルCPUスレッド(論理コア)の数と同じ数のワーカーを起動します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Integers and floating-point values are the basic building blocks of arithmetic and computation.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T225032Z" creationid="hsugawa8651" creationdate="20181109T225032Z">
        <seg>整数および浮動小数点値は、算術演算と計算の基本的な構成要素です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Interactive mode; REPL runs and &lt;x1/&gt;isinteractive()&lt;x2/&gt; is true</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T224718Z" creationid="hsugawa8651" creationdate="20181109T224718Z">
        <seg>Interactiveモード;REPLは実行され、&lt;x1/&gt;イスインタラクティブ()&lt;x2/&gt;はtrueです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It can even be combined with a &lt;x8/&gt;:&lt;x9/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T155706Z" creationid="hsugawa8651" creationdate="20181109T155706Z">
        <seg>また、&lt;x8/&gt;:&lt;x9/&gt;と組み合わせることもできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It is generally more efficient to use boolean arrays as
indices directly instead of first calling &lt;x13/&gt;`findall`&lt;x14/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T155813Z" creationid="hsugawa8651" creationdate="20181109T155813Z">
        <seg>一般的に、boolean配列を使用する方が効率的です。 は、最初の呼び出し&lt;x13/&gt;'findall&lt;x14/&gt;を呼び出すのではなく、直接インデックスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It is parameterized by
the number of dimensions &lt;x3/&gt;N&lt;x4/&gt; and the element type &lt;x5/&gt;T&lt;x6/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T160240Z" creationid="hsugawa8651" creationdate="20181109T160240Z">
        <seg>パラメータは、パラメータによってパラメータ化されます。 次元の数&lt;x3/&gt;N&lt;x4/&gt;と、エレメント・タイプ&lt;x5/&gt;T&lt;x6/&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It is possible to pass Julia functions to native C functions that accept function pointer arguments.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T153908Z" creationid="hsugawa8651" creationdate="20181109T153908Z">
        <seg>関数ポインタ引数を受け入れるネイティブC関数にJulia関数を渡すことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It is recommended that these operations
have nearly constant time complexity, or technically Õ(1) complexity, as otherwise some array
functions may be unexpectedly slow.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T160322Z" creationid="hsugawa8651" creationdate="20181109T160322Z">
        <seg>これらの操作は、次のように操作することをお勧めします。 ほとんど一定の時間的複雑さ(技術的には1)、あるいは技術的には複雑さがある 機能が予期せぬほど遅くなります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It is sometimes useful to perform element-by-element binary operations on arrays of different
sizes, such as adding a vector to each column of a matrix.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T160040Z" creationid="hsugawa8651" creationdate="20181109T160040Z">
        <seg>異なる要素のバイナリ・バイナリ・バイナリ・オペレーションを実行する場合には、次のようにします。 行列の各列にベクトルを追加するなどのサイズです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Julia can be started in parallel mode with either the &lt;x1/&gt;-p&lt;x2/&gt; or the &lt;x3/&gt;--machine-file&lt;x4/&gt; options.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T224410Z" creationid="hsugawa8651" creationdate="20181109T224410Z">
        <seg>Juliaは、&lt;x1/&gt;-p&lt;x2/&gt;または&lt;x3/&gt;-machinefile&lt;x4/&gt;オプションのいずれかと並行モードで起動できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Julia does not treat arrays in any special way.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154124Z" creationid="hsugawa8651" creationdate="20181109T154124Z">
        <seg>Juliaは、特別な方法でアレイを処理しません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Julia has a "no boilerplate" philosophy:
functions can be called directly from Julia without any "glue" code, code generation, or compilation
-- even from the interactive prompt.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T160541Z" creationid="hsugawa8651" creationdate="20181109T160541Z">
        <seg>Juliaは「ボイラープレートなし」哲学を持っている。 関数は、"glue"コード、コード生成、コンパイルなしで、Juliaから直接呼び出すことができます。 --対話型プロンプトからでも。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Julia installation is straightforward, whether using precompiled binaries or compiling from source.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T224247Z" creationid="hsugawa8651" creationdate="20181109T224247Z">
        <seg>ジュリアのインストールは、コンパイル済みのバイナリを使用するか、ソースからコンパイルするかにかかわらず、簡単です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Julia provides a broad range of primitive numeric types, and a full complement of arithmetic and
bitwise operators as well as standard mathematical functions are defined over them.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T225045Z" creationid="hsugawa8651" creationdate="20181109T225045Z">
        <seg>Juliaは、さまざまな原始的な数値型を提供し、算術演算の完全な補完を提供します。 ビット演算子と標準数学関数がそれらの上に定義されています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Julia's compiler uses type inference and generates
optimized code for scalar array indexing, allowing programs to be written in a style that is convenient
and readable, without sacrificing performance, and using less memory at times.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154155Z" creationid="hsugawa8651" creationdate="20181109T154155Z">
        <seg>Juliaのコンパイラーは型推論を使用し スカラー配列インデックスの最適化されたコードで、プログラムをスタイルに便利なスタイルで記述できるようにします。 パフォーマンスを犠牲にすることなく読み取り可能で、時にはメモリを減らすことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Julia, like most technical computing languages, provides a first-class array implementation.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154040Z" creationid="hsugawa8651" creationdate="20181109T154040Z">
        <seg>Juliaは、ほとんどの技術的なコンピューティング言語と同様、一流のアレイ実装を提供しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Just as in &lt;x1/&gt;&lt;x2/&gt;&lt;x3/&gt;(@ref man-array-indexing), the &lt;x4/&gt;end&lt;x5/&gt; keyword may be used
to represent the last index of each dimension within the indexing brackets, as
determined by the size of the array being assigned into.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T155438Z" creationid="hsugawa8651" creationdate="20181109T155438Z">
        <seg>&lt;x1/&gt;&lt;x2/&gt;&lt;x3/&gt;(@ref man array indexing)の場合と同様に、&lt;x4/&gt;end&lt;x5/&gt;キーワードを使用することもできます。 インデックス・ブラケット内の各次元の最後のインデックスを表示するには、次のように指定します。 割り当てられているアレイのサイズによって決定されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Just like
inner functions used elsewhere in the language, variables from the enclosing scope can be
"captured" in the inner function.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T155005Z" creationid="hsugawa8651" creationdate="20181109T155005Z">
        <seg>ちょうど 言語で他の場所で使用される内部関数、囲みスコープからの変数は、次のようになります。 「取り込み」は内部機能である。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Larger integer literals that cannot be represented using only 32 bits but can be represented in
64 bits always create 64-bit integers, regardless of the system type:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T225319Z" creationid="hsugawa8651" creationdate="20181109T225319Z">
        <seg>32ビットのみを使用して表現することはできないが、次のように表現できる整数リテラル 64ビットは、システムタイプに関係なく、常に64ビットの整数を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Largest value</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T225129Z" creationid="hsugawa8651" creationdate="20181109T225129Z">
        <seg>最大値</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Like ccall, all of these arguments will be evaluated at compile-time, when the containing method is defined.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T153944Z" creationid="hsugawa8651" creationdate="20181109T153944Z">
        <seg>ccallと同様に、これらの引数はすべてコンパイル時に評価され、containingメソッドが定義されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Limit usage of CPU features up to &lt;x1/&gt;&lt;x2/&gt;&lt;x3/&gt;; set to &lt;x4/&gt;help&lt;x5/&gt; to see the available options</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T224739Z" creationid="hsugawa8651" creationdate="20181109T224739Z">
        <seg>CPU機能の使用を制限&lt;x1/&gt;&lt;x2/&gt;&lt;x3/&gt;に制限します。&lt;x4/&gt;ヘルプ&lt;x5/&gt;に設定すると、使用可能なオプションが表示されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Literal integers are represented in the standard manner:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T225202Z" creationid="hsugawa8651" creationdate="20181109T225202Z">
        <seg>リテラル整数は、標準的な方法で表されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Load &lt;x1/&gt;&lt;x2/&gt;/.julia/config/startup.jl&lt;x3/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T224646Z" creationid="hsugawa8651" creationdate="20181109T224646Z">
        <seg>&lt;x1/&gt;&lt;x2/&gt;/.julia/config/startup.jl&lt;x3/&gt;をロードします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Load &lt;x1/&gt;&lt;x2/&gt;&lt;x3/&gt; immediately on all processors</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T224705Z" creationid="hsugawa8651" creationdate="20181109T224705Z">
        <seg>すべてのプロセッサで&lt;x1/&gt;&lt;x2/&gt;&lt;x3/&gt;を即時にロード</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Load or save history</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T224730Z" creationid="hsugawa8651" creationdate="20181109T224730Z">
        <seg>履歴をロードまたは保存する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Many functions for constructing and initializing arrays are provided.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154333Z" creationid="hsugawa8651" creationdate="20181109T154333Z">
        <seg>配列を作成して初期化するための多くの関数が用意されています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Many non- mutating functions are implemented by
calling a function of the same name with an added &lt;x6/&gt;!&lt;x7/&gt; at the end on an explicit
copy of the input, and returning that copy.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154222Z" creationid="hsugawa8651" creationdate="20181109T154222Z">
        <seg>多くの非重複関数は、次のように実装されています。 明示的に最後に&lt;x6/&gt;!&lt;x7/&gt;を追加して、同じ名前の関数を呼び出します。 入力のコピーを返し、そのコピーを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>More concrete examples
can be found within the &lt;x25/&gt;&lt;x26/&gt;&lt;x27/&gt;(@ref man-interface-strided-arrays).</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T160515Z" creationid="hsugawa8651" creationdate="20181109T160515Z">
        <seg>具体的な事例 は、&lt;x25/&gt;&lt;x26/&gt;&lt;x27/&gt;(@ref man interface strided配列)内にあることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Most
technical computing languages pay a lot of attention to their array implementation at the expense
of other containers.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154112Z" creationid="hsugawa8651" creationdate="20181109T154112Z">
        <seg>ほとんど テクニカル・コンピューティング言語は、アレイ実装に多大な関心を払っています。 その他の容器。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Most C and Fortran libraries ship
compiled as shared libraries already, but if you are compiling the code yourself using GCC (or
Clang), you will need to use the &lt;x1/&gt;-shared&lt;x2/&gt; and &lt;x3/&gt;-fPIC&lt;x4/&gt; options.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T160550Z" creationid="hsugawa8651" creationdate="20181109T160550Z">
        <seg>ほとんどのCおよびFortranライブラリは出荷されています。 はすでに共有ライブラリとしてコンパイルされていますが、GCCを使用して自分でコードをコンパイルする場合は Clang)は、&lt;x1/&gt;-shared&lt;x2/&gt;および&lt;x3/&gt;-fPIC&lt;x4/&gt;オプションを使用する必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Most of these functions
also accept a first input &lt;x3/&gt;T&lt;x4/&gt;, which is the element type of the array.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154343Z" creationid="hsugawa8651" creationdate="20181109T154343Z">
        <seg>これらの関数の大部分 また、配列の要素タイプである最初の入力&lt;x3/&gt;T&lt;x4/&gt;を受け入れます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Nested "dot calls" &lt;x5/&gt;f.(...)&lt;x6/&gt; (including calls to &lt;x7/&gt;.+&lt;x8/&gt; etcetera)
&lt;x9/&gt;&lt;x10/&gt;&lt;x11/&gt;(@ref man-dot-operators) into a single &lt;x12/&gt;broadcast&lt;x13/&gt; call.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T160131Z" creationid="hsugawa8651" creationdate="20181109T160131Z">
        <seg>ネストされた「ドットコール」&lt;x5/&gt;f.(...)&lt;x6/&gt;(&lt;x7/&gt;.+&lt;x8/&gt;eteteraへの呼び出しを含む) &lt;x9/&gt;&lt;x10/&gt;&lt;x11/&gt;(@ref man dot演算子)は、単一の&lt;x12/&gt;ブロードキャスト・&lt;x13/&gt;コールに対して使用されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>No matter how an &lt;x2/&gt;AbstractArray{T,N}&lt;x3/&gt; is represented internally, &lt;x4/&gt;T&lt;x5/&gt; is the type of
object returned by &lt;x6/&gt;integer&lt;x7/&gt; indexing (&lt;x8/&gt;A[1, ..., 1]&lt;x9/&gt;, when &lt;x10/&gt;A&lt;x11/&gt; is not empty) and &lt;x12/&gt;N&lt;x13/&gt; should be
the length of the tuple returned by &lt;x14/&gt;`size`&lt;x15/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T160357Z" creationid="hsugawa8651" creationdate="20181109T160357Z">
        <seg>&lt;x2/&gt;AbstractArray{T,N}&lt;x3/&gt;が内部的にどのように表されても、&lt;x4/&gt;T&lt;x5/&gt;は以下のタイプである。 &lt;x6/&gt;整数&lt;x7/&gt;インデックス(&lt;x8/&gt;A[1,.…,1]&lt;x9/&gt;,&lt;x10/&gt;)は&lt;x10/&gt;A&lt;x11/&gt;であり、&lt;x12/&gt;N&lt;x13/&gt;は&lt;x12/&gt;n&lt;x13/&gt;である。 &lt;x14/&gt;`size'&lt;x15/&gt;によって返されるタプルの長さです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note that &lt;x1/&gt;islinux&lt;x2/&gt; and &lt;x3/&gt;isapple&lt;x4/&gt; are mutually exclusive subsets of &lt;x5/&gt;isunix&lt;x6/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T224942Z" creationid="hsugawa8651" creationdate="20181109T224942Z">
        <seg>&lt;x1/&gt;アリヌス&lt;x2/&gt;および&lt;x3/&gt;イサプリ&lt;x4/&gt;は、&lt;x5/&gt;イシュニク&lt;x6/&gt;の相互排他的なサブセットであることに留意されたい。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note that &lt;x9/&gt;ARGS&lt;x10/&gt; is
also set when a Julia expression is given using the &lt;x11/&gt;-e&lt;x12/&gt; option on the command line (see the
&lt;x13/&gt;julia&lt;x14/&gt; help output below) but &lt;x15/&gt;PROGRAM_FILE&lt;x16/&gt; will be empty.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T224338Z" creationid="hsugawa8651" creationdate="20181109T224338Z">
        <seg>&lt;x9/&gt;ARGS&lt;x10/&gt;は以下のようになります。 また、コマンドラインで&lt;x11/&gt;-e&lt;x12/&gt;オプションを使用してJulia式を指定したときにも設定されます( &lt;x13/&gt;julia&lt;x14/&gt;ヘルプ出力は次のようになりますが、&lt;x15/&gt;PROGRAM_FILE&lt;x16/&gt;は空です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note that comparisons such as &lt;x1/&gt;==&lt;x2/&gt; operate on whole arrays, giving a single boolean
answer.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T160005Z" creationid="hsugawa8651" creationdate="20181109T160005Z">
        <seg>&lt;x1/&gt;==&lt;x2/&gt;のような比較は、すべての配列に対して動作し、単一のブール値を与えることに注意してください。 答えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note that the argument type tuple must be written as &lt;x1/&gt;(Cstring,)&lt;x2/&gt;, rather than &lt;x3/&gt;(Cstring)&lt;x4/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T224054Z" creationid="hsugawa8651" creationdate="20181109T224054Z">
        <seg>引数のタイプは、&lt;x3/&gt;(Cstring)&lt;x4/&gt;ではなく、&lt;x1/&gt;(Cstring,)&lt;x2/&gt;として記述する必要があることに注意してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Number of bits</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T225120Z" creationid="hsugawa8651" creationdate="20181109T225120Z">
        <seg>ビット数</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Often referred to as logical indexing or indexing with a logical mask, indexing
by a boolean array selects elements at the indices where its values are &lt;x1/&gt;true&lt;x2/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T155734Z" creationid="hsugawa8651" creationdate="20181109T155734Z">
        <seg>論理的なインデックス作成と呼ばれる論理的インデックス作成またはインデックス作成と呼ばれることが多いインデックス作成 ブール型配列では、値が&lt;x1/&gt;真&lt;x2/&gt;であるインデックスで要素を選択します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Once the user has entered a complete expression, such as &lt;x11/&gt;1 + 2&lt;x12/&gt;, and hits enter, the interactive
session evaluates the expression and shows its value.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T224313Z" creationid="hsugawa8651" creationdate="20181109T224313Z">
        <seg>ユーザーが&lt;x11/&gt;1+2&lt;x12/&gt;などの完全な式を入力してからヒットすると、対話型の sessionは式を評価し、その値を表示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>One common gotcha is that a 1-tuple must be
written with a trailing comma.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T224037Z" creationid="hsugawa8651" creationdate="20181109T224037Z">
        <seg>一般的なゴチャの一つは、1タプルが必要であるということです。 後続のカンマで作成されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Operations on &lt;x11/&gt;AbstractArray&lt;x12/&gt; objects are defined using higher
level operators and functions, in a way that is independent of the underlying storage.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T160305Z" creationid="hsugawa8651" creationdate="20181109T160305Z">
        <seg>&lt;x11/&gt;AbstractArray&lt;x12/&gt;オブジェクトに対する操作は、より高い値を使用して定義されます。 レベル演算子と関数は、基礎となる記憶域とは独立して存在します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Or you could put that code into a script and run it:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T224350Z" creationid="hsugawa8651" creationdate="20181109T224350Z">
        <seg>あるいは、スクリプトにコードを挿入して実行することもできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Otherwise,
&lt;x5/&gt;X&lt;x6/&gt; is an array with the same number of dimensions as the sum of the dimensionalities of all the
indices.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T155131Z" creationid="hsugawa8651" creationdate="20181109T155131Z">
        <seg>そうでない場合は &lt;x5/&gt;x&lt;x6/&gt;は、すべての次元の次元性の合計と同じ数の次元を持つ配列です。 索引。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Print this message</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T224608Z" creationid="hsugawa8651" creationdate="20181109T224608Z">
        <seg>このメッセージを印刷する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Quiet startup: no banner, suppress REPL warnings</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T224722Z" creationid="hsugawa8651" creationdate="20181109T224722Z">
        <seg>quietスタートアップ:バナーがない、REPL警告が省略されていない</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Ranges in generators and comprehensions can depend on previous ranges by writing multiple &lt;x1/&gt;for&lt;x2/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T155036Z" creationid="hsugawa8651" creationdate="20181109T155036Z">
        <seg>生成の範囲は、&lt;x2/&gt;を&lt;x2/&gt;に書くことによって、以前の範囲に依存することができる。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Ranges like &lt;x1/&gt;a:c&lt;x2/&gt; or &lt;x3/&gt;a:b:c&lt;x4/&gt;, which select contiguous or strided subsections from &lt;x5/&gt;a&lt;x6/&gt; to &lt;x7/&gt;c&lt;x8/&gt; (inclusive)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T155527Z" creationid="hsugawa8651" creationdate="20181109T155527Z">
        <seg>&lt;x1/&gt;a:c&lt;x2/&gt;または&lt;x3/&gt;a:b&lt;x4/&gt;のような範囲。&lt;x5/&gt;から&lt;x6/&gt;&lt;x8/&gt;&lt;x8/&gt;(含む)まで連続するサブセクションまたはストライドされたサブセクションを選択する。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Recall that the variable &lt;x1/&gt;`ans`&lt;x2/&gt; is set to the value of the last expression evaluated in
an interactive session.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T225338Z" creationid="hsugawa8651" creationdate="20181109T225338Z">
        <seg>変数&lt;x1/&gt;`は、最後に評価された最後の式の値に設定されていることを思い出してください。 対話型セッションです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Return type (see below for mapping the declared C type to Julia)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T223843Z" creationid="hsugawa8651" creationdate="20181109T223843Z">
        <seg>戻り型(宣言されたC型をJuliaにマッピングするには、次を参照)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Run processes on hosts listed in &lt;x1/&gt;&lt;x2/&gt;&lt;x3/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T224714Z" creationid="hsugawa8651" creationdate="20181109T224714Z">
        <seg>&lt;x1/&gt;&lt;x2/&gt;&lt;x3/&gt;にリストされたホスト上でプロセスを実行する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Scalar values passed to these functions are treated as 1-element arrays.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154559Z" creationid="hsugawa8651" creationdate="20181109T154559Z">
        <seg>これらの関数に渡されるスカラー値は、1要素配列として扱われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>See &lt;x5/&gt;Iteration&lt;x6/&gt; below, and for some more advanced
examples, see &lt;x7/&gt;this blog post on multidimensional algorithms and
iteration&lt;x8/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T155626Z" creationid="hsugawa8651" creationdate="20181109T155626Z">
        <seg>以下の「&lt;x5/&gt;イテレーション&lt;x6/&gt;」を参照してください。また、詳細については、以下を参照してください。 例を参照してください。このブログ記事は、多次元アルゴリズムに関するこのブログ記事を参照してください。 繰り返し&lt;x8/&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>See also &lt;x1/&gt;&lt;x2/&gt;&lt;x3/&gt;(@ref man-scripting) for more information on writing Julia scripts.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T224404Z" creationid="hsugawa8651" creationdate="20181109T224404Z">
        <seg>Juliaスクリプトの記述についての詳細は、&lt;x1/&gt;&lt;x2/&gt;&lt;x3/&gt;(@ref man scripting)も参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>See the &lt;x3/&gt;&lt;x4/&gt;&lt;x5/&gt;(@ref man-interface-array) for more details
on implementing a custom array type.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154135Z" creationid="hsugawa8651" creationdate="20181109T154135Z">
        <seg>詳細については、&lt;x3/&gt;&lt;x4/&gt;&lt;x5/&gt;(@ref man interface array)を参照してください。 カスタム・アレイ・タイプの実装です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Set &lt;x1/&gt; as the home project/environment.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T224611Z" creationid="hsugawa8651" creationdate="20181109T224611Z">
        <seg>&lt;x1/&gt;をホームプロジェクト/環境として設定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Set location of &lt;x1/&gt;julia&lt;x2/&gt; executable</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T224639Z" creationid="hsugawa8651" creationdate="20181109T224639Z">
        <seg>&lt;x1/&gt;ジュリア&lt;x2/&gt;実行可能ファイルの場所を設定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Set the optimization level (default level is 2 if unspecified or 3 if used without a level)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T224743Z" creationid="hsugawa8651" creationdate="20181109T224743Z">
        <seg>最適化レベルを設定します(指定されていない場合はデフォルトレベルは2、レベルなしで使用される場合は3です)。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Similarly, indexing
by a &lt;x7/&gt;N&lt;x8/&gt;-dimensional boolean array is effectively the same as indexing by the
vector of &lt;x9/&gt;CartesianIndex{N}&lt;x10/&gt;s where its values are &lt;x11/&gt;true&lt;x12/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T155802Z" creationid="hsugawa8651" creationdate="20181109T155802Z">
        <seg>同様にインデックス化 &lt;x7/&gt;N&lt;x8/&gt;-次元ブール配列は、実効的には、以下のように、インデックス化と同じである。 &lt;x9/&gt;CartesianIndex{N}&lt;x10/&gt;sのベクトルであり、その値は&lt;x11/&gt;真&lt;x12/&gt;である。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Smallest value</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T225124Z" creationid="hsugawa8651" creationdate="20181109T225124Z">
        <seg>最小値</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Start up with the given system image file</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T224637Z" creationid="hsugawa8651" creationdate="20181109T224637Z">
        <seg>指定されたシステムイメージファイルで起動する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Strided arrays
must define a &lt;x3/&gt;`strides(A)`&lt;x4/&gt; method that returns a tuple of "strides" for each dimension; a
provided &lt;x5/&gt;`stride(A,k)`&lt;x6/&gt; method accesses the &lt;x7/&gt;k&lt;x8/&gt;th element within this tuple.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T160458Z" creationid="hsugawa8651" creationdate="20181109T160458Z">
        <seg>ストローブされた配列 は、各次元のタプルを返す&lt;x3/&gt;`end(A)'&lt;x4/&gt;メソッドを定義する必要があります。 &lt;x5/&gt;`stride(A,k)'は、このタプル内の&lt;x7/&gt;k&lt;x8/&gt;番目のエレメントにアクセスします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>SubArray&lt;x1/&gt; is a specialization of &lt;x2/&gt;AbstractArray&lt;x3/&gt; that performs indexing by
sharing memory with the original array rather than by copying it.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T160427Z" creationid="hsugawa8651" creationdate="20181109T160427Z">
        <seg>サブアレイ&lt;x1/&gt;は、インデックス作成を実行する&lt;x2/&gt;AbstractArray&lt;x3/&gt;の特殊化です。 コピーするのではなく、オリジナルのアレイとメモリを共有することです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The
name of the script itself is passed in as the global &lt;x7/&gt;PROGRAM_FILE&lt;x8/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T224334Z" creationid="hsugawa8651" creationdate="20181109T224334Z">
        <seg>の スクリプト自体の名前は、グローバルな&lt;x7/&gt;PROGRAM_FILE&lt;x8/&gt;として渡されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;x1/&gt;--&lt;x2/&gt; delimiter can be used to separate command-line arguments intended for the script file from arguments intended for Julia:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T224357Z" creationid="hsugawa8651" creationdate="20181109T224357Z">
        <seg>&lt;x1/&gt;--&lt;x2/&gt;デリミタは、July:を対象とした引数から、スクリプトファイルに対して指定されたコマンドライン引数を区切るために使用できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;x1/&gt;AbstractArray&lt;x2/&gt; type includes anything vaguely array-like, and implementations of it might
be quite different from conventional arrays.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T160313Z" creationid="hsugawa8651" creationdate="20181109T160313Z">
        <seg>&lt;x1/&gt;AbstractArray&lt;x2/&gt;タイプは、曖昧な配列を含んでおり、実装は実装されています。 従来のアレイとは大きく異なります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;x7/&gt;`Array`&lt;x8/&gt; type is a specific instance
of &lt;x9/&gt;DenseArray&lt;x10/&gt;;  &lt;x11/&gt;`Vector`&lt;x12/&gt; and &lt;x13/&gt;`Matrix`&lt;x14/&gt; are aliases for the 1-d and 2-d cases.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T160422Z" creationid="hsugawa8651" creationdate="20181109T160422Z">
        <seg>&lt;x7/&gt;「Array」&lt;x8/&gt;タイプは、特定のインスタンスです。 &lt;x9/&gt;DenseArray&lt;x10/&gt;;&lt;x11/&gt;'Vector'&lt;x12/&gt;および&lt;x13/&gt;'Matrix'&lt;x14/&gt;は、1-dおよび2-dケースのエイリアスです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The C &lt;x1/&gt;getenv&lt;x2/&gt; function indicates an error by returning &lt;x3/&gt;NULL&lt;x4/&gt;, but other standard C functions
indicate errors in various different ways, including by returning -1, 0, 1 and other special values.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T224130Z" creationid="hsugawa8651" creationdate="20181109T224130Z">
        <seg>C&lt;x1/&gt;getenv&lt;x2/&gt;関数は、&lt;x3/&gt;NULL&lt;x4/&gt;を返すことによってエラーを示しますが、他の標準的なC関数の関数です。 -1 0 1、その他の特別な値を返すなど、さまざまな方法でエラーを表示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The array library is implemented
almost completely in Julia itself, and derives its performance from the compiler, just like any
other code written in Julia.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154129Z" creationid="hsugawa8651" creationdate="20181109T154129Z">
        <seg>アレイ・ライブラリーは実装されています。 ほとんどの場合、ジュリア自身は、コンパイラーからのパフォーマンスを導き出し その他のコードはジュリアに書かれています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The code to be called must be available as a shared library.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T160547Z" creationid="hsugawa8651" creationdate="20181109T160547Z">
        <seg>呼び出されるコードは共有ライブラリとして使用できる必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The concatenation functions are used so often that they have special syntax:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154623Z" creationid="hsugawa8651" creationdate="20181109T154623Z">
        <seg>連結関数は、頻繁に使用されるため、特別な構文が使用されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The easiest way to learn and experiment with Julia is by starting an interactive session (also
known as a read-eval-print loop or "REPL") by double-clicking the Julia executable or running
&lt;x1/&gt;julia&lt;x2/&gt; from the command line:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T224254Z" creationid="hsugawa8651" creationdate="20181109T224254Z">
        <seg>Juliaを学習して実験する最も簡単な方法は、対話型セッションを開始することです。 Julia実行可能ファイルをダブルクリックするか、または実行することによって、read-eval-printループまたはREPLと呼ばれる既知の コマンドラインから&lt;x1/&gt;ジュリア&lt;x2/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The first construct is used when you need the value, but not index, of each element.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T155843Z" creationid="hsugawa8651" creationdate="20181109T155843Z">
        <seg>最初の構成は、各要素の値が必要な場合に使用されますが、インデックスでは使用されません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The following are Julia's primitive numeric types:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T225110Z" creationid="hsugawa8651" creationdate="20181109T225110Z">
        <seg>Juliaのプリミティブな数値型は次のとおりです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The following arguments, if any, are the actual argument values passed to the function.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T224007Z" creationid="hsugawa8651" creationdate="20181109T224007Z">
        <seg>次の引数は、関数に渡された実際の引数の値です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The following example computes a weighted average of the current element and its left and right
neighbor along a 1-d grid.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154818Z" creationid="hsugawa8651" creationdate="20181109T154818Z">
        <seg>次の例では、現在の要素とその左側と右側の加重平均を計算しています。 1Dグリッドに沿った隣接。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The following example computes the QR decomposition of a small section of a larger array, without
creating any temporaries, and by calling the appropriate LAPACK function with the right leading
dimension size and stride parameters.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T160522Z" creationid="hsugawa8651" creationdate="20181109T160522Z">
        <seg>次の例は、大きな配列の小さいセクションのQR分解を計算します。 一時的なものを作成すること、そして適切なLAPACK関数を使って適切な関数を呼び出すこと 寸法のサイズと歩幅のパラメータです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The general syntax for assigning values in an n-dimensional array A is:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T155333Z" creationid="hsugawa8651" creationdate="20181109T155333Z">
        <seg>n次元配列Aの値を代入する一般的な構文は次のとおりです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The general syntax for indexing into an n-dimensional array A is:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T155109Z" creationid="hsugawa8651" creationdate="20181109T155109Z">
        <seg>n次元配列Aへの索引付けの一般的な構文は次のとおりです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The input types must be written as a literal tuple, not a tuple-valued
variable or expression.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T223955Z" creationid="hsugawa8651" creationdate="20181109T223955Z">
        <seg>入力タイプは、タプルではなく、リテラルタプルとして記述する必要があります。 変数または式。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The machine instructions generated
by Julia's JIT are the same as a native C call would be, so the resulting overhead is the same
as calling a library function from C code.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T160553Z" creationid="hsugawa8651" creationdate="20181109T160553Z">
        <seg>生成されたマシン命令 JuliaのJITはネイティブのC呼び出しと同じであるため、結果として生じるオーバーヘッドは同じです。 は、Cコードからライブラリ関数を呼び出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The machines defined in &lt;x6/&gt;file&lt;x7/&gt; must be accessible via a password-less
&lt;x8/&gt;ssh&lt;x9/&gt; login, with Julia installed at the same location as the current host.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T224421Z" creationid="hsugawa8651" creationdate="20181109T224421Z">
        <seg>&lt;x6/&gt;ファイル&lt;x7/&gt;で定義されたマシンは、パスワードなしでアクセスできる必要があります。 &lt;x8/&gt;ssh&lt;x9/&gt;ログインは、現在のホストと同じ場所にJuliaがインストールされています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The macro &lt;x1/&gt;`@cfunction`&lt;x2/&gt; generates the C-compatible function pointer for a call to a
Julia function.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T153931Z" creationid="hsugawa8651" creationdate="20181109T153931Z">
        <seg>マクロ&lt;x1/&gt;`@cfunction`&lt;x2/&gt;は、コールのC互換関数ポインタを生成します。 Julia関数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The meaning of this form is that &lt;x1/&gt;F(x,y,...)&lt;x2/&gt; is evaluated with the variables &lt;x3/&gt;x&lt;x4/&gt;, &lt;x5/&gt;y&lt;x6/&gt;, etc. taking
on each value in their given list of values.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154807Z" creationid="hsugawa8651" creationdate="20181109T154807Z">
        <seg>この形式の意味は、&lt;x1/&gt;F(x,y,...)&lt;x2/&gt;は、変数&lt;x3/&gt;x4&lt;x4/&gt;、&lt;x5/&gt;y&lt;x6/&gt;の変数を用いて評価されることである。 指定された値リストの各値です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The optional &lt;x18/&gt;bind-to bind_addr[:port]&lt;x19/&gt; specifies the IP address and port that other workers
should use to connect to this worker.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T224449Z" creationid="hsugawa8651" creationdate="20181109T224449Z">
        <seg>オプションの&lt;x18/&gt;bindto bind_addr[:port]&lt;x19/&gt;は、他の作業者がそのIPアドレスとポートを指定します。 この作業者に接続するために使用する必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The result
of &lt;x4/&gt;`view`&lt;x5/&gt; looks the same as the result of &lt;x6/&gt;`getindex`&lt;x7/&gt;, except the
data is left in place.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T160436Z" creationid="hsugawa8651" creationdate="20181109T160436Z">
        <seg>結果 &lt;x4/&gt;'view'&lt;x5/&gt;は、&lt;x6/&gt;'getindex'&lt;x7/&gt;の結果と同じであるが データが残されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The result is an N-d dense array with dimensions that are the concatenation of the dimensions
of the variable ranges &lt;x13/&gt;rx&lt;x14/&gt;, &lt;x15/&gt;ry&lt;x16/&gt;, etc. and each &lt;x17/&gt;F(x,y,...)&lt;x18/&gt; evaluation returns a scalar.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154815Z" creationid="hsugawa8651" creationdate="20181109T154815Z">
        <seg>結果は、次元の連結である次元を持つN次元の密配列です。 変数範囲&lt;x13/&gt;rx&lt;x14/&gt;、&lt;x15/&gt;ry&lt;x16/&gt;など、各&lt;x17/&gt;F(x,y,...)&lt;x18/&gt;評価はスカラーを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The same relationship holds for &lt;x8/&gt;min.(a,b)&lt;x9/&gt; and &lt;x10/&gt;minimum(a)&lt;x11/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T160036Z" creationid="hsugawa8651" creationdate="20181109T160036Z">
        <seg>&lt;x8/&gt;min(a,b)&lt;x9/&gt;と&lt;x10/&gt;最小(a)&lt;x11/&gt;と同じ関係が成り立つ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The second and third arguments are both optional, defaulting to the element type and dimensions of &lt;x3/&gt;A&lt;x4/&gt; if omitted.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154442Z" creationid="hsugawa8651" creationdate="20181109T154442Z">
        <seg>2番目と3番目の引数は両方とも省略可能です。デフォルトでは、&lt;x3/&gt;A&lt;x4/&gt;&lt;x/&gt;の要素タイプと次元は省略されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The size
of the binary data item is the minimal needed size, if the leading digit of the literal is not
&lt;x1/&gt;0&lt;x2/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T225415Z" creationid="hsugawa8651" creationdate="20181109T225415Z">
        <seg>サイズ リテラルの先頭桁が必要ない場合は、バイナリ・データ項目の最小サイズが2進数データ項目となります。 &lt;x1/&gt;0&lt;x2/&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The syntax &lt;x1/&gt;[A, B, C, ...]&lt;x2/&gt; constructs a 1-d array (i.e., a vector) of its arguments.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154518Z" creationid="hsugawa8651" creationdate="20181109T154518Z">
        <seg>構文&lt;x1/&gt;[A,B,C,…]&lt;x2/&gt;は、その引数の1次元配列(すなわち、ベクトル)を構成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The value in location &lt;x5/&gt;I_1[i_1], I_2[i_2], ..., I_n[i_n]&lt;x6/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T155412Z" creationid="hsugawa8651" creationdate="20181109T155412Z">
        <seg>location&lt;x5/&gt;I_1[i_1]の値、I_2[i_2]、.…、I_n[i_n]&lt;x6/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The variable &lt;x1/&gt;Sys.KERNEL&lt;x2/&gt; can be used to handle such
cases.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T224825Z" creationid="hsugawa8651" creationdate="20181109T224825Z">
        <seg>変数&lt;x1/&gt;Sys.KERNEL&lt;x2/&gt;は、このような処理を行うために使用することができます。 のようになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>There are several functions in the &lt;x3/&gt;Sys&lt;x4/&gt; module intended to make this easier:
&lt;x5/&gt;isunix&lt;x6/&gt;, &lt;x7/&gt;islinux&lt;x8/&gt;, &lt;x9/&gt;isapple&lt;x10/&gt;, &lt;x11/&gt;isbsd&lt;x12/&gt;, and &lt;x13/&gt;iswindows&lt;x14/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T224828Z" creationid="hsugawa8651" creationdate="20181109T224828Z">
        <seg>&lt;x3/&gt;Sys&lt;x4/&gt;モジュールには、以下のような機能がいくつか用意されています。 &lt;x5/&gt;イシュニク&lt;x6/&gt;、&lt;x7/&gt;アリヌス&lt;x8/&gt;、&lt;x9/&gt;イサプリ&lt;x10/&gt;、&lt;x11/&gt;イズベスト&lt;x12/&gt;、&lt;x13/&gt;イスウィンドウズ&lt;x14/&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>There are various ways to run Julia code and provide options, similar to those available for the
&lt;x1/&gt;perl&lt;x2/&gt; and &lt;x3/&gt;ruby&lt;x4/&gt; programs:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T224520Z" creationid="hsugawa8651" creationdate="20181109T224520Z">
        <seg>Juliaコードを実行するにはさまざまな方法があり、次のようなオプションを提供することができます。 &lt;x1/&gt;perl&lt;x2/&gt;および&lt;x3/&gt;ruby&lt;x4/&gt;プログラム:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>These map
directly onto numeric types and operations that are natively supported on modern computers, thus
allowing Julia to take full advantage of computational resources.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T225049Z" creationid="hsugawa8651" creationdate="20181109T225049Z">
        <seg>これらのマップ 現代のコンピューターでネイティブにサポートされている数値型や操作に直接 ジュリアが計算資源を最大限に活用できるようにすることです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>These may be used as follows:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T224831Z" creationid="hsugawa8651" creationdate="20181109T224831Z">
        <seg>これらは次のように使用できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>These operations
generally work correctly as a fallback for any specific array implementation.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T160310Z" creationid="hsugawa8651" creationdate="20181109T160310Z">
        <seg>これらの操作 一般的には、特定のアレイ実装のフォールバックとして正しく動作します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>They can be used similarly to &lt;x2/&gt;Array{Bool}&lt;x3/&gt; arrays (which store one byte per boolean value),
and can be converted to/from the latter via &lt;x4/&gt;Array(bitarray)&lt;x5/&gt; and &lt;x6/&gt;BitArray(array)&lt;x7/&gt;, respectively.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T160451Z" creationid="hsugawa8651" creationdate="20181109T160451Z">
        <seg>これらは、&lt;x2/&gt;Array{Bool}&lt;x3/&gt;配列(ブール値ごとに1バイトを格納する)と同様に使用できます。 また、&lt;x4/&gt;アレイ(bitarray)&lt;x5/&gt;および&lt;x6/&gt;BitArray(配列)&lt;x7/&gt;を介して、後者との間で変換を行うことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>They represent a collection
of scalar indices that each span &lt;x3/&gt;N&lt;x4/&gt; dimensions, enabling a form of indexing
that is sometimes referred to as pointwise indexing.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T155651Z" creationid="hsugawa8651" creationdate="20181109T155651Z">
        <seg>コレクションを表します。 各スパン&lt;x3/&gt;N&lt;x4/&gt;の各次元を使用可能にするスカラー指数のことで、索引の形式が可能になります。 ポイントワイズインデックスと呼ばれることもあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This
is because &lt;x5/&gt;(Cstring)&lt;x6/&gt; is just the expression &lt;x7/&gt;Cstring&lt;x8/&gt; surrounded by parentheses, rather than
a 1-tuple containing &lt;x9/&gt;Cstring&lt;x10/&gt;:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T224100Z" creationid="hsugawa8651" creationdate="20181109T224100Z">
        <seg>これ &lt;x5/&gt;(Cstring)&lt;x6/&gt;は、&lt;x7/&gt;Cstring&lt;x8/&gt;で囲まれた括弧で囲まれた表現であり &lt;x9/&gt;Cstring&lt;x10/&gt;:を含む1組のタプル</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This
will construct a 1-d array with element type &lt;x3/&gt;T&lt;x4/&gt;, initialized to contain elements &lt;x5/&gt;A&lt;x6/&gt;, &lt;x7/&gt;B&lt;x8/&gt;, &lt;x9/&gt;C&lt;x10/&gt;,
etc.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154702Z" creationid="hsugawa8651" creationdate="20181109T154702Z">
        <seg>これ 要素タイプ&lt;x3/&gt;T&lt;x4/&gt;を持つ1dアレイを構築し、要素&lt;x5/&gt;A&lt;x6/&gt;、&lt;x7/&gt;B&lt;x8/&gt;、&lt;x9/&gt;C&lt;x10/&gt;を含むように初期化します。 その他。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This applies not only to
arrays and other mutable objects which are normally heap-allocated, but also to
scalar values such as integers and floats which are normally stack-allocated and
commonly passed in registers when using C or Julia calling conventions.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T223829Z" creationid="hsugawa8651" creationdate="20181109T223829Z">
        <seg>これは 通常はヒープ割り当てされた配列やその他のmutableオブジェクトですが 通常スタック割り当てされた整数や浮動小数点のようなスカラー値 一般的には、CまたはJuliaの呼び出し規約を使用するときにレジスタで渡されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This argument will be evaluated at compile-time, when the containing method is defined.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T223844Z" creationid="hsugawa8651" creationdate="20181109T223844Z">
        <seg>この引数は、containingメソッドが定義された時にコンパイル時に評価されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This behavior is based on the observation that when one uses unsigned hex literals for integer
values, one typically is using them to represent a fixed numeric byte sequence, rather than just
an integer value.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T225343Z" creationid="hsugawa8651" creationdate="20181109T225343Z">
        <seg>この動作は、整数に対して符号なしの16進数のリテラルを使用する場合の観察結果に基づいています。 値は通常、固定された数値バイトシーケンスを表すために使用されます。 整数値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This does not occur when Julia code is run in other ways.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T225348Z" creationid="hsugawa8651" creationdate="20181109T225348Z">
        <seg>これは、Juliaコードが他の方法で実行されている場合には発生しません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This form can be used to call C library
functions, functions in the Julia runtime, or functions in an application linked to Julia.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T223802Z" creationid="hsugawa8651" creationdate="20181109T223802Z">
        <seg>このフォームを使用してCライブラリを呼び出すことができます。 関数、Juliaランタイム内の関数、またはJuliaにリンクされたアプリケーションの関数です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This includes
&lt;x6/&gt;`Colon`&lt;x7/&gt; (&lt;x8/&gt;:&lt;x9/&gt;) to select all indices within the entire dimension,
ranges of the form &lt;x10/&gt;a:c&lt;x11/&gt; or &lt;x12/&gt;a:b:c&lt;x13/&gt; to select contiguous or strided
subsections, and arrays of booleans to select elements at their &lt;x14/&gt;true&lt;x15/&gt; indices.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T155120Z" creationid="hsugawa8651" creationdate="20181109T155120Z">
        <seg>これには &lt;x6/&gt;「コロン」&lt;x7/&gt;(&lt;x8/&gt;:&lt;x9/&gt;)は、次元全体のすべてのインデックスを選択するために使用されます。 &lt;x10/&gt;a:c&lt;x11/&gt;または&lt;x12/&gt;a:b:c&lt;x13/&gt;to select連続またはストライドされたものを選択するための範囲 サブセクションは、&lt;x14/&gt;真の&lt;x15/&gt;インデックスで選択要素を選択するためのブール演算の配列です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This includes:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T155518Z" creationid="hsugawa8651" creationdate="20181109T155518Z">
        <seg>これには次のものが含まれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This is accomplished just by making an appropriate call with
&lt;x1/&gt;`ccall`&lt;x2/&gt; syntax, which looks like an ordinary function call.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T160544Z" creationid="hsugawa8651" creationdate="20181109T160544Z">
        <seg>これは、適切な呼び出しを行うことによって実現されます。 &lt;x1/&gt;`ccall'&lt;x2/&gt;構文は、通常の関数呼び出しのように見えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This means that
&lt;x1/&gt;@cfunction&lt;x2/&gt;-generated pointers cannot be used in calls where WINAPI expects &lt;x3/&gt;stdcall&lt;x4/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T153957Z" creationid="hsugawa8651" creationdate="20181109T153957Z">
        <seg>つまり &lt;x1/&gt;@cfunction&lt;x2/&gt;-生成されたポインタは、WINAPIが&lt;x3/&gt;stdcall&lt;x4/&gt;を想定している呼び出しでは使用できません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This object can be iterated to produce values on demand, instead of allocating
an array and storing them in advance (see &lt;x1/&gt;Iteration&lt;x2/&gt;).</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154927Z" creationid="hsugawa8651" creationdate="20181109T154927Z">
        <seg>このオブジェクトを反復して、必要に応じて必要に応じて値を生成することができます。 配列とそれを事前に格納する(&lt;x1/&gt;Iteration&lt;x2/&gt;を参照)。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This wrapper throws an exception clearly indicating the problem if the caller tries to get a non-existent
environment variable:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T224133Z" creationid="hsugawa8651" creationdate="20181109T224133Z">
        <seg>このラッパーは、呼び出し者が存在しないことを示す問題を明確に示す例外をスローします。 環境変数:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Though most code can be written in Julia, there are many high-quality, mature libraries for numerical
computing already written in C and Fortran.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T160533Z" creationid="hsugawa8651" creationdate="20181109T160533Z">
        <seg>ほとんどのコードはJuliaで書くことができますが、多くの場合、高品質で成熟したライブラリがあります。 CとFortranではすでに作成されています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To allow easy use of this existing code, Julia makes
it simple and efficient to call C and Fortran functions.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T160536Z" creationid="hsugawa8651" creationdate="20181109T160536Z">
        <seg>この既存のコードを簡単に利用できるようにするために、Juliaは CとFortranの関数を呼び出すことは簡単で効率的です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To enable convenient vectorization of mathematical and other operations,
Julia &lt;x1/&gt;&lt;x2/&gt;&lt;x3/&gt;(@ref man-vectorized) &lt;x4/&gt;f.(args...)&lt;x5/&gt;, e.g. &lt;x6/&gt;sin.(x)&lt;x7/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T155933Z" creationid="hsugawa8651" creationdate="20181109T155933Z">
        <seg>数学的およびその他の操作を便利にベクトル化することを可能にするために Julia&lt;x1/&gt;&lt;x2/&gt;&lt;x3/&gt;(@ref man vectorized)&lt;x4/&gt;f.(args.…)&lt;x6/&gt;sin.(x)&lt;x7/&gt;sin.(x)&lt;x7/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To exit the interactive session, type &lt;x1/&gt;CTRL-D&lt;x2/&gt; (press the Control/&lt;x3/&gt;^&lt;x4/&gt; key together with the &lt;x5/&gt;d&lt;x6/&gt; key), or type
&lt;x7/&gt;exit()&lt;x8/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T224304Z" creationid="hsugawa8651" creationdate="20181109T224304Z">
        <seg>対話型セッションを終了するには、&lt;x1/&gt;CTRL-D&lt;x2/&gt;(Ctrl+&gt;d&lt;x6/&gt;キーとともにControl/&lt;x/&gt;キーを押します)を入力するか、または入力します。 &lt;x7/&gt;exit()&lt;x8/&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To run code in a file non-interactively, you can give it as the first argument to the &lt;x1/&gt;julia&lt;x2/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T224323Z" creationid="hsugawa8651" creationdate="20181109T224323Z">
        <seg>非対話的にファイル内でコードを実行するには、&lt;x1/&gt;july&lt;x2/&gt;の最初の引数として指定できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To see the various ways we can pass dimensions to these constructors, consider the following examples:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154524Z" creationid="hsugawa8651" creationdate="20181109T154524Z">
        <seg>これらのコンストラクタに次元を渡すことができるさまざまな方法を確認するには、次の例を考慮してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Unsigned integers are input and output using the &lt;x1/&gt;0x&lt;x2/&gt; prefix and hexadecimal (base 16) digits
&lt;x3/&gt;0-9a-f&lt;x4/&gt; (the capitalized digits &lt;x5/&gt;A-F&lt;x6/&gt; also work for input).</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T225306Z" creationid="hsugawa8651" creationdate="20181109T225306Z">
        <seg>符号なし整数は、&lt;x1/&gt;0x&lt;x2/&gt;プレフィックスおよび16進数(base16)桁を使用して入力および出力されます。 &lt;x3/&gt;0 9a f&lt;x4/&gt;(大文字の数字&lt;x5/&gt;A-F&lt;x6/&gt;も入力に有効です)。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use dot operators like &lt;x3/&gt;.==&lt;x4/&gt; for elementwise comparisons.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T160015Z" creationid="hsugawa8651" creationdate="20181109T160015Z">
        <seg>&lt;x3/&gt;.==&lt;x4/&gt;のようなドット演算子を、要素的比較のために使用します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use native code from system image if available</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T224652Z" creationid="hsugawa8651" creationdate="20181109T224652Z">
        <seg>使用可能な場合は、システムイメージからネイティブコードを使用します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Values can be specified as any iterable object, but
will commonly be ranges like &lt;x7/&gt;1:n&lt;x8/&gt; or &lt;x9/&gt;2:(n-1)&lt;x10/&gt;, or explicit arrays of values like &lt;x11/&gt;[1.2, 3.4, 5.7]&lt;x12/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154811Z" creationid="hsugawa8651" creationdate="20181109T154811Z">
        <seg>値は、任意のオブジェクトとして指定することができますが は一般的に&lt;x7/&gt;1:n&lt;x8/&gt;または&lt;x9/&gt;2:(n-1)&lt;x10/&gt;、または&lt;x11/&gt;[1.2、3.4、5.7]&lt;x12/&gt;のような明示的な値の配列である。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Vectors and multidimensional arrays of integers</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T155522Z" creationid="hsugawa8651" creationdate="20181109T155522Z">
        <seg>整数のベクトルおよび多次元配列</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Very few operations are implemented specifically for &lt;x15/&gt;Array&lt;x16/&gt; beyond those that are required
for all &lt;x17/&gt;AbstractArray&lt;x18/&gt;s; much of the array library is implemented in a generic
manner that allows all custom arrays to behave similarly.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T160424Z" creationid="hsugawa8651" creationdate="20181109T160424Z">
        <seg>&lt;x15/&gt;アレイ&lt;x16/&gt;に対しては、必要な動作を超えて実装されているオペレーションはほとんどありません。 すべての&lt;x17/&gt;AbstractArray&lt;x18/&gt;;アレイライブラリの多くは一般的に実装されています。 すべてのカスタム・アレイが同じように動作するようにする方法です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When both
libraries and executables are generated by LLVM, it is possible to perform whole-program optimizations
that can even optimize across this boundary, but Julia does not yet support that.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T160558Z" creationid="hsugawa8651" creationdate="20181109T160558Z">
        <seg>両方 ライブラリと実行可能ファイルはLLVMによって生成されるため、プログラム全体の最適化を実行することができます。 この境界にわたって最適化することもできますが、ジュリアはまだサポートしていません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When chaining conditionals (including &lt;x1/&gt;if&lt;x2/&gt;/&lt;x3/&gt;elseif&lt;x4/&gt;/&lt;x5/&gt;end&lt;x6/&gt;), the &lt;x7/&gt;@static&lt;x8/&gt; must be repeated for
each level (parentheses optional, but recommended for readability):</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T225006Z" creationid="hsugawa8651" creationdate="20181109T225006Z">
        <seg>&lt;x2/&gt;/&lt;x3/&gt;&lt;x6/&gt;/&lt;x5/&gt;の場合は、&lt;x7/&gt;@static&lt;x8/&gt;を繰り返す必要があります。&lt;x x/&gt;&lt;x8/&gt;&lt;x8/&gt;&lt;x6/&gt;&lt;x8/&gt;は 各レベル(オプションではありますが、読みやすさには推奨されます):</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When combined with other indexing forms and iterators
that yield &lt;x3/&gt;CartesianIndex&lt;x4/&gt;es, however, this can produce very elegant
and efficient code.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T155632Z" creationid="hsugawa8651" creationdate="20181109T155632Z">
        <seg>他のインデックス作成フォームおよびイテレータと組み合わされた場合 しかし、それは&lt;x3/&gt;CartesianIndex&lt;x4/&gt;の収量をもたらすが、これは非常にエレガントなものである。 効率的なコードです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When run in interactive mode, &lt;x9/&gt;julia&lt;x10/&gt; displays a banner and prompts the user for input.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T224306Z" creationid="hsugawa8651" creationdate="20181109T224306Z">
        <seg>対話モードで実行すると、&lt;x9/&gt;julia&lt;x10/&gt;はバナーを表示し、入力を求めるプロンプトを表示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When writing a generator expression with multiple dimensions inside an argument list, parentheses
are needed to separate the generator from subsequent arguments:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154940Z" creationid="hsugawa8651" creationdate="20181109T154940Z">
        <seg>引数リスト内に複数の次元を持つジェネレータ式を記述する場合は、括弧を使用します。 ジェネレータを次の引数から分離する必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When writing cross-platform applications or libraries, it is often necessary to allow for
differences between operating systems.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T224823Z" creationid="hsugawa8651" creationdate="20181109T224823Z">
        <seg>クロスプラットフォームアプリケーションやライブラリを記述する場合は、次のようなことがよくあります。 オペレーティング・システム間の違い。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>X = getindex(A, I_1, I_2, ..., I_n)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T155300Z" creationid="hsugawa8651" creationdate="20181109T155300Z">
        <seg>X = getindex(A, I_1, I_2, ..., I_n)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`BitArray`&lt;x1/&gt;s are space-efficient "packed" boolean arrays, which store one bit per boolean value.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T160448Z" creationid="hsugawa8651" creationdate="20181109T160448Z">
        <seg>「BitArray」&lt;x1/&gt;は、ブール値ごとに1ビットを格納するスペース効率の高い「パックされた」ブール演算配列です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`CartesianIndex{N}`&lt;x1/&gt;s, which behave like an &lt;x2/&gt;N&lt;x3/&gt;-tuple of integers spanning multiple dimensions (see below for more details)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T155514Z" creationid="hsugawa8651" creationdate="20181109T155514Z">
        <seg>「CartesianIndex{N}」&lt;x1/&gt;は、複数の次元を超える整数の&lt;x2/&gt;N&lt;x3/&gt;のように動作します(詳細については以下を参照)。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`Colon()`&lt;x1/&gt; (&lt;x2/&gt;:&lt;x3/&gt;), which represents all indices within an entire dimension or across the entire array</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T155540Z" creationid="hsugawa8651" creationdate="20181109T155540Z">
        <seg>「コロン()」&lt;x1/&gt;(&lt;x2/&gt;:&lt;x3/&gt;)は、全次元または配列全体にわたってすべてのインデックスを表します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`axes(A)`&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T153250Z" creationid="hsugawa8651" creationdate="20181109T153250Z">
        <seg>`axes(A)`&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`axes(A,n)`&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T153255Z" creationid="hsugawa8651" creationdate="20181109T153255Z">
        <seg>`axes(A,n)`&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`eachindex(A)`&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T153302Z" creationid="hsugawa8651" creationdate="20181109T153302Z">
        <seg>`eachindex(A)`&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`hvcat`&lt;x1/&gt; concatenates in both dimension 1 (with semicolons) and dimension 2 (with spaces).</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154644Z" creationid="hsugawa8651" creationdate="20181109T154644Z">
        <seg>「ホフカト」&lt;x1/&gt;は、次元1(セミコロン)と次元2(スペースを含む)の両方で連結されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`length(A)`&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T153218Z" creationid="hsugawa8651" creationdate="20181109T153218Z">
        <seg>`length(A)`&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`ndims(A)`&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T153230Z" creationid="hsugawa8651" creationdate="20181109T153230Z">
        <seg>`ndims(A)`&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`size(A)`&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T153236Z" creationid="hsugawa8651" creationdate="20181109T153236Z">
        <seg>`size(A)`&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`size(A,n)`&lt;x1/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T153242Z" creationid="hsugawa8651" creationdate="20181109T153242Z">
        <seg>`size(A,n)`&lt;x1/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`view`&lt;x1/&gt; function, which is called the same way as
&lt;x2/&gt;`getindex`&lt;x3/&gt; (with an array and a series of index arguments).</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T160431Z" creationid="hsugawa8651" creationdate="20181109T160431Z">
        <seg>「view」&lt;x1/&gt;関数は、以下と同じ方法で呼び出されます。 &lt;x2/&gt;`getindex'&lt;x3/&gt;(配列と一連のインデックス引数を持つ)。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>a &lt;x1/&gt;BitArray&lt;x2/&gt; with all values &lt;x3/&gt;false&lt;x4/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154417Z" creationid="hsugawa8651" creationdate="20181109T154417Z">
        <seg>&lt;x1/&gt;BitArray&lt;x2/&gt;であり、すべての値は&lt;x3/&gt;false&lt;x4/&gt;である。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>a &lt;x1/&gt;`BitArray`&lt;x2/&gt; with all values &lt;x3/&gt;true&lt;x4/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154402Z" creationid="hsugawa8651" creationdate="20181109T154402Z">
        <seg>&lt;x1/&gt;'BitArray'&lt;x2/&gt;はすべての値が&lt;x3/&gt;真&lt;x4/&gt;である</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>a function pointer (for example, from &lt;x1/&gt;dlsym&lt;x2/&gt;).</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T223840Z" creationid="hsugawa8651" creationdate="20181109T223840Z">
        <seg>関数ポインタ(たとえば、&lt;x1/&gt;dlsym&lt;x2/&gt;からの関数ポインタです)。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>a range expressing the valid indices along dimension &lt;x1/&gt;n&lt;x2/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154257Z" creationid="hsugawa8651" creationdate="20181109T154257Z">
        <seg>寸法&lt;x1/&gt;n&lt;x2/&gt;に沿って有効なインデックスを表現する範囲</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>a tuple containing the dimensions of &lt;x1/&gt;A&lt;x2/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154246Z" creationid="hsugawa8651" creationdate="20181109T154246Z">
        <seg>&lt;x1/&gt;A&lt;x2/&gt;の次元を含むタプル</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>a tuple containing the valid indices of &lt;x1/&gt;A&lt;x2/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154254Z" creationid="hsugawa8651" creationdate="20181109T154254Z">
        <seg>&lt;x1/&gt;A&lt;x2/&gt;の有効なインデックスを含むタプル</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>a tuple of the strides in each dimension</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154309Z" creationid="hsugawa8651" creationdate="20181109T154309Z">
        <seg>各次元の上昇点の集合</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>a&lt;x1/&gt; and &lt;x2/&gt;b&lt;x3/&gt;, and &lt;x4/&gt;`maximum(a)`&lt;x5/&gt;, which finds the largest value within
&lt;x6/&gt;a&lt;x7/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T160031Z" creationid="hsugawa8651" creationdate="20181109T160031Z">
        <seg>&lt;x1/&gt;および&lt;x2/&gt;b&lt;x3/&gt;、&lt;x4/&gt;の最大値(a)&lt;x5/&gt;は、最も大きい値を示します。 &lt;x6/&gt;a&lt;x7/&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>an &lt;x1/&gt;Array&lt;x2/&gt; of all ones</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154358Z" creationid="hsugawa8651" creationdate="20181109T154358Z">
        <seg>全ての&lt;x1/&gt;アレイ&lt;x2/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>an &lt;x1/&gt;Array&lt;x2/&gt; of all zeros</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154354Z" creationid="hsugawa8651" creationdate="20181109T154354Z">
        <seg>すべてのゼロの&lt;x1/&gt;配列&lt;x2/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>an &lt;x1/&gt;Array&lt;x2/&gt; with random, iid &lt;x3/&gt;&lt;x4/&gt;&lt;x5/&gt; and uniformly distributed values in the half-open interval &lt;x6/&gt;[0, 1)&lt;x7/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154449Z" creationid="hsugawa8651" creationdate="20181109T154449Z">
        <seg>&lt;x1/&gt;配列&lt;x2/&gt;で、ランダムなiid&lt;x3/&gt;&lt;x4/&gt;&lt;x5/&gt;で、半オープン間隔&lt;x6/&gt;[0 1]&lt;x7/&gt;で均一に分布した値を示す。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>an &lt;x1/&gt;Array&lt;x2/&gt; with random, iid and standard normally distributed values</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154452Z" creationid="hsugawa8651" creationdate="20181109T154452Z">
        <seg>ランダムなiidと標準的な正規分布の値を持つ&lt;x1/&gt;配列&lt;x2/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>an array containing the same data as &lt;x1/&gt;A&lt;x2/&gt;, but with different dimensions</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154421Z" creationid="hsugawa8651" creationdate="20181109T154421Z">
        <seg>&lt;x1/&gt;A&lt;x2/&gt;と同じデータを含む配列であるが、異なる次元を含む配列</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>an array with the same binary data as &lt;x1/&gt;A&lt;x2/&gt;, but with element type &lt;x3/&gt;T&lt;x4/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154445Z" creationid="hsugawa8651" creationdate="20181109T154445Z">
        <seg>&lt;x1/&gt;A&lt;x2/&gt;と同じバイナリデータを持つ配列であるが、要素タイプ&lt;x3/&gt;T&lt;x4/&gt;である。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>an efficient iterator for visiting each position in &lt;x1/&gt;A&lt;x2/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154302Z" creationid="hsugawa8651" creationdate="20181109T154302Z">
        <seg>&lt;x1/&gt;A&lt;x2/&gt;の各位置を訪問するための効率的なイテレータ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>an uninitialized array of the same type as &lt;x1/&gt;A&lt;x2/&gt; (dense, sparse, etc.), but with the specified element type and dimensions.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154439Z" creationid="hsugawa8651" creationdate="20181109T154439Z">
        <seg>&lt;x1/&gt;A&lt;x2/&gt;(密、疎等)と同じタイプの初期化されていない配列ですが、指定されたエレメントタイプとディメンションがあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>an uninitialized dense &lt;x1/&gt;`Array`&lt;x2/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154351Z" creationid="hsugawa8651" creationdate="20181109T154351Z">
        <seg>初期化されていない密な&lt;x1/&gt;`配列"&lt;x2/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>clock&lt;x1/&gt; takes no arguments and returns an &lt;x2/&gt;`Int32`&lt;x3/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T224034Z" creationid="hsugawa8651" creationdate="20181109T224034Z">
        <seg>クロック&lt;x1/&gt;は引数を取らず、&lt;x2/&gt;`Int32`&lt;x3/&gt;を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>concatenate input arrays along dimension(s) &lt;x1/&gt;k&lt;x2/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154549Z" creationid="hsugawa8651" creationdate="20181109T154549Z">
        <seg>次元に沿って入力配列を連結する&lt;x1/&gt;k&lt;x2/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>copy &lt;x1/&gt;A&lt;x2/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154430Z" creationid="hsugawa8651" creationdate="20181109T154430Z">
        <seg>コピー&lt;x1/&gt;A&lt;x2/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>copy &lt;x1/&gt;A&lt;x2/&gt;, recursively copying its elements</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154435Z" creationid="hsugawa8651" creationdate="20181109T154435Z">
        <seg>&lt;x1/&gt;A&lt;x2/&gt;をコピーして、その要素を再帰的にコピーする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>equivalent to &lt;x1/&gt;--code-coverage=user&lt;x2/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T224802Z" creationid="hsugawa8651" creationdate="20181109T224802Z">
        <seg>&lt;x1/&gt;--code coverage=user&lt;x2/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>equivalent to &lt;x1/&gt;--track-allocation=user&lt;x2/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T224807Z" creationid="hsugawa8651" creationdate="20181109T224807Z">
        <seg>&lt;x1/&gt;に相当する--トラック割り当て=ユーザ&lt;x2/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>fill the array &lt;x1/&gt;A&lt;x2/&gt; with the value &lt;x3/&gt;x&lt;x4/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154507Z" creationid="hsugawa8651" creationdate="20181109T154507Z">
        <seg>&lt;x3/&gt;x&lt;x4/&gt;の値を持つ配列&lt;x1/&gt;A&lt;x2/&gt;を配列に埋め込みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>for a in A
    &lt;x1/&gt; Do something with the element a
end

for i in eachindex(A)
    &lt;x2/&gt; Do something with i and/or A[i]
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T155827Z" creationid="hsugawa8651" creationdate="20181109T155827Z">
        <seg>for a in A
    &lt;x1/&gt; Do something with the element a
end

for i in eachindex(A)
    &lt;x2/&gt; Do something with i and/or A[i]
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>function getenv(var::AbstractString)
    val = ccall((:getenv, "libc"),
                Cstring, (Cstring,), var)
    if val == C_NULL
        error("getenv: undefined variable: ", var)
    end
    unsafe_string(val)
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T224118Z" creationid="hsugawa8651" creationdate="20181109T224118Z">
        <seg>function getenv(var::AbstractString)
    val = ccall((:getenv, "libc"),
                Cstring, (Cstring,), var)
    if val == C_NULL
        error("getenv: undefined variable: ", var)
    end
    unsafe_string(val)
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>getenv&lt;x1/&gt; C library function is wrapped in the following Julia function,
which is a simplified version of the actual definition from &lt;x2/&gt;`env.jl`&lt;x3/&gt;:</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T224115Z" creationid="hsugawa8651" creationdate="20181109T224115Z">
        <seg>getenv&lt;x1/&gt;Cライブラリ関数は、次のJulia関数にラップされています。 これは、&lt;x2/&gt;'env.jl'&lt;x3/&gt;からの実際の定義の簡略化されたバージョンです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>if Sys.iswindows()
    windows_specific_thing(a)
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T224833Z" creationid="hsugawa8651" creationdate="20181109T224833Z">
        <seg>if Sys.iswindows()
    windows_specific_thing(a)
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>io = IOBuffer()
Base.banner(io)
banner = String(take!(io))
import Markdown
Markdown.parse("```\n\$ julia\n\n$(banner)\njulia&gt; 1 + 2\n3\n\njulia&gt; ans\n3\n```")</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T224257Z" creationid="hsugawa8651" creationdate="20181109T224257Z">
        <seg>io = IOBuffer()
Base.banner(io)
banner = String(take!(io))
import Markdown
Markdown.parse("```\n\$ julia\n\n$(banner)\njulia&gt; 1 + 2\n3\n\njulia&gt; ans\n3\n```")</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia [switches] -- [programfile] [args...]</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T224522Z" creationid="hsugawa8651" creationdate="20181109T224522Z">
        <seg>julia [switches] -- [programfile] [args...]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; (Cstring)
Cstring

julia&gt; (Cstring,)
(Cstring,)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T224103Z" creationid="hsugawa8651" creationdate="20181109T224103Z">
        <seg>julia&gt; (Cstring)
Cstring

julia&gt; (Cstring,)
(Cstring,)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; 0b10
0x02

julia&gt; typeof(ans)
UInt8

julia&gt; 0o010
0x08

julia&gt; typeof(ans)
UInt8

julia&gt; 0x00000000000000001111222233334444
0x00000000000000001111222233334444

julia&gt; typeof(ans)
UInt128</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T225357Z" creationid="hsugawa8651" creationdate="20181109T225357Z">
        <seg>julia&gt; 0b10
0x02

julia&gt; typeof(ans)
UInt8

julia&gt; 0o010
0x08

julia&gt; typeof(ans)
UInt8

julia&gt; 0x00000000000000001111222233334444
0x00000000000000001111222233334444

julia&gt; typeof(ans)
UInt128</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; 1
1

julia&gt; 1234
1234</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T225207Z" creationid="hsugawa8651" creationdate="20181109T225207Z">
        <seg>julia&gt; 1
1

julia&gt; 1234
1234</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; A = rand(4,3);

julia&gt; B = view(A, 1:3, 2:3);

julia&gt; for i in eachindex(B)
           @show i
       end
i = CartesianIndex(1, 1)
i = CartesianIndex(2, 1)
i = CartesianIndex(3, 1)
i = CartesianIndex(1, 2)
i = CartesianIndex(2, 2)
i = CartesianIndex(3, 2)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T155847Z" creationid="hsugawa8651" creationdate="20181109T155847Z">
        <seg>julia&gt; A = rand(4,3);

julia&gt; B = view(A, 1:3, 2:3);

julia&gt; for i in eachindex(B)
           @show i
       end
i = CartesianIndex(1, 1)
i = CartesianIndex(2, 1)
i = CartesianIndex(3, 1)
i = CartesianIndex(1, 2)
i = CartesianIndex(2, 2)
i = CartesianIndex(3, 2)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; A = reshape(1:32, 4, 4, 2);

julia&gt; A[3, 2, 1]
7

julia&gt; A[CartesianIndex(3, 2, 1)] == A[3, 2, 1] == 7
true</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T155608Z" creationid="hsugawa8651" creationdate="20181109T155608Z">
        <seg>julia&gt; A = reshape(1:32, 4, 4, 2);

julia&gt; A[3, 2, 1]
7

julia&gt; A[CartesianIndex(3, 2, 1)] == A[3, 2, 1] == 7
true</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; A = reshape(collect(1:16), (2, 2, 2, 2))
2×2×2×2 Array{Int64,4}:
[:, :, 1, 1] =
 1  3
 2  4

[:, :, 2, 1] =
 5  7
 6  8

[:, :, 1, 2] =
  9  11
 10  12

[:, :, 2, 2] =
 13  15
 14  16

julia&gt; A[1, 2, 1, 1] &lt;x1/&gt; all scalar indices
3

julia&gt; A[[1, 2], [1], [1, 2], [1]] &lt;x2/&gt; all vector indices
2×1×2×1 Array{Int64,4}:
[:, :, 1, 1] =
 1
 2

[:, :, 2, 1] =
 5
 6

julia&gt; A[[1, 2], [1], [1, 2], 1] &lt;x3/&gt; a mix of index types
2×1×2 Array{Int64,3}:
[:, :, 1] =
 1
 2

[:, :, 2] =
 5
 6</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T155139Z" creationid="hsugawa8651" creationdate="20181109T155139Z">
        <seg>julia&gt; A = reshape(collect(1:16), (2, 2, 2, 2))
2×2×2×2 Array{Int64,4}:
[:, :, 1, 1] =
 1  3
 2  4

[:, :, 2, 1] =
 5  7
 6  8

[:, :, 1, 2] =
  9  11
 10  12

[:, :, 2, 2] =
 13  15
 14  16

julia&gt; A[1, 2, 1, 1] &lt;x1/&gt; all scalar indices
3

julia&gt; A[[1, 2], [1], [1, 2], [1]] &lt;x2/&gt; all vector indices
2×1×2×1 Array{Int64,4}:
[:, :, 1, 1] =
 1
 2

[:, :, 2, 1] =
 5
 6

julia&gt; A[[1, 2], [1], [1, 2], 1] &lt;x3/&gt; a mix of index types
2×1×2 Array{Int64,3}:
[:, :, 1] =
 1
 2

[:, :, 2] =
 5
 6</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; A = reshape(collect(1:16), (2, 2, 2, 2));

julia&gt; A[[1 2; 1 2]]
2×2 Array{Int64,2}:
 1  2
 1  2

julia&gt; A[[1 2; 1 2], 1, 2, 1]
2×2 Array{Int64,2}:
 5  6
 5  6</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T155157Z" creationid="hsugawa8651" creationdate="20181109T155157Z">
        <seg>julia&gt; A = reshape(collect(1:16), (2, 2, 2, 2));

julia&gt; A[[1 2; 1 2]]
2×2 Array{Int64,2}:
 1  2
 1  2

julia&gt; A[[1 2; 1 2], 1, 2, 1]
2×2 Array{Int64,2}:
 5  6
 5  6</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; A = reshape(collect(1:2:18), (3, 3))
3×3 Array{Int64,2}:
 1   7  13
 3   9  15
 5  11  17

julia&gt; A[4]
7

julia&gt; A[[2, 5, 8]]
3-element Array{Int64,1}:
  3
  9
 15

julia&gt; A[[1 4; 3 8]]
2×2 Array{Int64,2}:
 1   7
 5  15

julia&gt; A[[]]
0-element Array{Int64,1}

julia&gt; A[1:2:5]
3-element Array{Int64,1}:
 1
 5
 9

julia&gt; A[2, :]
3-element Array{Int64,1}:
  3
  9
 15

julia&gt; A[:, 3]
3-element Array{Int64,1}:
 13
 15
 17</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T155550Z" creationid="hsugawa8651" creationdate="20181109T155550Z">
        <seg>julia&gt; A = reshape(collect(1:2:18), (3, 3))
3×3 Array{Int64,2}:
 1   7  13
 3   9  15
 5  11  17

julia&gt; A[4]
7

julia&gt; A[[2, 5, 8]]
3-element Array{Int64,1}:
  3
  9
 15

julia&gt; A[[1 4; 3 8]]
2×2 Array{Int64,2}:
 1   7
 5  15

julia&gt; A[[]]
0-element Array{Int64,1}

julia&gt; A[1:2:5]
3-element Array{Int64,1}:
 1
 5
 9

julia&gt; A[2, :]
3-element Array{Int64,1}:
  3
  9
 15

julia&gt; A[:, 3]
3-element Array{Int64,1}:
 13
 15
 17</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; [(i,j) for i=1:3 for j=1:i if i+j == 4]
2-element Array{Tuple{Int64,Int64},1}:
 (2, 2)
 (3, 1)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T155100Z" creationid="hsugawa8651" creationdate="20181109T155100Z">
        <seg>julia&gt; [(i,j) for i=1:3 for j=1:i if i+j == 4]
2-element Array{Tuple{Int64,Int64},1}:
 (2, 2)
 (3, 1)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; [(i,j) for i=1:3 for j=1:i]
6-element Array{Tuple{Int64,Int64},1}:
 (1, 1)
 (2, 1)
 (2, 2)
 (3, 1)
 (3, 2)
 (3, 3)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T155040Z" creationid="hsugawa8651" creationdate="20181109T155040Z">
        <seg>julia&gt; [(i,j) for i=1:3 for j=1:i]
6-element Array{Tuple{Int64,Int64},1}:
 (1, 1)
 (2, 1)
 (2, 2)
 (3, 1)
 (3, 2)
 (3, 3)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; [[1 2] [3 4]]
1×4 Array{Int64,2}:
 1  2  3  4

julia&gt; Int8[[1 2] [3 4]]
1×4 Array{Int8,2}:
 1  2  3  4</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154710Z" creationid="hsugawa8651" creationdate="20181109T154710Z">
        <seg>julia&gt; [[1 2] [3 4]]
1×4 Array{Int64,2}:
 1  2  3  4

julia&gt; Int8[[1 2] [3 4]]
1×4 Array{Int8,2}:
 1  2  3  4</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; [[1; 2]; [3, 4]]
4-element Array{Int64,1}:
 1
 2
 3
 4

julia&gt; [[1 2] [3 4]]
1×4 Array{Int64,2}:
 1  2  3  4

julia&gt; [[1 2]; [3 4]]
2×2 Array{Int64,2}:
 1  2
 3  4</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154652Z" creationid="hsugawa8651" creationdate="20181109T154652Z">
        <seg>julia&gt; [[1; 2]; [3, 4]]
4-element Array{Int64,1}:
 1
 2
 3
 4

julia&gt; [[1 2] [3 4]]
1×4 Array{Int64,2}:
 1  2  3  4

julia&gt; [[1 2]; [3 4]]
2×2 Array{Int64,2}:
 1  2
 3  4</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; a = [1,2,5,6,7];

julia&gt; searchsorted(a, 4)
3:2</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T155322Z" creationid="hsugawa8651" creationdate="20181109T155322Z">
        <seg>julia&gt; a = [1,2,5,6,7];

julia&gt; searchsorted(a, 4)
3:2</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; a = rand(10, 10)
10×10 Array{Float64,2}:
 0.517515  0.0348206  0.749042   0.0979679  …  0.75984     0.950481   0.579513
 0.901092  0.873479   0.134533   0.0697848     0.0586695   0.193254   0.726898
 0.976808  0.0901881  0.208332   0.920358      0.288535    0.705941   0.337137
 0.657127  0.0317896  0.772837   0.534457      0.0966037   0.700694   0.675999
 0.471777  0.144969   0.0718405  0.0827916     0.527233    0.173132   0.694304
 0.160872  0.455168   0.489254   0.827851   …  0.62226     0.0995456  0.946522
 0.291857  0.769492   0.68043    0.629461      0.727558    0.910796   0.834837
 0.775774  0.700731   0.700177   0.0126213     0.00822304  0.327502   0.955181
 0.9715    0.64354    0.848441   0.241474      0.591611    0.792573   0.194357
 0.646596  0.575456   0.0995212  0.038517      0.709233    0.477657   0.0507231

julia&gt; b = view(a, 2:2:8,2:2:4)
4×2 view(::Array{Float64,2}, 2:2:8, 2:2:4) with eltype Float64:
 0.873479   0.0697848
 0.0317896  0.534457
 0.455168   0.827851
 0.700731   0.0126213

julia&gt; (q, r) = qr(b);

julia&gt; q
4×4 LinearAlgebra.QRCompactWYQ{Float64,Array{Float64,2}}:
 -0.722358    0.227524  -0.247784    -0.604181
 -0.0262896  -0.575919  -0.804227     0.144377
 -0.376419   -0.75072    0.540177    -0.0541979
 -0.579497    0.230151  -0.00552346   0.781782

julia&gt; r
2×2 Array{Float64,2}:
 -1.20921  -0.383393
  0.0      -0.910506</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T160525Z" creationid="hsugawa8651" creationdate="20181109T160525Z">
        <seg>julia&gt; a = rand(10, 10)
10×10 Array{Float64,2}:
 0.517515  0.0348206  0.749042   0.0979679  …  0.75984     0.950481   0.579513
 0.901092  0.873479   0.134533   0.0697848     0.0586695   0.193254   0.726898
 0.976808  0.0901881  0.208332   0.920358      0.288535    0.705941   0.337137
 0.657127  0.0317896  0.772837   0.534457      0.0966037   0.700694   0.675999
 0.471777  0.144969   0.0718405  0.0827916     0.527233    0.173132   0.694304
 0.160872  0.455168   0.489254   0.827851   …  0.62226     0.0995456  0.946522
 0.291857  0.769492   0.68043    0.629461      0.727558    0.910796   0.834837
 0.775774  0.700731   0.700177   0.0126213     0.00822304  0.327502   0.955181
 0.9715    0.64354    0.848441   0.241474      0.591611    0.792573   0.194357
 0.646596  0.575456   0.0995212  0.038517      0.709233    0.477657   0.0507231

julia&gt; b = view(a, 2:2:8,2:2:4)
4×2 view(::Array{Float64,2}, 2:2:8, 2:2:4) with eltype Float64:
 0.873479   0.0697848
 0.0317896  0.534457
 0.455168   0.827851
 0.700731   0.0126213

julia&gt; (q, r) = qr(b);

julia&gt; q
4×4 LinearAlgebra.QRCompactWYQ{Float64,Array{Float64,2}}:
 -0.722358    0.227524  -0.247784    -0.604181
 -0.0262896  -0.575919  -0.804227     0.144377
 -0.376419   -0.75072    0.540177    -0.0541979
 -0.579497    0.230151  -0.00552346   0.781782

julia&gt; r
2×2 Array{Float64,2}:
 -1.20921  -0.383393
  0.0      -0.910506</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; a = rand(2,1); A = rand(2,3);

julia&gt; repeat(a,1,3)+A
2×3 Array{Float64,2}:
 1.20813  1.82068  1.25387
 1.56851  1.86401  1.67846</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T160046Z" creationid="hsugawa8651" creationdate="20181109T160046Z">
        <seg>julia&gt; a = rand(2,1); A = rand(2,3);

julia&gt; repeat(a,1,3)+A
2×3 Array{Float64,2}:
 1.20813  1.82068  1.25387
 1.56851  1.86401  1.67846</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; broadcast(+, a, A)
2×3 Array{Float64,2}:
 1.20813  1.82068  1.25387
 1.56851  1.86401  1.67846

julia&gt; b = rand(1,2)
1×2 Array{Float64,2}:
 0.867535  0.00457906

julia&gt; broadcast(+, a, b)
2×2 Array{Float64,2}:
 1.71056  0.847604
 1.73659  0.873631</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T160057Z" creationid="hsugawa8651" creationdate="20181109T160057Z">
        <seg>julia&gt; broadcast(+, a, A)
2×3 Array{Float64,2}:
 1.20813  1.82068  1.25387
 1.56851  1.86401  1.67846

julia&gt; b = rand(1,2)
1×2 Array{Float64,2}:
 0.867535  0.00457906

julia&gt; broadcast(+, a, b)
2×2 Array{Float64,2}:
 1.71056  0.847604
 1.73659  0.873631</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; convert.(Float32, [1, 2])
2-element Array{Float32,1}:
 1.0
 2.0

julia&gt; ceil.((UInt8,), [1.2 3.4; 5.6 6.7])
2×2 Array{UInt8,2}:
 0x02  0x04
 0x06  0x07

julia&gt; string.(1:3, ".</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T160140Z" creationid="hsugawa8651" creationdate="20181109T160140Z">
        <seg>julia&gt; convert.(Float32, [1, 2])
2-element Array{Float32,1}:
 1.0
 2.0

julia&gt; ceil.((UInt8,), [1.2 3.4; 5.6 6.7])
2×2 Array{UInt8,2}:
 0x02  0x04
 0x06  0x07

julia&gt; string.(1:3, ".</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; getenv("SHELL")
"/bin/bash"

julia&gt; getenv("FOOBAR")
getenv: undefined variable: FOOBAR</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T224135Z" creationid="hsugawa8651" creationdate="20181109T224135Z">
        <seg>julia&gt; getenv("SHELL")
"/bin/bash"

julia&gt; getenv("FOOBAR")
getenv: undefined variable: FOOBAR</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; map(tuple, (1/(i+j) for i=1:2, j=1:2), [1 3; 2 4])
2×2 Array{Tuple{Float64,Int64},2}:
 (0.5, 1)       (0.333333, 3)
 (0.333333, 2)  (0.25, 4)</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T155000Z" creationid="hsugawa8651" creationdate="20181109T155000Z">
        <seg>julia&gt; map(tuple, (1/(i+j) for i=1:2, j=1:2), [1 3; 2 4])
2×2 Array{Tuple{Float64,Int64},2}:
 (0.5, 1)       (0.333333, 3)
 (0.333333, 2)  (0.25, 4)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; map(tuple, 1/(i+j) for i=1:2, j=1:2, [1:4;])
ERROR: syntax: invalid iteration specification</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154944Z" creationid="hsugawa8651" creationdate="20181109T154944Z">
        <seg>julia&gt; map(tuple, 1/(i+j) for i=1:2, j=1:2, [1:4;])
ERROR: syntax: invalid iteration specification</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; page = A[:,:,1]
4×4 Array{Int64,2}:
 1  5   9  13
 2  6  10  14
 3  7  11  15
 4  8  12  16

julia&gt; page[[CartesianIndex(1,1),
             CartesianIndex(2,2),
             CartesianIndex(3,3),
             CartesianIndex(4,4)]]
4-element Array{Int64,1}:
  1
  6
 11
 16</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T155657Z" creationid="hsugawa8651" creationdate="20181109T155657Z">
        <seg>julia&gt; page = A[:,:,1]
4×4 Array{Int64,2}:
 1  5   9  13
 2  6  10  14
 3  7  11  15
 4  8  12  16

julia&gt; page[[CartesianIndex(1,1),
             CartesianIndex(2,2),
             CartesianIndex(3,3),
             CartesianIndex(4,4)]]
4-element Array{Int64,1}:
  1
  6
 11
 16</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; path = ccall((:getenv, "libc"), Cstring, (Cstring,), "SHELL")
Cstring(@0x00007fff5fbffc45)

julia&gt; unsafe_string(path)
"/bin/bash"</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T224044Z" creationid="hsugawa8651" creationdate="20181109T224044Z">
        <seg>julia&gt; path = ccall((:getenv, "libc"), Cstring, (Cstring,), "SHELL")
Cstring(@0x00007fff5fbffc45)

julia&gt; unsafe_string(path)
"/bin/bash"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; sum(1/n^2 for n=1:1000)
1.6439345666815615</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154933Z" creationid="hsugawa8651" creationdate="20181109T154933Z">
        <seg>julia&gt; sum(1/n^2 for n=1:1000)
1.6439345666815615</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; t = ccall((:clock, "libc"), Int32, ())
2292761

julia&gt; t
2292761

julia&gt; typeof(ans)
Int32</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T224025Z" creationid="hsugawa8651" creationdate="20181109T224025Z">
        <seg>julia&gt; t = ccall((:clock, "libc"), Int32, ())
2292761

julia&gt; t
2292761

julia&gt; typeof(ans)
Int32</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; vcat([1, 2], 3)
3-element Array{Int64,1}:
 1
 2
 3

julia&gt; hcat([1 2], 3)
1×3 Array{Int64,2}:
 1  2  3</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154606Z" creationid="hsugawa8651" creationdate="20181109T154606Z">
        <seg>julia&gt; vcat([1, 2], 3)
3-element Array{Int64,1}:
 1
 2
 3

julia&gt; hcat([1 2], 3)
1×3 Array{Int64,2}:
 1  2  3</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; x = collect(reshape(1:9, 3, 3))
3×3 Array{Int64,2}:
 1  4  7
 2  5  8
 3  6  9

julia&gt; x[3, 3] = -9;

julia&gt; x[1:2, 1:2] = [-1 -4; -2 -5];

julia&gt; x
3×3 Array{Int64,2}:
 -1  -4   7
 -2  -5   8
  3   6  -9</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T155453Z" creationid="hsugawa8651" creationdate="20181109T155453Z">
        <seg>julia&gt; x = collect(reshape(1:9, 3, 3))
3×3 Array{Int64,2}:
 1  4  7
 2  5  8
 3  6  9

julia&gt; x[3, 3] = -9;

julia&gt; x[1:2, 1:2] = [-1 -4; -2 -5];

julia&gt; x
3×3 Array{Int64,2}:
 -1  -4   7
 -2  -5   8
  3   6  -9</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; x = rand(8)
8-element Array{Float64,1}:
 0.843025
 0.869052
 0.365105
 0.699456
 0.977653
 0.994953
 0.41084
 0.809411

julia&gt; [ 0.25*x[i-1] + 0.5*x[i] + 0.25*x[i+1] for i=2:length(x)-1 ]
6-element Array{Float64,1}:
 0.736559
 0.57468
 0.685417
 0.912429
 0.8446
 0.656511</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154823Z" creationid="hsugawa8651" creationdate="20181109T154823Z">
        <seg>julia&gt; x = rand(8)
8-element Array{Float64,1}:
 0.843025
 0.869052
 0.365105
 0.699456
 0.977653
 0.994953
 0.41084
 0.809411

julia&gt; [ 0.25*x[i-1] + 0.5*x[i] + 0.25*x[i+1] for i=2:length(x)-1 ]
6-element Array{Float64,1}:
 0.736559
 0.57468
 0.685417
 0.912429
 0.8446
 0.656511</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; x = reshape(1:16, 4, 4)
4×4 reshape(::UnitRange{Int64}, 4, 4) with eltype Int64:
 1  5   9  13
 2  6  10  14
 3  7  11  15
 4  8  12  16

julia&gt; x[2:3, 2:end-1]
2×2 Array{Int64,2}:
 6  10
 7  11

julia&gt; x[1, [2 3; 4 1]]
2×2 Array{Int64,2}:
  5  9
 13  1</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T155304Z" creationid="hsugawa8651" creationdate="20181109T155304Z">
        <seg>julia&gt; x = reshape(1:16, 4, 4)
4×4 reshape(::UnitRange{Int64}, 4, 4) with eltype Int64:
 1  5   9  13
 2  6  10  14
 3  7  11  15
 4  8  12  16

julia&gt; x[2:3, 2:end-1]
2×2 Array{Int64,2}:
 6  10
 7  11

julia&gt; x[1, [2 3; 4 1]]
2×2 Array{Int64,2}:
  5  9
 13  1</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; x = reshape(1:16, 4, 4)
4×4 reshape(::UnitRange{Int64}, 4, 4) with eltype Int64:
 1  5   9  13
 2  6  10  14
 3  7  11  15
 4  8  12  16

julia&gt; x[[false, true, true, false], :]
2×4 Array{Int64,2}:
 2  6  10  14
 3  7  11  15

julia&gt; mask = map(ispow2, x)
4×4 Array{Bool,2}:
  true  false  false  false
  true  false  false  false
 false  false  false  false
  true   true  false   true

julia&gt; x[mask]
5-element Array{Int64,1}:
  1
  2
  4
  8
 16</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T155818Z" creationid="hsugawa8651" creationdate="20181109T155818Z">
        <seg>julia&gt; x = reshape(1:16, 4, 4)
4×4 reshape(::UnitRange{Int64}, 4, 4) with eltype Int64:
 1  5   9  13
 2  6  10  14
 3  7  11  15
 4  8  12  16

julia&gt; x[[false, true, true, false], :]
2×4 Array{Int64,2}:
 2  6  10  14
 3  7  11  15

julia&gt; mask = map(ispow2, x)
4×4 Array{Bool,2}:
  true  false  false  false
  true  false  false  false
 false  false  false  false
  true   true  false   true

julia&gt; x[mask]
5-element Array{Int64,1}:
  1
  2
  4
  8
 16</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>julia&gt; zeros(Int8, 2, 3)
2×3 Array{Int8,2}:
 0  0  0
 0  0  0

julia&gt; zeros(Int8, (2, 3))
2×3 Array{Int8,2}:
 0  0  0
 0  0  0

julia&gt; zeros((2, 3))
2×3 Array{Float64,2}:
 0.0  0.0  0.0
 0.0  0.0  0.0</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154527Z" creationid="hsugawa8651" creationdate="20181109T154527Z">
        <seg>julia&gt; zeros(Int8, 2, 3)
2×3 Array{Int8,2}:
 0  0  0
 0  0  0

julia&gt; zeros(Int8, (2, 3))
2×3 Array{Int8,2}:
 0  0  0
 0  0  0

julia&gt; zeros((2, 3))
2×3 Array{Float64,2}:
 0.0  0.0  0.0
 0.0  0.0  0.0</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>m&lt;x1/&gt;-by-&lt;x2/&gt;n&lt;x3/&gt; identity matrix</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154456Z" creationid="hsugawa8651" creationdate="20181109T154456Z">
        <seg>m&lt;x1/&gt;-by-&lt;x2/&gt;n&lt;x3/&gt;識別マトリクス</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>n&lt;x1/&gt; worker processes, while &lt;x2/&gt;--machine-file file&lt;x3/&gt; will launch a worker
for each line in file &lt;x4/&gt;file&lt;x5/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T224417Z" creationid="hsugawa8651" creationdate="20181109T224417Z">
        <seg>n&lt;x1/&gt;worker processes while&lt;x2/&gt;--machine file file&lt;x3/&gt;はワーカーを起動します。 ファイル&lt;x4/&gt;ファイル&lt;x5/&gt;の各行に対して実行されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>range of &lt;x1/&gt;n&lt;x2/&gt; linearly spaced elements from &lt;x3/&gt;start&lt;x4/&gt; to &lt;x5/&gt;stop&lt;x6/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154500Z" creationid="hsugawa8651" creationdate="20181109T154500Z">
        <seg>&lt;x1/&gt;n&lt;x2/&gt;の範囲で、&lt;x3/&gt;開始&lt;x4/&gt;から&lt;x5/&gt;&lt;x6/&gt;までの直線的に間隔をあけた要素の範囲</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>shorthand for &lt;x1/&gt;cat(A...; dims=1)&lt;x2/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154553Z" creationid="hsugawa8651" creationdate="20181109T154553Z">
        <seg>&lt;x1/&gt;cat(A.…;dims=1)&lt;x2/&gt;の短縮形</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>shorthand for &lt;x1/&gt;cat(A...; dims=2)&lt;x2/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154557Z" creationid="hsugawa8651" creationdate="20181109T154557Z">
        <seg>&lt;x1/&gt;cat(A.…;dims=2)&lt;x2/&gt;の短縮形</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>the number of dimensions of &lt;x1/&gt;A&lt;x2/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154242Z" creationid="hsugawa8651" creationdate="20181109T154242Z">
        <seg>&lt;x1/&gt;A&lt;x2/&gt;の次元数</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>the number of elements in &lt;x1/&gt;A&lt;x2/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154235Z" creationid="hsugawa8651" creationdate="20181109T154235Z">
        <seg>&lt;x1/&gt;A&lt;x2/&gt;のエレメント数</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>the size of &lt;x1/&gt;A&lt;x2/&gt; along dimension &lt;x3/&gt;n&lt;x4/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154250Z" creationid="hsugawa8651" creationdate="20181109T154250Z">
        <seg>&lt;x3/&gt;n&lt;x4/&gt;の寸法に沿って&lt;x1/&gt;A&lt;x2/&gt;の大きさ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>the stride (linear index distance between adjacent elements) along dimension &lt;x1/&gt;k&lt;x2/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154305Z" creationid="hsugawa8651" creationdate="20181109T154305Z">
        <seg>寸法&lt;x1/&gt;k&lt;x2/&gt;に沿っての歩幅(隣接する要素間の線形指数の距離)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>the type of the elements contained in &lt;x1/&gt;A&lt;x2/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T154231Z" creationid="hsugawa8651" creationdate="20181109T154231Z">
        <seg>&lt;x1/&gt;A&lt;x2/&gt;に含まれるエレメントのタイプ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>warning</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T155745Z" creationid="hsugawa8651" creationdate="20181109T155745Z">
        <seg>warning</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>where each &lt;x1/&gt;I_k&lt;x2/&gt; may be a scalar integer, an array of integers, or any other
&lt;x3/&gt;&lt;x4/&gt;&lt;x5/&gt;(@ref man-supported-index-types).</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T155358Z" creationid="hsugawa8651" creationdate="20181109T155116Z">
        <seg>where each &lt;x1/&gt;I_k&lt;x2/&gt; may be a scalar integer, an array of integers, or any other
&lt;x3/&gt;&lt;x4/&gt;&lt;x5/&gt;(@ref man-supported-index-types).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>你好!</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T224500Z" creationid="hsugawa8651" creationdate="20181109T224500Z">
        <seg>你好!</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>안녕하세요?</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T224507Z" creationid="hsugawa8651" creationdate="20181109T224507Z">
        <seg>안녕하세요?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>안녕하세요?")' &gt; &lt;x1/&gt;/.julia/config/startup.jl
$ julia
Greetings!</seg>
      </tuv>
      <tuv lang="JA" changeid="hsugawa8651" changedate="20181109T224503Z" creationid="hsugawa8651" creationdate="20181109T224503Z">
        <seg>안녕하세요?")' &gt; &lt;x1/&gt;/.julia/config/startup.jl
$ julia
Greetings!</seg>
      </tuv>
    </tu>
<!-- Alternative translations -->
  </body>
</tmx>
